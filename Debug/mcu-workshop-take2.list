
mcu-workshop-take2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a558  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800a6f8  0800a6f8  0001a6f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7b4  0800a7b4  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7b4  0800a7b4  0001a7b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7bc  0800a7bc  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7bc  0800a7bc  0001a7bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7c0  0800a7c0  0001a7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800a7c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd4  200000d4  0800a898  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ca8  0800a898  00020ca8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c6c2  00000000  00000000  00020197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000433b  00000000  00000000  0003c859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b40  00000000  00000000  00040b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000150b  00000000  00000000  000426d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c1d4  00000000  00000000  00043be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020fb3  00000000  00000000  0005fdb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a750b  00000000  00000000  00080d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007ab4  00000000  00000000  00128278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0012fd2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d4 	.word	0x200000d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a6e0 	.word	0x0800a6e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	0800a6e0 	.word	0x0800a6e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b970 	b.w	8000c54 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9e08      	ldr	r6, [sp, #32]
 8000992:	460d      	mov	r5, r1
 8000994:	4604      	mov	r4, r0
 8000996:	460f      	mov	r7, r1
 8000998:	2b00      	cmp	r3, #0
 800099a:	d14a      	bne.n	8000a32 <__udivmoddi4+0xa6>
 800099c:	428a      	cmp	r2, r1
 800099e:	4694      	mov	ip, r2
 80009a0:	d965      	bls.n	8000a6e <__udivmoddi4+0xe2>
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	b143      	cbz	r3, 80009ba <__udivmoddi4+0x2e>
 80009a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80009ac:	f1c3 0220 	rsb	r2, r3, #32
 80009b0:	409f      	lsls	r7, r3
 80009b2:	fa20 f202 	lsr.w	r2, r0, r2
 80009b6:	4317      	orrs	r7, r2
 80009b8:	409c      	lsls	r4, r3
 80009ba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009be:	fa1f f58c 	uxth.w	r5, ip
 80009c2:	fbb7 f1fe 	udiv	r1, r7, lr
 80009c6:	0c22      	lsrs	r2, r4, #16
 80009c8:	fb0e 7711 	mls	r7, lr, r1, r7
 80009cc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009d0:	fb01 f005 	mul.w	r0, r1, r5
 80009d4:	4290      	cmp	r0, r2
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x62>
 80009d8:	eb1c 0202 	adds.w	r2, ip, r2
 80009dc:	f101 37ff 	add.w	r7, r1, #4294967295
 80009e0:	f080 811c 	bcs.w	8000c1c <__udivmoddi4+0x290>
 80009e4:	4290      	cmp	r0, r2
 80009e6:	f240 8119 	bls.w	8000c1c <__udivmoddi4+0x290>
 80009ea:	3902      	subs	r1, #2
 80009ec:	4462      	add	r2, ip
 80009ee:	1a12      	subs	r2, r2, r0
 80009f0:	b2a4      	uxth	r4, r4
 80009f2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009f6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009fe:	fb00 f505 	mul.w	r5, r0, r5
 8000a02:	42a5      	cmp	r5, r4
 8000a04:	d90a      	bls.n	8000a1c <__udivmoddi4+0x90>
 8000a06:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a0e:	f080 8107 	bcs.w	8000c20 <__udivmoddi4+0x294>
 8000a12:	42a5      	cmp	r5, r4
 8000a14:	f240 8104 	bls.w	8000c20 <__udivmoddi4+0x294>
 8000a18:	4464      	add	r4, ip
 8000a1a:	3802      	subs	r0, #2
 8000a1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a20:	1b64      	subs	r4, r4, r5
 8000a22:	2100      	movs	r1, #0
 8000a24:	b11e      	cbz	r6, 8000a2e <__udivmoddi4+0xa2>
 8000a26:	40dc      	lsrs	r4, r3
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0xbc>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	f000 80ed 	beq.w	8000c16 <__udivmoddi4+0x28a>
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a42:	4608      	mov	r0, r1
 8000a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a48:	fab3 f183 	clz	r1, r3
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	d149      	bne.n	8000ae4 <__udivmoddi4+0x158>
 8000a50:	42ab      	cmp	r3, r5
 8000a52:	d302      	bcc.n	8000a5a <__udivmoddi4+0xce>
 8000a54:	4282      	cmp	r2, r0
 8000a56:	f200 80f8 	bhi.w	8000c4a <__udivmoddi4+0x2be>
 8000a5a:	1a84      	subs	r4, r0, r2
 8000a5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a60:	2001      	movs	r0, #1
 8000a62:	4617      	mov	r7, r2
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d0e2      	beq.n	8000a2e <__udivmoddi4+0xa2>
 8000a68:	e9c6 4700 	strd	r4, r7, [r6]
 8000a6c:	e7df      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000a6e:	b902      	cbnz	r2, 8000a72 <__udivmoddi4+0xe6>
 8000a70:	deff      	udf	#255	; 0xff
 8000a72:	fab2 f382 	clz	r3, r2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f040 8090 	bne.w	8000b9c <__udivmoddi4+0x210>
 8000a7c:	1a8a      	subs	r2, r1, r2
 8000a7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a82:	fa1f fe8c 	uxth.w	lr, ip
 8000a86:	2101      	movs	r1, #1
 8000a88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a90:	0c22      	lsrs	r2, r4, #16
 8000a92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a96:	fb0e f005 	mul.w	r0, lr, r5
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x124>
 8000a9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000aa2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x122>
 8000aa8:	4290      	cmp	r0, r2
 8000aaa:	f200 80cb 	bhi.w	8000c44 <__udivmoddi4+0x2b8>
 8000aae:	4645      	mov	r5, r8
 8000ab0:	1a12      	subs	r2, r2, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ab8:	fb07 2210 	mls	r2, r7, r0, r2
 8000abc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ac0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ac4:	45a6      	cmp	lr, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x14e>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ad0:	d202      	bcs.n	8000ad8 <__udivmoddi4+0x14c>
 8000ad2:	45a6      	cmp	lr, r4
 8000ad4:	f200 80bb 	bhi.w	8000c4e <__udivmoddi4+0x2c2>
 8000ad8:	4610      	mov	r0, r2
 8000ada:	eba4 040e 	sub.w	r4, r4, lr
 8000ade:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ae2:	e79f      	b.n	8000a24 <__udivmoddi4+0x98>
 8000ae4:	f1c1 0720 	rsb	r7, r1, #32
 8000ae8:	408b      	lsls	r3, r1
 8000aea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000af2:	fa05 f401 	lsl.w	r4, r5, r1
 8000af6:	fa20 f307 	lsr.w	r3, r0, r7
 8000afa:	40fd      	lsrs	r5, r7
 8000afc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b00:	4323      	orrs	r3, r4
 8000b02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b06:	fa1f fe8c 	uxth.w	lr, ip
 8000b0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b0e:	0c1c      	lsrs	r4, r3, #16
 8000b10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b14:	fb08 f50e 	mul.w	r5, r8, lr
 8000b18:	42a5      	cmp	r5, r4
 8000b1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b22:	d90b      	bls.n	8000b3c <__udivmoddi4+0x1b0>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b2c:	f080 8088 	bcs.w	8000c40 <__udivmoddi4+0x2b4>
 8000b30:	42a5      	cmp	r5, r4
 8000b32:	f240 8085 	bls.w	8000c40 <__udivmoddi4+0x2b4>
 8000b36:	f1a8 0802 	sub.w	r8, r8, #2
 8000b3a:	4464      	add	r4, ip
 8000b3c:	1b64      	subs	r4, r4, r5
 8000b3e:	b29d      	uxth	r5, r3
 8000b40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b44:	fb09 4413 	mls	r4, r9, r3, r4
 8000b48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x1da>
 8000b54:	eb1c 0404 	adds.w	r4, ip, r4
 8000b58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b5c:	d26c      	bcs.n	8000c38 <__udivmoddi4+0x2ac>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	d96a      	bls.n	8000c38 <__udivmoddi4+0x2ac>
 8000b62:	3b02      	subs	r3, #2
 8000b64:	4464      	add	r4, ip
 8000b66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b6e:	eba4 040e 	sub.w	r4, r4, lr
 8000b72:	42ac      	cmp	r4, r5
 8000b74:	46c8      	mov	r8, r9
 8000b76:	46ae      	mov	lr, r5
 8000b78:	d356      	bcc.n	8000c28 <__udivmoddi4+0x29c>
 8000b7a:	d053      	beq.n	8000c24 <__udivmoddi4+0x298>
 8000b7c:	b156      	cbz	r6, 8000b94 <__udivmoddi4+0x208>
 8000b7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b82:	eb64 040e 	sbc.w	r4, r4, lr
 8000b86:	fa04 f707 	lsl.w	r7, r4, r7
 8000b8a:	40ca      	lsrs	r2, r1
 8000b8c:	40cc      	lsrs	r4, r1
 8000b8e:	4317      	orrs	r7, r2
 8000b90:	e9c6 7400 	strd	r7, r4, [r6]
 8000b94:	4618      	mov	r0, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ba0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ba8:	fa25 f101 	lsr.w	r1, r5, r1
 8000bac:	409d      	lsls	r5, r3
 8000bae:	432a      	orrs	r2, r5
 8000bb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000bc0:	0c11      	lsrs	r1, r2, #16
 8000bc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000bca:	428d      	cmp	r5, r1
 8000bcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x258>
 8000bd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bda:	d22f      	bcs.n	8000c3c <__udivmoddi4+0x2b0>
 8000bdc:	428d      	cmp	r5, r1
 8000bde:	d92d      	bls.n	8000c3c <__udivmoddi4+0x2b0>
 8000be0:	3802      	subs	r0, #2
 8000be2:	4461      	add	r1, ip
 8000be4:	1b49      	subs	r1, r1, r5
 8000be6:	b292      	uxth	r2, r2
 8000be8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bec:	fb07 1115 	mls	r1, r7, r5, r1
 8000bf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bf8:	4291      	cmp	r1, r2
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x282>
 8000bfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000c00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c04:	d216      	bcs.n	8000c34 <__udivmoddi4+0x2a8>
 8000c06:	4291      	cmp	r1, r2
 8000c08:	d914      	bls.n	8000c34 <__udivmoddi4+0x2a8>
 8000c0a:	3d02      	subs	r5, #2
 8000c0c:	4462      	add	r2, ip
 8000c0e:	1a52      	subs	r2, r2, r1
 8000c10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c14:	e738      	b.n	8000a88 <__udivmoddi4+0xfc>
 8000c16:	4631      	mov	r1, r6
 8000c18:	4630      	mov	r0, r6
 8000c1a:	e708      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000c1c:	4639      	mov	r1, r7
 8000c1e:	e6e6      	b.n	80009ee <__udivmoddi4+0x62>
 8000c20:	4610      	mov	r0, r2
 8000c22:	e6fb      	b.n	8000a1c <__udivmoddi4+0x90>
 8000c24:	4548      	cmp	r0, r9
 8000c26:	d2a9      	bcs.n	8000b7c <__udivmoddi4+0x1f0>
 8000c28:	ebb9 0802 	subs.w	r8, r9, r2
 8000c2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c30:	3b01      	subs	r3, #1
 8000c32:	e7a3      	b.n	8000b7c <__udivmoddi4+0x1f0>
 8000c34:	4645      	mov	r5, r8
 8000c36:	e7ea      	b.n	8000c0e <__udivmoddi4+0x282>
 8000c38:	462b      	mov	r3, r5
 8000c3a:	e794      	b.n	8000b66 <__udivmoddi4+0x1da>
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	e7d1      	b.n	8000be4 <__udivmoddi4+0x258>
 8000c40:	46d0      	mov	r8, sl
 8000c42:	e77b      	b.n	8000b3c <__udivmoddi4+0x1b0>
 8000c44:	3d02      	subs	r5, #2
 8000c46:	4462      	add	r2, ip
 8000c48:	e732      	b.n	8000ab0 <__udivmoddi4+0x124>
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e70a      	b.n	8000a64 <__udivmoddi4+0xd8>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	e742      	b.n	8000ada <__udivmoddi4+0x14e>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5c:	f001 fe36 	bl	80028cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c60:	f000 f834 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c64:	f000 f9f6 	bl	8001054 <MX_GPIO_Init>
  MX_CRC_Init();
 8000c68:	f000 f8f0 	bl	8000e4c <MX_CRC_Init>
  MX_RTC_Init();
 8000c6c:	f000 f930 	bl	8000ed0 <MX_RTC_Init>
  MX_TIM4_Init();
 8000c70:	f000 f9a2 	bl	8000fb8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000c74:	f000 f898 	bl	8000da8 <MX_ADC1_Init>
  MX_I2C3_Init();
 8000c78:	f000 f8fc 	bl	8000e74 <MX_I2C3_Init>
  MX_MEMS_Init();
 8000c7c:	f006 f9d4 	bl	8007028 <MX_MEMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	MX_MEMS_Process();
 8000c80:	f006 f9d8 	bl	8007034 <MX_MEMS_Process>
    /* USER CODE END WHILE */


    /* USER CODE BEGIN 3 */

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000c84:	2104      	movs	r1, #4
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <main+0x64>)
 8000c88:	f004 ff4a 	bl	8005b20 <HAL_TIM_PWM_Start>
	  pulseYellowLED();
 8000c8c:	f000 fa26 	bl	80010dc <pulseYellowLED>

	  if (personFlag == 1){
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <main+0x68>)
 8000c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c96:	2b01      	cmp	r3, #1
 8000c98:	d10a      	bne.n	8000cb0 <main+0x58>
		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_10);
 8000c9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9e:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <main+0x6c>)
 8000ca0:	f002 fd41 	bl	8003726 <HAL_GPIO_TogglePin>
		  HAL_Delay(0.001); // might be able to remove depending on time of execution of other code.
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f001 fe83 	bl	80029b0 <HAL_Delay>
		  blinkRed();
 8000caa:	f000 fa4b 	bl	8001144 <blinkRed>
 8000cae:	e7e7      	b.n	8000c80 <main+0x28>
	  } else {
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	2120      	movs	r1, #32
 8000cb4:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <main+0x70>)
 8000cb6:	f002 fd1d 	bl	80036f4 <HAL_GPIO_WritePin>
	MX_MEMS_Process();
 8000cba:	e7e1      	b.n	8000c80 <main+0x28>
 8000cbc:	200001b8 	.word	0x200001b8
 8000cc0:	20000248 	.word	0x20000248
 8000cc4:	40020000 	.word	0x40020000
 8000cc8:	40020400 	.word	0x40020400

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b094      	sub	sp, #80	; 0x50
 8000cd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cd2:	f107 0320 	add.w	r3, r7, #32
 8000cd6:	2230      	movs	r2, #48	; 0x30
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f008 ffb2 	bl	8009c44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	4b2a      	ldr	r3, [pc, #168]	; (8000da0 <SystemClock_Config+0xd4>)
 8000cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf8:	4a29      	ldr	r2, [pc, #164]	; (8000da0 <SystemClock_Config+0xd4>)
 8000cfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8000d00:	4b27      	ldr	r3, [pc, #156]	; (8000da0 <SystemClock_Config+0xd4>)
 8000d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	607b      	str	r3, [r7, #4]
 8000d10:	4b24      	ldr	r3, [pc, #144]	; (8000da4 <SystemClock_Config+0xd8>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d18:	4a22      	ldr	r2, [pc, #136]	; (8000da4 <SystemClock_Config+0xd8>)
 8000d1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d1e:	6013      	str	r3, [r2, #0]
 8000d20:	4b20      	ldr	r3, [pc, #128]	; (8000da4 <SystemClock_Config+0xd8>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000d2c:	230a      	movs	r3, #10
 8000d2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d30:	2301      	movs	r3, #1
 8000d32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d34:	2310      	movs	r3, #16
 8000d36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000d44:	2310      	movs	r3, #16
 8000d46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d48:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d4c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d4e:	2304      	movs	r3, #4
 8000d50:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d52:	2307      	movs	r3, #7
 8000d54:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d56:	f107 0320 	add.w	r3, r7, #32
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f003 fd6c 	bl	8004838 <HAL_RCC_OscConfig>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d66:	f000 fa07 	bl	8001178 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6a:	230f      	movs	r3, #15
 8000d6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d80:	f107 030c 	add.w	r3, r7, #12
 8000d84:	2102      	movs	r1, #2
 8000d86:	4618      	mov	r0, r3
 8000d88:	f003 ffce 	bl	8004d28 <HAL_RCC_ClockConfig>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d92:	f000 f9f1 	bl	8001178 <Error_Handler>
  }
}
 8000d96:	bf00      	nop
 8000d98:	3750      	adds	r7, #80	; 0x50
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40007000 	.word	0x40007000

08000da8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <MX_ADC1_Init+0x98>)
 8000dbc:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <MX_ADC1_Init+0x9c>)
 8000dbe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <MX_ADC1_Init+0x98>)
 8000dc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dc6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000dc8:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <MX_ADC1_Init+0x98>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <MX_ADC1_Init+0x98>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <MX_ADC1_Init+0x98>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <MX_ADC1_Init+0x98>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <MX_ADC1_Init+0x98>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <MX_ADC1_Init+0x98>)
 8000dea:	4a17      	ldr	r2, [pc, #92]	; (8000e48 <MX_ADC1_Init+0xa0>)
 8000dec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dee:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <MX_ADC1_Init+0x98>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <MX_ADC1_Init+0x98>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <MX_ADC1_Init+0x98>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <MX_ADC1_Init+0x98>)
 8000e04:	2201      	movs	r2, #1
 8000e06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <MX_ADC1_Init+0x98>)
 8000e0a:	f001 fdf5 	bl	80029f8 <HAL_ADC_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e14:	f000 f9b0 	bl	8001178 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	; (8000e40 <MX_ADC1_Init+0x98>)
 8000e2a:	f001 fe29 	bl	8002a80 <HAL_ADC_ConfigChannel>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000e34:	f000 f9a0 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	3710      	adds	r7, #16
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	200000f4 	.word	0x200000f4
 8000e44:	40012000 	.word	0x40012000
 8000e48:	0f000001 	.word	0x0f000001

08000e4c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <MX_CRC_Init+0x20>)
 8000e52:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <MX_CRC_Init+0x24>)
 8000e54:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e56:	4805      	ldr	r0, [pc, #20]	; (8000e6c <MX_CRC_Init+0x20>)
 8000e58:	f002 f941 	bl	80030de <HAL_CRC_Init>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e62:	f000 f989 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	2000013c 	.word	0x2000013c
 8000e70:	40023000 	.word	0x40023000

08000e74 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <MX_I2C3_Init+0x50>)
 8000e7a:	4a13      	ldr	r2, [pc, #76]	; (8000ec8 <MX_I2C3_Init+0x54>)
 8000e7c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_I2C3_Init+0x50>)
 8000e80:	4a12      	ldr	r2, [pc, #72]	; (8000ecc <MX_I2C3_Init+0x58>)
 8000e82:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_I2C3_Init+0x50>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <MX_I2C3_Init+0x50>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e90:	4b0c      	ldr	r3, [pc, #48]	; (8000ec4 <MX_I2C3_Init+0x50>)
 8000e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e96:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e98:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <MX_I2C3_Init+0x50>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e9e:	4b09      	ldr	r3, [pc, #36]	; (8000ec4 <MX_I2C3_Init+0x50>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ea4:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <MX_I2C3_Init+0x50>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <MX_I2C3_Init+0x50>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_I2C3_Init+0x50>)
 8000eb2:	f002 fc53 	bl	800375c <HAL_I2C_Init>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ebc:	f000 f95c 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000144 	.word	0x20000144
 8000ec8:	40005c00 	.word	0x40005c00
 8000ecc:	000186a0 	.word	0x000186a0

08000ed0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_RTC_Init+0x44>)
 8000ed6:	4a10      	ldr	r2, [pc, #64]	; (8000f18 <MX_RTC_Init+0x48>)
 8000ed8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000eda:	4b0e      	ldr	r3, [pc, #56]	; (8000f14 <MX_RTC_Init+0x44>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <MX_RTC_Init+0x44>)
 8000ee2:	227f      	movs	r2, #127	; 0x7f
 8000ee4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ee6:	4b0b      	ldr	r3, [pc, #44]	; (8000f14 <MX_RTC_Init+0x44>)
 8000ee8:	22ff      	movs	r2, #255	; 0xff
 8000eea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <MX_RTC_Init+0x44>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <MX_RTC_Init+0x44>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <MX_RTC_Init+0x44>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_RTC_Init+0x44>)
 8000f00:	f004 fa20 	bl	8005344 <HAL_RTC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f0a:	f000 f935 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000198 	.word	0x20000198
 8000f18:	40002800 	.word	0x40002800

08000f1c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM3_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	2200      	movs	r2, #0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	605a      	str	r2, [r3, #4]
 8000f2c:	609a      	str	r2, [r3, #8]
 8000f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f38:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f3a:	4a1e      	ldr	r2, [pc, #120]	; (8000fb4 <MX_TIM3_Init+0x98>)
 8000f3c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f50:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f5e:	4814      	ldr	r0, [pc, #80]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f60:	f004 fcfc 	bl	800595c <HAL_TIM_Base_Init>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000f6a:	f000 f905 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f72:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f74:	f107 0308 	add.w	r3, r7, #8
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f7c:	f004 ff70 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f86:	f000 f8f7 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f92:	463b      	mov	r3, r7
 8000f94:	4619      	mov	r1, r3
 8000f96:	4806      	ldr	r0, [pc, #24]	; (8000fb0 <MX_TIM3_Init+0x94>)
 8000f98:	f005 f99e 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000fa2:	f000 f8e9 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000fa6:	bf00      	nop
 8000fa8:	3718      	adds	r7, #24
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200001b8 	.word	0x200001b8
 8000fb4:	40000400 	.word	0x40000400

08000fb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fd4:	4b1d      	ldr	r3, [pc, #116]	; (800104c <MX_TIM4_Init+0x94>)
 8000fd6:	4a1e      	ldr	r2, [pc, #120]	; (8001050 <MX_TIM4_Init+0x98>)
 8000fd8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 319;
 8000fda:	4b1c      	ldr	r3, [pc, #112]	; (800104c <MX_TIM4_Init+0x94>)
 8000fdc:	f240 123f 	movw	r2, #319	; 0x13f
 8000fe0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <MX_TIM4_Init+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	; (800104c <MX_TIM4_Init+0x94>)
 8000fea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ff0:	4b16      	ldr	r3, [pc, #88]	; (800104c <MX_TIM4_Init+0x94>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ff6:	4b15      	ldr	r3, [pc, #84]	; (800104c <MX_TIM4_Init+0x94>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ffc:	4813      	ldr	r0, [pc, #76]	; (800104c <MX_TIM4_Init+0x94>)
 8000ffe:	f004 fcad 	bl	800595c <HAL_TIM_Base_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001008:	f000 f8b6 	bl	8001178 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800100c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001010:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001012:	f107 0308 	add.w	r3, r7, #8
 8001016:	4619      	mov	r1, r3
 8001018:	480c      	ldr	r0, [pc, #48]	; (800104c <MX_TIM4_Init+0x94>)
 800101a:	f004 ff21 	bl	8005e60 <HAL_TIM_ConfigClockSource>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001024:	f000 f8a8 	bl	8001178 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001028:	2300      	movs	r3, #0
 800102a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102c:	2300      	movs	r3, #0
 800102e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_TIM4_Init+0x94>)
 8001036:	f005 f94f 	bl	80062d8 <HAL_TIMEx_MasterConfigSynchronization>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001040:	f000 f89a 	bl	8001178 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000200 	.word	0x20000200
 8001050:	40000800 	.word	0x40000800

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_GPIO_Init+0x84>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a1d      	ldr	r2, [pc, #116]	; (80010d8 <MX_GPIO_Init+0x84>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <MX_GPIO_Init+0x84>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_GPIO_Init+0x84>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a16      	ldr	r2, [pc, #88]	; (80010d8 <MX_GPIO_Init+0x84>)
 8001080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_GPIO_Init+0x84>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <MX_GPIO_Init+0x84>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <MX_GPIO_Init+0x84>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <MX_GPIO_Init+0x84>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <MX_GPIO_Init+0x84>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <MX_GPIO_Init+0x84>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <MX_GPIO_Init+0x84>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800

080010dc <pulseYellowLED>:
}


int direction = 1;
int brightness = 0;
void pulseYellowLED() {
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
	if (direction > 0) {
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <pulseYellowLED+0x5c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	dd0a      	ble.n	80010fe <pulseYellowLED+0x22>
		brightness++;
 80010e8:	4b14      	ldr	r3, [pc, #80]	; (800113c <pulseYellowLED+0x60>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	3301      	adds	r3, #1
 80010ee:	4a13      	ldr	r2, [pc, #76]	; (800113c <pulseYellowLED+0x60>)
 80010f0:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, brightness);
 80010f2:	4b12      	ldr	r3, [pc, #72]	; (800113c <pulseYellowLED+0x60>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4b12      	ldr	r3, [pc, #72]	; (8001140 <pulseYellowLED+0x64>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34
 80010fc:	e009      	b.n	8001112 <pulseYellowLED+0x36>
	} else {
		brightness--;
 80010fe:	4b0f      	ldr	r3, [pc, #60]	; (800113c <pulseYellowLED+0x60>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3b01      	subs	r3, #1
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <pulseYellowLED+0x60>)
 8001106:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, brightness);
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <pulseYellowLED+0x60>)
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <pulseYellowLED+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
	}
	if ((brightness == 0) || (brightness == 1000)) {
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <pulseYellowLED+0x60>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d004      	beq.n	8001124 <pulseYellowLED+0x48>
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <pulseYellowLED+0x60>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001122:	d104      	bne.n	800112e <pulseYellowLED+0x52>
		direction = -direction;
 8001124:	4b04      	ldr	r3, [pc, #16]	; (8001138 <pulseYellowLED+0x5c>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	425b      	negs	r3, r3
 800112a:	4a03      	ldr	r2, [pc, #12]	; (8001138 <pulseYellowLED+0x5c>)
 800112c:	6013      	str	r3, [r2, #0]
	}
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	20000000 	.word	0x20000000
 800113c:	20000250 	.word	0x20000250
 8001140:	200001b8 	.word	0x200001b8

08001144 <blinkRed>:

void blinkRed() {
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
	redBlink++;
 8001148:	4b09      	ldr	r3, [pc, #36]	; (8001170 <blinkRed+0x2c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <blinkRed+0x2c>)
 8001150:	6013      	str	r3, [r2, #0]
	if (redBlink > 300) {
 8001152:	4b07      	ldr	r3, [pc, #28]	; (8001170 <blinkRed+0x2c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800115a:	dd06      	ble.n	800116a <blinkRed+0x26>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800115c:	2120      	movs	r1, #32
 800115e:	4805      	ldr	r0, [pc, #20]	; (8001174 <blinkRed+0x30>)
 8001160:	f002 fae1 	bl	8003726 <HAL_GPIO_TogglePin>
		  redBlink = 0;
 8001164:	4b02      	ldr	r3, [pc, #8]	; (8001170 <blinkRed+0x2c>)
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
	  }
}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	2000024c 	.word	0x2000024c
 8001174:	40020400 	.word	0x40020400

08001178 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800117c:	b672      	cpsid	i
}
 800117e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001180:	e7fe      	b.n	8001180 <Error_Handler+0x8>
	...

08001184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
 800118e:	4b10      	ldr	r3, [pc, #64]	; (80011d0 <HAL_MspInit+0x4c>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001192:	4a0f      	ldr	r2, [pc, #60]	; (80011d0 <HAL_MspInit+0x4c>)
 8001194:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001198:	6453      	str	r3, [r2, #68]	; 0x44
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <HAL_MspInit+0x4c>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011a2:	607b      	str	r3, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	603b      	str	r3, [r7, #0]
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_MspInit+0x4c>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6413      	str	r3, [r2, #64]	; 0x40
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_MspInit+0x4c>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011c2:	2007      	movs	r0, #7
 80011c4:	f001 ff4a 	bl	800305c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c8:	bf00      	nop
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800

080011d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <HAL_ADC_MspInit+0x7c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d127      	bne.n	8001246 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <HAL_ADC_MspInit+0x80>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	4a15      	ldr	r2, [pc, #84]	; (8001254 <HAL_ADC_MspInit+0x80>)
 8001200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001204:	6453      	str	r3, [r2, #68]	; 0x44
 8001206:	4b13      	ldr	r3, [pc, #76]	; (8001254 <HAL_ADC_MspInit+0x80>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b0f      	ldr	r3, [pc, #60]	; (8001254 <HAL_ADC_MspInit+0x80>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a0e      	ldr	r2, [pc, #56]	; (8001254 <HAL_ADC_MspInit+0x80>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_ADC_MspInit+0x80>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800122e:	2301      	movs	r3, #1
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001232:	2303      	movs	r3, #3
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	4805      	ldr	r0, [pc, #20]	; (8001258 <HAL_ADC_MspInit+0x84>)
 8001242:	f001 ffef 	bl	8003224 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40012000 	.word	0x40012000
 8001254:	40023800 	.word	0x40023800
 8001258:	40020000 	.word	0x40020000

0800125c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a0b      	ldr	r2, [pc, #44]	; (8001298 <HAL_CRC_MspInit+0x3c>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d10d      	bne.n	800128a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <HAL_CRC_MspInit+0x40>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	4a09      	ldr	r2, [pc, #36]	; (800129c <HAL_CRC_MspInit+0x40>)
 8001278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800127c:	6313      	str	r3, [r2, #48]	; 0x30
 800127e:	4b07      	ldr	r3, [pc, #28]	; (800129c <HAL_CRC_MspInit+0x40>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3714      	adds	r7, #20
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40023000 	.word	0x40023000
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a8:	f107 0314 	add.w	r3, r7, #20
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a28      	ldr	r2, [pc, #160]	; (8001360 <HAL_I2C_MspInit+0xc0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d14a      	bne.n	8001358 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	613b      	str	r3, [r7, #16]
 80012c6:	4b27      	ldr	r3, [pc, #156]	; (8001364 <HAL_I2C_MspInit+0xc4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a26      	ldr	r2, [pc, #152]	; (8001364 <HAL_I2C_MspInit+0xc4>)
 80012cc:	f043 0301 	orr.w	r3, r3, #1
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b24      	ldr	r3, [pc, #144]	; (8001364 <HAL_I2C_MspInit+0xc4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0301 	and.w	r3, r3, #1
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_I2C_MspInit+0xc4>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a1f      	ldr	r2, [pc, #124]	; (8001364 <HAL_I2C_MspInit+0xc4>)
 80012e8:	f043 0302 	orr.w	r3, r3, #2
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <HAL_I2C_MspInit+0xc4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0302 	and.w	r3, r3, #2
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001300:	2312      	movs	r3, #18
 8001302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001308:	2303      	movs	r3, #3
 800130a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800130c:	2304      	movs	r3, #4
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	4619      	mov	r1, r3
 8001316:	4814      	ldr	r0, [pc, #80]	; (8001368 <HAL_I2C_MspInit+0xc8>)
 8001318:	f001 ff84 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800131c:	2310      	movs	r3, #16
 800131e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001320:	2312      	movs	r3, #18
 8001322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 800132c:	2309      	movs	r3, #9
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	4619      	mov	r1, r3
 8001336:	480d      	ldr	r0, [pc, #52]	; (800136c <HAL_I2C_MspInit+0xcc>)
 8001338:	f001 ff74 	bl	8003224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	4b08      	ldr	r3, [pc, #32]	; (8001364 <HAL_I2C_MspInit+0xc4>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	4a07      	ldr	r2, [pc, #28]	; (8001364 <HAL_I2C_MspInit+0xc4>)
 8001346:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800134a:	6413      	str	r3, [r2, #64]	; 0x40
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_I2C_MspInit+0xc4>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001358:	bf00      	nop
 800135a:	3728      	adds	r7, #40	; 0x28
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40005c00 	.word	0x40005c00
 8001364:	40023800 	.word	0x40023800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400

08001370 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C3)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <HAL_I2C_MspDeInit+0x38>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d10e      	bne.n	80013a0 <HAL_I2C_MspDeInit+0x30>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8001382:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <HAL_I2C_MspDeInit+0x3c>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	4a09      	ldr	r2, [pc, #36]	; (80013ac <HAL_I2C_MspDeInit+0x3c>)
 8001388:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800138c:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 800138e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001392:	4807      	ldr	r0, [pc, #28]	; (80013b0 <HAL_I2C_MspDeInit+0x40>)
 8001394:	f002 f8ca 	bl	800352c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4);
 8001398:	2110      	movs	r1, #16
 800139a:	4806      	ldr	r0, [pc, #24]	; (80013b4 <HAL_I2C_MspDeInit+0x44>)
 800139c:	f002 f8c6 	bl	800352c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40005c00 	.word	0x40005c00
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020400 	.word	0x40020400

080013b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013c0:	f107 030c 	add.w	r3, r7, #12
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0c      	ldr	r2, [pc, #48]	; (8001408 <HAL_RTC_MspInit+0x50>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d111      	bne.n	80013fe <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013da:	2302      	movs	r3, #2
 80013dc:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80013de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013e2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4618      	mov	r0, r3
 80013ea:	f003 febd 	bl	8005168 <HAL_RCCEx_PeriphCLKConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80013f4:	f7ff fec0 	bl	8001178 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80013f8:	4b04      	ldr	r3, [pc, #16]	; (800140c <HAL_RTC_MspInit+0x54>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80013fe:	bf00      	nop
 8001400:	3720      	adds	r7, #32
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40002800 	.word	0x40002800
 800140c:	42470e3c 	.word	0x42470e3c

08001410 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_TIM_Base_MspInit+0x70>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d116      	bne.n	8001450 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_TIM_Base_MspInit+0x74>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	4a16      	ldr	r2, [pc, #88]	; (8001484 <HAL_TIM_Base_MspInit+0x74>)
 800142c:	f043 0302 	orr.w	r3, r3, #2
 8001430:	6413      	str	r3, [r2, #64]	; 0x40
 8001432:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_TIM_Base_MspInit+0x74>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800143e:	2200      	movs	r2, #0
 8001440:	2100      	movs	r1, #0
 8001442:	201d      	movs	r0, #29
 8001444:	f001 fe15 	bl	8003072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001448:	201d      	movs	r0, #29
 800144a:	f001 fe2e 	bl	80030aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800144e:	e012      	b.n	8001476 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0c      	ldr	r2, [pc, #48]	; (8001488 <HAL_TIM_Base_MspInit+0x78>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d10d      	bne.n	8001476 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60bb      	str	r3, [r7, #8]
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_TIM_Base_MspInit+0x74>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_TIM_Base_MspInit+0x74>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_TIM_Base_MspInit+0x74>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
}
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40000400 	.word	0x40000400
 8001484:	40023800 	.word	0x40023800
 8001488:	40000800 	.word	0x40000800

0800148c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001490:	e7fe      	b.n	8001490 <NMI_Handler+0x4>

08001492 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <HardFault_Handler+0x4>

08001498 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <MemManage_Handler+0x4>

0800149e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a2:	e7fe      	b.n	80014a2 <BusFault_Handler+0x4>

080014a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <UsageFault_Handler+0x4>

080014aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr

080014c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d8:	f001 fa4a 	bl	8002970 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014dc:	bf00      	nop
 80014de:	bd80      	pop	{r7, pc}

080014e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80014e4:	4802      	ldr	r0, [pc, #8]	; (80014f0 <TIM3_IRQHandler+0x10>)
 80014e6:	f004 fbcb 	bl	8005c80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200001b8 	.word	0x200001b8

080014f4 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80014fa:	2300      	movs	r3, #0
 80014fc:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80014fe:	4b13      	ldr	r3, [pc, #76]	; (800154c <BSP_I2C1_Init+0x58>)
 8001500:	4a13      	ldr	r2, [pc, #76]	; (8001550 <BSP_I2C1_Init+0x5c>)
 8001502:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <BSP_I2C1_Init+0x60>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	1c5a      	adds	r2, r3, #1
 800150a:	4912      	ldr	r1, [pc, #72]	; (8001554 <BSP_I2C1_Init+0x60>)
 800150c:	600a      	str	r2, [r1, #0]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d117      	bne.n	8001542 <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 8001512:	480e      	ldr	r0, [pc, #56]	; (800154c <BSP_I2C1_Init+0x58>)
 8001514:	f002 fdc2 	bl	800409c <HAL_I2C_GetState>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d111      	bne.n	8001542 <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 800151e:	480b      	ldr	r0, [pc, #44]	; (800154c <BSP_I2C1_Init+0x58>)
 8001520:	f000 f8e2 	bl	80016e8 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d10b      	bne.n	8001542 <BSP_I2C1_Init+0x4e>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 800152a:	4808      	ldr	r0, [pc, #32]	; (800154c <BSP_I2C1_Init+0x58>)
 800152c:	f000 f8a8 	bl	8001680 <MX_I2C1_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8001536:	f06f 0307 	mvn.w	r3, #7
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	e001      	b.n	8001542 <BSP_I2C1_Init+0x4e>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 8001542:	687b      	ldr	r3, [r7, #4]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000254 	.word	0x20000254
 8001550:	40005400 	.word	0x40005400
 8001554:	200002a8 	.word	0x200002a8

08001558 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800155e:	2300      	movs	r3, #0
 8001560:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 8001562:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <BSP_I2C1_DeInit+0x48>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d014      	beq.n	8001594 <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 800156a:	4b0d      	ldr	r3, [pc, #52]	; (80015a0 <BSP_I2C1_DeInit+0x48>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	3b01      	subs	r3, #1
 8001570:	4a0b      	ldr	r2, [pc, #44]	; (80015a0 <BSP_I2C1_DeInit+0x48>)
 8001572:	6013      	str	r3, [r2, #0]
 8001574:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <BSP_I2C1_DeInit+0x48>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d10b      	bne.n	8001594 <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 800157c:	4809      	ldr	r0, [pc, #36]	; (80015a4 <BSP_I2C1_DeInit+0x4c>)
 800157e:	f000 f8fb 	bl	8001778 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <BSP_I2C1_DeInit+0x4c>)
 8001584:	f002 fa2e 	bl	80039e4 <HAL_I2C_DeInit>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 800158e:	f06f 0307 	mvn.w	r3, #7
 8001592:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	200002a8 	.word	0x200002a8
 80015a4:	20000254 	.word	0x20000254

080015a8 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af04      	add	r7, sp, #16
 80015ae:	60ba      	str	r2, [r7, #8]
 80015b0:	461a      	mov	r2, r3
 80015b2:	4603      	mov	r3, r0
 80015b4:	81fb      	strh	r3, [r7, #14]
 80015b6:	460b      	mov	r3, r1
 80015b8:	81bb      	strh	r3, [r7, #12]
 80015ba:	4613      	mov	r3, r2
 80015bc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80015c2:	89ba      	ldrh	r2, [r7, #12]
 80015c4:	89f9      	ldrh	r1, [r7, #14]
 80015c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ca:	9302      	str	r3, [sp, #8]
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	9301      	str	r3, [sp, #4]
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	2301      	movs	r3, #1
 80015d6:	480c      	ldr	r0, [pc, #48]	; (8001608 <BSP_I2C1_WriteReg+0x60>)
 80015d8:	f002 fa34 	bl	8003a44 <HAL_I2C_Mem_Write>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d00c      	beq.n	80015fc <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80015e2:	4809      	ldr	r0, [pc, #36]	; (8001608 <BSP_I2C1_WriteReg+0x60>)
 80015e4:	f002 fd68 	bl	80040b8 <HAL_I2C_GetError>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d103      	bne.n	80015f6 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80015ee:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80015f2:	617b      	str	r3, [r7, #20]
 80015f4:	e002      	b.n	80015fc <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80015f6:	f06f 0303 	mvn.w	r3, #3
 80015fa:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80015fc:	697b      	ldr	r3, [r7, #20]
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000254 	.word	0x20000254

0800160c <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af04      	add	r7, sp, #16
 8001612:	60ba      	str	r2, [r7, #8]
 8001614:	461a      	mov	r2, r3
 8001616:	4603      	mov	r3, r0
 8001618:	81fb      	strh	r3, [r7, #14]
 800161a:	460b      	mov	r3, r1
 800161c:	81bb      	strh	r3, [r7, #12]
 800161e:	4613      	mov	r3, r2
 8001620:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8001622:	2300      	movs	r3, #0
 8001624:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8001626:	89ba      	ldrh	r2, [r7, #12]
 8001628:	89f9      	ldrh	r1, [r7, #14]
 800162a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162e:	9302      	str	r3, [sp, #8]
 8001630:	88fb      	ldrh	r3, [r7, #6]
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	2301      	movs	r3, #1
 800163a:	480c      	ldr	r0, [pc, #48]	; (800166c <BSP_I2C1_ReadReg+0x60>)
 800163c:	f002 fafc 	bl	8003c38 <HAL_I2C_Mem_Read>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00c      	beq.n	8001660 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 8001646:	4809      	ldr	r0, [pc, #36]	; (800166c <BSP_I2C1_ReadReg+0x60>)
 8001648:	f002 fd36 	bl	80040b8 <HAL_I2C_GetError>
 800164c:	4603      	mov	r3, r0
 800164e:	2b04      	cmp	r3, #4
 8001650:	d103      	bne.n	800165a <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8001652:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	e002      	b.n	8001660 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800165a:	f06f 0303 	mvn.w	r3, #3
 800165e:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001660:	697b      	ldr	r3, [r7, #20]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000254 	.word	0x20000254

08001670 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001674:	f001 f990 	bl	8002998 <HAL_GetTick>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	bd80      	pop	{r7, pc}
	...

08001680 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001688:	2300      	movs	r3, #0
 800168a:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	4a14      	ldr	r2, [pc, #80]	; (80016e0 <MX_I2C1_Init+0x60>)
 8001690:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a13      	ldr	r2, [pc, #76]	; (80016e4 <MX_I2C1_Init+0x64>)
 8001696:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016aa:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f002 f849 	bl	800375c <HAL_I2C_Init>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80016d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40005400 	.word	0x40005400
 80016e4:	000186a0 	.word	0x000186a0

080016e8 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	4b1e      	ldr	r3, [pc, #120]	; (8001770 <I2C1_MspInit+0x88>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	4a1d      	ldr	r2, [pc, #116]	; (8001770 <I2C1_MspInit+0x88>)
 80016fa:	f043 0302 	orr.w	r3, r3, #2
 80016fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001700:	4b1b      	ldr	r3, [pc, #108]	; (8001770 <I2C1_MspInit+0x88>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 800170c:	2340      	movs	r3, #64	; 0x40
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001710:	2312      	movs	r3, #18
 8001712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 800171c:	2304      	movs	r3, #4
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	4813      	ldr	r0, [pc, #76]	; (8001774 <I2C1_MspInit+0x8c>)
 8001728:	f001 fd7c 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001730:	2312      	movs	r3, #18
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 800173c:	2304      	movs	r3, #4
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	480b      	ldr	r0, [pc, #44]	; (8001774 <I2C1_MspInit+0x8c>)
 8001748:	f001 fd6c 	bl	8003224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	4b07      	ldr	r3, [pc, #28]	; (8001770 <I2C1_MspInit+0x88>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	4a06      	ldr	r2, [pc, #24]	; (8001770 <I2C1_MspInit+0x88>)
 8001756:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800175a:	6413      	str	r3, [r2, #64]	; 0x40
 800175c:	4b04      	ldr	r3, [pc, #16]	; (8001770 <I2C1_MspInit+0x88>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 8001768:	bf00      	nop
 800176a:	3728      	adds	r7, #40	; 0x28
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	40023800 	.word	0x40023800
 8001774:	40020400 	.word	0x40020400

08001778 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <I2C1_MspDeInit+0x2c>)
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	4a07      	ldr	r2, [pc, #28]	; (80017a4 <I2C1_MspDeInit+0x2c>)
 8001786:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800178a:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 800178c:	2140      	movs	r1, #64	; 0x40
 800178e:	4806      	ldr	r0, [pc, #24]	; (80017a8 <I2C1_MspDeInit+0x30>)
 8001790:	f001 fecc 	bl	800352c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	4804      	ldr	r0, [pc, #16]	; (80017a8 <I2C1_MspDeInit+0x30>)
 8001798:	f001 fec8 	bl	800352c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40020400 	.word	0x40020400

080017ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017b4:	4a14      	ldr	r2, [pc, #80]	; (8001808 <_sbrk+0x5c>)
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <_sbrk+0x60>)
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017c0:	4b13      	ldr	r3, [pc, #76]	; (8001810 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c8:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_sbrk+0x64>)
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <_sbrk+0x68>)
 80017cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ce:	4b10      	ldr	r3, [pc, #64]	; (8001810 <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d207      	bcs.n	80017ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017dc:	f008 fa4a 	bl	8009c74 <__errno>
 80017e0:	4603      	mov	r3, r0
 80017e2:	220c      	movs	r2, #12
 80017e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e009      	b.n	8001800 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017ec:	4b08      	ldr	r3, [pc, #32]	; (8001810 <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017f2:	4b07      	ldr	r3, [pc, #28]	; (8001810 <_sbrk+0x64>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4413      	add	r3, r2
 80017fa:	4a05      	ldr	r2, [pc, #20]	; (8001810 <_sbrk+0x64>)
 80017fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017fe:	68fb      	ldr	r3, [r7, #12]
}
 8001800:	4618      	mov	r0, r3
 8001802:	3718      	adds	r7, #24
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20018000 	.word	0x20018000
 800180c:	00000400 	.word	0x00000400
 8001810:	200002ac 	.word	0x200002ac
 8001814:	20000ca8 	.word	0x20000ca8

08001818 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <SystemInit+0x20>)
 800181e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <SystemInit+0x20>)
 8001824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001840:	f7ff ffea 	bl	8001818 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001846:	490d      	ldr	r1, [pc, #52]	; (800187c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800185c:	4c0a      	ldr	r4, [pc, #40]	; (8001888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800186a:	f008 fa09 	bl	8009c80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7ff f9f3 	bl	8000c58 <main>
  bx  lr    
 8001872:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001874:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001880:	0800a7c4 	.word	0x0800a7c4
  ldr r2, =_sbss
 8001884:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001888:	20000ca8 	.word	0x20000ca8

0800188c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC_IRQHandler>
	...

08001890 <STHS34PF80_RegisterBusIO>:
  * @brief  Register Component Bus IO operations
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_RegisterBusIO(STHS34PF80_Object_t *pObj, STHS34PF80_IO_t *pIO)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d103      	bne.n	80018a8 <STHS34PF80_RegisterBusIO+0x18>
  {
    ret = STHS34PF80_ERROR;
 80018a0:	f04f 33ff 	mov.w	r3, #4294967295
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	e034      	b.n	8001912 <STHS34PF80_RegisterBusIO+0x82>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	7b1a      	ldrb	r2, [r3, #12]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	699a      	ldr	r2, [r3, #24]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a0e      	ldr	r2, [pc, #56]	; (800191c <STHS34PF80_RegisterBusIO+0x8c>)
 80018e4:	625a      	str	r2, [r3, #36]	; 0x24
    pObj->Ctx.write_reg = WriteRegWrap;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a0d      	ldr	r2, [pc, #52]	; (8001920 <STHS34PF80_RegisterBusIO+0x90>)
 80018ea:	621a      	str	r2, [r3, #32]
    pObj->Ctx.mdelay    = pIO->Delay;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	69da      	ldr	r2, [r3, #28]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	629a      	str	r2, [r3, #40]	; 0x28
    pObj->Ctx.handle    = pObj;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	687a      	ldr	r2, [r7, #4]
 80018f8:	62da      	str	r2, [r3, #44]	; 0x2c

    if (pObj->IO.Init != NULL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d004      	beq.n	800190c <STHS34PF80_RegisterBusIO+0x7c>
    {
      ret = pObj->IO.Init();
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4798      	blx	r3
 8001908:	60f8      	str	r0, [r7, #12]
 800190a:	e002      	b.n	8001912 <STHS34PF80_RegisterBusIO+0x82>
    }
    else
    {
      ret = STHS34PF80_ERROR;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
 8001910:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001912:	68fb      	ldr	r3, [r7, #12]
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	08001f8d 	.word	0x08001f8d
 8001920:	08001fc3 	.word	0x08001fc3

08001924 <STHS34PF80_Init>:
  * @brief  Initialize the STHS34PF80 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_Init(STHS34PF80_Object_t *pObj)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 0U)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001932:	2b00      	cmp	r3, #0
 8001934:	d11b      	bne.n	800196e <STHS34PF80_Init+0x4a>
  {
    /* Set default ODR */
    pObj->temp_odr = 1.0f;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800193c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable BDU */
    if (sths34pf80_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != STHS34PF80_OK)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3320      	adds	r3, #32
 8001942:	2101      	movs	r1, #1
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fd59 	bl	80023fc <sths34pf80_block_data_update_set>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <STHS34PF80_Init+0x32>
    {
      return STHS34PF80_ERROR;
 8001950:	f04f 33ff 	mov.w	r3, #4294967295
 8001954:	e010      	b.n	8001978 <STHS34PF80_Init+0x54>
    }

    /* Put the component in standby mode. */
    if (sths34pf80_tmos_odr_set(&(pObj->Ctx), STHS34PF80_TMOS_ODR_OFF) != STHS34PF80_OK)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	3320      	adds	r3, #32
 800195a:	2100      	movs	r1, #0
 800195c:	4618      	mov	r0, r3
 800195e:	f000 fc7d 	bl	800225c <sths34pf80_tmos_odr_set>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <STHS34PF80_Init+0x4a>
    {
      return STHS34PF80_ERROR;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
 800196c:	e004      	b.n	8001978 <STHS34PF80_Init+0x54>
    }
  }

  pObj->is_initialized = 1;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STHS34PF80_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}

08001980 <STHS34PF80_DeInit>:
  * @brief  Deinitialize the STHS34PF80 sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_DeInit(STHS34PF80_Object_t *pObj)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  if (pObj->is_initialized == 1U)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800198e:	2b01      	cmp	r3, #1
 8001990:	d108      	bne.n	80019a4 <STHS34PF80_DeInit+0x24>
  {
    /* Put the component in standby mode */
    if (STHS34PF80_TEMP_Disable(pObj) != STHS34PF80_OK)
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f000 f878 	bl	8001a88 <STHS34PF80_TEMP_Disable>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <STHS34PF80_DeInit+0x24>
    {
      return STHS34PF80_ERROR;
 800199e:	f04f 33ff 	mov.w	r3, #4294967295
 80019a2:	e004      	b.n	80019ae <STHS34PF80_DeInit+0x2e>
    }
  }

  pObj->is_initialized = 0;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return STHS34PF80_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <STHS34PF80_ReadID>:
  * @param  pObj the device pObj
  * @param  Id the WHO_AM_I value
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_ReadID(STHS34PF80_Object_t *pObj, uint8_t *Id)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	6039      	str	r1, [r7, #0]
  uint8_t buf;

  if (sths34pf80_device_id_get(&(pObj->Ctx), &buf) != STHS34PF80_OK)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3320      	adds	r3, #32
 80019c4:	f107 020f 	add.w	r2, r7, #15
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 fb44 	bl	8002058 <sths34pf80_device_id_get>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <STHS34PF80_ReadID+0x26>
  {
    return STHS34PF80_ERROR;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
 80019da:	e003      	b.n	80019e4 <STHS34PF80_ReadID+0x2e>
  }

  *Id = buf;
 80019dc:	7bfa      	ldrb	r2, [r7, #15]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	701a      	strb	r2, [r3, #0]

  return STHS34PF80_OK;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3710      	adds	r7, #16
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}

080019ec <STHS34PF80_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to STHS34PF80 sensor capabilities
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetCapabilities(STHS34PF80_Object_t *pObj, STHS34PF80_Capabilities_t *Capabilities)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Humidity    = 0;
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	2200      	movs	r2, #0
 80019fa:	709a      	strb	r2, [r3, #2]
  Capabilities->Pressure    = 0;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	2200      	movs	r2, #0
 8001a00:	705a      	strb	r2, [r3, #1]
  Capabilities->Temperature = 1;
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
  Capabilities->Gas         = 0;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	70da      	strb	r2, [r3, #3]
  Capabilities->LowPower    = 0;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	2200      	movs	r2, #0
 8001a12:	711a      	strb	r2, [r3, #4]
  Capabilities->HumMaxOdr   = 0.0f;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	609a      	str	r2, [r3, #8]
  Capabilities->TempMaxOdr  = 30.0f;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <STHS34PF80_GetCapabilities+0x54>)
 8001a20:	60da      	str	r2, [r3, #12]
  Capabilities->PressMaxOdr = 0.0f;
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	611a      	str	r2, [r3, #16]
  Capabilities->GasMaxOdr   = 0.0f;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	f04f 0200 	mov.w	r2, #0
 8001a30:	615a      	str	r2, [r3, #20]
  return STHS34PF80_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	41f00000 	.word	0x41f00000

08001a44 <STHS34PF80_TEMP_Enable>:
  * @brief  Enable the STHS34PF80 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_Enable(STHS34PF80_Object_t *pObj)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->temp_is_enabled == 1U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <STHS34PF80_TEMP_Enable+0x16>
  {
    return STHS34PF80_OK;
 8001a56:	2300      	movs	r3, #0
 8001a58:	e012      	b.n	8001a80 <STHS34PF80_TEMP_Enable+0x3c>
  }

  /* Power on the component and set the odr. */
  if (STHS34PF80_TEMP_SetOutputDataRate(pObj, pObj->temp_odr) != STHS34PF80_OK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8001a60:	eeb0 0a67 	vmov.f32	s0, s15
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f8a1 	bl	8001bac <STHS34PF80_TEMP_SetOutputDataRate>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d002      	beq.n	8001a76 <STHS34PF80_TEMP_Enable+0x32>
  {
    return STHS34PF80_ERROR;
 8001a70:	f04f 33ff 	mov.w	r3, #4294967295
 8001a74:	e004      	b.n	8001a80 <STHS34PF80_TEMP_Enable+0x3c>
  }

  pObj->temp_is_enabled = 1;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STHS34PF80_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <STHS34PF80_TEMP_Disable>:
  * @brief  Disable the STHS34PF80 temperature sensor
  * @param  pObj the device pObj
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_Disable(STHS34PF80_Object_t *pObj)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->temp_is_enabled == 0U)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d101      	bne.n	8001a9e <STHS34PF80_TEMP_Disable+0x16>
  {
    return STHS34PF80_OK;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	e01c      	b.n	8001ad8 <STHS34PF80_TEMP_Disable+0x50>
  }

  /* Save the current odr. */
  if (STHS34PF80_TEMP_GetOutputDataRate(pObj, &pObj->temp_odr) != STHS34PF80_OK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	3334      	adds	r3, #52	; 0x34
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f81b 	bl	8001ae0 <STHS34PF80_TEMP_GetOutputDataRate>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <STHS34PF80_TEMP_Disable+0x2e>
  {
    return STHS34PF80_ERROR;
 8001ab0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab4:	e010      	b.n	8001ad8 <STHS34PF80_TEMP_Disable+0x50>
  }

  /* Put the component in standby mode. */
  if (sths34pf80_tmos_odr_set(&(pObj->Ctx), STHS34PF80_TMOS_ODR_OFF) != STHS34PF80_OK)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3320      	adds	r3, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f000 fbcd 	bl	800225c <sths34pf80_tmos_odr_set>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <STHS34PF80_TEMP_Disable+0x46>
  {
    return STHS34PF80_ERROR;
 8001ac8:	f04f 33ff 	mov.w	r3, #4294967295
 8001acc:	e004      	b.n	8001ad8 <STHS34PF80_TEMP_Disable+0x50>
  }

  pObj->temp_is_enabled = 0;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

  return STHS34PF80_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3708      	adds	r7, #8
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bd80      	pop	{r7, pc}

08001ae0 <STHS34PF80_TEMP_GetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr pointer where the output data rate is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_GetOutputDataRate(STHS34PF80_Object_t *pObj, float_t *Odr)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  int32_t ret = STHS34PF80_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  sths34pf80_tmos_odr_t odr_low_level;

  if (sths34pf80_tmos_odr_get(&(pObj->Ctx), &odr_low_level) != STHS34PF80_OK)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3320      	adds	r3, #32
 8001af2:	f107 020b 	add.w	r2, r7, #11
 8001af6:	4611      	mov	r1, r2
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 fc29 	bl	8002350 <sths34pf80_tmos_odr_get>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <STHS34PF80_TEMP_GetOutputDataRate+0x2a>
  {
    return STHS34PF80_ERROR;
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295
 8001b08:	e048      	b.n	8001b9c <STHS34PF80_TEMP_GetOutputDataRate+0xbc>
  }

  switch (odr_low_level)
 8001b0a:	7afb      	ldrb	r3, [r7, #11]
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d840      	bhi.n	8001b92 <STHS34PF80_TEMP_GetOutputDataRate+0xb2>
 8001b10:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <STHS34PF80_TEMP_GetOutputDataRate+0x38>)
 8001b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b16:	bf00      	nop
 8001b18:	08001b3d 	.word	0x08001b3d
 8001b1c:	08001b47 	.word	0x08001b47
 8001b20:	08001b51 	.word	0x08001b51
 8001b24:	08001b5b 	.word	0x08001b5b
 8001b28:	08001b65 	.word	0x08001b65
 8001b2c:	08001b6f 	.word	0x08001b6f
 8001b30:	08001b79 	.word	0x08001b79
 8001b34:	08001b83 	.word	0x08001b83
 8001b38:	08001b8b 	.word	0x08001b8b
  {
    case STHS34PF80_TMOS_ODR_OFF:
      *Odr = 0.0f;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
      break;
 8001b44:	e029      	b.n	8001b9a <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_0Hz25:
      *Odr = 0.25f;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
 8001b4c:	601a      	str	r2, [r3, #0]
      break;
 8001b4e:	e024      	b.n	8001b9a <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_0Hz50:
      *Odr = 0.5f;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001b56:	601a      	str	r2, [r3, #0]
      break;
 8001b58:	e01f      	b.n	8001b9a <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_1Hz:
      *Odr = 1.0f;
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001b60:	601a      	str	r2, [r3, #0]
      break;
 8001b62:	e01a      	b.n	8001b9a <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_2Hz:
      *Odr = 2.0f;
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b6a:	601a      	str	r2, [r3, #0]
      break;
 8001b6c:	e015      	b.n	8001b9a <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_4Hz:
      *Odr = 4.0f;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	f04f 4281 	mov.w	r2, #1082130432	; 0x40800000
 8001b74:	601a      	str	r2, [r3, #0]
      break;
 8001b76:	e010      	b.n	8001b9a <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_8Hz:
      *Odr = 8.0f;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001b7e:	601a      	str	r2, [r3, #0]
      break;
 8001b80:	e00b      	b.n	8001b9a <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_15Hz:
      *Odr = 15.0f;
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	4a07      	ldr	r2, [pc, #28]	; (8001ba4 <STHS34PF80_TEMP_GetOutputDataRate+0xc4>)
 8001b86:	601a      	str	r2, [r3, #0]
      break;
 8001b88:	e007      	b.n	8001b9a <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    case STHS34PF80_TMOS_ODR_AT_30Hz:
      *Odr = 30.0f;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	4a06      	ldr	r2, [pc, #24]	; (8001ba8 <STHS34PF80_TEMP_GetOutputDataRate+0xc8>)
 8001b8e:	601a      	str	r2, [r3, #0]
      break;
 8001b90:	e003      	b.n	8001b9a <STHS34PF80_TEMP_GetOutputDataRate+0xba>

    default:
      ret = STHS34PF80_ERROR;
 8001b92:	f04f 33ff 	mov.w	r3, #4294967295
 8001b96:	60fb      	str	r3, [r7, #12]
      break;
 8001b98:	bf00      	nop
  }

  return ret;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	41700000 	.word	0x41700000
 8001ba8:	41f00000 	.word	0x41f00000

08001bac <STHS34PF80_TEMP_SetOutputDataRate>:
  * @param  pObj the device pObj
  * @param  Odr the output data rate value to be set
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_SetOutputDataRate(STHS34PF80_Object_t *pObj, float_t Odr)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	ed87 0a00 	vstr	s0, [r7]
  sths34pf80_tmos_odr_t new_odr;

  new_odr = (Odr <= 0.25f) ? STHS34PF80_TMOS_ODR_AT_0Hz25
            : (Odr <= 0.5f) ? STHS34PF80_TMOS_ODR_AT_0Hz50
 8001bb8:	edd7 7a00 	vldr	s15, [r7]
 8001bbc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8001bc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc8:	d801      	bhi.n	8001bce <STHS34PF80_TEMP_SetOutputDataRate+0x22>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e042      	b.n	8001c54 <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8001bce:	edd7 7a00 	vldr	s15, [r7]
 8001bd2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001bd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bde:	d801      	bhi.n	8001be4 <STHS34PF80_TEMP_SetOutputDataRate+0x38>
 8001be0:	2302      	movs	r3, #2
 8001be2:	e037      	b.n	8001c54 <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8001be4:	edd7 7a00 	vldr	s15, [r7]
 8001be8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf4:	d801      	bhi.n	8001bfa <STHS34PF80_TEMP_SetOutputDataRate+0x4e>
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e02c      	b.n	8001c54 <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8001bfa:	edd7 7a00 	vldr	s15, [r7]
 8001bfe:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001c02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c0a:	d801      	bhi.n	8001c10 <STHS34PF80_TEMP_SetOutputDataRate+0x64>
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	e021      	b.n	8001c54 <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8001c10:	edd7 7a00 	vldr	s15, [r7]
 8001c14:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8001c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c20:	d801      	bhi.n	8001c26 <STHS34PF80_TEMP_SetOutputDataRate+0x7a>
 8001c22:	2305      	movs	r3, #5
 8001c24:	e016      	b.n	8001c54 <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8001c26:	edd7 7a00 	vldr	s15, [r7]
 8001c2a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8001c2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c36:	d801      	bhi.n	8001c3c <STHS34PF80_TEMP_SetOutputDataRate+0x90>
 8001c38:	2306      	movs	r3, #6
 8001c3a:	e00b      	b.n	8001c54 <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8001c3c:	edd7 7a00 	vldr	s15, [r7]
 8001c40:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c4c:	d801      	bhi.n	8001c52 <STHS34PF80_TEMP_SetOutputDataRate+0xa6>
 8001c4e:	2307      	movs	r3, #7
 8001c50:	e000      	b.n	8001c54 <STHS34PF80_TEMP_SetOutputDataRate+0xa8>
 8001c52:	2308      	movs	r3, #8
  new_odr = (Odr <= 0.25f) ? STHS34PF80_TMOS_ODR_AT_0Hz25
 8001c54:	73fb      	strb	r3, [r7, #15]
            : (Odr <= 4.0f) ? STHS34PF80_TMOS_ODR_AT_4Hz
            : (Odr <= 8.0f) ? STHS34PF80_TMOS_ODR_AT_8Hz
            : (Odr <= 15.0f) ? STHS34PF80_TMOS_ODR_AT_15Hz
            :                  STHS34PF80_TMOS_ODR_AT_30Hz;

  if (sths34pf80_tmos_odr_set(&(pObj->Ctx), new_odr) != STHS34PF80_OK)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3320      	adds	r3, #32
 8001c5a:	7bfa      	ldrb	r2, [r7, #15]
 8001c5c:	4611      	mov	r1, r2
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 fafc 	bl	800225c <sths34pf80_tmos_odr_set>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <STHS34PF80_TEMP_SetOutputDataRate+0xc4>
  {
    return STHS34PF80_ERROR;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	e000      	b.n	8001c72 <STHS34PF80_TEMP_SetOutputDataRate+0xc6>
  }

  return STHS34PF80_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <STHS34PF80_TEMP_GetTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_TEMP_GetTemperature(STHS34PF80_Object_t *pObj, float_t *Value)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
  /* Get the ambient temperature */
  if (STHS34PF80_GetAmbientTemperature(pObj, Value) != STHS34PF80_OK)
 8001c84:	6839      	ldr	r1, [r7, #0]
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f838 	bl	8001cfc <STHS34PF80_GetAmbientTemperature>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <STHS34PF80_TEMP_GetTemperature+0x1e>
  {
    return STHS34PF80_ERROR;
 8001c92:	f04f 33ff 	mov.w	r3, #4294967295
 8001c96:	e000      	b.n	8001c9a <STHS34PF80_TEMP_GetTemperature+0x20>
  }

  return STHS34PF80_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <STHS34PF80_GetObjectTemperatureRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetObjectTemperatureRaw(STHS34PF80_Object_t *pObj, int16_t *Value)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b082      	sub	sp, #8
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  /* Get the object temperature */
  if (sths34pf80_tobject_raw_get(&(pObj->Ctx), Value) != STHS34PF80_OK)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3320      	adds	r3, #32
 8001cb0:	6839      	ldr	r1, [r7, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fbee 	bl	8002494 <sths34pf80_tobject_raw_get>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <STHS34PF80_GetObjectTemperatureRaw+0x22>
  {
    return STHS34PF80_ERROR;
 8001cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc2:	e000      	b.n	8001cc6 <STHS34PF80_GetObjectTemperatureRaw+0x24>
  }

  return STHS34PF80_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <STHS34PF80_GetAmbientTemperatureRaw>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetAmbientTemperatureRaw(STHS34PF80_Object_t *pObj, int16_t *Value)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  /* Get the ambient temperature */
  if (sths34pf80_tambient_raw_get(&(pObj->Ctx), Value) != STHS34PF80_OK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3320      	adds	r3, #32
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f000 fbfb 	bl	80024da <sths34pf80_tambient_raw_get>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <STHS34PF80_GetAmbientTemperatureRaw+0x22>
  {
    return STHS34PF80_ERROR;
 8001cea:	f04f 33ff 	mov.w	r3, #4294967295
 8001cee:	e000      	b.n	8001cf2 <STHS34PF80_GetAmbientTemperatureRaw+0x24>
  }

  return STHS34PF80_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <STHS34PF80_GetAmbientTemperature>:
  * @param  pObj the device pObj
  * @param  Value pointer where the temperature value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetAmbientTemperature(STHS34PF80_Object_t *pObj, float_t *Value)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  int16_t raw_value;
  int16_t int16_value;

  /* Get the ambient temperature */
  if (sths34pf80_tambient_raw_get(&(pObj->Ctx), &raw_value) != STHS34PF80_OK)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3320      	adds	r3, #32
 8001d0a:	f107 020c 	add.w	r2, r7, #12
 8001d0e:	4611      	mov	r1, r2
 8001d10:	4618      	mov	r0, r3
 8001d12:	f000 fbe2 	bl	80024da <sths34pf80_tambient_raw_get>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <STHS34PF80_GetAmbientTemperature+0x26>
  {
    return STHS34PF80_ERROR;
 8001d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d20:	e012      	b.n	8001d48 <STHS34PF80_GetAmbientTemperature+0x4c>
  }

  int16_value = raw_value / 100;
 8001d22:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <STHS34PF80_GetAmbientTemperature+0x54>)
 8001d28:	fb82 1203 	smull	r1, r2, r2, r3
 8001d2c:	1152      	asrs	r2, r2, #5
 8001d2e:	17db      	asrs	r3, r3, #31
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	81fb      	strh	r3, [r7, #14]
  *Value = (float_t)int16_value;
 8001d34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001d38:	ee07 3a90 	vmov	s15, r3
 8001d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	edc3 7a00 	vstr	s15, [r3]

  return STHS34PF80_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	51eb851f 	.word	0x51eb851f

08001d54 <STHS34PF80_GetAvgTmos>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetAvgTmos(STHS34PF80_Object_t *pObj, uint16_t *Value)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  int32_t ret = STHS34PF80_OK;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
  sths34pf80_avg_tobject_num_t raw_value;

  /* Get the raw value */
  if (sths34pf80_avg_tobject_num_get(&(pObj->Ctx), &raw_value) != STHS34PF80_OK)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3320      	adds	r3, #32
 8001d66:	f107 020b 	add.w	r2, r7, #11
 8001d6a:	4611      	mov	r1, r2
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f000 f9ab 	bl	80020c8 <sths34pf80_avg_tobject_num_get>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d002      	beq.n	8001d7e <STHS34PF80_GetAvgTmos+0x2a>
  {
    return STHS34PF80_ERROR;
 8001d78:	f04f 33ff 	mov.w	r3, #4294967295
 8001d7c:	e03f      	b.n	8001dfe <STHS34PF80_GetAvgTmos+0xaa>
  }

  switch (raw_value)
 8001d7e:	7afb      	ldrb	r3, [r7, #11]
 8001d80:	2b07      	cmp	r3, #7
 8001d82:	d837      	bhi.n	8001df4 <STHS34PF80_GetAvgTmos+0xa0>
 8001d84:	a201      	add	r2, pc, #4	; (adr r2, 8001d8c <STHS34PF80_GetAvgTmos+0x38>)
 8001d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d8a:	bf00      	nop
 8001d8c:	08001dad 	.word	0x08001dad
 8001d90:	08001db5 	.word	0x08001db5
 8001d94:	08001dbd 	.word	0x08001dbd
 8001d98:	08001dc5 	.word	0x08001dc5
 8001d9c:	08001dcd 	.word	0x08001dcd
 8001da0:	08001dd7 	.word	0x08001dd7
 8001da4:	08001de1 	.word	0x08001de1
 8001da8:	08001deb 	.word	0x08001deb
  {
    case STHS34PF80_AVG_TMOS_2:
      *Value = 2;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	2202      	movs	r2, #2
 8001db0:	801a      	strh	r2, [r3, #0]
      break;
 8001db2:	e023      	b.n	8001dfc <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_8:
      *Value = 8;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2208      	movs	r2, #8
 8001db8:	801a      	strh	r2, [r3, #0]
      break;
 8001dba:	e01f      	b.n	8001dfc <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_32:
      *Value = 32;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	801a      	strh	r2, [r3, #0]
      break;
 8001dc2:	e01b      	b.n	8001dfc <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_128:
      *Value = 128;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2280      	movs	r2, #128	; 0x80
 8001dc8:	801a      	strh	r2, [r3, #0]
      break;
 8001dca:	e017      	b.n	8001dfc <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_256:
      *Value = 256;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dd2:	801a      	strh	r2, [r3, #0]
      break;
 8001dd4:	e012      	b.n	8001dfc <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_512:
      *Value = 512;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ddc:	801a      	strh	r2, [r3, #0]
      break;
 8001dde:	e00d      	b.n	8001dfc <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_1024:
      *Value = 1024;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de6:	801a      	strh	r2, [r3, #0]
      break;
 8001de8:	e008      	b.n	8001dfc <STHS34PF80_GetAvgTmos+0xa8>

    case STHS34PF80_AVG_TMOS_2048:
      *Value = 2048;
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001df0:	801a      	strh	r2, [r3, #0]
      break;
 8001df2:	e003      	b.n	8001dfc <STHS34PF80_GetAvgTmos+0xa8>

    default:
      ret = STHS34PF80_ERROR;
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
 8001df8:	60fb      	str	r3, [r7, #12]
      break;
 8001dfa:	bf00      	nop
  }

  return ret;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop

08001e08 <STHS34PF80_SetAvgTmos>:
  * @param  pObj the device pObj
  * @param  Value the value to be written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_SetAvgTmos(STHS34PF80_Object_t *pObj, uint16_t Value)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	807b      	strh	r3, [r7, #2]
  int32_t ret = STHS34PF80_OK;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  sths34pf80_avg_tobject_num_t raw_value;

  raw_value = (Value <= 2U) ? STHS34PF80_AVG_TMOS_2
            : (Value <= 8U) ? STHS34PF80_AVG_TMOS_8
 8001e18:	887b      	ldrh	r3, [r7, #2]
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d922      	bls.n	8001e64 <STHS34PF80_SetAvgTmos+0x5c>
 8001e1e:	887b      	ldrh	r3, [r7, #2]
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d91d      	bls.n	8001e60 <STHS34PF80_SetAvgTmos+0x58>
 8001e24:	887b      	ldrh	r3, [r7, #2]
 8001e26:	2b20      	cmp	r3, #32
 8001e28:	d918      	bls.n	8001e5c <STHS34PF80_SetAvgTmos+0x54>
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	2b80      	cmp	r3, #128	; 0x80
 8001e2e:	d913      	bls.n	8001e58 <STHS34PF80_SetAvgTmos+0x50>
 8001e30:	887b      	ldrh	r3, [r7, #2]
 8001e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e36:	d90d      	bls.n	8001e54 <STHS34PF80_SetAvgTmos+0x4c>
 8001e38:	887b      	ldrh	r3, [r7, #2]
 8001e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e3e:	d907      	bls.n	8001e50 <STHS34PF80_SetAvgTmos+0x48>
 8001e40:	887b      	ldrh	r3, [r7, #2]
 8001e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e46:	d801      	bhi.n	8001e4c <STHS34PF80_SetAvgTmos+0x44>
 8001e48:	2306      	movs	r3, #6
 8001e4a:	e00c      	b.n	8001e66 <STHS34PF80_SetAvgTmos+0x5e>
 8001e4c:	2307      	movs	r3, #7
 8001e4e:	e00a      	b.n	8001e66 <STHS34PF80_SetAvgTmos+0x5e>
 8001e50:	2305      	movs	r3, #5
 8001e52:	e008      	b.n	8001e66 <STHS34PF80_SetAvgTmos+0x5e>
 8001e54:	2304      	movs	r3, #4
 8001e56:	e006      	b.n	8001e66 <STHS34PF80_SetAvgTmos+0x5e>
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e004      	b.n	8001e66 <STHS34PF80_SetAvgTmos+0x5e>
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	e002      	b.n	8001e66 <STHS34PF80_SetAvgTmos+0x5e>
 8001e60:	2301      	movs	r3, #1
 8001e62:	e000      	b.n	8001e66 <STHS34PF80_SetAvgTmos+0x5e>
 8001e64:	2300      	movs	r3, #0
  raw_value = (Value <= 2U) ? STHS34PF80_AVG_TMOS_2
 8001e66:	72fb      	strb	r3, [r7, #11]
            : (Value <= 256U) ? STHS34PF80_AVG_TMOS_256
            : (Value <= 512U) ? STHS34PF80_AVG_TMOS_512
            : (Value <= 1024U) ? STHS34PF80_AVG_TMOS_1024
            :                    STHS34PF80_AVG_TMOS_2048;

  if (sths34pf80_avg_tobject_num_set(&(pObj->Ctx), raw_value) != STHS34PF80_OK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	3320      	adds	r3, #32
 8001e6c:	7afa      	ldrb	r2, [r7, #11]
 8001e6e:	4611      	mov	r1, r2
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 f902 	bl	800207a <sths34pf80_avg_tobject_num_set>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d002      	beq.n	8001e82 <STHS34PF80_SetAvgTmos+0x7a>
  {
    return STHS34PF80_ERROR;
 8001e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e80:	e000      	b.n	8001e84 <STHS34PF80_SetAvgTmos+0x7c>
  }

  return ret;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <STHS34PF80_GetAvgT>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetAvgT(STHS34PF80_Object_t *pObj, uint8_t *Value)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  int32_t ret = STHS34PF80_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	60fb      	str	r3, [r7, #12]
  sths34pf80_avg_tambient_num_t raw_value;

  /* Get the raw value */
  if (sths34pf80_avg_tambient_num_get(&(pObj->Ctx), &raw_value) != STHS34PF80_OK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	3320      	adds	r3, #32
 8001e9e:	f107 020b 	add.w	r2, r7, #11
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 f95f 	bl	8002168 <sths34pf80_avg_tambient_num_get>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <STHS34PF80_GetAvgT+0x2a>
  {
    return STHS34PF80_ERROR;
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb4:	e023      	b.n	8001efe <STHS34PF80_GetAvgT+0x72>
  }

  switch (raw_value)
 8001eb6:	7afb      	ldrb	r3, [r7, #11]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d81b      	bhi.n	8001ef4 <STHS34PF80_GetAvgT+0x68>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <STHS34PF80_GetAvgT+0x38>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08001edd 	.word	0x08001edd
 8001ecc:	08001ee5 	.word	0x08001ee5
 8001ed0:	08001eed 	.word	0x08001eed
  {
    case STHS34PF80_AVG_T_8:
      *Value = 8;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2208      	movs	r2, #8
 8001ed8:	701a      	strb	r2, [r3, #0]
      break;
 8001eda:	e00f      	b.n	8001efc <STHS34PF80_GetAvgT+0x70>

    case STHS34PF80_AVG_T_4:
      *Value = 4;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	2204      	movs	r2, #4
 8001ee0:	701a      	strb	r2, [r3, #0]
      break;
 8001ee2:	e00b      	b.n	8001efc <STHS34PF80_GetAvgT+0x70>

    case STHS34PF80_AVG_T_2:
      *Value = 2;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	701a      	strb	r2, [r3, #0]
      break;
 8001eea:	e007      	b.n	8001efc <STHS34PF80_GetAvgT+0x70>

    case STHS34PF80_AVG_T_1:
      *Value = 1;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]
      break;
 8001ef2:	e003      	b.n	8001efc <STHS34PF80_GetAvgT+0x70>

    default:
      ret = STHS34PF80_ERROR;
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef8:	60fb      	str	r3, [r7, #12]
      break;
 8001efa:	bf00      	nop
  }

  return ret;
 8001efc:	68fb      	ldr	r3, [r7, #12]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop

08001f08 <STHS34PF80_GetGainFactor>:
  * @param  pObj the device pObj
  * @param  Value pointer where the value is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetGainFactor(STHS34PF80_Object_t *pObj, uint8_t *Value)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
  int32_t ret = STHS34PF80_OK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	60fb      	str	r3, [r7, #12]
  sths34pf80_gain_mode_t raw_value;

  /* Get the raw value */
  if (sths34pf80_gain_mode_get(&(pObj->Ctx), &raw_value) != STHS34PF80_OK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3320      	adds	r3, #32
 8001f1a:	f107 020b 	add.w	r2, r7, #11
 8001f1e:	4611      	mov	r1, r2
 8001f20:	4618      	mov	r0, r3
 8001f22:	f000 f959 	bl	80021d8 <sths34pf80_gain_mode_get>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d002      	beq.n	8001f32 <STHS34PF80_GetGainFactor+0x2a>
  {
    return STHS34PF80_ERROR;
 8001f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f30:	e012      	b.n	8001f58 <STHS34PF80_GetGainFactor+0x50>
  }

  switch (raw_value)
 8001f32:	7afb      	ldrb	r3, [r7, #11]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d002      	beq.n	8001f3e <STHS34PF80_GetGainFactor+0x36>
 8001f38:	2b07      	cmp	r3, #7
 8001f3a:	d004      	beq.n	8001f46 <STHS34PF80_GetGainFactor+0x3e>
 8001f3c:	e007      	b.n	8001f4e <STHS34PF80_GetGainFactor+0x46>
  {
    case STHS34PF80_GAIN_WIDE_MODE:
      *Value = 8;
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2208      	movs	r2, #8
 8001f42:	701a      	strb	r2, [r3, #0]
      break;
 8001f44:	e007      	b.n	8001f56 <STHS34PF80_GetGainFactor+0x4e>

    case STHS34PF80_GAIN_DEFAULT_MODE:
      *Value = 1;
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	701a      	strb	r2, [r3, #0]
      break;
 8001f4c:	e003      	b.n	8001f56 <STHS34PF80_GetGainFactor+0x4e>

    default:
      ret = STHS34PF80_ERROR;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	60fb      	str	r3, [r7, #12]
      break;
 8001f54:	bf00      	nop
  }

  return ret;
 8001f56:	68fb      	ldr	r3, [r7, #12]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3710      	adds	r7, #16
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <STHS34PF80_GetSensitivity>:
  * @param  pObj the device pObj
  * @param  Value pointer where the sensitivity is written
  * @retval 0 in case of success, an error code otherwise
  */
int32_t STHS34PF80_GetSensitivity(STHS34PF80_Object_t *pObj, uint16_t *Value)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  if (sths34pf80_tmos_sensitivity_get(&(pObj->Ctx), Value) != STHS34PF80_OK)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3320      	adds	r3, #32
 8001f6e:	6839      	ldr	r1, [r7, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 f958 	bl	8002226 <sths34pf80_tmos_sensitivity_get>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <STHS34PF80_GetSensitivity+0x22>
  {
    return STHS34PF80_ERROR;
 8001f7c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f80:	e000      	b.n	8001f84 <STHS34PF80_GetSensitivity+0x24>
  }

  return STHS34PF80_OK;
 8001f82:	2300      	movs	r3, #0
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3708      	adds	r7, #8
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <ReadRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b087      	sub	sp, #28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	60f8      	str	r0, [r7, #12]
 8001f94:	607a      	str	r2, [r7, #4]
 8001f96:	461a      	mov	r2, r3
 8001f98:	460b      	mov	r3, r1
 8001f9a:	72fb      	strb	r3, [r7, #11]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	813b      	strh	r3, [r7, #8]
  STHS34PF80_Object_t *pObj = (STHS34PF80_Object_t *)Handle;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	695c      	ldr	r4, [r3, #20]
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	7b1b      	ldrb	r3, [r3, #12]
 8001fac:	b298      	uxth	r0, r3
 8001fae:	7afb      	ldrb	r3, [r7, #11]
 8001fb0:	b299      	uxth	r1, r3
 8001fb2:	893b      	ldrh	r3, [r7, #8]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	47a0      	blx	r4
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	371c      	adds	r7, #28
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd90      	pop	{r4, r7, pc}

08001fc2 <WriteRegWrap>:
  * @param  pData the stored data pointer
  * @param  Length the length
  * @retval 0 in case of success, an error code otherwise
  */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001fc2:	b590      	push	{r4, r7, lr}
 8001fc4:	b087      	sub	sp, #28
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	461a      	mov	r2, r3
 8001fce:	460b      	mov	r3, r1
 8001fd0:	72fb      	strb	r3, [r7, #11]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	813b      	strh	r3, [r7, #8]
  STHS34PF80_Object_t *pObj = (STHS34PF80_Object_t *)Handle;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	691c      	ldr	r4, [r3, #16]
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	7b1b      	ldrb	r3, [r3, #12]
 8001fe2:	b298      	uxth	r0, r3
 8001fe4:	7afb      	ldrb	r3, [r7, #11]
 8001fe6:	b299      	uxth	r1, r3
 8001fe8:	893b      	ldrh	r3, [r7, #8]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	47a0      	blx	r4
 8001fee:	4603      	mov	r3, r0
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	371c      	adds	r7, #28
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd90      	pop	{r4, r7, pc}

08001ff8 <sths34pf80_read_reg>:
  *
  */
int32_t __weak sths34pf80_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                   uint8_t *data,
                                   uint16_t len)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	607a      	str	r2, [r7, #4]
 8002002:	461a      	mov	r2, r3
 8002004:	460b      	mov	r3, r1
 8002006:	72fb      	strb	r3, [r7, #11]
 8002008:	4613      	mov	r3, r2
 800200a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	685c      	ldr	r4, [r3, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	68d8      	ldr	r0, [r3, #12]
 8002014:	893b      	ldrh	r3, [r7, #8]
 8002016:	7af9      	ldrb	r1, [r7, #11]
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	47a0      	blx	r4
 800201c:	6178      	str	r0, [r7, #20]

  return ret;
 800201e:	697b      	ldr	r3, [r7, #20]
}
 8002020:	4618      	mov	r0, r3
 8002022:	371c      	adds	r7, #28
 8002024:	46bd      	mov	sp, r7
 8002026:	bd90      	pop	{r4, r7, pc}

08002028 <sths34pf80_write_reg>:
  *
  */
int32_t __weak sths34pf80_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                                    uint8_t *data,
                                    uint16_t len)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	60f8      	str	r0, [r7, #12]
 8002030:	607a      	str	r2, [r7, #4]
 8002032:	461a      	mov	r2, r3
 8002034:	460b      	mov	r3, r1
 8002036:	72fb      	strb	r3, [r7, #11]
 8002038:	4613      	mov	r3, r2
 800203a:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681c      	ldr	r4, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	68d8      	ldr	r0, [r3, #12]
 8002044:	893b      	ldrh	r3, [r7, #8]
 8002046:	7af9      	ldrb	r1, [r7, #11]
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	47a0      	blx	r4
 800204c:	6178      	str	r0, [r7, #20]

  return ret;
 800204e:	697b      	ldr	r3, [r7, #20]
}
 8002050:	4618      	mov	r0, r3
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}

08002058 <sths34pf80_device_id_get>:
  * @param  val      Device ID.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_device_id_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_WHO_AM_I, val, 1);
 8002062:	2301      	movs	r3, #1
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	210f      	movs	r1, #15
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff ffc5 	bl	8001ff8 <sths34pf80_read_reg>
 800206e:	60f8      	str	r0, [r7, #12]

  return ret;
 8002070:	68fb      	ldr	r3, [r7, #12]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <sths34pf80_avg_tobject_num_set>:
  * @param  val      AVG_TMOS_2, AVG_TMOS_8, AVG_TMOS_32, AVG_TMOS_128, AVG_TMOS_256, AVG_TMOS_512, AVG_TMOS_1024, AVG_TMOS_2048,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_avg_tobject_num_set(stmdev_ctx_t *ctx, sths34pf80_avg_tobject_num_t val)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	460b      	mov	r3, r1
 8002084:	70fb      	strb	r3, [r7, #3]
  sths34pf80_avg_trim_t avg_trim;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 8002086:	f107 0208 	add.w	r2, r7, #8
 800208a:	2301      	movs	r3, #1
 800208c:	2110      	movs	r1, #16
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f7ff ffb2 	bl	8001ff8 <sths34pf80_read_reg>
 8002094:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10f      	bne.n	80020bc <sths34pf80_avg_tobject_num_set+0x42>
  {
    avg_trim.avg_tmos = ((uint8_t)val & 0x7);
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	7a3b      	ldrb	r3, [r7, #8]
 80020a6:	f362 0302 	bfi	r3, r2, #0, #3
 80020aa:	723b      	strb	r3, [r7, #8]
    ret = sths34pf80_write_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 80020ac:	f107 0208 	add.w	r2, r7, #8
 80020b0:	2301      	movs	r3, #1
 80020b2:	2110      	movs	r1, #16
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7ff ffb7 	bl	8002028 <sths34pf80_write_reg>
 80020ba:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 80020bc:	68fb      	ldr	r3, [r7, #12]
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <sths34pf80_avg_tobject_num_get>:
  * @param  val      AVG_TMOS_2, AVG_TMOS_8, AVG_TMOS_32, AVG_TMOS_128, AVG_TMOS_256, AVG_TMOS_512, AVG_TMOS_1024, AVG_TMOS_2048,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_avg_tobject_num_get(stmdev_ctx_t *ctx, sths34pf80_avg_tobject_num_t *val)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  sths34pf80_avg_trim_t avg_trim;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 80020d2:	f107 0208 	add.w	r2, r7, #8
 80020d6:	2301      	movs	r3, #1
 80020d8:	2110      	movs	r1, #16
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ff8c 	bl	8001ff8 <sths34pf80_read_reg>
 80020e0:	60f8      	str	r0, [r7, #12]

  switch (avg_trim.avg_tmos)
 80020e2:	7a3b      	ldrb	r3, [r7, #8]
 80020e4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b07      	cmp	r3, #7
 80020ec:	d832      	bhi.n	8002154 <sths34pf80_avg_tobject_num_get+0x8c>
 80020ee:	a201      	add	r2, pc, #4	; (adr r2, 80020f4 <sths34pf80_avg_tobject_num_get+0x2c>)
 80020f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f4:	08002115 	.word	0x08002115
 80020f8:	0800211d 	.word	0x0800211d
 80020fc:	08002125 	.word	0x08002125
 8002100:	0800212d 	.word	0x0800212d
 8002104:	08002135 	.word	0x08002135
 8002108:	0800213d 	.word	0x0800213d
 800210c:	08002145 	.word	0x08002145
 8002110:	0800214d 	.word	0x0800214d
  {
    case STHS34PF80_AVG_TMOS_2:
      *val = STHS34PF80_AVG_TMOS_2;
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
      break;
 800211a:	e01f      	b.n	800215c <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_8:
      *val = STHS34PF80_AVG_TMOS_8;
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2201      	movs	r2, #1
 8002120:	701a      	strb	r2, [r3, #0]
      break;
 8002122:	e01b      	b.n	800215c <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_32:
      *val = STHS34PF80_AVG_TMOS_32;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2202      	movs	r2, #2
 8002128:	701a      	strb	r2, [r3, #0]
      break;
 800212a:	e017      	b.n	800215c <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_128:
      *val = STHS34PF80_AVG_TMOS_128;
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2203      	movs	r2, #3
 8002130:	701a      	strb	r2, [r3, #0]
      break;
 8002132:	e013      	b.n	800215c <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_256:
      *val = STHS34PF80_AVG_TMOS_256;
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	2204      	movs	r2, #4
 8002138:	701a      	strb	r2, [r3, #0]
      break;
 800213a:	e00f      	b.n	800215c <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_512:
      *val = STHS34PF80_AVG_TMOS_512;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	2205      	movs	r2, #5
 8002140:	701a      	strb	r2, [r3, #0]
      break;
 8002142:	e00b      	b.n	800215c <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_1024:
      *val = STHS34PF80_AVG_TMOS_1024;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2206      	movs	r2, #6
 8002148:	701a      	strb	r2, [r3, #0]
      break;
 800214a:	e007      	b.n	800215c <sths34pf80_avg_tobject_num_get+0x94>

    case STHS34PF80_AVG_TMOS_2048:
      *val = STHS34PF80_AVG_TMOS_2048;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2207      	movs	r2, #7
 8002150:	701a      	strb	r2, [r3, #0]
      break;
 8002152:	e003      	b.n	800215c <sths34pf80_avg_tobject_num_get+0x94>

    default:
      *val = STHS34PF80_AVG_TMOS_2;
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
      break;
 800215a:	bf00      	nop
  }
  return ret;
 800215c:	68fb      	ldr	r3, [r7, #12]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop

08002168 <sths34pf80_avg_tambient_num_get>:
  * @param  val      AVG_T_8, AVG_T_4, AVG_T_2, AVG_T_1,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_avg_tambient_num_get(stmdev_ctx_t *ctx, sths34pf80_avg_tambient_num_t *val)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  sths34pf80_avg_trim_t avg_trim;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 8002172:	f107 0208 	add.w	r2, r7, #8
 8002176:	2301      	movs	r3, #1
 8002178:	2110      	movs	r1, #16
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ff3c 	bl	8001ff8 <sths34pf80_read_reg>
 8002180:	60f8      	str	r0, [r7, #12]

  switch (avg_trim.avg_t)
 8002182:	7a3b      	ldrb	r3, [r7, #8]
 8002184:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b03      	cmp	r3, #3
 800218c:	d81a      	bhi.n	80021c4 <sths34pf80_avg_tambient_num_get+0x5c>
 800218e:	a201      	add	r2, pc, #4	; (adr r2, 8002194 <sths34pf80_avg_tambient_num_get+0x2c>)
 8002190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002194:	080021a5 	.word	0x080021a5
 8002198:	080021ad 	.word	0x080021ad
 800219c:	080021b5 	.word	0x080021b5
 80021a0:	080021bd 	.word	0x080021bd
  {
    case STHS34PF80_AVG_T_8:
      *val = STHS34PF80_AVG_T_8;
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	2200      	movs	r2, #0
 80021a8:	701a      	strb	r2, [r3, #0]
      break;
 80021aa:	e00f      	b.n	80021cc <sths34pf80_avg_tambient_num_get+0x64>

    case STHS34PF80_AVG_T_4:
      *val = STHS34PF80_AVG_T_4;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
      break;
 80021b2:	e00b      	b.n	80021cc <sths34pf80_avg_tambient_num_get+0x64>

    case STHS34PF80_AVG_T_2:
      *val = STHS34PF80_AVG_T_2;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	2202      	movs	r2, #2
 80021b8:	701a      	strb	r2, [r3, #0]
      break;
 80021ba:	e007      	b.n	80021cc <sths34pf80_avg_tambient_num_get+0x64>

    case STHS34PF80_AVG_T_1:
      *val = STHS34PF80_AVG_T_1;
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	2203      	movs	r2, #3
 80021c0:	701a      	strb	r2, [r3, #0]
      break;
 80021c2:	e003      	b.n	80021cc <sths34pf80_avg_tambient_num_get+0x64>

    default:
      *val = STHS34PF80_AVG_T_8;
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
      break;
 80021ca:	bf00      	nop
  }
  return ret;
 80021cc:	68fb      	ldr	r3, [r7, #12]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop

080021d8 <sths34pf80_gain_mode_get>:
  * @param  val      range: GAIN_WIDE_MODE, GAIN_DEFAULT_MODE
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_gain_mode_get(stmdev_ctx_t *ctx, sths34pf80_gain_mode_t *val)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  sths34pf80_ctrl0_t ctrl0;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL0, (uint8_t *)&ctrl0, 1);
 80021e2:	f107 0208 	add.w	r2, r7, #8
 80021e6:	2301      	movs	r3, #1
 80021e8:	2117      	movs	r1, #23
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ff04 	bl	8001ff8 <sths34pf80_read_reg>
 80021f0:	60f8      	str	r0, [r7, #12]

  switch (ctrl0.gain)
 80021f2:	7a3b      	ldrb	r3, [r7, #8]
 80021f4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d002      	beq.n	8002204 <sths34pf80_gain_mode_get+0x2c>
 80021fe:	2b07      	cmp	r3, #7
 8002200:	d004      	beq.n	800220c <sths34pf80_gain_mode_get+0x34>
 8002202:	e007      	b.n	8002214 <sths34pf80_gain_mode_get+0x3c>
  {
    case STHS34PF80_GAIN_WIDE_MODE:
      *val = STHS34PF80_GAIN_WIDE_MODE;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	2200      	movs	r2, #0
 8002208:	701a      	strb	r2, [r3, #0]
      break;
 800220a:	e007      	b.n	800221c <sths34pf80_gain_mode_get+0x44>

    case STHS34PF80_GAIN_DEFAULT_MODE:
      *val = STHS34PF80_GAIN_DEFAULT_MODE;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2207      	movs	r2, #7
 8002210:	701a      	strb	r2, [r3, #0]
      break;
 8002212:	e003      	b.n	800221c <sths34pf80_gain_mode_get+0x44>

    default:
      *val = STHS34PF80_GAIN_DEFAULT_MODE;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2207      	movs	r2, #7
 8002218:	701a      	strb	r2, [r3, #0]
      break;
 800221a:	bf00      	nop
  }

  return ret;
 800221c:	68fb      	ldr	r3, [r7, #12]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <sths34pf80_tmos_sensitivity_get>:
  * @param  val      rounded sensitivity value
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tmos_sensitivity_get(stmdev_ctx_t *ctx, uint16_t *val)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b084      	sub	sp, #16
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	6039      	str	r1, [r7, #0]
  sths34pf80_sens_data_t data;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_SENS_DATA, (uint8_t *)&data, 1);
 8002230:	f107 0208 	add.w	r2, r7, #8
 8002234:	2301      	movs	r3, #1
 8002236:	211d      	movs	r1, #29
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f7ff fedd 	bl	8001ff8 <sths34pf80_read_reg>
 800223e:	60f8      	str	r0, [r7, #12]
  *val = (int8_t)data.sens * 16 + 2048;
 8002240:	7a3b      	ldrb	r3, [r7, #8]
 8002242:	b25b      	sxtb	r3, r3
 8002244:	3380      	adds	r3, #128	; 0x80
 8002246:	b29b      	uxth	r3, r3
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	b29a      	uxth	r2, r3
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	801a      	strh	r2, [r3, #0]

  return ret;
 8002250:	68fb      	ldr	r3, [r7, #12]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
	...

0800225c <sths34pf80_tmos_odr_set>:
  * @param  val      TMOS_ODR_OFF, TMOS_ODR_AT_0Hz25, TMOS_ODR_AT_0Hz50, TMOS_ODR_1Hz, TMOS_ODR_2Hz, TMOS_ODR_4Hz, TMOS_ODR_8Hz, TMOS_ODR_15Hz, TMOS_ODR_30Hz,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tmos_odr_set(stmdev_ctx_t *ctx, sths34pf80_tmos_odr_t val)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl1_t ctrl1;
  sths34pf80_avg_trim_t avg_trim;
  sths34pf80_tmos_odr_t max_odr = STHS34PF80_TMOS_ODR_AT_30Hz;
 8002268:	2308      	movs	r3, #8
 800226a:	75fb      	strb	r3, [r7, #23]
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 800226c:	f107 020c 	add.w	r2, r7, #12
 8002270:	2301      	movs	r3, #1
 8002272:	2120      	movs	r1, #32
 8002274:	6878      	ldr	r0, [r7, #4]
 8002276:	f7ff febf 	bl	8001ff8 <sths34pf80_read_reg>
 800227a:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d12e      	bne.n	80022e0 <sths34pf80_tmos_odr_set+0x84>
  {
    ret = sths34pf80_read_reg(ctx, STHS34PF80_AVG_TRIM, (uint8_t *)&avg_trim, 1);
 8002282:	f107 0208 	add.w	r2, r7, #8
 8002286:	2301      	movs	r3, #1
 8002288:	2110      	movs	r1, #16
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff feb4 	bl	8001ff8 <sths34pf80_read_reg>
 8002290:	6138      	str	r0, [r7, #16]

    switch (avg_trim.avg_tmos)
 8002292:	7a3b      	ldrb	r3, [r7, #8]
 8002294:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8002298:	b2db      	uxtb	r3, r3
 800229a:	3b03      	subs	r3, #3
 800229c:	2b04      	cmp	r3, #4
 800229e:	d80d      	bhi.n	80022bc <sths34pf80_tmos_odr_set+0x60>
 80022a0:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <sths34pf80_tmos_odr_set+0x4c>)
 80022a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a6:	bf00      	nop
 80022a8:	080022c3 	.word	0x080022c3
 80022ac:	080022c9 	.word	0x080022c9
 80022b0:	080022cf 	.word	0x080022cf
 80022b4:	080022d5 	.word	0x080022d5
 80022b8:	080022db 	.word	0x080022db
    {
      case STHS34PF80_AVG_TMOS_2:
      case STHS34PF80_AVG_TMOS_8:
      case STHS34PF80_AVG_TMOS_32:
        max_odr = STHS34PF80_TMOS_ODR_AT_30Hz;
 80022bc:	2308      	movs	r3, #8
 80022be:	75fb      	strb	r3, [r7, #23]
        break;
 80022c0:	e00e      	b.n	80022e0 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_128:
        max_odr = STHS34PF80_TMOS_ODR_AT_8Hz;
 80022c2:	2306      	movs	r3, #6
 80022c4:	75fb      	strb	r3, [r7, #23]
        break;
 80022c6:	e00b      	b.n	80022e0 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_256:
        max_odr = STHS34PF80_TMOS_ODR_AT_4Hz;
 80022c8:	2305      	movs	r3, #5
 80022ca:	75fb      	strb	r3, [r7, #23]
        break;
 80022cc:	e008      	b.n	80022e0 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_512:
        max_odr = STHS34PF80_TMOS_ODR_AT_2Hz;
 80022ce:	2304      	movs	r3, #4
 80022d0:	75fb      	strb	r3, [r7, #23]
        break;
 80022d2:	e005      	b.n	80022e0 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_1024:
        max_odr = STHS34PF80_TMOS_ODR_AT_1Hz;
 80022d4:	2303      	movs	r3, #3
 80022d6:	75fb      	strb	r3, [r7, #23]
        break;
 80022d8:	e002      	b.n	80022e0 <sths34pf80_tmos_odr_set+0x84>
      case STHS34PF80_AVG_TMOS_2048:
        max_odr = STHS34PF80_TMOS_ODR_AT_0Hz50;
 80022da:	2302      	movs	r3, #2
 80022dc:	75fb      	strb	r3, [r7, #23]
        break;
 80022de:	bf00      	nop
    }
  }

  if (ret == 0)
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d12f      	bne.n	8002346 <sths34pf80_tmos_odr_set+0xea>
  {
    if (val > max_odr)
 80022e6:	78fa      	ldrb	r2, [r7, #3]
 80022e8:	7dfb      	ldrb	r3, [r7, #23]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d902      	bls.n	80022f4 <sths34pf80_tmos_odr_set+0x98>
    {
      return -1;
 80022ee:	f04f 33ff 	mov.w	r3, #4294967295
 80022f2:	e029      	b.n	8002348 <sths34pf80_tmos_odr_set+0xec>
    }

    if (val > 0)
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d012      	beq.n	8002320 <sths34pf80_tmos_odr_set+0xc4>
    {
      /*
       * Do a clean reset algo procedure everytime odr is changed to an
       * operative state.
       */
      ctrl1.odr = 0;
 80022fa:	7b3b      	ldrb	r3, [r7, #12]
 80022fc:	f36f 0303 	bfc	r3, #0, #4
 8002300:	733b      	strb	r3, [r7, #12]
      ret = sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8002302:	f107 020c 	add.w	r2, r7, #12
 8002306:	2301      	movs	r3, #1
 8002308:	2120      	movs	r1, #32
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fe8c 	bl	8002028 <sths34pf80_write_reg>
 8002310:	6138      	str	r0, [r7, #16]

      ret += sths34pf80_reset_algo(ctx);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f993 	bl	800263e <sths34pf80_reset_algo>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	4413      	add	r3, r2
 800231e:	613b      	str	r3, [r7, #16]
    }

    ctrl1.odr = ((uint8_t)val & 0xf);
 8002320:	78fb      	ldrb	r3, [r7, #3]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	b2da      	uxtb	r2, r3
 8002328:	7b3b      	ldrb	r3, [r7, #12]
 800232a:	f362 0303 	bfi	r3, r2, #0, #4
 800232e:	733b      	strb	r3, [r7, #12]
    ret += sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8002330:	f107 020c 	add.w	r2, r7, #12
 8002334:	2301      	movs	r3, #1
 8002336:	2120      	movs	r1, #32
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff fe75 	bl	8002028 <sths34pf80_write_reg>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	4413      	add	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
  }

  return ret;
 8002346:	693b      	ldr	r3, [r7, #16]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <sths34pf80_tmos_odr_get>:
  * @param  val      TMOS_ODR_OFF, TMOS_ODR_AT_0Hz25, TMOS_ODR_AT_0Hz50, TMOS_ODR_1Hz, TMOS_ODR_2Hz, TMOS_ODR_4Hz, TMOS_ODR_8Hz, TMOS_ODR_15Hz, TMOS_ODR_30Hz,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tmos_odr_get(stmdev_ctx_t *ctx, sths34pf80_tmos_odr_t *val)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  sths34pf80_ctrl1_t ctrl1;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 800235a:	f107 0208 	add.w	r2, r7, #8
 800235e:	2301      	movs	r3, #1
 8002360:	2120      	movs	r1, #32
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fe48 	bl	8001ff8 <sths34pf80_read_reg>
 8002368:	60f8      	str	r0, [r7, #12]

  switch (ctrl1.odr)
 800236a:	7a3b      	ldrb	r3, [r7, #8]
 800236c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b08      	cmp	r3, #8
 8002374:	d838      	bhi.n	80023e8 <sths34pf80_tmos_odr_get+0x98>
 8002376:	a201      	add	r2, pc, #4	; (adr r2, 800237c <sths34pf80_tmos_odr_get+0x2c>)
 8002378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800237c:	080023a1 	.word	0x080023a1
 8002380:	080023a9 	.word	0x080023a9
 8002384:	080023b1 	.word	0x080023b1
 8002388:	080023b9 	.word	0x080023b9
 800238c:	080023c1 	.word	0x080023c1
 8002390:	080023c9 	.word	0x080023c9
 8002394:	080023d1 	.word	0x080023d1
 8002398:	080023d9 	.word	0x080023d9
 800239c:	080023e1 	.word	0x080023e1
  {
    case STHS34PF80_TMOS_ODR_OFF:
      *val = STHS34PF80_TMOS_ODR_OFF;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	2200      	movs	r2, #0
 80023a4:	701a      	strb	r2, [r3, #0]
      break;
 80023a6:	e023      	b.n	80023f0 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_0Hz25:
      *val = STHS34PF80_TMOS_ODR_AT_0Hz25;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2201      	movs	r2, #1
 80023ac:	701a      	strb	r2, [r3, #0]
      break;
 80023ae:	e01f      	b.n	80023f0 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_0Hz50:
      *val = STHS34PF80_TMOS_ODR_AT_0Hz50;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	2202      	movs	r2, #2
 80023b4:	701a      	strb	r2, [r3, #0]
      break;
 80023b6:	e01b      	b.n	80023f0 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_1Hz:
      *val = STHS34PF80_TMOS_ODR_AT_1Hz;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2203      	movs	r2, #3
 80023bc:	701a      	strb	r2, [r3, #0]
      break;
 80023be:	e017      	b.n	80023f0 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_2Hz:
      *val = STHS34PF80_TMOS_ODR_AT_2Hz;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	2204      	movs	r2, #4
 80023c4:	701a      	strb	r2, [r3, #0]
      break;
 80023c6:	e013      	b.n	80023f0 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_4Hz:
      *val = STHS34PF80_TMOS_ODR_AT_4Hz;
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	2205      	movs	r2, #5
 80023cc:	701a      	strb	r2, [r3, #0]
      break;
 80023ce:	e00f      	b.n	80023f0 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_8Hz:
      *val = STHS34PF80_TMOS_ODR_AT_8Hz;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	2206      	movs	r2, #6
 80023d4:	701a      	strb	r2, [r3, #0]
      break;
 80023d6:	e00b      	b.n	80023f0 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_15Hz:
      *val = STHS34PF80_TMOS_ODR_AT_15Hz;
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	2207      	movs	r2, #7
 80023dc:	701a      	strb	r2, [r3, #0]
      break;
 80023de:	e007      	b.n	80023f0 <sths34pf80_tmos_odr_get+0xa0>

    case STHS34PF80_TMOS_ODR_AT_30Hz:
      *val = STHS34PF80_TMOS_ODR_AT_30Hz;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	2208      	movs	r2, #8
 80023e4:	701a      	strb	r2, [r3, #0]
      break;
 80023e6:	e003      	b.n	80023f0 <sths34pf80_tmos_odr_get+0xa0>

    default:
      *val = STHS34PF80_TMOS_ODR_OFF;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2200      	movs	r2, #0
 80023ec:	701a      	strb	r2, [r3, #0]
      break;
 80023ee:	bf00      	nop
  }
  return ret;
 80023f0:	68fb      	ldr	r3, [r7, #12]
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3710      	adds	r7, #16
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop

080023fc <sths34pf80_block_data_update_set>:
  * @param  val      Block Data Update (BDU): output registers are not updated until LSB and MSB have been read).
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	460b      	mov	r3, r1
 8002406:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl1_t ctrl1;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8002408:	f107 0208 	add.w	r2, r7, #8
 800240c:	2301      	movs	r3, #1
 800240e:	2120      	movs	r1, #32
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff fdf1 	bl	8001ff8 <sths34pf80_read_reg>
 8002416:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10f      	bne.n	800243e <sths34pf80_block_data_update_set+0x42>
  {
    ctrl1.bdu = val;
 800241e:	78fb      	ldrb	r3, [r7, #3]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	b2da      	uxtb	r2, r3
 8002426:	7a3b      	ldrb	r3, [r7, #8]
 8002428:	f362 1304 	bfi	r3, r2, #4, #1
 800242c:	723b      	strb	r3, [r7, #8]
    ret = sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 800242e:	f107 0208 	add.w	r2, r7, #8
 8002432:	2301      	movs	r3, #1
 8002434:	2120      	movs	r1, #32
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff fdf6 	bl	8002028 <sths34pf80_write_reg>
 800243c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800243e:	68fb      	ldr	r3, [r7, #12]
}
 8002440:	4618      	mov	r0, r3
 8002442:	3710      	adds	r7, #16
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <sths34pf80_mem_bank_set>:
  * @param  val      MAIN_MEM_BANK, EMBED_FUNC_MEM_BANK, SENSOR_HUB_MEM_BANK, STRED_MEM_BANK,
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_mem_bank_set(stmdev_ctx_t *ctx, sths34pf80_mem_bank_t val)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	460b      	mov	r3, r1
 8002452:	70fb      	strb	r3, [r7, #3]
  sths34pf80_ctrl2_t ctrl2;
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL2, (uint8_t *)&ctrl2, 1);
 8002454:	f107 0208 	add.w	r2, r7, #8
 8002458:	2301      	movs	r3, #1
 800245a:	2121      	movs	r1, #33	; 0x21
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff fdcb 	bl	8001ff8 <sths34pf80_read_reg>
 8002462:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10f      	bne.n	800248a <sths34pf80_mem_bank_set+0x42>
  {
    ctrl2.func_cfg_access = ((uint8_t)val & 0x1);
 800246a:	78fb      	ldrb	r3, [r7, #3]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	b2da      	uxtb	r2, r3
 8002472:	7a3b      	ldrb	r3, [r7, #8]
 8002474:	f362 1304 	bfi	r3, r2, #4, #1
 8002478:	723b      	strb	r3, [r7, #8]
    ret = sths34pf80_write_reg(ctx, STHS34PF80_CTRL2, (uint8_t *)&ctrl2, 1);
 800247a:	f107 0208 	add.w	r2, r7, #8
 800247e:	2301      	movs	r3, #1
 8002480:	2121      	movs	r1, #33	; 0x21
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff fdd0 	bl	8002028 <sths34pf80_write_reg>
 8002488:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800248a:	68fb      	ldr	r3, [r7, #12]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <sths34pf80_tobject_raw_get>:
  * @param  val      Object temperature output register.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tobject_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_TOBJECT_L, &buff[0], 2);
 800249e:	f107 0208 	add.w	r2, r7, #8
 80024a2:	2302      	movs	r3, #2
 80024a4:	2126      	movs	r1, #38	; 0x26
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fda6 	bl	8001ff8 <sths34pf80_read_reg>
 80024ac:	60f8      	str	r0, [r7, #12]

  *val = (int16_t)buff[1];
 80024ae:	7a7b      	ldrb	r3, [r7, #9]
 80024b0:	b21a      	sxth	r2, r3
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024bc:	b29b      	uxth	r3, r3
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	7a3b      	ldrb	r3, [r7, #8]
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	4413      	add	r3, r2
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	b21a      	sxth	r2, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	801a      	strh	r2, [r3, #0]

  return ret;
 80024d0:	68fb      	ldr	r3, [r7, #12]
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <sths34pf80_tambient_raw_get>:
  * @param  val      Ambient temperature output register.
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_tambient_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b084      	sub	sp, #16
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
 80024e2:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = sths34pf80_read_reg(ctx, STHS34PF80_TAMBIENT_L, &buff[0], 2);
 80024e4:	f107 0208 	add.w	r2, r7, #8
 80024e8:	2302      	movs	r3, #2
 80024ea:	2128      	movs	r1, #40	; 0x28
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f7ff fd83 	bl	8001ff8 <sths34pf80_read_reg>
 80024f2:	60f8      	str	r0, [r7, #12]

  *val = (int16_t)buff[1];
 80024f4:	7a7b      	ldrb	r3, [r7, #9]
 80024f6:	b21a      	sxth	r2, r3
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002502:	b29b      	uxth	r3, r3
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	b29a      	uxth	r2, r3
 8002508:	7a3b      	ldrb	r3, [r7, #8]
 800250a:	b29b      	uxth	r3, r3
 800250c:	4413      	add	r3, r2
 800250e:	b29b      	uxth	r3, r3
 8002510:	b21a      	sxth	r2, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	801a      	strh	r2, [r3, #0]

  return ret;
 8002516:	68fb      	ldr	r3, [r7, #12]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <sths34pf80_func_cfg_write>:
  * @param  len      embedded register data len
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_func_cfg_write(stmdev_ctx_t *ctx, uint8_t addr, uint8_t *data, uint8_t len)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	461a      	mov	r2, r3
 800252c:	460b      	mov	r3, r1
 800252e:	72fb      	strb	r3, [r7, #11]
 8002530:	4613      	mov	r3, r2
 8002532:	72bb      	strb	r3, [r7, #10]
  sths34pf80_ctrl1_t ctrl1;
  uint8_t odr;
  sths34pf80_page_rw_t page_rw = {0};
 8002534:	2300      	movs	r3, #0
 8002536:	753b      	strb	r3, [r7, #20]
  int32_t ret;
  uint8_t i;

  /* Save current odr and enter PD mode */
  ret = sths34pf80_read_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 8002538:	f107 0218 	add.w	r2, r7, #24
 800253c:	2301      	movs	r3, #1
 800253e:	2120      	movs	r1, #32
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f7ff fd59 	bl	8001ff8 <sths34pf80_read_reg>
 8002546:	61f8      	str	r0, [r7, #28]
  odr = ctrl1.odr;
 8002548:	7e3b      	ldrb	r3, [r7, #24]
 800254a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800254e:	b2db      	uxtb	r3, r3
 8002550:	76bb      	strb	r3, [r7, #26]
  ctrl1.odr = 0;
 8002552:	7e3b      	ldrb	r3, [r7, #24]
 8002554:	f36f 0303 	bfc	r3, #0, #4
 8002558:	763b      	strb	r3, [r7, #24]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 800255a:	f107 0218 	add.w	r2, r7, #24
 800255e:	2301      	movs	r3, #1
 8002560:	2120      	movs	r1, #32
 8002562:	68f8      	ldr	r0, [r7, #12]
 8002564:	f7ff fd60 	bl	8002028 <sths34pf80_write_reg>
 8002568:	4602      	mov	r2, r0
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	4413      	add	r3, r2
 800256e:	61fb      	str	r3, [r7, #28]

  /* Enable access to embedded functions register */
  ret += sths34pf80_mem_bank_set(ctx, STHS34PF80_EMBED_FUNC_MEM_BANK);
 8002570:	2101      	movs	r1, #1
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff ff68 	bl	8002448 <sths34pf80_mem_bank_set>
 8002578:	4602      	mov	r2, r0
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	61fb      	str	r3, [r7, #28]

  /* Enable write mode */
  page_rw.func_cfg_write = 1;
 8002580:	7d3b      	ldrb	r3, [r7, #20]
 8002582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002586:	753b      	strb	r3, [r7, #20]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_PAGE_RW, (uint8_t *)&page_rw, 1);
 8002588:	f107 0214 	add.w	r2, r7, #20
 800258c:	2301      	movs	r3, #1
 800258e:	2111      	movs	r1, #17
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7ff fd49 	bl	8002028 <sths34pf80_write_reg>
 8002596:	4602      	mov	r2, r0
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	61fb      	str	r3, [r7, #28]

  /* Select register address (it will autoincrement when writing) */
  ret += sths34pf80_write_reg(ctx, STHS34PF80_FUNC_CFG_ADDR, &addr, 1);
 800259e:	f107 020b 	add.w	r2, r7, #11
 80025a2:	2301      	movs	r3, #1
 80025a4:	2108      	movs	r1, #8
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f7ff fd3e 	bl	8002028 <sths34pf80_write_reg>
 80025ac:	4602      	mov	r2, r0
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	4413      	add	r3, r2
 80025b2:	61fb      	str	r3, [r7, #28]

  for (i = 0; i < len; i++)
 80025b4:	2300      	movs	r3, #0
 80025b6:	76fb      	strb	r3, [r7, #27]
 80025b8:	e00e      	b.n	80025d8 <sths34pf80_func_cfg_write+0xb8>
  {
    /* Write data */
    ret += sths34pf80_write_reg(ctx, STHS34PF80_FUNC_CFG_DATA, &data[i], 1);
 80025ba:	7efb      	ldrb	r3, [r7, #27]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	441a      	add	r2, r3
 80025c0:	2301      	movs	r3, #1
 80025c2:	2109      	movs	r1, #9
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f7ff fd2f 	bl	8002028 <sths34pf80_write_reg>
 80025ca:	4602      	mov	r2, r0
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	4413      	add	r3, r2
 80025d0:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < len; i++)
 80025d2:	7efb      	ldrb	r3, [r7, #27]
 80025d4:	3301      	adds	r3, #1
 80025d6:	76fb      	strb	r3, [r7, #27]
 80025d8:	7efa      	ldrb	r2, [r7, #27]
 80025da:	7abb      	ldrb	r3, [r7, #10]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d3ec      	bcc.n	80025ba <sths34pf80_func_cfg_write+0x9a>
  }

  /* Disable write mode */
  page_rw.func_cfg_write = 0;
 80025e0:	7d3b      	ldrb	r3, [r7, #20]
 80025e2:	f36f 1386 	bfc	r3, #6, #1
 80025e6:	753b      	strb	r3, [r7, #20]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_PAGE_RW, (uint8_t *)&page_rw, 1);
 80025e8:	f107 0214 	add.w	r2, r7, #20
 80025ec:	2301      	movs	r3, #1
 80025ee:	2111      	movs	r1, #17
 80025f0:	68f8      	ldr	r0, [r7, #12]
 80025f2:	f7ff fd19 	bl	8002028 <sths34pf80_write_reg>
 80025f6:	4602      	mov	r2, r0
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	4413      	add	r3, r2
 80025fc:	61fb      	str	r3, [r7, #28]

  /* Disable access to embedded functions register */
  ret += sths34pf80_mem_bank_set(ctx, STHS34PF80_MAIN_MEM_BANK);
 80025fe:	2100      	movs	r1, #0
 8002600:	68f8      	ldr	r0, [r7, #12]
 8002602:	f7ff ff21 	bl	8002448 <sths34pf80_mem_bank_set>
 8002606:	4602      	mov	r2, r0
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	4413      	add	r3, r2
 800260c:	61fb      	str	r3, [r7, #28]

  /* Set saved odr back */
  ctrl1.odr = odr;
 800260e:	7ebb      	ldrb	r3, [r7, #26]
 8002610:	f003 030f 	and.w	r3, r3, #15
 8002614:	b2da      	uxtb	r2, r3
 8002616:	7e3b      	ldrb	r3, [r7, #24]
 8002618:	f362 0303 	bfi	r3, r2, #0, #4
 800261c:	763b      	strb	r3, [r7, #24]
  ret += sths34pf80_write_reg(ctx, STHS34PF80_CTRL1, (uint8_t *)&ctrl1, 1);
 800261e:	f107 0218 	add.w	r2, r7, #24
 8002622:	2301      	movs	r3, #1
 8002624:	2120      	movs	r1, #32
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f7ff fcfe 	bl	8002028 <sths34pf80_write_reg>
 800262c:	4602      	mov	r2, r0
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	4413      	add	r3, r2
 8002632:	61fb      	str	r3, [r7, #28]

  return ret;
 8002634:	69fb      	ldr	r3, [r7, #28]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}

0800263e <sths34pf80_reset_algo>:
  * @param  val      reset algo structure
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t sths34pf80_reset_algo(stmdev_ctx_t *ctx)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b084      	sub	sp, #16
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  uint8_t tmp;
  int32_t ret;

  tmp = 1;
 8002646:	2301      	movs	r3, #1
 8002648:	72fb      	strb	r3, [r7, #11]
  ret = sths34pf80_func_cfg_write(ctx, STHS34PF80_RESET_ALGO, &tmp, 1);
 800264a:	f107 020b 	add.w	r2, r7, #11
 800264e:	2301      	movs	r3, #1
 8002650:	212a      	movs	r1, #42	; 0x2a
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7ff ff64 	bl	8002520 <sths34pf80_func_cfg_write>
 8002658:	60f8      	str	r0, [r7, #12]

  return ret;
 800265a:	68fb      	ldr	r3, [r7, #12]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	4a04      	ldr	r2, [pc, #16]	; (8002684 <BSP_LED_Init+0x20>)
 8002672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002676:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	0800a764 	.word	0x0800a764

08002688 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b082      	sub	sp, #8
 800268c:	af00      	add	r7, sp, #0
 800268e:	4603      	mov	r3, r0
 8002690:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8002692:	79fb      	ldrb	r3, [r7, #7]
 8002694:	4a06      	ldr	r2, [pc, #24]	; (80026b0 <BSP_LED_On+0x28>)
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	2120      	movs	r1, #32
 800269c:	2201      	movs	r2, #1
 800269e:	4618      	mov	r0, r3
 80026a0:	f001 f828 	bl	80036f4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	2000002c 	.word	0x2000002c

080026b4 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	4a06      	ldr	r2, [pc, #24]	; (80026dc <BSP_LED_Off+0x28>)
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	2120      	movs	r1, #32
 80026c8:	2200      	movs	r2, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f001 f812 	bl	80036f4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	2000002c 	.word	0x2000002c

080026e0 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]
 80026ea:	4b1c      	ldr	r3, [pc, #112]	; (800275c <LED_USER_GPIO_Init+0x7c>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a1b      	ldr	r2, [pc, #108]	; (800275c <LED_USER_GPIO_Init+0x7c>)
 80026f0:	f043 0301 	orr.w	r3, r3, #1
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <LED_USER_GPIO_Init+0x7c>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002702:	f107 030c 	add.w	r3, r7, #12
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	609a      	str	r2, [r3, #8]
 800270e:	60da      	str	r2, [r3, #12]
 8002710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	607b      	str	r3, [r7, #4]
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <LED_USER_GPIO_Init+0x7c>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4a10      	ldr	r2, [pc, #64]	; (800275c <LED_USER_GPIO_Init+0x7c>)
 800271c:	f043 0301 	orr.w	r3, r3, #1
 8002720:	6313      	str	r3, [r2, #48]	; 0x30
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <LED_USER_GPIO_Init+0x7c>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	607b      	str	r3, [r7, #4]
 800272c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 800272e:	2200      	movs	r2, #0
 8002730:	2120      	movs	r1, #32
 8002732:	480b      	ldr	r0, [pc, #44]	; (8002760 <LED_USER_GPIO_Init+0x80>)
 8002734:	f000 ffde 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 8002738:	2320      	movs	r3, #32
 800273a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273c:	2301      	movs	r3, #1
 800273e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002740:	2300      	movs	r3, #0
 8002742:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002744:	2300      	movs	r3, #0
 8002746:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 8002748:	f107 030c 	add.w	r3, r7, #12
 800274c:	4619      	mov	r1, r3
 800274e:	4804      	ldr	r0, [pc, #16]	; (8002760 <LED_USER_GPIO_Init+0x80>)
 8002750:	f000 fd68 	bl	8003224 <HAL_GPIO_Init>

}
 8002754:	bf00      	nop
 8002756:	3720      	adds	r7, #32
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40023800 	.word	0x40023800
 8002760:	40020000 	.word	0x40020000

08002764 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8002772:	79fb      	ldrb	r3, [r7, #7]
 8002774:	2b01      	cmp	r3, #1
 8002776:	d903      	bls.n	8002780 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002778:	f06f 0301 	mvn.w	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	e025      	b.n	80027cc <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002780:	79fb      	ldrb	r3, [r7, #7]
 8002782:	79fa      	ldrb	r2, [r7, #7]
 8002784:	4914      	ldr	r1, [pc, #80]	; (80027d8 <BSP_COM_Init+0x74>)
 8002786:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800278a:	4814      	ldr	r0, [pc, #80]	; (80027dc <BSP_COM_Init+0x78>)
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4403      	add	r3, r0
 8002796:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8002798:	79fa      	ldrb	r2, [r7, #7]
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4a0e      	ldr	r2, [pc, #56]	; (80027dc <BSP_COM_Init+0x78>)
 80027a4:	4413      	add	r3, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 f848 	bl	800283c <USART2_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 80027ac:	79fa      	ldrb	r2, [r7, #7]
 80027ae:	4613      	mov	r3, r2
 80027b0:	00db      	lsls	r3, r3, #3
 80027b2:	4413      	add	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4a09      	ldr	r2, [pc, #36]	; (80027dc <BSP_COM_Init+0x78>)
 80027b8:	4413      	add	r3, r2
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f810 	bl	80027e0 <MX_USART2_UART_Init>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d002      	beq.n	80027cc <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80027c6:	f06f 0303 	mvn.w	r3, #3
 80027ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80027cc:	68fb      	ldr	r3, [r7, #12]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	20000030 	.word	0x20000030
 80027dc:	200002b0 	.word	0x200002b0

080027e0 <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80027e8:	2300      	movs	r3, #0
 80027ea:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a12      	ldr	r2, [pc, #72]	; (8002838 <MX_USART2_UART_Init+0x58>)
 80027f0:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027f8:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	220c      	movs	r2, #12
 8002810:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f003 fddc 	bl	80063dc <HAL_UART_Init>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800282e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002830:	4618      	mov	r0, r3
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40004400 	.word	0x40004400

0800283c <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b08a      	sub	sp, #40	; 0x28
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002844:	2300      	movs	r3, #0
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <USART2_MspInit+0x88>)
 800284a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284c:	4a1d      	ldr	r2, [pc, #116]	; (80028c4 <USART2_MspInit+0x88>)
 800284e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002852:	6413      	str	r3, [r2, #64]	; 0x40
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <USART2_MspInit+0x88>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285c:	613b      	str	r3, [r7, #16]
 800285e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	4b17      	ldr	r3, [pc, #92]	; (80028c4 <USART2_MspInit+0x88>)
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	4a16      	ldr	r2, [pc, #88]	; (80028c4 <USART2_MspInit+0x88>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	6313      	str	r3, [r2, #48]	; 0x30
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <USART2_MspInit+0x88>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 800287c:	2304      	movs	r3, #4
 800287e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 800288c:	2307      	movs	r3, #7
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	4619      	mov	r1, r3
 8002896:	480c      	ldr	r0, [pc, #48]	; (80028c8 <USART2_MspInit+0x8c>)
 8002898:	f000 fcc4 	bl	8003224 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 800289c:	2308      	movs	r3, #8
 800289e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028a0:	2302      	movs	r3, #2
 80028a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a8:	2300      	movs	r3, #0
 80028aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 80028ac:	2307      	movs	r3, #7
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 80028b0:	f107 0314 	add.w	r3, r7, #20
 80028b4:	4619      	mov	r1, r3
 80028b6:	4804      	ldr	r0, [pc, #16]	; (80028c8 <USART2_MspInit+0x8c>)
 80028b8:	f000 fcb4 	bl	8003224 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 80028bc:	bf00      	nop
 80028be:	3728      	adds	r7, #40	; 0x28
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40020000 	.word	0x40020000

080028cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028d0:	4b0e      	ldr	r3, [pc, #56]	; (800290c <HAL_Init+0x40>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0d      	ldr	r2, [pc, #52]	; (800290c <HAL_Init+0x40>)
 80028d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028dc:	4b0b      	ldr	r3, [pc, #44]	; (800290c <HAL_Init+0x40>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a0a      	ldr	r2, [pc, #40]	; (800290c <HAL_Init+0x40>)
 80028e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <HAL_Init+0x40>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a07      	ldr	r2, [pc, #28]	; (800290c <HAL_Init+0x40>)
 80028ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028f4:	2003      	movs	r0, #3
 80028f6:	f000 fbb1 	bl	800305c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028fa:	2000      	movs	r0, #0
 80028fc:	f000 f808 	bl	8002910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002900:	f7fe fc40 	bl	8001184 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40023c00 	.word	0x40023c00

08002910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002918:	4b12      	ldr	r3, [pc, #72]	; (8002964 <HAL_InitTick+0x54>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b12      	ldr	r3, [pc, #72]	; (8002968 <HAL_InitTick+0x58>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	4619      	mov	r1, r3
 8002922:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002926:	fbb3 f3f1 	udiv	r3, r3, r1
 800292a:	fbb2 f3f3 	udiv	r3, r2, r3
 800292e:	4618      	mov	r0, r3
 8002930:	f000 fbc9 	bl	80030c6 <HAL_SYSTICK_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e00e      	b.n	800295c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d80a      	bhi.n	800295a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002944:	2200      	movs	r2, #0
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	f04f 30ff 	mov.w	r0, #4294967295
 800294c:	f000 fb91 	bl	8003072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002950:	4a06      	ldr	r2, [pc, #24]	; (800296c <HAL_InitTick+0x5c>)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	e000      	b.n	800295c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
}
 800295c:	4618      	mov	r0, r3
 800295e:	3708      	adds	r7, #8
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000004 	.word	0x20000004
 8002968:	20000038 	.word	0x20000038
 800296c:	20000034 	.word	0x20000034

08002970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_IncTick+0x20>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	461a      	mov	r2, r3
 800297a:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_IncTick+0x24>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4413      	add	r3, r2
 8002980:	4a04      	ldr	r2, [pc, #16]	; (8002994 <HAL_IncTick+0x24>)
 8002982:	6013      	str	r3, [r2, #0]
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	20000038 	.word	0x20000038
 8002994:	200002f8 	.word	0x200002f8

08002998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  return uwTick;
 800299c:	4b03      	ldr	r3, [pc, #12]	; (80029ac <HAL_GetTick+0x14>)
 800299e:	681b      	ldr	r3, [r3, #0]
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	200002f8 	.word	0x200002f8

080029b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029b8:	f7ff ffee 	bl	8002998 <HAL_GetTick>
 80029bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029c8:	d005      	beq.n	80029d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ca:	4b0a      	ldr	r3, [pc, #40]	; (80029f4 <HAL_Delay+0x44>)
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4413      	add	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029d6:	bf00      	nop
 80029d8:	f7ff ffde 	bl	8002998 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d8f7      	bhi.n	80029d8 <HAL_Delay+0x28>
  {
  }
}
 80029e8:	bf00      	nop
 80029ea:	bf00      	nop
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	20000038 	.word	0x20000038

080029f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e033      	b.n	8002a76 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d109      	bne.n	8002a2a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	f7fe fbdc 	bl	80011d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d118      	bne.n	8002a68 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a3e:	f023 0302 	bic.w	r3, r3, #2
 8002a42:	f043 0202 	orr.w	r2, r3, #2
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f93a 	bl	8002cc4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	f023 0303 	bic.w	r3, r3, #3
 8002a5e:	f043 0201 	orr.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
 8002a66:	e001      	b.n	8002a6c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x1c>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e105      	b.n	8002ca8 <HAL_ADC_ConfigChannel+0x228>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	d925      	bls.n	8002af8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68d9      	ldr	r1, [r3, #12]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	3b1e      	subs	r3, #30
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	400a      	ands	r2, r1
 8002ad0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68d9      	ldr	r1, [r3, #12]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4403      	add	r3, r0
 8002aea:	3b1e      	subs	r3, #30
 8002aec:	409a      	lsls	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	e022      	b.n	8002b3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6919      	ldr	r1, [r3, #16]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	400a      	ands	r2, r1
 8002b1a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6919      	ldr	r1, [r3, #16]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4403      	add	r3, r0
 8002b34:	409a      	lsls	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d824      	bhi.n	8002b90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	3b05      	subs	r3, #5
 8002b58:	221f      	movs	r2, #31
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	400a      	ands	r2, r1
 8002b66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	4618      	mov	r0, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b05      	subs	r3, #5
 8002b82:	fa00 f203 	lsl.w	r2, r0, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b8e:	e04c      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	d824      	bhi.n	8002be2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b23      	subs	r3, #35	; 0x23
 8002baa:	221f      	movs	r2, #31
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b23      	subs	r3, #35	; 0x23
 8002bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	631a      	str	r2, [r3, #48]	; 0x30
 8002be0:	e023      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3b41      	subs	r3, #65	; 0x41
 8002bf4:	221f      	movs	r2, #31
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	400a      	ands	r2, r1
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4618      	mov	r0, r3
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3b41      	subs	r3, #65	; 0x41
 8002c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2a:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <HAL_ADC_ConfigChannel+0x234>)
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <HAL_ADC_ConfigChannel+0x238>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d109      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x1cc>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b12      	cmp	r3, #18
 8002c3e:	d105      	bne.n	8002c4c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a19      	ldr	r2, [pc, #100]	; (8002cb8 <HAL_ADC_ConfigChannel+0x238>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d123      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x21e>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b10      	cmp	r3, #16
 8002c5c:	d003      	beq.n	8002c66 <HAL_ADC_ConfigChannel+0x1e6>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2b11      	cmp	r3, #17
 8002c64:	d11b      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b10      	cmp	r3, #16
 8002c78:	d111      	bne.n	8002c9e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <HAL_ADC_ConfigChannel+0x23c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a10      	ldr	r2, [pc, #64]	; (8002cc0 <HAL_ADC_ConfigChannel+0x240>)
 8002c80:	fba2 2303 	umull	r2, r3, r2, r3
 8002c84:	0c9a      	lsrs	r2, r3, #18
 8002c86:	4613      	mov	r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	4413      	add	r3, r2
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c90:	e002      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f9      	bne.n	8002c92 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002ca6:	2300      	movs	r3, #0
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	40012300 	.word	0x40012300
 8002cb8:	40012000 	.word	0x40012000
 8002cbc:	20000004 	.word	0x20000004
 8002cc0:	431bde83 	.word	0x431bde83

08002cc4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ccc:	4b79      	ldr	r3, [pc, #484]	; (8002eb4 <ADC_Init+0x1f0>)
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	021a      	lsls	r2, r3, #8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6899      	ldr	r1, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	4a58      	ldr	r2, [pc, #352]	; (8002eb8 <ADC_Init+0x1f4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d022      	beq.n	8002da2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6899      	ldr	r1, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6899      	ldr	r1, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	e00f      	b.n	8002dc2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dc0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0202 	bic.w	r2, r2, #2
 8002dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6899      	ldr	r1, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	7e1b      	ldrb	r3, [r3, #24]
 8002ddc:	005a      	lsls	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01b      	beq.n	8002e28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dfe:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	035a      	lsls	r2, r3, #13
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	e007      	b.n	8002e38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e36:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	051a      	lsls	r2, r3, #20
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6899      	ldr	r1, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e7a:	025a      	lsls	r2, r3, #9
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	029a      	lsls	r2, r3, #10
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]
}
 8002ea8:	bf00      	nop
 8002eaa:	3714      	adds	r7, #20
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40012300 	.word	0x40012300
 8002eb8:	0f000001 	.word	0x0f000001

08002ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	; (8002f00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ed8:	4013      	ands	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ee4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ee8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eee:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <__NVIC_SetPriorityGrouping+0x44>)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	60d3      	str	r3, [r2, #12]
}
 8002ef4:	bf00      	nop
 8002ef6:	3714      	adds	r7, #20
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f08:	4b04      	ldr	r3, [pc, #16]	; (8002f1c <__NVIC_GetPriorityGrouping+0x18>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	0a1b      	lsrs	r3, r3, #8
 8002f0e:	f003 0307 	and.w	r3, r3, #7
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr
 8002f1c:	e000ed00 	.word	0xe000ed00

08002f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	db0b      	blt.n	8002f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f32:	79fb      	ldrb	r3, [r7, #7]
 8002f34:	f003 021f 	and.w	r2, r3, #31
 8002f38:	4907      	ldr	r1, [pc, #28]	; (8002f58 <__NVIC_EnableIRQ+0x38>)
 8002f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3e:	095b      	lsrs	r3, r3, #5
 8002f40:	2001      	movs	r0, #1
 8002f42:	fa00 f202 	lsl.w	r2, r0, r2
 8002f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	e000e100 	.word	0xe000e100

08002f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	4603      	mov	r3, r0
 8002f64:	6039      	str	r1, [r7, #0]
 8002f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	db0a      	blt.n	8002f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	490c      	ldr	r1, [pc, #48]	; (8002fa8 <__NVIC_SetPriority+0x4c>)
 8002f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f7a:	0112      	lsls	r2, r2, #4
 8002f7c:	b2d2      	uxtb	r2, r2
 8002f7e:	440b      	add	r3, r1
 8002f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f84:	e00a      	b.n	8002f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	b2da      	uxtb	r2, r3
 8002f8a:	4908      	ldr	r1, [pc, #32]	; (8002fac <__NVIC_SetPriority+0x50>)
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	3b04      	subs	r3, #4
 8002f94:	0112      	lsls	r2, r2, #4
 8002f96:	b2d2      	uxtb	r2, r2
 8002f98:	440b      	add	r3, r1
 8002f9a:	761a      	strb	r2, [r3, #24]
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	e000e100 	.word	0xe000e100
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b089      	sub	sp, #36	; 0x24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f1c3 0307 	rsb	r3, r3, #7
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	bf28      	it	cs
 8002fce:	2304      	movcs	r3, #4
 8002fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d902      	bls.n	8002fe0 <NVIC_EncodePriority+0x30>
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3b03      	subs	r3, #3
 8002fde:	e000      	b.n	8002fe2 <NVIC_EncodePriority+0x32>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	fa02 f303 	lsl.w	r3, r2, r3
 8002fee:	43da      	mvns	r2, r3
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	401a      	ands	r2, r3
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	43d9      	mvns	r1, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003008:	4313      	orrs	r3, r2
         );
}
 800300a:	4618      	mov	r0, r3
 800300c:	3724      	adds	r7, #36	; 0x24
 800300e:	46bd      	mov	sp, r7
 8003010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003014:	4770      	bx	lr
	...

08003018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	3b01      	subs	r3, #1
 8003024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003028:	d301      	bcc.n	800302e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800302a:	2301      	movs	r3, #1
 800302c:	e00f      	b.n	800304e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800302e:	4a0a      	ldr	r2, [pc, #40]	; (8003058 <SysTick_Config+0x40>)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	3b01      	subs	r3, #1
 8003034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003036:	210f      	movs	r1, #15
 8003038:	f04f 30ff 	mov.w	r0, #4294967295
 800303c:	f7ff ff8e 	bl	8002f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003040:	4b05      	ldr	r3, [pc, #20]	; (8003058 <SysTick_Config+0x40>)
 8003042:	2200      	movs	r2, #0
 8003044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003046:	4b04      	ldr	r3, [pc, #16]	; (8003058 <SysTick_Config+0x40>)
 8003048:	2207      	movs	r2, #7
 800304a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	e000e010 	.word	0xe000e010

0800305c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f7ff ff29 	bl	8002ebc <__NVIC_SetPriorityGrouping>
}
 800306a:	bf00      	nop
 800306c:	3708      	adds	r7, #8
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	4603      	mov	r3, r0
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
 800307e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003084:	f7ff ff3e 	bl	8002f04 <__NVIC_GetPriorityGrouping>
 8003088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	6978      	ldr	r0, [r7, #20]
 8003090:	f7ff ff8e 	bl	8002fb0 <NVIC_EncodePriority>
 8003094:	4602      	mov	r2, r0
 8003096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800309a:	4611      	mov	r1, r2
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff ff5d 	bl	8002f5c <__NVIC_SetPriority>
}
 80030a2:	bf00      	nop
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b082      	sub	sp, #8
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	4603      	mov	r3, r0
 80030b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f7ff ff31 	bl	8002f20 <__NVIC_EnableIRQ>
}
 80030be:	bf00      	nop
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ffa2 	bl	8003018 <SysTick_Config>
 80030d4:	4603      	mov	r3, r0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b082      	sub	sp, #8
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e00e      	b.n	800310e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	795b      	ldrb	r3, [r3, #5]
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d105      	bne.n	8003106 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7fe f8ab 	bl	800125c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	3708      	adds	r7, #8
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b086      	sub	sp, #24
 800311a:	af00      	add	r7, sp, #0
 800311c:	60f8      	str	r0, [r7, #12]
 800311e:	60b9      	str	r1, [r7, #8]
 8003120:	607a      	str	r2, [r7, #4]
 8003122:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_DMA_Start_IT+0x26>
 8003138:	2302      	movs	r3, #2
 800313a:	e040      	b.n	80031be <HAL_DMA_Start_IT+0xa8>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	d12f      	bne.n	80031b0 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	68b9      	ldr	r1, [r7, #8]
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f82e 	bl	80031c6 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800316e:	223f      	movs	r2, #63	; 0x3f
 8003170:	409a      	lsls	r2, r3
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f042 0216 	orr.w	r2, r2, #22
 8003184:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d007      	beq.n	800319e <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f042 0208 	orr.w	r2, r2, #8
 800319c:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0201 	orr.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	e005      	b.n	80031bc <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80031b8:	2302      	movs	r3, #2
 80031ba:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80031bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	60f8      	str	r0, [r7, #12]
 80031ce:	60b9      	str	r1, [r7, #8]
 80031d0:	607a      	str	r2, [r7, #4]
 80031d2:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031e2:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b40      	cmp	r3, #64	; 0x40
 80031f2:	d108      	bne.n	8003206 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003204:	e007      	b.n	8003216 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	60da      	str	r2, [r3, #12]
}
 8003216:	bf00      	nop
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
	...

08003224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003224:	b480      	push	{r7}
 8003226:	b089      	sub	sp, #36	; 0x24
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003236:	2300      	movs	r3, #0
 8003238:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323a:	2300      	movs	r3, #0
 800323c:	61fb      	str	r3, [r7, #28]
 800323e:	e159      	b.n	80034f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003240:	2201      	movs	r2, #1
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4013      	ands	r3, r2
 8003252:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	429a      	cmp	r2, r3
 800325a:	f040 8148 	bne.w	80034ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b01      	cmp	r3, #1
 8003268:	d005      	beq.n	8003276 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003272:	2b02      	cmp	r3, #2
 8003274:	d130      	bne.n	80032d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800327c:	69fb      	ldr	r3, [r7, #28]
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	2203      	movs	r2, #3
 8003282:	fa02 f303 	lsl.w	r3, r2, r3
 8003286:	43db      	mvns	r3, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4013      	ands	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	fa02 f303 	lsl.w	r3, r2, r3
 800329a:	69ba      	ldr	r2, [r7, #24]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032ac:	2201      	movs	r2, #1
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fa02 f303 	lsl.w	r3, r2, r3
 80032b4:	43db      	mvns	r3, r3
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	4013      	ands	r3, r2
 80032ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	091b      	lsrs	r3, r3, #4
 80032c2:	f003 0201 	and.w	r2, r3, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	69ba      	ldr	r2, [r7, #24]
 80032d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 0303 	and.w	r3, r3, #3
 80032e0:	2b03      	cmp	r3, #3
 80032e2:	d017      	beq.n	8003314 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 0303 	and.w	r3, r3, #3
 800331c:	2b02      	cmp	r3, #2
 800331e:	d123      	bne.n	8003368 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	08da      	lsrs	r2, r3, #3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	3208      	adds	r2, #8
 8003328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800332c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	220f      	movs	r2, #15
 8003338:	fa02 f303 	lsl.w	r3, r2, r3
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0307 	and.w	r3, r3, #7
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4313      	orrs	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	08da      	lsrs	r2, r3, #3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	3208      	adds	r2, #8
 8003362:	69b9      	ldr	r1, [r7, #24]
 8003364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	2203      	movs	r2, #3
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 0203 	and.w	r2, r3, #3
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a2 	beq.w	80034ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033aa:	2300      	movs	r3, #0
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	4b57      	ldr	r3, [pc, #348]	; (800350c <HAL_GPIO_Init+0x2e8>)
 80033b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b2:	4a56      	ldr	r2, [pc, #344]	; (800350c <HAL_GPIO_Init+0x2e8>)
 80033b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033b8:	6453      	str	r3, [r2, #68]	; 0x44
 80033ba:	4b54      	ldr	r3, [pc, #336]	; (800350c <HAL_GPIO_Init+0x2e8>)
 80033bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c2:	60fb      	str	r3, [r7, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033c6:	4a52      	ldr	r2, [pc, #328]	; (8003510 <HAL_GPIO_Init+0x2ec>)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	3302      	adds	r3, #2
 80033ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	220f      	movs	r2, #15
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a49      	ldr	r2, [pc, #292]	; (8003514 <HAL_GPIO_Init+0x2f0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d019      	beq.n	8003426 <HAL_GPIO_Init+0x202>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a48      	ldr	r2, [pc, #288]	; (8003518 <HAL_GPIO_Init+0x2f4>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d013      	beq.n	8003422 <HAL_GPIO_Init+0x1fe>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a47      	ldr	r2, [pc, #284]	; (800351c <HAL_GPIO_Init+0x2f8>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00d      	beq.n	800341e <HAL_GPIO_Init+0x1fa>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a46      	ldr	r2, [pc, #280]	; (8003520 <HAL_GPIO_Init+0x2fc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d007      	beq.n	800341a <HAL_GPIO_Init+0x1f6>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	4a45      	ldr	r2, [pc, #276]	; (8003524 <HAL_GPIO_Init+0x300>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d101      	bne.n	8003416 <HAL_GPIO_Init+0x1f2>
 8003412:	2304      	movs	r3, #4
 8003414:	e008      	b.n	8003428 <HAL_GPIO_Init+0x204>
 8003416:	2307      	movs	r3, #7
 8003418:	e006      	b.n	8003428 <HAL_GPIO_Init+0x204>
 800341a:	2303      	movs	r3, #3
 800341c:	e004      	b.n	8003428 <HAL_GPIO_Init+0x204>
 800341e:	2302      	movs	r3, #2
 8003420:	e002      	b.n	8003428 <HAL_GPIO_Init+0x204>
 8003422:	2301      	movs	r3, #1
 8003424:	e000      	b.n	8003428 <HAL_GPIO_Init+0x204>
 8003426:	2300      	movs	r3, #0
 8003428:	69fa      	ldr	r2, [r7, #28]
 800342a:	f002 0203 	and.w	r2, r2, #3
 800342e:	0092      	lsls	r2, r2, #2
 8003430:	4093      	lsls	r3, r2
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003438:	4935      	ldr	r1, [pc, #212]	; (8003510 <HAL_GPIO_Init+0x2ec>)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	089b      	lsrs	r3, r3, #2
 800343e:	3302      	adds	r3, #2
 8003440:	69ba      	ldr	r2, [r7, #24]
 8003442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003446:	4b38      	ldr	r3, [pc, #224]	; (8003528 <HAL_GPIO_Init+0x304>)
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800346a:	4a2f      	ldr	r2, [pc, #188]	; (8003528 <HAL_GPIO_Init+0x304>)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003470:	4b2d      	ldr	r3, [pc, #180]	; (8003528 <HAL_GPIO_Init+0x304>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003494:	4a24      	ldr	r2, [pc, #144]	; (8003528 <HAL_GPIO_Init+0x304>)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800349a:	4b23      	ldr	r3, [pc, #140]	; (8003528 <HAL_GPIO_Init+0x304>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034a0:	693b      	ldr	r3, [r7, #16]
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d003      	beq.n	80034be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034be:	4a1a      	ldr	r2, [pc, #104]	; (8003528 <HAL_GPIO_Init+0x304>)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034c4:	4b18      	ldr	r3, [pc, #96]	; (8003528 <HAL_GPIO_Init+0x304>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	43db      	mvns	r3, r3
 80034ce:	69ba      	ldr	r2, [r7, #24]
 80034d0:	4013      	ands	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d003      	beq.n	80034e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80034e0:	69ba      	ldr	r2, [r7, #24]
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034e8:	4a0f      	ldr	r2, [pc, #60]	; (8003528 <HAL_GPIO_Init+0x304>)
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	3301      	adds	r3, #1
 80034f2:	61fb      	str	r3, [r7, #28]
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	2b0f      	cmp	r3, #15
 80034f8:	f67f aea2 	bls.w	8003240 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	3724      	adds	r7, #36	; 0x24
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	40023800 	.word	0x40023800
 8003510:	40013800 	.word	0x40013800
 8003514:	40020000 	.word	0x40020000
 8003518:	40020400 	.word	0x40020400
 800351c:	40020800 	.word	0x40020800
 8003520:	40020c00 	.word	0x40020c00
 8003524:	40021000 	.word	0x40021000
 8003528:	40013c00 	.word	0x40013c00

0800352c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800352c:	b480      	push	{r7}
 800352e:	b087      	sub	sp, #28
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800353e:	2300      	movs	r3, #0
 8003540:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003542:	2300      	movs	r3, #0
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e0bb      	b.n	80036c0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003548:	2201      	movs	r2, #1
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4013      	ands	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800355a:	68fa      	ldr	r2, [r7, #12]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	429a      	cmp	r2, r3
 8003560:	f040 80ab 	bne.w	80036ba <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003564:	4a5c      	ldr	r2, [pc, #368]	; (80036d8 <HAL_GPIO_DeInit+0x1ac>)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	089b      	lsrs	r3, r3, #2
 800356a:	3302      	adds	r3, #2
 800356c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003570:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 0303 	and.w	r3, r3, #3
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	220f      	movs	r2, #15
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	4013      	ands	r3, r2
 8003584:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a54      	ldr	r2, [pc, #336]	; (80036dc <HAL_GPIO_DeInit+0x1b0>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d019      	beq.n	80035c2 <HAL_GPIO_DeInit+0x96>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a53      	ldr	r2, [pc, #332]	; (80036e0 <HAL_GPIO_DeInit+0x1b4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d013      	beq.n	80035be <HAL_GPIO_DeInit+0x92>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a52      	ldr	r2, [pc, #328]	; (80036e4 <HAL_GPIO_DeInit+0x1b8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00d      	beq.n	80035ba <HAL_GPIO_DeInit+0x8e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a51      	ldr	r2, [pc, #324]	; (80036e8 <HAL_GPIO_DeInit+0x1bc>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d007      	beq.n	80035b6 <HAL_GPIO_DeInit+0x8a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a50      	ldr	r2, [pc, #320]	; (80036ec <HAL_GPIO_DeInit+0x1c0>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d101      	bne.n	80035b2 <HAL_GPIO_DeInit+0x86>
 80035ae:	2304      	movs	r3, #4
 80035b0:	e008      	b.n	80035c4 <HAL_GPIO_DeInit+0x98>
 80035b2:	2307      	movs	r3, #7
 80035b4:	e006      	b.n	80035c4 <HAL_GPIO_DeInit+0x98>
 80035b6:	2303      	movs	r3, #3
 80035b8:	e004      	b.n	80035c4 <HAL_GPIO_DeInit+0x98>
 80035ba:	2302      	movs	r3, #2
 80035bc:	e002      	b.n	80035c4 <HAL_GPIO_DeInit+0x98>
 80035be:	2301      	movs	r3, #1
 80035c0:	e000      	b.n	80035c4 <HAL_GPIO_DeInit+0x98>
 80035c2:	2300      	movs	r3, #0
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	f002 0203 	and.w	r2, r2, #3
 80035ca:	0092      	lsls	r2, r2, #2
 80035cc:	4093      	lsls	r3, r2
 80035ce:	68ba      	ldr	r2, [r7, #8]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d132      	bne.n	800363a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80035d4:	4b46      	ldr	r3, [pc, #280]	; (80036f0 <HAL_GPIO_DeInit+0x1c4>)
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	43db      	mvns	r3, r3
 80035dc:	4944      	ldr	r1, [pc, #272]	; (80036f0 <HAL_GPIO_DeInit+0x1c4>)
 80035de:	4013      	ands	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80035e2:	4b43      	ldr	r3, [pc, #268]	; (80036f0 <HAL_GPIO_DeInit+0x1c4>)
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	4941      	ldr	r1, [pc, #260]	; (80036f0 <HAL_GPIO_DeInit+0x1c4>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80035f0:	4b3f      	ldr	r3, [pc, #252]	; (80036f0 <HAL_GPIO_DeInit+0x1c4>)
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	493d      	ldr	r1, [pc, #244]	; (80036f0 <HAL_GPIO_DeInit+0x1c4>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80035fe:	4b3c      	ldr	r3, [pc, #240]	; (80036f0 <HAL_GPIO_DeInit+0x1c4>)
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	43db      	mvns	r3, r3
 8003606:	493a      	ldr	r1, [pc, #232]	; (80036f0 <HAL_GPIO_DeInit+0x1c4>)
 8003608:	4013      	ands	r3, r2
 800360a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f003 0303 	and.w	r3, r3, #3
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	220f      	movs	r2, #15
 8003616:	fa02 f303 	lsl.w	r3, r2, r3
 800361a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800361c:	4a2e      	ldr	r2, [pc, #184]	; (80036d8 <HAL_GPIO_DeInit+0x1ac>)
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	089b      	lsrs	r3, r3, #2
 8003622:	3302      	adds	r3, #2
 8003624:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	43da      	mvns	r2, r3
 800362c:	482a      	ldr	r0, [pc, #168]	; (80036d8 <HAL_GPIO_DeInit+0x1ac>)
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	089b      	lsrs	r3, r3, #2
 8003632:	400a      	ands	r2, r1
 8003634:	3302      	adds	r3, #2
 8003636:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	2103      	movs	r1, #3
 8003644:	fa01 f303 	lsl.w	r3, r1, r3
 8003648:	43db      	mvns	r3, r3
 800364a:	401a      	ands	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	08da      	lsrs	r2, r3, #3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3208      	adds	r2, #8
 8003658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	220f      	movs	r2, #15
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	697a      	ldr	r2, [r7, #20]
 800366e:	08d2      	lsrs	r2, r2, #3
 8003670:	4019      	ands	r1, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3208      	adds	r2, #8
 8003676:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	005b      	lsls	r3, r3, #1
 8003682:	2103      	movs	r1, #3
 8003684:	fa01 f303 	lsl.w	r3, r1, r3
 8003688:	43db      	mvns	r3, r3
 800368a:	401a      	ands	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685a      	ldr	r2, [r3, #4]
 8003694:	2101      	movs	r1, #1
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	401a      	ands	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	2103      	movs	r1, #3
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	43db      	mvns	r3, r3
 80036b4:	401a      	ands	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	3301      	adds	r3, #1
 80036be:	617b      	str	r3, [r7, #20]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	2b0f      	cmp	r3, #15
 80036c4:	f67f af40 	bls.w	8003548 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	40013800 	.word	0x40013800
 80036dc:	40020000 	.word	0x40020000
 80036e0:	40020400 	.word	0x40020400
 80036e4:	40020800 	.word	0x40020800
 80036e8:	40020c00 	.word	0x40020c00
 80036ec:	40021000 	.word	0x40021000
 80036f0:	40013c00 	.word	0x40013c00

080036f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
 8003700:	4613      	mov	r3, r2
 8003702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003704:	787b      	ldrb	r3, [r7, #1]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003710:	e003      	b.n	800371a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003712:	887b      	ldrh	r3, [r7, #2]
 8003714:	041a      	lsls	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	619a      	str	r2, [r3, #24]
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr

08003726 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003726:	b480      	push	{r7}
 8003728:	b085      	sub	sp, #20
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
 800372e:	460b      	mov	r3, r1
 8003730:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003738:	887a      	ldrh	r2, [r7, #2]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4013      	ands	r3, r2
 800373e:	041a      	lsls	r2, r3, #16
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	43d9      	mvns	r1, r3
 8003744:	887b      	ldrh	r3, [r7, #2]
 8003746:	400b      	ands	r3, r1
 8003748:	431a      	orrs	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	619a      	str	r2, [r3, #24]
}
 800374e:	bf00      	nop
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e12b      	b.n	80039c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd fd8c 	bl	80012a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	; 0x24
 800378c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037c0:	f001 fcaa 	bl	8005118 <HAL_RCC_GetPCLK1Freq>
 80037c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	4a81      	ldr	r2, [pc, #516]	; (80039d0 <HAL_I2C_Init+0x274>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d807      	bhi.n	80037e0 <HAL_I2C_Init+0x84>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a80      	ldr	r2, [pc, #512]	; (80039d4 <HAL_I2C_Init+0x278>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	bf94      	ite	ls
 80037d8:	2301      	movls	r3, #1
 80037da:	2300      	movhi	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e006      	b.n	80037ee <HAL_I2C_Init+0x92>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4a7d      	ldr	r2, [pc, #500]	; (80039d8 <HAL_I2C_Init+0x27c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	bf94      	ite	ls
 80037e8:	2301      	movls	r3, #1
 80037ea:	2300      	movhi	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d001      	beq.n	80037f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e0e7      	b.n	80039c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4a78      	ldr	r2, [pc, #480]	; (80039dc <HAL_I2C_Init+0x280>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	0c9b      	lsrs	r3, r3, #18
 8003800:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	430a      	orrs	r2, r1
 8003814:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	4a6a      	ldr	r2, [pc, #424]	; (80039d0 <HAL_I2C_Init+0x274>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d802      	bhi.n	8003830 <HAL_I2C_Init+0xd4>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	3301      	adds	r3, #1
 800382e:	e009      	b.n	8003844 <HAL_I2C_Init+0xe8>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	4a69      	ldr	r2, [pc, #420]	; (80039e0 <HAL_I2C_Init+0x284>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	099b      	lsrs	r3, r3, #6
 8003842:	3301      	adds	r3, #1
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	430b      	orrs	r3, r1
 800384a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003856:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	495c      	ldr	r1, [pc, #368]	; (80039d0 <HAL_I2C_Init+0x274>)
 8003860:	428b      	cmp	r3, r1
 8003862:	d819      	bhi.n	8003898 <HAL_I2C_Init+0x13c>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1e59      	subs	r1, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003872:	1c59      	adds	r1, r3, #1
 8003874:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003878:	400b      	ands	r3, r1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <HAL_I2C_Init+0x138>
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1e59      	subs	r1, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	fbb1 f3f3 	udiv	r3, r1, r3
 800388c:	3301      	adds	r3, #1
 800388e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003892:	e051      	b.n	8003938 <HAL_I2C_Init+0x1dc>
 8003894:	2304      	movs	r3, #4
 8003896:	e04f      	b.n	8003938 <HAL_I2C_Init+0x1dc>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d111      	bne.n	80038c4 <HAL_I2C_Init+0x168>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1e58      	subs	r0, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6859      	ldr	r1, [r3, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	440b      	add	r3, r1
 80038ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf0c      	ite	eq
 80038bc:	2301      	moveq	r3, #1
 80038be:	2300      	movne	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	e012      	b.n	80038ea <HAL_I2C_Init+0x18e>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1e58      	subs	r0, r3, #1
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6859      	ldr	r1, [r3, #4]
 80038cc:	460b      	mov	r3, r1
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	0099      	lsls	r1, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038da:	3301      	adds	r3, #1
 80038dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	bf0c      	ite	eq
 80038e4:	2301      	moveq	r3, #1
 80038e6:	2300      	movne	r3, #0
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d001      	beq.n	80038f2 <HAL_I2C_Init+0x196>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e022      	b.n	8003938 <HAL_I2C_Init+0x1dc>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10e      	bne.n	8003918 <HAL_I2C_Init+0x1bc>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1e58      	subs	r0, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6859      	ldr	r1, [r3, #4]
 8003902:	460b      	mov	r3, r1
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	440b      	add	r3, r1
 8003908:	fbb0 f3f3 	udiv	r3, r0, r3
 800390c:	3301      	adds	r3, #1
 800390e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003916:	e00f      	b.n	8003938 <HAL_I2C_Init+0x1dc>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1e58      	subs	r0, r3, #1
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	0099      	lsls	r1, r3, #2
 8003928:	440b      	add	r3, r1
 800392a:	fbb0 f3f3 	udiv	r3, r0, r3
 800392e:	3301      	adds	r3, #1
 8003930:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003934:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003938:	6879      	ldr	r1, [r7, #4]
 800393a:	6809      	ldr	r1, [r1, #0]
 800393c:	4313      	orrs	r3, r2
 800393e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69da      	ldr	r2, [r3, #28]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003966:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6911      	ldr	r1, [r2, #16]
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68d2      	ldr	r2, [r2, #12]
 8003972:	4311      	orrs	r1, r2
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	430b      	orrs	r3, r1
 800397a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695a      	ldr	r2, [r3, #20]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f042 0201 	orr.w	r2, r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2220      	movs	r2, #32
 80039b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	000186a0 	.word	0x000186a0
 80039d4:	001e847f 	.word	0x001e847f
 80039d8:	003d08ff 	.word	0x003d08ff
 80039dc:	431bde83 	.word	0x431bde83
 80039e0:	10624dd3 	.word	0x10624dd3

080039e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e021      	b.n	8003a3a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2224      	movs	r2, #36	; 0x24
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f022 0201 	bic.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fd fcae 	bl	8001370 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
	...

08003a44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	461a      	mov	r2, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	817b      	strh	r3, [r7, #10]
 8003a56:	460b      	mov	r3, r1
 8003a58:	813b      	strh	r3, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a5e:	f7fe ff9b 	bl	8002998 <HAL_GetTick>
 8003a62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	f040 80d9 	bne.w	8003c24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2319      	movs	r3, #25
 8003a78:	2201      	movs	r2, #1
 8003a7a:	496d      	ldr	r1, [pc, #436]	; (8003c30 <HAL_I2C_Mem_Write+0x1ec>)
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fca5 	bl	80043cc <I2C_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e0cc      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_I2C_Mem_Write+0x56>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e0c5      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d007      	beq.n	8003ac0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ace:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2221      	movs	r2, #33	; 0x21
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2240      	movs	r2, #64	; 0x40
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a3a      	ldr	r2, [r7, #32]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a4d      	ldr	r2, [pc, #308]	; (8003c34 <HAL_I2C_Mem_Write+0x1f0>)
 8003b00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b02:	88f8      	ldrh	r0, [r7, #6]
 8003b04:	893a      	ldrh	r2, [r7, #8]
 8003b06:	8979      	ldrh	r1, [r7, #10]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4603      	mov	r3, r0
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fadc 	bl	80040d0 <I2C_RequestMemoryWrite>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d052      	beq.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e081      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 fd6a 	bl	8004600 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00d      	beq.n	8003b4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d107      	bne.n	8003b4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e06b      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	781a      	ldrb	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	f003 0304 	and.w	r3, r3, #4
 8003b88:	2b04      	cmp	r3, #4
 8003b8a:	d11b      	bne.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d017      	beq.n	8003bc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	781a      	ldrb	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1aa      	bne.n	8003b22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bcc:	697a      	ldr	r2, [r7, #20]
 8003bce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f000 fd5d 	bl	8004690 <I2C_WaitOnBTFFlagUntilTimeout>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00d      	beq.n	8003bf8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d107      	bne.n	8003bf4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e016      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3718      	adds	r7, #24
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	00100002 	.word	0x00100002
 8003c34:	ffff0000 	.word	0xffff0000

08003c38 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08c      	sub	sp, #48	; 0x30
 8003c3c:	af02      	add	r7, sp, #8
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	4608      	mov	r0, r1
 8003c42:	4611      	mov	r1, r2
 8003c44:	461a      	mov	r2, r3
 8003c46:	4603      	mov	r3, r0
 8003c48:	817b      	strh	r3, [r7, #10]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	813b      	strh	r3, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c52:	f7fe fea1 	bl	8002998 <HAL_GetTick>
 8003c56:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	2b20      	cmp	r3, #32
 8003c62:	f040 8214 	bne.w	800408e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	2319      	movs	r3, #25
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	497b      	ldr	r1, [pc, #492]	; (8003e5c <HAL_I2C_Mem_Read+0x224>)
 8003c70:	68f8      	ldr	r0, [r7, #12]
 8003c72:	f000 fbab 	bl	80043cc <I2C_WaitOnFlagUntilTimeout>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	e207      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d101      	bne.n	8003c8e <HAL_I2C_Mem_Read+0x56>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	e200      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d007      	beq.n	8003cb4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cc2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2222      	movs	r2, #34	; 0x22
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2240      	movs	r2, #64	; 0x40
 8003cd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003ce4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	4a5b      	ldr	r2, [pc, #364]	; (8003e60 <HAL_I2C_Mem_Read+0x228>)
 8003cf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003cf6:	88f8      	ldrh	r0, [r7, #6]
 8003cf8:	893a      	ldrh	r2, [r7, #8]
 8003cfa:	8979      	ldrh	r1, [r7, #10]
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	9301      	str	r3, [sp, #4]
 8003d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d02:	9300      	str	r3, [sp, #0]
 8003d04:	4603      	mov	r3, r0
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 fa78 	bl	80041fc <I2C_RequestMemoryRead>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e1bc      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d113      	bne.n	8003d46 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	623b      	str	r3, [r7, #32]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	623b      	str	r3, [r7, #32]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	623b      	str	r3, [r7, #32]
 8003d32:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e190      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d11b      	bne.n	8003d86 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	61fb      	str	r3, [r7, #28]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	61fb      	str	r3, [r7, #28]
 8003d72:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	e170      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d11b      	bne.n	8003dc6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d9c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dae:	2300      	movs	r3, #0
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	61bb      	str	r3, [r7, #24]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	699b      	ldr	r3, [r3, #24]
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	e150      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695b      	ldr	r3, [r3, #20]
 8003dd0:	617b      	str	r3, [r7, #20]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ddc:	e144      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	f200 80f1 	bhi.w	8003fca <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d123      	bne.n	8003e38 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 fc93 	bl	8004720 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e145      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e36:	e117      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d14e      	bne.n	8003ede <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e42:	9300      	str	r3, [sp, #0]
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	2200      	movs	r2, #0
 8003e48:	4906      	ldr	r1, [pc, #24]	; (8003e64 <HAL_I2C_Mem_Read+0x22c>)
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 fabe 	bl	80043cc <I2C_WaitOnFlagUntilTimeout>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d008      	beq.n	8003e68 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e11a      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
 8003e5a:	bf00      	nop
 8003e5c:	00100002 	.word	0x00100002
 8003e60:	ffff0000 	.word	0xffff0000
 8003e64:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	691a      	ldr	r2, [r3, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	691a      	ldr	r2, [r3, #16]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	b29a      	uxth	r2, r3
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003edc:	e0c4      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	496c      	ldr	r1, [pc, #432]	; (8004098 <HAL_I2C_Mem_Read+0x460>)
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 fa6f 	bl	80043cc <I2C_WaitOnFlagUntilTimeout>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d001      	beq.n	8003ef8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e0cb      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f06:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	2200      	movs	r2, #0
 8003f42:	4955      	ldr	r1, [pc, #340]	; (8004098 <HAL_I2C_Mem_Read+0x460>)
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 fa41 	bl	80043cc <I2C_WaitOnFlagUntilTimeout>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	e09d      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	3b01      	subs	r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	b29a      	uxth	r2, r3
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	691a      	ldr	r2, [r3, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	b29a      	uxth	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003fc8:	e04e      	b.n	8004068 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fba6 	bl	8004720 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e058      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	691a      	ldr	r2, [r3, #16]
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	b2d2      	uxtb	r2, r2
 8003fea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	b29a      	uxth	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004006:	b29b      	uxth	r3, r3
 8004008:	3b01      	subs	r3, #1
 800400a:	b29a      	uxth	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b04      	cmp	r3, #4
 800401c:	d124      	bne.n	8004068 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004022:	2b03      	cmp	r3, #3
 8004024:	d107      	bne.n	8004036 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004034:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406c:	2b00      	cmp	r3, #0
 800406e:	f47f aeb6 	bne.w	8003dde <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2220      	movs	r2, #32
 8004076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800408a:	2300      	movs	r3, #0
 800408c:	e000      	b.n	8004090 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800408e:	2302      	movs	r3, #2
  }
}
 8004090:	4618      	mov	r0, r3
 8004092:	3728      	adds	r7, #40	; 0x28
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	00010004 	.word	0x00010004

0800409c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040aa:	b2db      	uxtb	r3, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	370c      	adds	r7, #12
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	4608      	mov	r0, r1
 80040da:	4611      	mov	r1, r2
 80040dc:	461a      	mov	r2, r3
 80040de:	4603      	mov	r3, r0
 80040e0:	817b      	strh	r3, [r7, #10]
 80040e2:	460b      	mov	r3, r1
 80040e4:	813b      	strh	r3, [r7, #8]
 80040e6:	4613      	mov	r3, r2
 80040e8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fc:	9300      	str	r3, [sp, #0]
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	2200      	movs	r2, #0
 8004102:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 f960 	bl	80043cc <I2C_WaitOnFlagUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00d      	beq.n	800412e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004120:	d103      	bne.n	800412a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004128:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e05f      	b.n	80041ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800412e:	897b      	ldrh	r3, [r7, #10]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800413c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	6a3a      	ldr	r2, [r7, #32]
 8004142:	492d      	ldr	r1, [pc, #180]	; (80041f8 <I2C_RequestMemoryWrite+0x128>)
 8004144:	68f8      	ldr	r0, [r7, #12]
 8004146:	f000 f9bb 	bl	80044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d001      	beq.n	8004154 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004150:	2301      	movs	r3, #1
 8004152:	e04c      	b.n	80041ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800416a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416c:	6a39      	ldr	r1, [r7, #32]
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 fa46 	bl	8004600 <I2C_WaitOnTXEFlagUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00d      	beq.n	8004196 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	2b04      	cmp	r3, #4
 8004180:	d107      	bne.n	8004192 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004190:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e02b      	b.n	80041ee <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004196:	88fb      	ldrh	r3, [r7, #6]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d105      	bne.n	80041a8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800419c:	893b      	ldrh	r3, [r7, #8]
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	611a      	str	r2, [r3, #16]
 80041a6:	e021      	b.n	80041ec <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041a8:	893b      	ldrh	r3, [r7, #8]
 80041aa:	0a1b      	lsrs	r3, r3, #8
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041b8:	6a39      	ldr	r1, [r7, #32]
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f000 fa20 	bl	8004600 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00d      	beq.n	80041e2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d107      	bne.n	80041de <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e005      	b.n	80041ee <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041e2:	893b      	ldrh	r3, [r7, #8]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3718      	adds	r7, #24
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	00010002 	.word	0x00010002

080041fc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af02      	add	r7, sp, #8
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	4608      	mov	r0, r1
 8004206:	4611      	mov	r1, r2
 8004208:	461a      	mov	r2, r3
 800420a:	4603      	mov	r3, r0
 800420c:	817b      	strh	r3, [r7, #10]
 800420e:	460b      	mov	r3, r1
 8004210:	813b      	strh	r3, [r7, #8]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004224:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004234:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	2200      	movs	r2, #0
 800423e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f8c2 	bl	80043cc <I2C_WaitOnFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004258:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800425c:	d103      	bne.n	8004266 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004264:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e0aa      	b.n	80043c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800426a:	897b      	ldrh	r3, [r7, #10]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	461a      	mov	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004278:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	6a3a      	ldr	r2, [r7, #32]
 800427e:	4952      	ldr	r1, [pc, #328]	; (80043c8 <I2C_RequestMemoryRead+0x1cc>)
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 f91d 	bl	80044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e097      	b.n	80043c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	617b      	str	r3, [r7, #20]
 80042a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042a8:	6a39      	ldr	r1, [r7, #32]
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f9a8 	bl	8004600 <I2C_WaitOnTXEFlagUntilTimeout>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00d      	beq.n	80042d2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d107      	bne.n	80042ce <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e076      	b.n	80043c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042d8:	893b      	ldrh	r3, [r7, #8]
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	611a      	str	r2, [r3, #16]
 80042e2:	e021      	b.n	8004328 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042e4:	893b      	ldrh	r3, [r7, #8]
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f4:	6a39      	ldr	r1, [r7, #32]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 f982 	bl	8004600 <I2C_WaitOnTXEFlagUntilTimeout>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00d      	beq.n	800431e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	2b04      	cmp	r3, #4
 8004308:	d107      	bne.n	800431a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004318:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e050      	b.n	80043c0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800431e:	893b      	ldrh	r3, [r7, #8]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432a:	6a39      	ldr	r1, [r7, #32]
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f967 	bl	8004600 <I2C_WaitOnTXEFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00d      	beq.n	8004354 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433c:	2b04      	cmp	r3, #4
 800433e:	d107      	bne.n	8004350 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800434e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e035      	b.n	80043c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004362:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	6a3b      	ldr	r3, [r7, #32]
 800436a:	2200      	movs	r2, #0
 800436c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004370:	68f8      	ldr	r0, [r7, #12]
 8004372:	f000 f82b 	bl	80043cc <I2C_WaitOnFlagUntilTimeout>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d00d      	beq.n	8004398 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800438a:	d103      	bne.n	8004394 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004392:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e013      	b.n	80043c0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004398:	897b      	ldrh	r3, [r7, #10]
 800439a:	b2db      	uxtb	r3, r3
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	6a3a      	ldr	r2, [r7, #32]
 80043ac:	4906      	ldr	r1, [pc, #24]	; (80043c8 <I2C_RequestMemoryRead+0x1cc>)
 80043ae:	68f8      	ldr	r0, [r7, #12]
 80043b0:	f000 f886 	bl	80044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043b4:	4603      	mov	r3, r0
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d001      	beq.n	80043be <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e000      	b.n	80043c0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3718      	adds	r7, #24
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	00010002 	.word	0x00010002

080043cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	4613      	mov	r3, r2
 80043da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043dc:	e048      	b.n	8004470 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e4:	d044      	beq.n	8004470 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e6:	f7fe fad7 	bl	8002998 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	683a      	ldr	r2, [r7, #0]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d302      	bcc.n	80043fc <I2C_WaitOnFlagUntilTimeout+0x30>
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d139      	bne.n	8004470 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	0c1b      	lsrs	r3, r3, #16
 8004400:	b2db      	uxtb	r3, r3
 8004402:	2b01      	cmp	r3, #1
 8004404:	d10d      	bne.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	43da      	mvns	r2, r3
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	4013      	ands	r3, r2
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	bf0c      	ite	eq
 8004418:	2301      	moveq	r3, #1
 800441a:	2300      	movne	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	461a      	mov	r2, r3
 8004420:	e00c      	b.n	800443c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	43da      	mvns	r2, r3
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	4013      	ands	r3, r2
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	bf0c      	ite	eq
 8004434:	2301      	moveq	r3, #1
 8004436:	2300      	movne	r3, #0
 8004438:	b2db      	uxtb	r3, r3
 800443a:	461a      	mov	r2, r3
 800443c:	79fb      	ldrb	r3, [r7, #7]
 800443e:	429a      	cmp	r2, r3
 8004440:	d116      	bne.n	8004470 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445c:	f043 0220 	orr.w	r2, r3, #32
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e023      	b.n	80044b8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	0c1b      	lsrs	r3, r3, #16
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d10d      	bne.n	8004496 <I2C_WaitOnFlagUntilTimeout+0xca>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	43da      	mvns	r2, r3
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	4013      	ands	r3, r2
 8004486:	b29b      	uxth	r3, r3
 8004488:	2b00      	cmp	r3, #0
 800448a:	bf0c      	ite	eq
 800448c:	2301      	moveq	r3, #1
 800448e:	2300      	movne	r3, #0
 8004490:	b2db      	uxtb	r3, r3
 8004492:	461a      	mov	r2, r3
 8004494:	e00c      	b.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	43da      	mvns	r2, r3
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	4013      	ands	r3, r2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	79fb      	ldrb	r3, [r7, #7]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d093      	beq.n	80043de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ce:	e071      	b.n	80045b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044de:	d123      	bne.n	8004528 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044ee:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2220      	movs	r2, #32
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004514:	f043 0204 	orr.w	r2, r3, #4
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e067      	b.n	80045f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800452e:	d041      	beq.n	80045b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004530:	f7fe fa32 	bl	8002998 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	429a      	cmp	r2, r3
 800453e:	d302      	bcc.n	8004546 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d136      	bne.n	80045b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	b2db      	uxtb	r3, r3
 800454c:	2b01      	cmp	r3, #1
 800454e:	d10c      	bne.n	800456a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	43da      	mvns	r2, r3
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4013      	ands	r3, r2
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	bf14      	ite	ne
 8004562:	2301      	movne	r3, #1
 8004564:	2300      	moveq	r3, #0
 8004566:	b2db      	uxtb	r3, r3
 8004568:	e00b      	b.n	8004582 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	43da      	mvns	r2, r3
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	4013      	ands	r3, r2
 8004576:	b29b      	uxth	r3, r3
 8004578:	2b00      	cmp	r3, #0
 800457a:	bf14      	ite	ne
 800457c:	2301      	movne	r3, #1
 800457e:	2300      	moveq	r3, #0
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d016      	beq.n	80045b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2220      	movs	r2, #32
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a0:	f043 0220 	orr.w	r2, r3, #32
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80045b0:	2301      	movs	r3, #1
 80045b2:	e021      	b.n	80045f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	0c1b      	lsrs	r3, r3, #16
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d10c      	bne.n	80045d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	43da      	mvns	r2, r3
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	4013      	ands	r3, r2
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e00b      	b.n	80045f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	43da      	mvns	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4013      	ands	r3, r2
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bf14      	ite	ne
 80045ea:	2301      	movne	r3, #1
 80045ec:	2300      	moveq	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	f47f af6d 	bne.w	80044d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b084      	sub	sp, #16
 8004604:	af00      	add	r7, sp, #0
 8004606:	60f8      	str	r0, [r7, #12]
 8004608:	60b9      	str	r1, [r7, #8]
 800460a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800460c:	e034      	b.n	8004678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f8e3 	bl	80047da <I2C_IsAcknowledgeFailed>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e034      	b.n	8004688 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004624:	d028      	beq.n	8004678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004626:	f7fe f9b7 	bl	8002998 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	429a      	cmp	r2, r3
 8004634:	d302      	bcc.n	800463c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d11d      	bne.n	8004678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004646:	2b80      	cmp	r3, #128	; 0x80
 8004648:	d016      	beq.n	8004678 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	f043 0220 	orr.w	r2, r3, #32
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e007      	b.n	8004688 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004682:	2b80      	cmp	r3, #128	; 0x80
 8004684:	d1c3      	bne.n	800460e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3710      	adds	r7, #16
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800469c:	e034      	b.n	8004708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f89b 	bl	80047da <I2C_IsAcknowledgeFailed>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e034      	b.n	8004718 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d028      	beq.n	8004708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b6:	f7fe f96f 	bl	8002998 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d11d      	bne.n	8004708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 0304 	and.w	r3, r3, #4
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d016      	beq.n	8004708 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2220      	movs	r2, #32
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f4:	f043 0220 	orr.w	r2, r3, #32
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	e007      	b.n	8004718 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b04      	cmp	r3, #4
 8004714:	d1c3      	bne.n	800469e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3710      	adds	r7, #16
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800472c:	e049      	b.n	80047c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	695b      	ldr	r3, [r3, #20]
 8004734:	f003 0310 	and.w	r3, r3, #16
 8004738:	2b10      	cmp	r3, #16
 800473a:	d119      	bne.n	8004770 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f06f 0210 	mvn.w	r2, #16
 8004744:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2200      	movs	r2, #0
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e030      	b.n	80047d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004770:	f7fe f912 	bl	8002998 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	68ba      	ldr	r2, [r7, #8]
 800477c:	429a      	cmp	r2, r3
 800477e:	d302      	bcc.n	8004786 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d11d      	bne.n	80047c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004790:	2b40      	cmp	r3, #64	; 0x40
 8004792:	d016      	beq.n	80047c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2220      	movs	r2, #32
 800479e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f043 0220 	orr.w	r2, r3, #32
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e007      	b.n	80047d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695b      	ldr	r3, [r3, #20]
 80047c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047cc:	2b40      	cmp	r3, #64	; 0x40
 80047ce:	d1ae      	bne.n	800472e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047da:	b480      	push	{r7}
 80047dc:	b083      	sub	sp, #12
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047f0:	d11b      	bne.n	800482a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047fa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	f043 0204 	orr.w	r2, r3, #4
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e000      	b.n	800482c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800482a:	2300      	movs	r3, #0
}
 800482c:	4618      	mov	r0, r3
 800482e:	370c      	adds	r7, #12
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr

08004838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e267      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d075      	beq.n	8004942 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004856:	4b88      	ldr	r3, [pc, #544]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 030c 	and.w	r3, r3, #12
 800485e:	2b04      	cmp	r3, #4
 8004860:	d00c      	beq.n	800487c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004862:	4b85      	ldr	r3, [pc, #532]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800486a:	2b08      	cmp	r3, #8
 800486c:	d112      	bne.n	8004894 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800486e:	4b82      	ldr	r3, [pc, #520]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004876:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800487a:	d10b      	bne.n	8004894 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800487c:	4b7e      	ldr	r3, [pc, #504]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d05b      	beq.n	8004940 <HAL_RCC_OscConfig+0x108>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d157      	bne.n	8004940 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e242      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800489c:	d106      	bne.n	80048ac <HAL_RCC_OscConfig+0x74>
 800489e:	4b76      	ldr	r3, [pc, #472]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a75      	ldr	r2, [pc, #468]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a8:	6013      	str	r3, [r2, #0]
 80048aa:	e01d      	b.n	80048e8 <HAL_RCC_OscConfig+0xb0>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCC_OscConfig+0x98>
 80048b6:	4b70      	ldr	r3, [pc, #448]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a6f      	ldr	r2, [pc, #444]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	4b6d      	ldr	r3, [pc, #436]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a6c      	ldr	r2, [pc, #432]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048cc:	6013      	str	r3, [r2, #0]
 80048ce:	e00b      	b.n	80048e8 <HAL_RCC_OscConfig+0xb0>
 80048d0:	4b69      	ldr	r3, [pc, #420]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a68      	ldr	r2, [pc, #416]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	4b66      	ldr	r3, [pc, #408]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a65      	ldr	r2, [pc, #404]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80048e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d013      	beq.n	8004918 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f0:	f7fe f852 	bl	8002998 <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f8:	f7fe f84e 	bl	8002998 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b64      	cmp	r3, #100	; 0x64
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e207      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	4b5b      	ldr	r3, [pc, #364]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d0f0      	beq.n	80048f8 <HAL_RCC_OscConfig+0xc0>
 8004916:	e014      	b.n	8004942 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004918:	f7fe f83e 	bl	8002998 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004920:	f7fe f83a 	bl	8002998 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b64      	cmp	r3, #100	; 0x64
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e1f3      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004932:	4b51      	ldr	r3, [pc, #324]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1f0      	bne.n	8004920 <HAL_RCC_OscConfig+0xe8>
 800493e:	e000      	b.n	8004942 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d063      	beq.n	8004a16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800494e:	4b4a      	ldr	r3, [pc, #296]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004950:	689b      	ldr	r3, [r3, #8]
 8004952:	f003 030c 	and.w	r3, r3, #12
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00b      	beq.n	8004972 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800495a:	4b47      	ldr	r3, [pc, #284]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004962:	2b08      	cmp	r3, #8
 8004964:	d11c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004966:	4b44      	ldr	r3, [pc, #272]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d116      	bne.n	80049a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004972:	4b41      	ldr	r3, [pc, #260]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d005      	beq.n	800498a <HAL_RCC_OscConfig+0x152>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d001      	beq.n	800498a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e1c7      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800498a:	4b3b      	ldr	r3, [pc, #236]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	00db      	lsls	r3, r3, #3
 8004998:	4937      	ldr	r1, [pc, #220]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 800499a:	4313      	orrs	r3, r2
 800499c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499e:	e03a      	b.n	8004a16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d020      	beq.n	80049ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049a8:	4b34      	ldr	r3, [pc, #208]	; (8004a7c <HAL_RCC_OscConfig+0x244>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ae:	f7fd fff3 	bl	8002998 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049b6:	f7fd ffef 	bl	8002998 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e1a8      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049c8:	4b2b      	ldr	r3, [pc, #172]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d0f0      	beq.n	80049b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049d4:	4b28      	ldr	r3, [pc, #160]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4925      	ldr	r1, [pc, #148]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	600b      	str	r3, [r1, #0]
 80049e8:	e015      	b.n	8004a16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ea:	4b24      	ldr	r3, [pc, #144]	; (8004a7c <HAL_RCC_OscConfig+0x244>)
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f0:	f7fd ffd2 	bl	8002998 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f8:	f7fd ffce 	bl	8002998 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e187      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a0a:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0308 	and.w	r3, r3, #8
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d036      	beq.n	8004a90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d016      	beq.n	8004a58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a2a:	4b15      	ldr	r3, [pc, #84]	; (8004a80 <HAL_RCC_OscConfig+0x248>)
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a30:	f7fd ffb2 	bl	8002998 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a38:	f7fd ffae 	bl	8002998 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e167      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a4a:	4b0b      	ldr	r3, [pc, #44]	; (8004a78 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x200>
 8004a56:	e01b      	b.n	8004a90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a58:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <HAL_RCC_OscConfig+0x248>)
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a5e:	f7fd ff9b 	bl	8002998 <HAL_GetTick>
 8004a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a64:	e00e      	b.n	8004a84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a66:	f7fd ff97 	bl	8002998 <HAL_GetTick>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	2b02      	cmp	r3, #2
 8004a72:	d907      	bls.n	8004a84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a74:	2303      	movs	r3, #3
 8004a76:	e150      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
 8004a78:	40023800 	.word	0x40023800
 8004a7c:	42470000 	.word	0x42470000
 8004a80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a84:	4b88      	ldr	r3, [pc, #544]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1ea      	bne.n	8004a66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0304 	and.w	r3, r3, #4
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 8097 	beq.w	8004bcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004aa2:	4b81      	ldr	r3, [pc, #516]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d10f      	bne.n	8004ace <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	4b7d      	ldr	r3, [pc, #500]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab6:	4a7c      	ldr	r2, [pc, #496]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004abc:	6413      	str	r3, [r2, #64]	; 0x40
 8004abe:	4b7a      	ldr	r3, [pc, #488]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aca:	2301      	movs	r3, #1
 8004acc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ace:	4b77      	ldr	r3, [pc, #476]	; (8004cac <HAL_RCC_OscConfig+0x474>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d118      	bne.n	8004b0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ada:	4b74      	ldr	r3, [pc, #464]	; (8004cac <HAL_RCC_OscConfig+0x474>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a73      	ldr	r2, [pc, #460]	; (8004cac <HAL_RCC_OscConfig+0x474>)
 8004ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ae6:	f7fd ff57 	bl	8002998 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aee:	f7fd ff53 	bl	8002998 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e10c      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b00:	4b6a      	ldr	r3, [pc, #424]	; (8004cac <HAL_RCC_OscConfig+0x474>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0f0      	beq.n	8004aee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d106      	bne.n	8004b22 <HAL_RCC_OscConfig+0x2ea>
 8004b14:	4b64      	ldr	r3, [pc, #400]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b18:	4a63      	ldr	r2, [pc, #396]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b20:	e01c      	b.n	8004b5c <HAL_RCC_OscConfig+0x324>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2b05      	cmp	r3, #5
 8004b28:	d10c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x30c>
 8004b2a:	4b5f      	ldr	r3, [pc, #380]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b2e:	4a5e      	ldr	r2, [pc, #376]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b30:	f043 0304 	orr.w	r3, r3, #4
 8004b34:	6713      	str	r3, [r2, #112]	; 0x70
 8004b36:	4b5c      	ldr	r3, [pc, #368]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3a:	4a5b      	ldr	r2, [pc, #364]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	f043 0301 	orr.w	r3, r3, #1
 8004b40:	6713      	str	r3, [r2, #112]	; 0x70
 8004b42:	e00b      	b.n	8004b5c <HAL_RCC_OscConfig+0x324>
 8004b44:	4b58      	ldr	r3, [pc, #352]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	4a57      	ldr	r2, [pc, #348]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b4a:	f023 0301 	bic.w	r3, r3, #1
 8004b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b50:	4b55      	ldr	r3, [pc, #340]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	4a54      	ldr	r2, [pc, #336]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b56:	f023 0304 	bic.w	r3, r3, #4
 8004b5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d015      	beq.n	8004b90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b64:	f7fd ff18 	bl	8002998 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6c:	f7fd ff14 	bl	8002998 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e0cb      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b82:	4b49      	ldr	r3, [pc, #292]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d0ee      	beq.n	8004b6c <HAL_RCC_OscConfig+0x334>
 8004b8e:	e014      	b.n	8004bba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b90:	f7fd ff02 	bl	8002998 <HAL_GetTick>
 8004b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b96:	e00a      	b.n	8004bae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b98:	f7fd fefe 	bl	8002998 <HAL_GetTick>
 8004b9c:	4602      	mov	r2, r0
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e0b5      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bae:	4b3e      	ldr	r3, [pc, #248]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1ee      	bne.n	8004b98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
 8004bbc:	2b01      	cmp	r3, #1
 8004bbe:	d105      	bne.n	8004bcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bc0:	4b39      	ldr	r3, [pc, #228]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	4a38      	ldr	r2, [pc, #224]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004bc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	699b      	ldr	r3, [r3, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80a1 	beq.w	8004d18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bd6:	4b34      	ldr	r3, [pc, #208]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d05c      	beq.n	8004c9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	699b      	ldr	r3, [r3, #24]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d141      	bne.n	8004c6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bea:	4b31      	ldr	r3, [pc, #196]	; (8004cb0 <HAL_RCC_OscConfig+0x478>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bf0:	f7fd fed2 	bl	8002998 <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bf8:	f7fd fece 	bl	8002998 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e087      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c0a:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f0      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69da      	ldr	r2, [r3, #28]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a1b      	ldr	r3, [r3, #32]
 8004c1e:	431a      	orrs	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c24:	019b      	lsls	r3, r3, #6
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	085b      	lsrs	r3, r3, #1
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	041b      	lsls	r3, r3, #16
 8004c32:	431a      	orrs	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	061b      	lsls	r3, r3, #24
 8004c3a:	491b      	ldr	r1, [pc, #108]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c40:	4b1b      	ldr	r3, [pc, #108]	; (8004cb0 <HAL_RCC_OscConfig+0x478>)
 8004c42:	2201      	movs	r2, #1
 8004c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c46:	f7fd fea7 	bl	8002998 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4e:	f7fd fea3 	bl	8002998 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e05c      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c60:	4b11      	ldr	r3, [pc, #68]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0f0      	beq.n	8004c4e <HAL_RCC_OscConfig+0x416>
 8004c6c:	e054      	b.n	8004d18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6e:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <HAL_RCC_OscConfig+0x478>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fd fe90 	bl	8002998 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c7c:	f7fd fe8c 	bl	8002998 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e045      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_RCC_OscConfig+0x470>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1f0      	bne.n	8004c7c <HAL_RCC_OscConfig+0x444>
 8004c9a:	e03d      	b.n	8004d18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	d107      	bne.n	8004cb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e038      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	40007000 	.word	0x40007000
 8004cb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004cb4:	4b1b      	ldr	r3, [pc, #108]	; (8004d24 <HAL_RCC_OscConfig+0x4ec>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d028      	beq.n	8004d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d121      	bne.n	8004d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d11a      	bne.n	8004d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cde:	68fa      	ldr	r2, [r7, #12]
 8004ce0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d111      	bne.n	8004d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	085b      	lsrs	r3, r3, #1
 8004cfc:	3b01      	subs	r3, #1
 8004cfe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d107      	bne.n	8004d14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d001      	beq.n	8004d18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	e000      	b.n	8004d1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d18:	2300      	movs	r3, #0
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40023800 	.word	0x40023800

08004d28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e0cc      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d3c:	4b68      	ldr	r3, [pc, #416]	; (8004ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0307 	and.w	r3, r3, #7
 8004d44:	683a      	ldr	r2, [r7, #0]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d90c      	bls.n	8004d64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4a:	4b65      	ldr	r3, [pc, #404]	; (8004ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	b2d2      	uxtb	r2, r2
 8004d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d52:	4b63      	ldr	r3, [pc, #396]	; (8004ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	683a      	ldr	r2, [r7, #0]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d001      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e0b8      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d020      	beq.n	8004db2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d005      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d7c:	4b59      	ldr	r3, [pc, #356]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4a58      	ldr	r2, [pc, #352]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0308 	and.w	r3, r3, #8
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d94:	4b53      	ldr	r3, [pc, #332]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4a52      	ldr	r2, [pc, #328]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004da0:	4b50      	ldr	r3, [pc, #320]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	494d      	ldr	r1, [pc, #308]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d044      	beq.n	8004e48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d107      	bne.n	8004dd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dc6:	4b47      	ldr	r3, [pc, #284]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d119      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e07f      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d003      	beq.n	8004de6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004de2:	2b03      	cmp	r3, #3
 8004de4:	d107      	bne.n	8004df6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004de6:	4b3f      	ldr	r3, [pc, #252]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d109      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e06f      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004df6:	4b3b      	ldr	r3, [pc, #236]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d101      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e067      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e06:	4b37      	ldr	r3, [pc, #220]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f023 0203 	bic.w	r2, r3, #3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	4934      	ldr	r1, [pc, #208]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e18:	f7fd fdbe 	bl	8002998 <HAL_GetTick>
 8004e1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1e:	e00a      	b.n	8004e36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e20:	f7fd fdba 	bl	8002998 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e04f      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e36:	4b2b      	ldr	r3, [pc, #172]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 020c 	and.w	r2, r3, #12
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d1eb      	bne.n	8004e20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e48:	4b25      	ldr	r3, [pc, #148]	; (8004ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0307 	and.w	r3, r3, #7
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d20c      	bcs.n	8004e70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e56:	4b22      	ldr	r3, [pc, #136]	; (8004ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e58:	683a      	ldr	r2, [r7, #0]
 8004e5a:	b2d2      	uxtb	r2, r2
 8004e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e5e:	4b20      	ldr	r3, [pc, #128]	; (8004ee0 <HAL_RCC_ClockConfig+0x1b8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0307 	and.w	r3, r3, #7
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e032      	b.n	8004ed6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0304 	and.w	r3, r3, #4
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d008      	beq.n	8004e8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e7c:	4b19      	ldr	r3, [pc, #100]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	4916      	ldr	r1, [pc, #88]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0308 	and.w	r3, r3, #8
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d009      	beq.n	8004eae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e9a:	4b12      	ldr	r3, [pc, #72]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	00db      	lsls	r3, r3, #3
 8004ea8:	490e      	ldr	r1, [pc, #56]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004eae:	f000 f821 	bl	8004ef4 <HAL_RCC_GetSysClockFreq>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	091b      	lsrs	r3, r3, #4
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	490a      	ldr	r1, [pc, #40]	; (8004ee8 <HAL_RCC_ClockConfig+0x1c0>)
 8004ec0:	5ccb      	ldrb	r3, [r1, r3]
 8004ec2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec6:	4a09      	ldr	r2, [pc, #36]	; (8004eec <HAL_RCC_ClockConfig+0x1c4>)
 8004ec8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004eca:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <HAL_RCC_ClockConfig+0x1c8>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fd fd1e 	bl	8002910 <HAL_InitTick>

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40023c00 	.word	0x40023c00
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	0800a74c 	.word	0x0800a74c
 8004eec:	20000004 	.word	0x20000004
 8004ef0:	20000034 	.word	0x20000034

08004ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ef8:	b094      	sub	sp, #80	; 0x50
 8004efa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	647b      	str	r3, [r7, #68]	; 0x44
 8004f00:	2300      	movs	r3, #0
 8004f02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f04:	2300      	movs	r3, #0
 8004f06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f0c:	4b79      	ldr	r3, [pc, #484]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f003 030c 	and.w	r3, r3, #12
 8004f14:	2b08      	cmp	r3, #8
 8004f16:	d00d      	beq.n	8004f34 <HAL_RCC_GetSysClockFreq+0x40>
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	f200 80e1 	bhi.w	80050e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <HAL_RCC_GetSysClockFreq+0x34>
 8004f22:	2b04      	cmp	r3, #4
 8004f24:	d003      	beq.n	8004f2e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f26:	e0db      	b.n	80050e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f28:	4b73      	ldr	r3, [pc, #460]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f2a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004f2c:	e0db      	b.n	80050e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f2e:	4b73      	ldr	r3, [pc, #460]	; (80050fc <HAL_RCC_GetSysClockFreq+0x208>)
 8004f30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f32:	e0d8      	b.n	80050e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f34:	4b6f      	ldr	r3, [pc, #444]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f3c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f3e:	4b6d      	ldr	r3, [pc, #436]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d063      	beq.n	8005012 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f4a:	4b6a      	ldr	r3, [pc, #424]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	099b      	lsrs	r3, r3, #6
 8004f50:	2200      	movs	r2, #0
 8004f52:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f54:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f5c:	633b      	str	r3, [r7, #48]	; 0x30
 8004f5e:	2300      	movs	r3, #0
 8004f60:	637b      	str	r3, [r7, #52]	; 0x34
 8004f62:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f66:	4622      	mov	r2, r4
 8004f68:	462b      	mov	r3, r5
 8004f6a:	f04f 0000 	mov.w	r0, #0
 8004f6e:	f04f 0100 	mov.w	r1, #0
 8004f72:	0159      	lsls	r1, r3, #5
 8004f74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f78:	0150      	lsls	r0, r2, #5
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4621      	mov	r1, r4
 8004f80:	1a51      	subs	r1, r2, r1
 8004f82:	6139      	str	r1, [r7, #16]
 8004f84:	4629      	mov	r1, r5
 8004f86:	eb63 0301 	sbc.w	r3, r3, r1
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	f04f 0200 	mov.w	r2, #0
 8004f90:	f04f 0300 	mov.w	r3, #0
 8004f94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f98:	4659      	mov	r1, fp
 8004f9a:	018b      	lsls	r3, r1, #6
 8004f9c:	4651      	mov	r1, sl
 8004f9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fa2:	4651      	mov	r1, sl
 8004fa4:	018a      	lsls	r2, r1, #6
 8004fa6:	4651      	mov	r1, sl
 8004fa8:	ebb2 0801 	subs.w	r8, r2, r1
 8004fac:	4659      	mov	r1, fp
 8004fae:	eb63 0901 	sbc.w	r9, r3, r1
 8004fb2:	f04f 0200 	mov.w	r2, #0
 8004fb6:	f04f 0300 	mov.w	r3, #0
 8004fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fc6:	4690      	mov	r8, r2
 8004fc8:	4699      	mov	r9, r3
 8004fca:	4623      	mov	r3, r4
 8004fcc:	eb18 0303 	adds.w	r3, r8, r3
 8004fd0:	60bb      	str	r3, [r7, #8]
 8004fd2:	462b      	mov	r3, r5
 8004fd4:	eb49 0303 	adc.w	r3, r9, r3
 8004fd8:	60fb      	str	r3, [r7, #12]
 8004fda:	f04f 0200 	mov.w	r2, #0
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	024b      	lsls	r3, r1, #9
 8004fea:	4621      	mov	r1, r4
 8004fec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	024a      	lsls	r2, r1, #9
 8004ff4:	4610      	mov	r0, r2
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005000:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005004:	f7fb fcaa 	bl	800095c <__aeabi_uldivmod>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	4613      	mov	r3, r2
 800500e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005010:	e058      	b.n	80050c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005012:	4b38      	ldr	r3, [pc, #224]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	099b      	lsrs	r3, r3, #6
 8005018:	2200      	movs	r2, #0
 800501a:	4618      	mov	r0, r3
 800501c:	4611      	mov	r1, r2
 800501e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005022:	623b      	str	r3, [r7, #32]
 8005024:	2300      	movs	r3, #0
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
 8005028:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800502c:	4642      	mov	r2, r8
 800502e:	464b      	mov	r3, r9
 8005030:	f04f 0000 	mov.w	r0, #0
 8005034:	f04f 0100 	mov.w	r1, #0
 8005038:	0159      	lsls	r1, r3, #5
 800503a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800503e:	0150      	lsls	r0, r2, #5
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4641      	mov	r1, r8
 8005046:	ebb2 0a01 	subs.w	sl, r2, r1
 800504a:	4649      	mov	r1, r9
 800504c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800505c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005060:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005064:	ebb2 040a 	subs.w	r4, r2, sl
 8005068:	eb63 050b 	sbc.w	r5, r3, fp
 800506c:	f04f 0200 	mov.w	r2, #0
 8005070:	f04f 0300 	mov.w	r3, #0
 8005074:	00eb      	lsls	r3, r5, #3
 8005076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800507a:	00e2      	lsls	r2, r4, #3
 800507c:	4614      	mov	r4, r2
 800507e:	461d      	mov	r5, r3
 8005080:	4643      	mov	r3, r8
 8005082:	18e3      	adds	r3, r4, r3
 8005084:	603b      	str	r3, [r7, #0]
 8005086:	464b      	mov	r3, r9
 8005088:	eb45 0303 	adc.w	r3, r5, r3
 800508c:	607b      	str	r3, [r7, #4]
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	f04f 0300 	mov.w	r3, #0
 8005096:	e9d7 4500 	ldrd	r4, r5, [r7]
 800509a:	4629      	mov	r1, r5
 800509c:	028b      	lsls	r3, r1, #10
 800509e:	4621      	mov	r1, r4
 80050a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050a4:	4621      	mov	r1, r4
 80050a6:	028a      	lsls	r2, r1, #10
 80050a8:	4610      	mov	r0, r2
 80050aa:	4619      	mov	r1, r3
 80050ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050ae:	2200      	movs	r2, #0
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	61fa      	str	r2, [r7, #28]
 80050b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050b8:	f7fb fc50 	bl	800095c <__aeabi_uldivmod>
 80050bc:	4602      	mov	r2, r0
 80050be:	460b      	mov	r3, r1
 80050c0:	4613      	mov	r3, r2
 80050c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050c4:	4b0b      	ldr	r3, [pc, #44]	; (80050f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	0c1b      	lsrs	r3, r3, #16
 80050ca:	f003 0303 	and.w	r3, r3, #3
 80050ce:	3301      	adds	r3, #1
 80050d0:	005b      	lsls	r3, r3, #1
 80050d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80050d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050de:	e002      	b.n	80050e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80050e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3750      	adds	r7, #80	; 0x50
 80050ec:	46bd      	mov	sp, r7
 80050ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80050f2:	bf00      	nop
 80050f4:	40023800 	.word	0x40023800
 80050f8:	00f42400 	.word	0x00f42400
 80050fc:	007a1200 	.word	0x007a1200

08005100 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005100:	b480      	push	{r7}
 8005102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005104:	4b03      	ldr	r3, [pc, #12]	; (8005114 <HAL_RCC_GetHCLKFreq+0x14>)
 8005106:	681b      	ldr	r3, [r3, #0]
}
 8005108:	4618      	mov	r0, r3
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
 8005112:	bf00      	nop
 8005114:	20000004 	.word	0x20000004

08005118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800511c:	f7ff fff0 	bl	8005100 <HAL_RCC_GetHCLKFreq>
 8005120:	4602      	mov	r2, r0
 8005122:	4b05      	ldr	r3, [pc, #20]	; (8005138 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	0a9b      	lsrs	r3, r3, #10
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	4903      	ldr	r1, [pc, #12]	; (800513c <HAL_RCC_GetPCLK1Freq+0x24>)
 800512e:	5ccb      	ldrb	r3, [r1, r3]
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005134:	4618      	mov	r0, r3
 8005136:	bd80      	pop	{r7, pc}
 8005138:	40023800 	.word	0x40023800
 800513c:	0800a75c 	.word	0x0800a75c

08005140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005144:	f7ff ffdc 	bl	8005100 <HAL_RCC_GetHCLKFreq>
 8005148:	4602      	mov	r2, r0
 800514a:	4b05      	ldr	r3, [pc, #20]	; (8005160 <HAL_RCC_GetPCLK2Freq+0x20>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	0b5b      	lsrs	r3, r3, #13
 8005150:	f003 0307 	and.w	r3, r3, #7
 8005154:	4903      	ldr	r1, [pc, #12]	; (8005164 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005156:	5ccb      	ldrb	r3, [r1, r3]
 8005158:	fa22 f303 	lsr.w	r3, r2, r3
}
 800515c:	4618      	mov	r0, r3
 800515e:	bd80      	pop	{r7, pc}
 8005160:	40023800 	.word	0x40023800
 8005164:	0800a75c 	.word	0x0800a75c

08005168 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005174:	2300      	movs	r3, #0
 8005176:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0301 	and.w	r3, r3, #1
 8005180:	2b00      	cmp	r3, #0
 8005182:	d105      	bne.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800518c:	2b00      	cmp	r3, #0
 800518e:	d035      	beq.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005190:	4b67      	ldr	r3, [pc, #412]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005196:	f7fd fbff 	bl	8002998 <HAL_GetTick>
 800519a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800519c:	e008      	b.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800519e:	f7fd fbfb 	bl	8002998 <HAL_GetTick>
 80051a2:	4602      	mov	r2, r0
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	1ad3      	subs	r3, r2, r3
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d901      	bls.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e0ba      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051b0:	4b60      	ldr	r3, [pc, #384]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1f0      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	019a      	lsls	r2, r3, #6
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	071b      	lsls	r3, r3, #28
 80051c8:	495a      	ldr	r1, [pc, #360]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051d0:	4b57      	ldr	r3, [pc, #348]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80051d2:	2201      	movs	r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051d6:	f7fd fbdf 	bl	8002998 <HAL_GetTick>
 80051da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051dc:	e008      	b.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051de:	f7fd fbdb 	bl	8002998 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	697b      	ldr	r3, [r7, #20]
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d901      	bls.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e09a      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051f0:	4b50      	ldr	r3, [pc, #320]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d0f0      	beq.n	80051de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8083 	beq.w	8005310 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	4b49      	ldr	r3, [pc, #292]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	4a48      	ldr	r2, [pc, #288]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005218:	6413      	str	r3, [r2, #64]	; 0x40
 800521a:	4b46      	ldr	r3, [pc, #280]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005226:	4b44      	ldr	r3, [pc, #272]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a43      	ldr	r2, [pc, #268]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005230:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005232:	f7fd fbb1 	bl	8002998 <HAL_GetTick>
 8005236:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005238:	e008      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800523a:	f7fd fbad 	bl	8002998 <HAL_GetTick>
 800523e:	4602      	mov	r2, r0
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	1ad3      	subs	r3, r2, r3
 8005244:	2b02      	cmp	r3, #2
 8005246:	d901      	bls.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005248:	2303      	movs	r3, #3
 800524a:	e06c      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800524c:	4b3a      	ldr	r3, [pc, #232]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005254:	2b00      	cmp	r3, #0
 8005256:	d0f0      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005258:	4b36      	ldr	r3, [pc, #216]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800525a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800525c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005260:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d02f      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	429a      	cmp	r2, r3
 8005274:	d028      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005276:	4b2f      	ldr	r3, [pc, #188]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800527e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005280:	4b2e      	ldr	r3, [pc, #184]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005282:	2201      	movs	r2, #1
 8005284:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005286:	4b2d      	ldr	r3, [pc, #180]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800528c:	4a29      	ldr	r2, [pc, #164]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005292:	4b28      	ldr	r3, [pc, #160]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b01      	cmp	r3, #1
 800529c:	d114      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800529e:	f7fd fb7b 	bl	8002998 <HAL_GetTick>
 80052a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052a4:	e00a      	b.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052a6:	f7fd fb77 	bl	8002998 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d901      	bls.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e034      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052bc:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d0ee      	beq.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d4:	d10d      	bne.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80052d6:	4b17      	ldr	r3, [pc, #92]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052ea:	4912      	ldr	r1, [pc, #72]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	608b      	str	r3, [r1, #8]
 80052f0:	e005      	b.n	80052fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80052f2:	4b10      	ldr	r3, [pc, #64]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	4a0f      	ldr	r2, [pc, #60]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80052f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052fc:	6093      	str	r3, [r2, #8]
 80052fe:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005300:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800530a:	490a      	ldr	r1, [pc, #40]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800530c:	4313      	orrs	r3, r2
 800530e:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0308 	and.w	r3, r3, #8
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	7c1a      	ldrb	r2, [r3, #16]
 8005320:	4b07      	ldr	r3, [pc, #28]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005322:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	42470068 	.word	0x42470068
 8005334:	40023800 	.word	0x40023800
 8005338:	40007000 	.word	0x40007000
 800533c:	42470e40 	.word	0x42470e40
 8005340:	424711e0 	.word	0x424711e0

08005344 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800534c:	2301      	movs	r3, #1
 800534e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e073      	b.n	8005442 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	7f5b      	ldrb	r3, [r3, #29]
 800535e:	b2db      	uxtb	r3, r3
 8005360:	2b00      	cmp	r3, #0
 8005362:	d105      	bne.n	8005370 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fc f824 	bl	80013b8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b10      	cmp	r3, #16
 8005382:	d055      	beq.n	8005430 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	22ca      	movs	r2, #202	; 0xca
 800538a:	625a      	str	r2, [r3, #36]	; 0x24
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2253      	movs	r2, #83	; 0x53
 8005392:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 fa49 	bl	800582c <RTC_EnterInitMode>
 800539a:	4603      	mov	r3, r0
 800539c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800539e:	7bfb      	ldrb	r3, [r7, #15]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d12c      	bne.n	80053fe <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	6812      	ldr	r2, [r2, #0]
 80053ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6899      	ldr	r1, [r3, #8]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	695b      	ldr	r3, [r3, #20]
 80053cc:	431a      	orrs	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	68d2      	ldr	r2, [r2, #12]
 80053de:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6919      	ldr	r1, [r3, #16]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	041a      	lsls	r2, r3, #16
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fa50 	bl	800589a <RTC_ExitInitMode>
 80053fa:	4603      	mov	r3, r0
 80053fc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d110      	bne.n	8005426 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005412:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699a      	ldr	r2, [r3, #24]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	22ff      	movs	r2, #255	; 0xff
 800542c:	625a      	str	r2, [r3, #36]	; 0x24
 800542e:	e001      	b.n	8005434 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005434:	7bfb      	ldrb	r3, [r7, #15]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d102      	bne.n	8005440 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2201      	movs	r2, #1
 800543e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005440:	7bfb      	ldrb	r3, [r7, #15]
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}

0800544a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800544a:	b590      	push	{r4, r7, lr}
 800544c:	b087      	sub	sp, #28
 800544e:	af00      	add	r7, sp, #0
 8005450:	60f8      	str	r0, [r7, #12]
 8005452:	60b9      	str	r1, [r7, #8]
 8005454:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	7f1b      	ldrb	r3, [r3, #28]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d101      	bne.n	8005466 <HAL_RTC_SetTime+0x1c>
 8005462:	2302      	movs	r3, #2
 8005464:	e087      	b.n	8005576 <HAL_RTC_SetTime+0x12c>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2201      	movs	r2, #1
 800546a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2202      	movs	r2, #2
 8005470:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d126      	bne.n	80054c6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d102      	bne.n	800548c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	2200      	movs	r2, #0
 800548a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	4618      	mov	r0, r3
 8005492:	f000 fa27 	bl	80058e4 <RTC_ByteToBcd2>
 8005496:	4603      	mov	r3, r0
 8005498:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	785b      	ldrb	r3, [r3, #1]
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fa20 	bl	80058e4 <RTC_ByteToBcd2>
 80054a4:	4603      	mov	r3, r0
 80054a6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80054a8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	789b      	ldrb	r3, [r3, #2]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fa18 	bl	80058e4 <RTC_ByteToBcd2>
 80054b4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80054b6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	78db      	ldrb	r3, [r3, #3]
 80054be:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	e018      	b.n	80054f8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d102      	bne.n	80054da <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2200      	movs	r2, #0
 80054d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	785b      	ldrb	r3, [r3, #1]
 80054e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80054e6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80054ec:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	78db      	ldrb	r3, [r3, #3]
 80054f2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80054f4:	4313      	orrs	r3, r2
 80054f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	22ca      	movs	r2, #202	; 0xca
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2253      	movs	r2, #83	; 0x53
 8005506:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f98f 	bl	800582c <RTC_EnterInitMode>
 800550e:	4603      	mov	r3, r0
 8005510:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005512:	7cfb      	ldrb	r3, [r7, #19]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d120      	bne.n	800555a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005522:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005526:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005536:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6899      	ldr	r1, [r3, #8]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	431a      	orrs	r2, r3
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f000 f9a2 	bl	800589a <RTC_ExitInitMode>
 8005556:	4603      	mov	r3, r0
 8005558:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800555a:	7cfb      	ldrb	r3, [r7, #19]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2201      	movs	r2, #1
 8005564:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	22ff      	movs	r2, #255	; 0xff
 800556c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	771a      	strb	r2, [r3, #28]

  return status;
 8005574:	7cfb      	ldrb	r3, [r7, #19]
}
 8005576:	4618      	mov	r0, r3
 8005578:	371c      	adds	r7, #28
 800557a:	46bd      	mov	sp, r7
 800557c:	bd90      	pop	{r4, r7, pc}

0800557e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b086      	sub	sp, #24
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800558a:	2300      	movs	r3, #0
 800558c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80055b0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80055b4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	0c1b      	lsrs	r3, r3, #16
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055c0:	b2da      	uxtb	r2, r3
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	0a1b      	lsrs	r3, r3, #8
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055d0:	b2da      	uxtb	r2, r3
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055de:	b2da      	uxtb	r2, r3
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	0d9b      	lsrs	r3, r3, #22
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	b2da      	uxtb	r2, r3
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d11a      	bne.n	8005630 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	781b      	ldrb	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 f98e 	bl	8005920 <RTC_Bcd2ToByte>
 8005604:	4603      	mov	r3, r0
 8005606:	461a      	mov	r2, r3
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	785b      	ldrb	r3, [r3, #1]
 8005610:	4618      	mov	r0, r3
 8005612:	f000 f985 	bl	8005920 <RTC_Bcd2ToByte>
 8005616:	4603      	mov	r3, r0
 8005618:	461a      	mov	r2, r3
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	789b      	ldrb	r3, [r3, #2]
 8005622:	4618      	mov	r0, r3
 8005624:	f000 f97c 	bl	8005920 <RTC_Bcd2ToByte>
 8005628:	4603      	mov	r3, r0
 800562a:	461a      	mov	r2, r3
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800563a:	b590      	push	{r4, r7, lr}
 800563c:	b087      	sub	sp, #28
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	7f1b      	ldrb	r3, [r3, #28]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d101      	bne.n	8005656 <HAL_RTC_SetDate+0x1c>
 8005652:	2302      	movs	r3, #2
 8005654:	e071      	b.n	800573a <HAL_RTC_SetDate+0x100>
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2201      	movs	r2, #1
 800565a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2202      	movs	r2, #2
 8005660:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d10e      	bne.n	8005686 <HAL_RTC_SetDate+0x4c>
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	f003 0310 	and.w	r3, r3, #16
 8005670:	2b00      	cmp	r3, #0
 8005672:	d008      	beq.n	8005686 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	785b      	ldrb	r3, [r3, #1]
 8005678:	f023 0310 	bic.w	r3, r3, #16
 800567c:	b2db      	uxtb	r3, r3
 800567e:	330a      	adds	r3, #10
 8005680:	b2da      	uxtb	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d11c      	bne.n	80056c6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	78db      	ldrb	r3, [r3, #3]
 8005690:	4618      	mov	r0, r3
 8005692:	f000 f927 	bl	80058e4 <RTC_ByteToBcd2>
 8005696:	4603      	mov	r3, r0
 8005698:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	785b      	ldrb	r3, [r3, #1]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f920 	bl	80058e4 <RTC_ByteToBcd2>
 80056a4:	4603      	mov	r3, r0
 80056a6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056a8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	789b      	ldrb	r3, [r3, #2]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 f918 	bl	80058e4 <RTC_ByteToBcd2>
 80056b4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056b6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	781b      	ldrb	r3, [r3, #0]
 80056be:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	e00e      	b.n	80056e4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	78db      	ldrb	r3, [r3, #3]
 80056ca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80056d2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80056d8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	22ca      	movs	r2, #202	; 0xca
 80056ea:	625a      	str	r2, [r3, #36]	; 0x24
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2253      	movs	r2, #83	; 0x53
 80056f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f899 	bl	800582c <RTC_EnterInitMode>
 80056fa:	4603      	mov	r3, r0
 80056fc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80056fe:	7cfb      	ldrb	r3, [r7, #19]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10c      	bne.n	800571e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800570e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005712:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005714:	68f8      	ldr	r0, [r7, #12]
 8005716:	f000 f8c0 	bl	800589a <RTC_ExitInitMode>
 800571a:	4603      	mov	r3, r0
 800571c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800571e:	7cfb      	ldrb	r3, [r7, #19]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	2201      	movs	r2, #1
 8005728:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	22ff      	movs	r2, #255	; 0xff
 8005730:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2200      	movs	r2, #0
 8005736:	771a      	strb	r2, [r3, #28]

  return status;
 8005738:	7cfb      	ldrb	r3, [r7, #19]
}
 800573a:	4618      	mov	r0, r3
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	bd90      	pop	{r4, r7, pc}

08005742 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b086      	sub	sp, #24
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800575c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005760:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	0c1b      	lsrs	r3, r3, #16
 8005766:	b2da      	uxtb	r2, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	0a1b      	lsrs	r3, r3, #8
 8005770:	b2db      	uxtb	r3, r3
 8005772:	f003 031f 	and.w	r3, r3, #31
 8005776:	b2da      	uxtb	r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	b2db      	uxtb	r3, r3
 8005780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005784:	b2da      	uxtb	r2, r3
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	0b5b      	lsrs	r3, r3, #13
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	b2da      	uxtb	r2, r3
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d11a      	bne.n	80057d6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	78db      	ldrb	r3, [r3, #3]
 80057a4:	4618      	mov	r0, r3
 80057a6:	f000 f8bb 	bl	8005920 <RTC_Bcd2ToByte>
 80057aa:	4603      	mov	r3, r0
 80057ac:	461a      	mov	r2, r3
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	785b      	ldrb	r3, [r3, #1]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 f8b2 	bl	8005920 <RTC_Bcd2ToByte>
 80057bc:	4603      	mov	r3, r0
 80057be:	461a      	mov	r2, r3
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	789b      	ldrb	r3, [r3, #2]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 f8a9 	bl	8005920 <RTC_Bcd2ToByte>
 80057ce:	4603      	mov	r3, r0
 80057d0:	461a      	mov	r2, r3
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a0d      	ldr	r2, [pc, #52]	; (8005828 <HAL_RTC_WaitForSynchro+0x48>)
 80057f2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057f4:	f7fd f8d0 	bl	8002998 <HAL_GetTick>
 80057f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80057fa:	e009      	b.n	8005810 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80057fc:	f7fd f8cc 	bl	8002998 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800580a:	d901      	bls.n	8005810 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e007      	b.n	8005820 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	f003 0320 	and.w	r3, r3, #32
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0ee      	beq.n	80057fc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800581e:	2300      	movs	r3, #0
}
 8005820:	4618      	mov	r0, r3
 8005822:	3710      	adds	r7, #16
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}
 8005828:	00013f5f 	.word	0x00013f5f

0800582c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005834:	2300      	movs	r3, #0
 8005836:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005838:	2300      	movs	r3, #0
 800583a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68db      	ldr	r3, [r3, #12]
 8005842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d122      	bne.n	8005890 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68da      	ldr	r2, [r3, #12]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005858:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800585a:	f7fd f89d 	bl	8002998 <HAL_GetTick>
 800585e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005860:	e00c      	b.n	800587c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005862:	f7fd f899 	bl	8002998 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005870:	d904      	bls.n	800587c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2204      	movs	r2, #4
 8005876:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d102      	bne.n	8005890 <RTC_EnterInitMode+0x64>
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	2b01      	cmp	r3, #1
 800588e:	d1e8      	bne.n	8005862 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005890:	7bfb      	ldrb	r3, [r7, #15]
}
 8005892:	4618      	mov	r0, r3
 8005894:	3710      	adds	r7, #16
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058b4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f003 0320 	and.w	r3, r3, #32
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10a      	bne.n	80058da <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff ff8b 	bl	80057e0 <HAL_RTC_WaitForSynchro>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d004      	beq.n	80058da <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2204      	movs	r2, #4
 80058d4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80058da:	7bfb      	ldrb	r3, [r7, #15]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	4603      	mov	r3, r0
 80058ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80058f2:	e005      	b.n	8005900 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80058fa:	79fb      	ldrb	r3, [r7, #7]
 80058fc:	3b0a      	subs	r3, #10
 80058fe:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	2b09      	cmp	r3, #9
 8005904:	d8f6      	bhi.n	80058f4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	b2db      	uxtb	r3, r3
 800590a:	011b      	lsls	r3, r3, #4
 800590c:	b2da      	uxtb	r2, r3
 800590e:	79fb      	ldrb	r3, [r7, #7]
 8005910:	4313      	orrs	r3, r2
 8005912:	b2db      	uxtb	r3, r3
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	4603      	mov	r3, r0
 8005928:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800592a:	2300      	movs	r3, #0
 800592c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	091b      	lsrs	r3, r3, #4
 8005932:	b2db      	uxtb	r3, r3
 8005934:	461a      	mov	r2, r3
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	b2da      	uxtb	r2, r3
 8005944:	79fb      	ldrb	r3, [r7, #7]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	b2db      	uxtb	r3, r3
 800594c:	4413      	add	r3, r2
 800594e:	b2db      	uxtb	r3, r3
}
 8005950:	4618      	mov	r0, r3
 8005952:	3714      	adds	r7, #20
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e041      	b.n	80059f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fb fd44 	bl	8001410 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	3304      	adds	r3, #4
 8005998:	4619      	mov	r1, r3
 800599a:	4610      	mov	r0, r2
 800599c:	f000 fb50 	bl	8006040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2201      	movs	r2, #1
 80059ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2201      	movs	r2, #1
 80059dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2201      	movs	r2, #1
 80059e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}
	...

080059fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d001      	beq.n	8005a14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a10:	2301      	movs	r3, #1
 8005a12:	e044      	b.n	8005a9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68da      	ldr	r2, [r3, #12]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a1e      	ldr	r2, [pc, #120]	; (8005aac <HAL_TIM_Base_Start_IT+0xb0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d018      	beq.n	8005a68 <HAL_TIM_Base_Start_IT+0x6c>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a3e:	d013      	beq.n	8005a68 <HAL_TIM_Base_Start_IT+0x6c>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a1a      	ldr	r2, [pc, #104]	; (8005ab0 <HAL_TIM_Base_Start_IT+0xb4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d00e      	beq.n	8005a68 <HAL_TIM_Base_Start_IT+0x6c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a19      	ldr	r2, [pc, #100]	; (8005ab4 <HAL_TIM_Base_Start_IT+0xb8>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d009      	beq.n	8005a68 <HAL_TIM_Base_Start_IT+0x6c>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a17      	ldr	r2, [pc, #92]	; (8005ab8 <HAL_TIM_Base_Start_IT+0xbc>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d004      	beq.n	8005a68 <HAL_TIM_Base_Start_IT+0x6c>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a16      	ldr	r2, [pc, #88]	; (8005abc <HAL_TIM_Base_Start_IT+0xc0>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d111      	bne.n	8005a8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f003 0307 	and.w	r3, r3, #7
 8005a72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	2b06      	cmp	r3, #6
 8005a78:	d010      	beq.n	8005a9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f042 0201 	orr.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a8a:	e007      	b.n	8005a9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr
 8005aaa:	bf00      	nop
 8005aac:	40010000 	.word	0x40010000
 8005ab0:	40000400 	.word	0x40000400
 8005ab4:	40000800 	.word	0x40000800
 8005ab8:	40000c00 	.word	0x40000c00
 8005abc:	40014000 	.word	0x40014000

08005ac0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	68da      	ldr	r2, [r3, #12]
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f022 0201 	bic.w	r2, r2, #1
 8005ad6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	6a1a      	ldr	r2, [r3, #32]
 8005ade:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10f      	bne.n	8005b08 <HAL_TIM_Base_Stop_IT+0x48>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	6a1a      	ldr	r2, [r3, #32]
 8005aee:	f240 4344 	movw	r3, #1092	; 0x444
 8005af2:	4013      	ands	r3, r2
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d107      	bne.n	8005b08 <HAL_TIM_Base_Stop_IT+0x48>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0201 	bic.w	r2, r2, #1
 8005b06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d109      	bne.n	8005b44 <HAL_TIM_PWM_Start+0x24>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	bf14      	ite	ne
 8005b3c:	2301      	movne	r3, #1
 8005b3e:	2300      	moveq	r3, #0
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	e022      	b.n	8005b8a <HAL_TIM_PWM_Start+0x6a>
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b04      	cmp	r3, #4
 8005b48:	d109      	bne.n	8005b5e <HAL_TIM_PWM_Start+0x3e>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	bf14      	ite	ne
 8005b56:	2301      	movne	r3, #1
 8005b58:	2300      	moveq	r3, #0
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	e015      	b.n	8005b8a <HAL_TIM_PWM_Start+0x6a>
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d109      	bne.n	8005b78 <HAL_TIM_PWM_Start+0x58>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	bf14      	ite	ne
 8005b70:	2301      	movne	r3, #1
 8005b72:	2300      	moveq	r3, #0
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	e008      	b.n	8005b8a <HAL_TIM_PWM_Start+0x6a>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	bf14      	ite	ne
 8005b84:	2301      	movne	r3, #1
 8005b86:	2300      	moveq	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e068      	b.n	8005c64 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d104      	bne.n	8005ba2 <HAL_TIM_PWM_Start+0x82>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2202      	movs	r2, #2
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ba0:	e013      	b.n	8005bca <HAL_TIM_PWM_Start+0xaa>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b04      	cmp	r3, #4
 8005ba6:	d104      	bne.n	8005bb2 <HAL_TIM_PWM_Start+0x92>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2202      	movs	r2, #2
 8005bac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bb0:	e00b      	b.n	8005bca <HAL_TIM_PWM_Start+0xaa>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d104      	bne.n	8005bc2 <HAL_TIM_PWM_Start+0xa2>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bc0:	e003      	b.n	8005bca <HAL_TIM_PWM_Start+0xaa>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2202      	movs	r2, #2
 8005bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	6839      	ldr	r1, [r7, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 fb5a 	bl	800628c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a23      	ldr	r2, [pc, #140]	; (8005c6c <HAL_TIM_PWM_Start+0x14c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d107      	bne.n	8005bf2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bf0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a1d      	ldr	r2, [pc, #116]	; (8005c6c <HAL_TIM_PWM_Start+0x14c>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d018      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x10e>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c04:	d013      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x10e>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a19      	ldr	r2, [pc, #100]	; (8005c70 <HAL_TIM_PWM_Start+0x150>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00e      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x10e>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a17      	ldr	r2, [pc, #92]	; (8005c74 <HAL_TIM_PWM_Start+0x154>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d009      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x10e>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a16      	ldr	r2, [pc, #88]	; (8005c78 <HAL_TIM_PWM_Start+0x158>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d004      	beq.n	8005c2e <HAL_TIM_PWM_Start+0x10e>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a14      	ldr	r2, [pc, #80]	; (8005c7c <HAL_TIM_PWM_Start+0x15c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d111      	bne.n	8005c52 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	2b06      	cmp	r3, #6
 8005c3e:	d010      	beq.n	8005c62 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c50:	e007      	b.n	8005c62 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f042 0201 	orr.w	r2, r2, #1
 8005c60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}
 8005c6c:	40010000 	.word	0x40010000
 8005c70:	40000400 	.word	0x40000400
 8005c74:	40000800 	.word	0x40000800
 8005c78:	40000c00 	.word	0x40000c00
 8005c7c:	40014000 	.word	0x40014000

08005c80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d020      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d01b      	beq.n	8005ce4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f06f 0202 	mvn.w	r2, #2
 8005cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f000 f999 	bl	8006002 <HAL_TIM_IC_CaptureCallback>
 8005cd0:	e005      	b.n	8005cde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f000 f98b 	bl	8005fee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f000 f99c 	bl	8006016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d020      	beq.n	8005d30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f003 0304 	and.w	r3, r3, #4
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d01b      	beq.n	8005d30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f06f 0204 	mvn.w	r2, #4
 8005d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2202      	movs	r2, #2
 8005d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f973 	bl	8006002 <HAL_TIM_IC_CaptureCallback>
 8005d1c:	e005      	b.n	8005d2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f965 	bl	8005fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f976 	bl	8006016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d020      	beq.n	8005d7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d01b      	beq.n	8005d7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0208 	mvn.w	r2, #8
 8005d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2204      	movs	r2, #4
 8005d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f94d 	bl	8006002 <HAL_TIM_IC_CaptureCallback>
 8005d68:	e005      	b.n	8005d76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f93f 	bl	8005fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f950 	bl	8006016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d020      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d01b      	beq.n	8005dc8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f06f 0210 	mvn.w	r2, #16
 8005d98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2208      	movs	r2, #8
 8005d9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	69db      	ldr	r3, [r3, #28]
 8005da6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d003      	beq.n	8005db6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f927 	bl	8006002 <HAL_TIM_IC_CaptureCallback>
 8005db4:	e005      	b.n	8005dc2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f919 	bl	8005fee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f92a 	bl	8006016 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00c      	beq.n	8005dec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d007      	beq.n	8005dec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0201 	mvn.w	r2, #1
 8005de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f001 f942 	bl	8007070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00c      	beq.n	8005e10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d007      	beq.n	8005e10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fadc 	bl	80063c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d00c      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d007      	beq.n	8005e34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f8fb 	bl	800602a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	f003 0320 	and.w	r3, r3, #32
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00c      	beq.n	8005e58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f003 0320 	and.w	r3, r3, #32
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d007      	beq.n	8005e58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f06f 0220 	mvn.w	r2, #32
 8005e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 faae 	bl	80063b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d101      	bne.n	8005e7c <HAL_TIM_ConfigClockSource+0x1c>
 8005e78:	2302      	movs	r3, #2
 8005e7a:	e0b4      	b.n	8005fe6 <HAL_TIM_ConfigClockSource+0x186>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ea2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb4:	d03e      	beq.n	8005f34 <HAL_TIM_ConfigClockSource+0xd4>
 8005eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eba:	f200 8087 	bhi.w	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ec2:	f000 8086 	beq.w	8005fd2 <HAL_TIM_ConfigClockSource+0x172>
 8005ec6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eca:	d87f      	bhi.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ecc:	2b70      	cmp	r3, #112	; 0x70
 8005ece:	d01a      	beq.n	8005f06 <HAL_TIM_ConfigClockSource+0xa6>
 8005ed0:	2b70      	cmp	r3, #112	; 0x70
 8005ed2:	d87b      	bhi.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ed4:	2b60      	cmp	r3, #96	; 0x60
 8005ed6:	d050      	beq.n	8005f7a <HAL_TIM_ConfigClockSource+0x11a>
 8005ed8:	2b60      	cmp	r3, #96	; 0x60
 8005eda:	d877      	bhi.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005edc:	2b50      	cmp	r3, #80	; 0x50
 8005ede:	d03c      	beq.n	8005f5a <HAL_TIM_ConfigClockSource+0xfa>
 8005ee0:	2b50      	cmp	r3, #80	; 0x50
 8005ee2:	d873      	bhi.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ee4:	2b40      	cmp	r3, #64	; 0x40
 8005ee6:	d058      	beq.n	8005f9a <HAL_TIM_ConfigClockSource+0x13a>
 8005ee8:	2b40      	cmp	r3, #64	; 0x40
 8005eea:	d86f      	bhi.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005eec:	2b30      	cmp	r3, #48	; 0x30
 8005eee:	d064      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0x15a>
 8005ef0:	2b30      	cmp	r3, #48	; 0x30
 8005ef2:	d86b      	bhi.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005ef4:	2b20      	cmp	r3, #32
 8005ef6:	d060      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0x15a>
 8005ef8:	2b20      	cmp	r3, #32
 8005efa:	d867      	bhi.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d05c      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0x15a>
 8005f00:	2b10      	cmp	r3, #16
 8005f02:	d05a      	beq.n	8005fba <HAL_TIM_ConfigClockSource+0x15a>
 8005f04:	e062      	b.n	8005fcc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f16:	f000 f999 	bl	800624c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f28:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68ba      	ldr	r2, [r7, #8]
 8005f30:	609a      	str	r2, [r3, #8]
      break;
 8005f32:	e04f      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f44:	f000 f982 	bl	800624c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f56:	609a      	str	r2, [r3, #8]
      break;
 8005f58:	e03c      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f66:	461a      	mov	r2, r3
 8005f68:	f000 f8f6 	bl	8006158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2150      	movs	r1, #80	; 0x50
 8005f72:	4618      	mov	r0, r3
 8005f74:	f000 f94f 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005f78:	e02c      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f86:	461a      	mov	r2, r3
 8005f88:	f000 f915 	bl	80061b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	2160      	movs	r1, #96	; 0x60
 8005f92:	4618      	mov	r0, r3
 8005f94:	f000 f93f 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005f98:	e01c      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f000 f8d6 	bl	8006158 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2140      	movs	r1, #64	; 0x40
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 f92f 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005fb8:	e00c      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	f000 f926 	bl	8006216 <TIM_ITRx_SetConfig>
      break;
 8005fca:	e003      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd0:	e000      	b.n	8005fd4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fd2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}

08005fee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006016:	b480      	push	{r7}
 8006018:	b083      	sub	sp, #12
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800601e:	bf00      	nop
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800602a:	b480      	push	{r7}
 800602c:	b083      	sub	sp, #12
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
	...

08006040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a3a      	ldr	r2, [pc, #232]	; (800613c <TIM_Base_SetConfig+0xfc>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d00f      	beq.n	8006078 <TIM_Base_SetConfig+0x38>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800605e:	d00b      	beq.n	8006078 <TIM_Base_SetConfig+0x38>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a37      	ldr	r2, [pc, #220]	; (8006140 <TIM_Base_SetConfig+0x100>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d007      	beq.n	8006078 <TIM_Base_SetConfig+0x38>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a36      	ldr	r2, [pc, #216]	; (8006144 <TIM_Base_SetConfig+0x104>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_Base_SetConfig+0x38>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a35      	ldr	r2, [pc, #212]	; (8006148 <TIM_Base_SetConfig+0x108>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d108      	bne.n	800608a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800607e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a2b      	ldr	r2, [pc, #172]	; (800613c <TIM_Base_SetConfig+0xfc>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d01b      	beq.n	80060ca <TIM_Base_SetConfig+0x8a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006098:	d017      	beq.n	80060ca <TIM_Base_SetConfig+0x8a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a28      	ldr	r2, [pc, #160]	; (8006140 <TIM_Base_SetConfig+0x100>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d013      	beq.n	80060ca <TIM_Base_SetConfig+0x8a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a27      	ldr	r2, [pc, #156]	; (8006144 <TIM_Base_SetConfig+0x104>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d00f      	beq.n	80060ca <TIM_Base_SetConfig+0x8a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a26      	ldr	r2, [pc, #152]	; (8006148 <TIM_Base_SetConfig+0x108>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d00b      	beq.n	80060ca <TIM_Base_SetConfig+0x8a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a25      	ldr	r2, [pc, #148]	; (800614c <TIM_Base_SetConfig+0x10c>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d007      	beq.n	80060ca <TIM_Base_SetConfig+0x8a>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	4a24      	ldr	r2, [pc, #144]	; (8006150 <TIM_Base_SetConfig+0x110>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d003      	beq.n	80060ca <TIM_Base_SetConfig+0x8a>
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a23      	ldr	r2, [pc, #140]	; (8006154 <TIM_Base_SetConfig+0x114>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d108      	bne.n	80060dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	695b      	ldr	r3, [r3, #20]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	68fa      	ldr	r2, [r7, #12]
 80060ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a0e      	ldr	r2, [pc, #56]	; (800613c <TIM_Base_SetConfig+0xfc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d103      	bne.n	8006110 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	691a      	ldr	r2, [r3, #16]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2201      	movs	r2, #1
 8006114:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	691b      	ldr	r3, [r3, #16]
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b01      	cmp	r3, #1
 8006120:	d105      	bne.n	800612e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	f023 0201 	bic.w	r2, r3, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	611a      	str	r2, [r3, #16]
  }
}
 800612e:	bf00      	nop
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
 800613a:	bf00      	nop
 800613c:	40010000 	.word	0x40010000
 8006140:	40000400 	.word	0x40000400
 8006144:	40000800 	.word	0x40000800
 8006148:	40000c00 	.word	0x40000c00
 800614c:	40014000 	.word	0x40014000
 8006150:	40014400 	.word	0x40014400
 8006154:	40014800 	.word	0x40014800

08006158 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006158:	b480      	push	{r7}
 800615a:	b087      	sub	sp, #28
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6a1b      	ldr	r3, [r3, #32]
 800616e:	f023 0201 	bic.w	r2, r3, #1
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006182:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4313      	orrs	r3, r2
 800618c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f023 030a 	bic.w	r3, r3, #10
 8006194:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b087      	sub	sp, #28
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	60f8      	str	r0, [r7, #12]
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a1b      	ldr	r3, [r3, #32]
 80061cc:	f023 0210 	bic.w	r2, r3, #16
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	699b      	ldr	r3, [r3, #24]
 80061d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	031b      	lsls	r3, r3, #12
 80061e6:	693a      	ldr	r2, [r7, #16]
 80061e8:	4313      	orrs	r3, r2
 80061ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	621a      	str	r2, [r3, #32]
}
 800620a:	bf00      	nop
 800620c:	371c      	adds	r7, #28
 800620e:	46bd      	mov	sp, r7
 8006210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006214:	4770      	bx	lr

08006216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	4313      	orrs	r3, r2
 8006234:	f043 0307 	orr.w	r3, r3, #7
 8006238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	609a      	str	r2, [r3, #8]
}
 8006240:	bf00      	nop
 8006242:	3714      	adds	r7, #20
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800624c:	b480      	push	{r7}
 800624e:	b087      	sub	sp, #28
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
 8006258:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006266:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	431a      	orrs	r2, r3
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	4313      	orrs	r3, r2
 8006274:	697a      	ldr	r2, [r7, #20]
 8006276:	4313      	orrs	r3, r2
 8006278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	697a      	ldr	r2, [r7, #20]
 800627e:	609a      	str	r2, [r3, #8]
}
 8006280:	bf00      	nop
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	f003 031f 	and.w	r3, r3, #31
 800629e:	2201      	movs	r2, #1
 80062a0:	fa02 f303 	lsl.w	r3, r2, r3
 80062a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1a      	ldr	r2, [r3, #32]
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	43db      	mvns	r3, r3
 80062ae:	401a      	ands	r2, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6a1a      	ldr	r2, [r3, #32]
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	f003 031f 	and.w	r3, r3, #31
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	fa01 f303 	lsl.w	r3, r1, r3
 80062c4:	431a      	orrs	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr
	...

080062d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062ec:	2302      	movs	r3, #2
 80062ee:	e050      	b.n	8006392 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2202      	movs	r2, #2
 80062fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006316:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	68fa      	ldr	r2, [r7, #12]
 800631e:	4313      	orrs	r3, r2
 8006320:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a1c      	ldr	r2, [pc, #112]	; (80063a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d018      	beq.n	8006366 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800633c:	d013      	beq.n	8006366 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d00e      	beq.n	8006366 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a16      	ldr	r2, [pc, #88]	; (80063a8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d009      	beq.n	8006366 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a15      	ldr	r2, [pc, #84]	; (80063ac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d004      	beq.n	8006366 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a13      	ldr	r2, [pc, #76]	; (80063b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d10c      	bne.n	8006380 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800636c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	4313      	orrs	r3, r2
 8006376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	68ba      	ldr	r2, [r7, #8]
 800637e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3714      	adds	r7, #20
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
 800639e:	bf00      	nop
 80063a0:	40010000 	.word	0x40010000
 80063a4:	40000400 	.word	0x40000400
 80063a8:	40000800 	.word	0x40000800
 80063ac:	40000c00 	.word	0x40000c00
 80063b0:	40014000 	.word	0x40014000

080063b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80063bc:	bf00      	nop
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80063d0:	bf00      	nop
 80063d2:	370c      	adds	r7, #12
 80063d4:	46bd      	mov	sp, r7
 80063d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063da:	4770      	bx	lr

080063dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d101      	bne.n	80063ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e042      	b.n	8006474 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d106      	bne.n	8006408 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f83a 	bl	800647c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2224      	movs	r2, #36	; 0x24
 800640c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68da      	ldr	r2, [r3, #12]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800641e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f000 fb8d 	bl	8006b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	691a      	ldr	r2, [r3, #16]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006434:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	695a      	ldr	r2, [r3, #20]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006444:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	68da      	ldr	r2, [r3, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006454:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2220      	movs	r2, #32
 8006460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b08a      	sub	sp, #40	; 0x28
 8006494:	af02      	add	r7, sp, #8
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	4613      	mov	r3, r2
 800649e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064aa:	b2db      	uxtb	r3, r3
 80064ac:	2b20      	cmp	r3, #32
 80064ae:	d175      	bne.n	800659c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d002      	beq.n	80064bc <HAL_UART_Transmit+0x2c>
 80064b6:	88fb      	ldrh	r3, [r7, #6]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d101      	bne.n	80064c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80064bc:	2301      	movs	r3, #1
 80064be:	e06e      	b.n	800659e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2221      	movs	r2, #33	; 0x21
 80064ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80064ce:	f7fc fa63 	bl	8002998 <HAL_GetTick>
 80064d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	88fa      	ldrh	r2, [r7, #6]
 80064d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	88fa      	ldrh	r2, [r7, #6]
 80064de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064e8:	d108      	bne.n	80064fc <HAL_UART_Transmit+0x6c>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d104      	bne.n	80064fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80064f2:	2300      	movs	r3, #0
 80064f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	61bb      	str	r3, [r7, #24]
 80064fa:	e003      	b.n	8006504 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006500:	2300      	movs	r3, #0
 8006502:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006504:	e02e      	b.n	8006564 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	2200      	movs	r2, #0
 800650e:	2180      	movs	r1, #128	; 0x80
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 f995 	bl	8006840 <UART_WaitOnFlagUntilTimeout>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d005      	beq.n	8006528 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2220      	movs	r2, #32
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e03a      	b.n	800659e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10b      	bne.n	8006546 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800652e:	69bb      	ldr	r3, [r7, #24]
 8006530:	881b      	ldrh	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800653c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800653e:	69bb      	ldr	r3, [r7, #24]
 8006540:	3302      	adds	r3, #2
 8006542:	61bb      	str	r3, [r7, #24]
 8006544:	e007      	b.n	8006556 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	781a      	ldrb	r2, [r3, #0]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006550:	69fb      	ldr	r3, [r7, #28]
 8006552:	3301      	adds	r3, #1
 8006554:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1cb      	bne.n	8006506 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2200      	movs	r2, #0
 8006576:	2140      	movs	r1, #64	; 0x40
 8006578:	68f8      	ldr	r0, [r7, #12]
 800657a:	f000 f961 	bl	8006840 <UART_WaitOnFlagUntilTimeout>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d005      	beq.n	8006590 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2220      	movs	r2, #32
 8006588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e006      	b.n	800659e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2220      	movs	r2, #32
 8006594:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	e000      	b.n	800659e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800659c:	2302      	movs	r3, #2
  }
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3720      	adds	r7, #32
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065a6:	b580      	push	{r7, lr}
 80065a8:	b084      	sub	sp, #16
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	60f8      	str	r0, [r7, #12]
 80065ae:	60b9      	str	r1, [r7, #8]
 80065b0:	4613      	mov	r3, r2
 80065b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b20      	cmp	r3, #32
 80065be:	d112      	bne.n	80065e6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d002      	beq.n	80065cc <HAL_UART_Receive_DMA+0x26>
 80065c6:	88fb      	ldrh	r3, [r7, #6]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d101      	bne.n	80065d0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e00b      	b.n	80065e8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2200      	movs	r2, #0
 80065d4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80065d6:	88fb      	ldrh	r3, [r7, #6]
 80065d8:	461a      	mov	r2, r3
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 f989 	bl	80068f4 <UART_Start_Receive_DMA>
 80065e2:	4603      	mov	r3, r0
 80065e4:	e000      	b.n	80065e8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80065e6:	2302      	movs	r3, #2
  }
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80065f8:	bf00      	nop
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006618:	b480      	push	{r7}
 800661a:	b083      	sub	sp, #12
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006620:	bf00      	nop
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr

0800662c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800662c:	b480      	push	{r7}
 800662e:	b083      	sub	sp, #12
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
 8006634:	460b      	mov	r3, r1
 8006636:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b09c      	sub	sp, #112	; 0x70
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665c:	2b00      	cmp	r3, #0
 800665e:	d172      	bne.n	8006746 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006660:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006662:	2200      	movs	r2, #0
 8006664:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	330c      	adds	r3, #12
 800666c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006676:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800667c:	66bb      	str	r3, [r7, #104]	; 0x68
 800667e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	330c      	adds	r3, #12
 8006684:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006686:	65ba      	str	r2, [r7, #88]	; 0x58
 8006688:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800668c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e5      	bne.n	8006666 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800669a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3314      	adds	r3, #20
 80066a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ac:	f023 0301 	bic.w	r3, r3, #1
 80066b0:	667b      	str	r3, [r7, #100]	; 0x64
 80066b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	3314      	adds	r3, #20
 80066b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80066ba:	647a      	str	r2, [r7, #68]	; 0x44
 80066bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066c2:	e841 2300 	strex	r3, r2, [r1]
 80066c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d1e5      	bne.n	800669a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3314      	adds	r3, #20
 80066d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066d8:	e853 3f00 	ldrex	r3, [r3]
 80066dc:	623b      	str	r3, [r7, #32]
   return(result);
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066e4:	663b      	str	r3, [r7, #96]	; 0x60
 80066e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	3314      	adds	r3, #20
 80066ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80066ee:	633a      	str	r2, [r7, #48]	; 0x30
 80066f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80066fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e5      	bne.n	80066ce <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006704:	2220      	movs	r2, #32
 8006706:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800670a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670e:	2b01      	cmp	r3, #1
 8006710:	d119      	bne.n	8006746 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006712:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	330c      	adds	r3, #12
 8006718:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	60fb      	str	r3, [r7, #12]
   return(result);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f023 0310 	bic.w	r3, r3, #16
 8006728:	65fb      	str	r3, [r7, #92]	; 0x5c
 800672a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	330c      	adds	r3, #12
 8006730:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006732:	61fa      	str	r2, [r7, #28]
 8006734:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006736:	69b9      	ldr	r1, [r7, #24]
 8006738:	69fa      	ldr	r2, [r7, #28]
 800673a:	e841 2300 	strex	r3, r2, [r1]
 800673e:	617b      	str	r3, [r7, #20]
   return(result);
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1e5      	bne.n	8006712 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006748:	2200      	movs	r2, #0
 800674a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800674c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800674e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006750:	2b01      	cmp	r3, #1
 8006752:	d106      	bne.n	8006762 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006756:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006758:	4619      	mov	r1, r3
 800675a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800675c:	f7ff ff66 	bl	800662c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006760:	e002      	b.n	8006768 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006762:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006764:	f7ff ff44 	bl	80065f0 <HAL_UART_RxCpltCallback>
}
 8006768:	bf00      	nop
 800676a:	3770      	adds	r7, #112	; 0x70
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}

08006770 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006788:	2b01      	cmp	r3, #1
 800678a:	d108      	bne.n	800679e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006790:	085b      	lsrs	r3, r3, #1
 8006792:	b29b      	uxth	r3, r3
 8006794:	4619      	mov	r1, r3
 8006796:	68f8      	ldr	r0, [r7, #12]
 8006798:	f7ff ff48 	bl	800662c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800679c:	e002      	b.n	80067a4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800679e:	68f8      	ldr	r0, [r7, #12]
 80067a0:	f7ff ff30 	bl	8006604 <HAL_UART_RxHalfCpltCallback>
}
 80067a4:	bf00      	nop
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c8:	2b80      	cmp	r3, #128	; 0x80
 80067ca:	bf0c      	ite	eq
 80067cc:	2301      	moveq	r3, #1
 80067ce:	2300      	movne	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b21      	cmp	r3, #33	; 0x21
 80067de:	d108      	bne.n	80067f2 <UART_DMAError+0x46>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d005      	beq.n	80067f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2200      	movs	r2, #0
 80067ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80067ec:	68b8      	ldr	r0, [r7, #8]
 80067ee:	f000 f91b 	bl	8006a28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067fc:	2b40      	cmp	r3, #64	; 0x40
 80067fe:	bf0c      	ite	eq
 8006800:	2301      	moveq	r3, #1
 8006802:	2300      	movne	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b22      	cmp	r3, #34	; 0x22
 8006812:	d108      	bne.n	8006826 <UART_DMAError+0x7a>
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d005      	beq.n	8006826 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	2200      	movs	r2, #0
 800681e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006820:	68b8      	ldr	r0, [r7, #8]
 8006822:	f000 f929 	bl	8006a78 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800682a:	f043 0210 	orr.w	r2, r3, #16
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006832:	68b8      	ldr	r0, [r7, #8]
 8006834:	f7ff fef0 	bl	8006618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	60f8      	str	r0, [r7, #12]
 8006848:	60b9      	str	r1, [r7, #8]
 800684a:	603b      	str	r3, [r7, #0]
 800684c:	4613      	mov	r3, r2
 800684e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006850:	e03b      	b.n	80068ca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006858:	d037      	beq.n	80068ca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800685a:	f7fc f89d 	bl	8002998 <HAL_GetTick>
 800685e:	4602      	mov	r2, r0
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	6a3a      	ldr	r2, [r7, #32]
 8006866:	429a      	cmp	r2, r3
 8006868:	d302      	bcc.n	8006870 <UART_WaitOnFlagUntilTimeout+0x30>
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d101      	bne.n	8006874 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e03a      	b.n	80068ea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b00      	cmp	r3, #0
 8006880:	d023      	beq.n	80068ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	2b80      	cmp	r3, #128	; 0x80
 8006886:	d020      	beq.n	80068ca <UART_WaitOnFlagUntilTimeout+0x8a>
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b40      	cmp	r3, #64	; 0x40
 800688c:	d01d      	beq.n	80068ca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f003 0308 	and.w	r3, r3, #8
 8006898:	2b08      	cmp	r3, #8
 800689a:	d116      	bne.n	80068ca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	617b      	str	r3, [r7, #20]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f000 f8e0 	bl	8006a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2208      	movs	r2, #8
 80068bc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2200      	movs	r2, #0
 80068c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e00f      	b.n	80068ea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4013      	ands	r3, r2
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	bf0c      	ite	eq
 80068da:	2301      	moveq	r3, #1
 80068dc:	2300      	movne	r3, #0
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	79fb      	ldrb	r3, [r7, #7]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d0b4      	beq.n	8006852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3718      	adds	r7, #24
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
	...

080068f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b098      	sub	sp, #96	; 0x60
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	4613      	mov	r3, r2
 8006900:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006902:	68ba      	ldr	r2, [r7, #8]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	88fa      	ldrh	r2, [r7, #6]
 800690c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2200      	movs	r2, #0
 8006912:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2222      	movs	r2, #34	; 0x22
 8006918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006920:	4a3e      	ldr	r2, [pc, #248]	; (8006a1c <UART_Start_Receive_DMA+0x128>)
 8006922:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006928:	4a3d      	ldr	r2, [pc, #244]	; (8006a20 <UART_Start_Receive_DMA+0x12c>)
 800692a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006930:	4a3c      	ldr	r2, [pc, #240]	; (8006a24 <UART_Start_Receive_DMA+0x130>)
 8006932:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006938:	2200      	movs	r2, #0
 800693a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800693c:	f107 0308 	add.w	r3, r7, #8
 8006940:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3304      	adds	r3, #4
 800694c:	4619      	mov	r1, r3
 800694e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	88fb      	ldrh	r3, [r7, #6]
 8006954:	f7fc fbdf 	bl	8003116 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006958:	2300      	movs	r3, #0
 800695a:	613b      	str	r3, [r7, #16]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	613b      	str	r3, [r7, #16]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	613b      	str	r3, [r7, #16]
 800696c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	691b      	ldr	r3, [r3, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d019      	beq.n	80069aa <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	330c      	adds	r3, #12
 800697c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800698c:	65bb      	str	r3, [r7, #88]	; 0x58
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	330c      	adds	r3, #12
 8006994:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006996:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006998:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800699c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800699e:	e841 2300 	strex	r3, r2, [r1]
 80069a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80069a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1e5      	bne.n	8006976 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	3314      	adds	r3, #20
 80069b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b4:	e853 3f00 	ldrex	r3, [r3]
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069bc:	f043 0301 	orr.w	r3, r3, #1
 80069c0:	657b      	str	r3, [r7, #84]	; 0x54
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	3314      	adds	r3, #20
 80069c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80069ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80069cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80069d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069d2:	e841 2300 	strex	r3, r2, [r1]
 80069d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e5      	bne.n	80069aa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3314      	adds	r3, #20
 80069e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	e853 3f00 	ldrex	r3, [r3]
 80069ec:	617b      	str	r3, [r7, #20]
   return(result);
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069f4:	653b      	str	r3, [r7, #80]	; 0x50
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	3314      	adds	r3, #20
 80069fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069fe:	627a      	str	r2, [r7, #36]	; 0x24
 8006a00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6a39      	ldr	r1, [r7, #32]
 8006a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e5      	bne.n	80069de <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006a12:	2300      	movs	r3, #0
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3760      	adds	r7, #96	; 0x60
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	08006645 	.word	0x08006645
 8006a20:	08006771 	.word	0x08006771
 8006a24:	080067ad 	.word	0x080067ad

08006a28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b089      	sub	sp, #36	; 0x24
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	330c      	adds	r3, #12
 8006a36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	e853 3f00 	ldrex	r3, [r3]
 8006a3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006a46:	61fb      	str	r3, [r7, #28]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	330c      	adds	r3, #12
 8006a4e:	69fa      	ldr	r2, [r7, #28]
 8006a50:	61ba      	str	r2, [r7, #24]
 8006a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a54:	6979      	ldr	r1, [r7, #20]
 8006a56:	69ba      	ldr	r2, [r7, #24]
 8006a58:	e841 2300 	strex	r3, r2, [r1]
 8006a5c:	613b      	str	r3, [r7, #16]
   return(result);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d1e5      	bne.n	8006a30 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2220      	movs	r2, #32
 8006a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8006a6c:	bf00      	nop
 8006a6e:	3724      	adds	r7, #36	; 0x24
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b095      	sub	sp, #84	; 0x54
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	330c      	adds	r3, #12
 8006a86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8a:	e853 3f00 	ldrex	r3, [r3]
 8006a8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	330c      	adds	r3, #12
 8006a9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006aa0:	643a      	str	r2, [r7, #64]	; 0x40
 8006aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006aa8:	e841 2300 	strex	r3, r2, [r1]
 8006aac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1e5      	bne.n	8006a80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3314      	adds	r3, #20
 8006aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	e853 3f00 	ldrex	r3, [r3]
 8006ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ac4:	69fb      	ldr	r3, [r7, #28]
 8006ac6:	f023 0301 	bic.w	r3, r3, #1
 8006aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	3314      	adds	r3, #20
 8006ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ad4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006adc:	e841 2300 	strex	r3, r2, [r1]
 8006ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d1e5      	bne.n	8006ab4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d119      	bne.n	8006b24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	330c      	adds	r3, #12
 8006af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	f023 0310 	bic.w	r3, r3, #16
 8006b06:	647b      	str	r3, [r7, #68]	; 0x44
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	330c      	adds	r3, #12
 8006b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b10:	61ba      	str	r2, [r7, #24]
 8006b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b14:	6979      	ldr	r1, [r7, #20]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	e841 2300 	strex	r3, r2, [r1]
 8006b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1e5      	bne.n	8006af0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2220      	movs	r2, #32
 8006b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b32:	bf00      	nop
 8006b34:	3754      	adds	r7, #84	; 0x54
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
	...

08006b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b44:	b0c0      	sub	sp, #256	; 0x100
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b5c:	68d9      	ldr	r1, [r3, #12]
 8006b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	ea40 0301 	orr.w	r3, r0, r1
 8006b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b6e:	689a      	ldr	r2, [r3, #8]
 8006b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	431a      	orrs	r2, r3
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b7c:	695b      	ldr	r3, [r3, #20]
 8006b7e:	431a      	orrs	r2, r3
 8006b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006b98:	f021 010c 	bic.w	r1, r1, #12
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006ba6:	430b      	orrs	r3, r1
 8006ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bba:	6999      	ldr	r1, [r3, #24]
 8006bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	ea40 0301 	orr.w	r3, r0, r1
 8006bc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	4b8f      	ldr	r3, [pc, #572]	; (8006e0c <UART_SetConfig+0x2cc>)
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d005      	beq.n	8006be0 <UART_SetConfig+0xa0>
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	4b8d      	ldr	r3, [pc, #564]	; (8006e10 <UART_SetConfig+0x2d0>)
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d104      	bne.n	8006bea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006be0:	f7fe faae 	bl	8005140 <HAL_RCC_GetPCLK2Freq>
 8006be4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006be8:	e003      	b.n	8006bf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bea:	f7fe fa95 	bl	8005118 <HAL_RCC_GetPCLK1Freq>
 8006bee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bfc:	f040 810c 	bne.w	8006e18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c04:	2200      	movs	r2, #0
 8006c06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006c0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006c0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006c12:	4622      	mov	r2, r4
 8006c14:	462b      	mov	r3, r5
 8006c16:	1891      	adds	r1, r2, r2
 8006c18:	65b9      	str	r1, [r7, #88]	; 0x58
 8006c1a:	415b      	adcs	r3, r3
 8006c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006c22:	4621      	mov	r1, r4
 8006c24:	eb12 0801 	adds.w	r8, r2, r1
 8006c28:	4629      	mov	r1, r5
 8006c2a:	eb43 0901 	adc.w	r9, r3, r1
 8006c2e:	f04f 0200 	mov.w	r2, #0
 8006c32:	f04f 0300 	mov.w	r3, #0
 8006c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c42:	4690      	mov	r8, r2
 8006c44:	4699      	mov	r9, r3
 8006c46:	4623      	mov	r3, r4
 8006c48:	eb18 0303 	adds.w	r3, r8, r3
 8006c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006c50:	462b      	mov	r3, r5
 8006c52:	eb49 0303 	adc.w	r3, r9, r3
 8006c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006c66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006c6e:	460b      	mov	r3, r1
 8006c70:	18db      	adds	r3, r3, r3
 8006c72:	653b      	str	r3, [r7, #80]	; 0x50
 8006c74:	4613      	mov	r3, r2
 8006c76:	eb42 0303 	adc.w	r3, r2, r3
 8006c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8006c7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006c80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006c84:	f7f9 fe6a 	bl	800095c <__aeabi_uldivmod>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	460b      	mov	r3, r1
 8006c8c:	4b61      	ldr	r3, [pc, #388]	; (8006e14 <UART_SetConfig+0x2d4>)
 8006c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c92:	095b      	lsrs	r3, r3, #5
 8006c94:	011c      	lsls	r4, r3, #4
 8006c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ca0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ca4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006ca8:	4642      	mov	r2, r8
 8006caa:	464b      	mov	r3, r9
 8006cac:	1891      	adds	r1, r2, r2
 8006cae:	64b9      	str	r1, [r7, #72]	; 0x48
 8006cb0:	415b      	adcs	r3, r3
 8006cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006cb8:	4641      	mov	r1, r8
 8006cba:	eb12 0a01 	adds.w	sl, r2, r1
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	eb43 0b01 	adc.w	fp, r3, r1
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	f04f 0300 	mov.w	r3, #0
 8006ccc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006cd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cd8:	4692      	mov	sl, r2
 8006cda:	469b      	mov	fp, r3
 8006cdc:	4643      	mov	r3, r8
 8006cde:	eb1a 0303 	adds.w	r3, sl, r3
 8006ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	eb4b 0303 	adc.w	r3, fp, r3
 8006cec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006d00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006d04:	460b      	mov	r3, r1
 8006d06:	18db      	adds	r3, r3, r3
 8006d08:	643b      	str	r3, [r7, #64]	; 0x40
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	eb42 0303 	adc.w	r3, r2, r3
 8006d10:	647b      	str	r3, [r7, #68]	; 0x44
 8006d12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006d1a:	f7f9 fe1f 	bl	800095c <__aeabi_uldivmod>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	460b      	mov	r3, r1
 8006d22:	4611      	mov	r1, r2
 8006d24:	4b3b      	ldr	r3, [pc, #236]	; (8006e14 <UART_SetConfig+0x2d4>)
 8006d26:	fba3 2301 	umull	r2, r3, r3, r1
 8006d2a:	095b      	lsrs	r3, r3, #5
 8006d2c:	2264      	movs	r2, #100	; 0x64
 8006d2e:	fb02 f303 	mul.w	r3, r2, r3
 8006d32:	1acb      	subs	r3, r1, r3
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006d3a:	4b36      	ldr	r3, [pc, #216]	; (8006e14 <UART_SetConfig+0x2d4>)
 8006d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	005b      	lsls	r3, r3, #1
 8006d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006d48:	441c      	add	r4, r3
 8006d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006d58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	464b      	mov	r3, r9
 8006d60:	1891      	adds	r1, r2, r2
 8006d62:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d64:	415b      	adcs	r3, r3
 8006d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d6c:	4641      	mov	r1, r8
 8006d6e:	1851      	adds	r1, r2, r1
 8006d70:	6339      	str	r1, [r7, #48]	; 0x30
 8006d72:	4649      	mov	r1, r9
 8006d74:	414b      	adcs	r3, r1
 8006d76:	637b      	str	r3, [r7, #52]	; 0x34
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006d84:	4659      	mov	r1, fp
 8006d86:	00cb      	lsls	r3, r1, #3
 8006d88:	4651      	mov	r1, sl
 8006d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d8e:	4651      	mov	r1, sl
 8006d90:	00ca      	lsls	r2, r1, #3
 8006d92:	4610      	mov	r0, r2
 8006d94:	4619      	mov	r1, r3
 8006d96:	4603      	mov	r3, r0
 8006d98:	4642      	mov	r2, r8
 8006d9a:	189b      	adds	r3, r3, r2
 8006d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006da0:	464b      	mov	r3, r9
 8006da2:	460a      	mov	r2, r1
 8006da4:	eb42 0303 	adc.w	r3, r2, r3
 8006da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2200      	movs	r2, #0
 8006db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006db8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006dbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	18db      	adds	r3, r3, r3
 8006dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	eb42 0303 	adc.w	r3, r2, r3
 8006dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006dd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006dd6:	f7f9 fdc1 	bl	800095c <__aeabi_uldivmod>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	460b      	mov	r3, r1
 8006dde:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <UART_SetConfig+0x2d4>)
 8006de0:	fba3 1302 	umull	r1, r3, r3, r2
 8006de4:	095b      	lsrs	r3, r3, #5
 8006de6:	2164      	movs	r1, #100	; 0x64
 8006de8:	fb01 f303 	mul.w	r3, r1, r3
 8006dec:	1ad3      	subs	r3, r2, r3
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	3332      	adds	r3, #50	; 0x32
 8006df2:	4a08      	ldr	r2, [pc, #32]	; (8006e14 <UART_SetConfig+0x2d4>)
 8006df4:	fba2 2303 	umull	r2, r3, r2, r3
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	f003 0207 	and.w	r2, r3, #7
 8006dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4422      	add	r2, r4
 8006e06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e08:	e106      	b.n	8007018 <UART_SetConfig+0x4d8>
 8006e0a:	bf00      	nop
 8006e0c:	40011000 	.word	0x40011000
 8006e10:	40011400 	.word	0x40011400
 8006e14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006e22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006e26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006e2a:	4642      	mov	r2, r8
 8006e2c:	464b      	mov	r3, r9
 8006e2e:	1891      	adds	r1, r2, r2
 8006e30:	6239      	str	r1, [r7, #32]
 8006e32:	415b      	adcs	r3, r3
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
 8006e36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e3a:	4641      	mov	r1, r8
 8006e3c:	1854      	adds	r4, r2, r1
 8006e3e:	4649      	mov	r1, r9
 8006e40:	eb43 0501 	adc.w	r5, r3, r1
 8006e44:	f04f 0200 	mov.w	r2, #0
 8006e48:	f04f 0300 	mov.w	r3, #0
 8006e4c:	00eb      	lsls	r3, r5, #3
 8006e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e52:	00e2      	lsls	r2, r4, #3
 8006e54:	4614      	mov	r4, r2
 8006e56:	461d      	mov	r5, r3
 8006e58:	4643      	mov	r3, r8
 8006e5a:	18e3      	adds	r3, r4, r3
 8006e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006e60:	464b      	mov	r3, r9
 8006e62:	eb45 0303 	adc.w	r3, r5, r3
 8006e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006e7a:	f04f 0200 	mov.w	r2, #0
 8006e7e:	f04f 0300 	mov.w	r3, #0
 8006e82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006e86:	4629      	mov	r1, r5
 8006e88:	008b      	lsls	r3, r1, #2
 8006e8a:	4621      	mov	r1, r4
 8006e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e90:	4621      	mov	r1, r4
 8006e92:	008a      	lsls	r2, r1, #2
 8006e94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006e98:	f7f9 fd60 	bl	800095c <__aeabi_uldivmod>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4b60      	ldr	r3, [pc, #384]	; (8007024 <UART_SetConfig+0x4e4>)
 8006ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ea6:	095b      	lsrs	r3, r3, #5
 8006ea8:	011c      	lsls	r4, r3, #4
 8006eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006eb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006eb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006ebc:	4642      	mov	r2, r8
 8006ebe:	464b      	mov	r3, r9
 8006ec0:	1891      	adds	r1, r2, r2
 8006ec2:	61b9      	str	r1, [r7, #24]
 8006ec4:	415b      	adcs	r3, r3
 8006ec6:	61fb      	str	r3, [r7, #28]
 8006ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ecc:	4641      	mov	r1, r8
 8006ece:	1851      	adds	r1, r2, r1
 8006ed0:	6139      	str	r1, [r7, #16]
 8006ed2:	4649      	mov	r1, r9
 8006ed4:	414b      	adcs	r3, r1
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	f04f 0200 	mov.w	r2, #0
 8006edc:	f04f 0300 	mov.w	r3, #0
 8006ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ee4:	4659      	mov	r1, fp
 8006ee6:	00cb      	lsls	r3, r1, #3
 8006ee8:	4651      	mov	r1, sl
 8006eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006eee:	4651      	mov	r1, sl
 8006ef0:	00ca      	lsls	r2, r1, #3
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	4642      	mov	r2, r8
 8006efa:	189b      	adds	r3, r3, r2
 8006efc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f00:	464b      	mov	r3, r9
 8006f02:	460a      	mov	r2, r1
 8006f04:	eb42 0303 	adc.w	r3, r2, r3
 8006f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	67bb      	str	r3, [r7, #120]	; 0x78
 8006f16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006f18:	f04f 0200 	mov.w	r2, #0
 8006f1c:	f04f 0300 	mov.w	r3, #0
 8006f20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006f24:	4649      	mov	r1, r9
 8006f26:	008b      	lsls	r3, r1, #2
 8006f28:	4641      	mov	r1, r8
 8006f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f2e:	4641      	mov	r1, r8
 8006f30:	008a      	lsls	r2, r1, #2
 8006f32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006f36:	f7f9 fd11 	bl	800095c <__aeabi_uldivmod>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	4611      	mov	r1, r2
 8006f40:	4b38      	ldr	r3, [pc, #224]	; (8007024 <UART_SetConfig+0x4e4>)
 8006f42:	fba3 2301 	umull	r2, r3, r3, r1
 8006f46:	095b      	lsrs	r3, r3, #5
 8006f48:	2264      	movs	r2, #100	; 0x64
 8006f4a:	fb02 f303 	mul.w	r3, r2, r3
 8006f4e:	1acb      	subs	r3, r1, r3
 8006f50:	011b      	lsls	r3, r3, #4
 8006f52:	3332      	adds	r3, #50	; 0x32
 8006f54:	4a33      	ldr	r2, [pc, #204]	; (8007024 <UART_SetConfig+0x4e4>)
 8006f56:	fba2 2303 	umull	r2, r3, r2, r3
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f60:	441c      	add	r4, r3
 8006f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f66:	2200      	movs	r2, #0
 8006f68:	673b      	str	r3, [r7, #112]	; 0x70
 8006f6a:	677a      	str	r2, [r7, #116]	; 0x74
 8006f6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006f70:	4642      	mov	r2, r8
 8006f72:	464b      	mov	r3, r9
 8006f74:	1891      	adds	r1, r2, r2
 8006f76:	60b9      	str	r1, [r7, #8]
 8006f78:	415b      	adcs	r3, r3
 8006f7a:	60fb      	str	r3, [r7, #12]
 8006f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f80:	4641      	mov	r1, r8
 8006f82:	1851      	adds	r1, r2, r1
 8006f84:	6039      	str	r1, [r7, #0]
 8006f86:	4649      	mov	r1, r9
 8006f88:	414b      	adcs	r3, r1
 8006f8a:	607b      	str	r3, [r7, #4]
 8006f8c:	f04f 0200 	mov.w	r2, #0
 8006f90:	f04f 0300 	mov.w	r3, #0
 8006f94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f98:	4659      	mov	r1, fp
 8006f9a:	00cb      	lsls	r3, r1, #3
 8006f9c:	4651      	mov	r1, sl
 8006f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fa2:	4651      	mov	r1, sl
 8006fa4:	00ca      	lsls	r2, r1, #3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4603      	mov	r3, r0
 8006fac:	4642      	mov	r2, r8
 8006fae:	189b      	adds	r3, r3, r2
 8006fb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fb2:	464b      	mov	r3, r9
 8006fb4:	460a      	mov	r2, r1
 8006fb6:	eb42 0303 	adc.w	r3, r2, r3
 8006fba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8006fc6:	667a      	str	r2, [r7, #100]	; 0x64
 8006fc8:	f04f 0200 	mov.w	r2, #0
 8006fcc:	f04f 0300 	mov.w	r3, #0
 8006fd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006fd4:	4649      	mov	r1, r9
 8006fd6:	008b      	lsls	r3, r1, #2
 8006fd8:	4641      	mov	r1, r8
 8006fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fde:	4641      	mov	r1, r8
 8006fe0:	008a      	lsls	r2, r1, #2
 8006fe2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006fe6:	f7f9 fcb9 	bl	800095c <__aeabi_uldivmod>
 8006fea:	4602      	mov	r2, r0
 8006fec:	460b      	mov	r3, r1
 8006fee:	4b0d      	ldr	r3, [pc, #52]	; (8007024 <UART_SetConfig+0x4e4>)
 8006ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8006ff4:	095b      	lsrs	r3, r3, #5
 8006ff6:	2164      	movs	r1, #100	; 0x64
 8006ff8:	fb01 f303 	mul.w	r3, r1, r3
 8006ffc:	1ad3      	subs	r3, r2, r3
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	3332      	adds	r3, #50	; 0x32
 8007002:	4a08      	ldr	r2, [pc, #32]	; (8007024 <UART_SetConfig+0x4e4>)
 8007004:	fba2 2303 	umull	r2, r3, r2, r3
 8007008:	095b      	lsrs	r3, r3, #5
 800700a:	f003 020f 	and.w	r2, r3, #15
 800700e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4422      	add	r2, r4
 8007016:	609a      	str	r2, [r3, #8]
}
 8007018:	bf00      	nop
 800701a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800701e:	46bd      	mov	sp, r7
 8007020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007024:	51eb851f 	.word	0x51eb851f

08007028 <MX_MEMS_Init>:
static void DWT_Init(void);
static void DWT_Start(void);
static uint32_t DWT_Stop(void);

void MX_MEMS_Init(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_PresenceDetection_Init();
 800702c:	f000 f838 	bl	80070a0 <MX_PresenceDetection_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8007030:	bf00      	nop
 8007032:	bd80      	pop	{r7, pc}

08007034 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_PresenceDetection_Process();
 8007038:	f000 f874 	bl	8007124 <MX_PresenceDetection_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */
  if (TObjRaw > (TAmbRaw+1000)) { // if person found, turn on red led
 800703c:	4b09      	ldr	r3, [pc, #36]	; (8007064 <MX_MEMS_Process+0x30>)
 800703e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007042:	461a      	mov	r2, r3
 8007044:	4b08      	ldr	r3, [pc, #32]	; (8007068 <MX_MEMS_Process+0x34>)
 8007046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800704a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 800704e:	429a      	cmp	r2, r3
 8007050:	dd03      	ble.n	800705a <MX_MEMS_Process+0x26>
  	  personFlag = 1;
 8007052:	4b06      	ldr	r3, [pc, #24]	; (800706c <MX_MEMS_Process+0x38>)
 8007054:	2201      	movs	r2, #1
 8007056:	601a      	str	r2, [r3, #0]
    } else {
  	  personFlag = 0;
    }
  /* USER CODE END MEMS_Process_PostTreatment */
}
 8007058:	e002      	b.n	8007060 <MX_MEMS_Process+0x2c>
  	  personFlag = 0;
 800705a:	4b04      	ldr	r3, [pc, #16]	; (800706c <MX_MEMS_Process+0x38>)
 800705c:	2200      	movs	r2, #0
 800705e:	601a      	str	r2, [r3, #0]
}
 8007060:	bf00      	nop
 8007062:	bd80      	pop	{r7, pc}
 8007064:	200004e8 	.word	0x200004e8
 8007068:	200004e6 	.word	0x200004e6
 800706c:	20000248 	.word	0x20000248

08007070 <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *              the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007070:	b480      	push	{r7}
 8007072:	b083      	sub	sp, #12
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	4b06      	ldr	r3, [pc, #24]	; (8007098 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	429a      	cmp	r2, r3
 8007082:	d102      	bne.n	800708a <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 8007084:	4b05      	ldr	r3, [pc, #20]	; (800709c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8007086:	2201      	movs	r2, #1
 8007088:	701a      	strb	r2, [r3, #0]
  }
}
 800708a:	bf00      	nop
 800708c:	370c      	adds	r7, #12
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	200001b8 	.word	0x200001b8
 800709c:	2000032c 	.word	0x2000032c

080070a0 <MX_PresenceDetection_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_PresenceDetection_Init(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* Initialize LED */
  BSP_LED_Init(LED2);
 80070a4:	2000      	movs	r0, #0
 80070a6:	f7fb fadd 	bl	8002664 <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 80070aa:	2000      	movs	r0, #0
 80070ac:	f7fb fb5a 	bl	8002764 <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 80070b0:	f7f9 ff34 	bl	8000f1c <MX_TIM3_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 80070b4:	201e      	movs	r0, #30
 80070b6:	f000 f9b3 	bl	8007420 <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 80070ba:	f000 f89f 	bl	80071fc <Init_Sensors>

  Odr = (uint8_t)TEMP_ODR;
 80070be:	4b12      	ldr	r3, [pc, #72]	; (8007108 <MX_PresenceDetection_Init+0x68>)
 80070c0:	221e      	movs	r2, #30
 80070c2:	701a      	strb	r2, [r3, #0]
  BSP_SENSOR_TEMP_GetAvgTmos(&AvgTmos);
 80070c4:	4811      	ldr	r0, [pc, #68]	; (800710c <MX_PresenceDetection_Init+0x6c>)
 80070c6:	f001 f8c7 	bl	8008258 <BSP_SENSOR_TEMP_GetAvgTmos>
  BSP_SENSOR_TEMP_GetAvgT(&AvgT);
 80070ca:	4811      	ldr	r0, [pc, #68]	; (8007110 <MX_PresenceDetection_Init+0x70>)
 80070cc:	f001 f8de 	bl	800828c <BSP_SENSOR_TEMP_GetAvgT>
  BSP_SENSOR_TEMP_GetGainFactor(&GainFactor);
 80070d0:	4810      	ldr	r0, [pc, #64]	; (8007114 <MX_PresenceDetection_Init+0x74>)
 80070d2:	f001 f8e7 	bl	80082a4 <BSP_SENSOR_TEMP_GetGainFactor>
  BSP_SENSOR_TEMP_GetSensitivity(&Sensitivity);
 80070d6:	4810      	ldr	r0, [pc, #64]	; (8007118 <MX_PresenceDetection_Init+0x78>)
 80070d8:	f001 f8f0 	bl	80082bc <BSP_SENSOR_TEMP_GetSensitivity>

  /* PresenceDetection API initialization function */
  InfraredPD_manager_init();
 80070dc:	f001 fd2c 	bl	8008b38 <InfraredPD_manager_init>

  /* OPTIONAL */
  /* Get library version */
  InfraredPD_manager_get_version(LibVersion, &LibVersionLen);
 80070e0:	490e      	ldr	r1, [pc, #56]	; (800711c <MX_PresenceDetection_Init+0x7c>)
 80070e2:	480f      	ldr	r0, [pc, #60]	; (8007120 <MX_PresenceDetection_Init+0x80>)
 80070e4:	f001 fd76 	bl	8008bd4 <InfraredPD_manager_get_version>

  DWT_Init();
 80070e8:	f000 f9ce 	bl	8007488 <DWT_Init>

  BSP_LED_On(LED2);
 80070ec:	2000      	movs	r0, #0
 80070ee:	f7fb facb 	bl	8002688 <BSP_LED_On>
  HAL_Delay(500);
 80070f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80070f6:	f7fb fc5b 	bl	80029b0 <HAL_Delay>
  BSP_LED_Off(LED2);
 80070fa:	2000      	movs	r0, #0
 80070fc:	f7fb fada 	bl	80026b4 <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 8007100:	f000 fae6 	bl	80076d0 <UART_StartReceiveMsg>
}
 8007104:	bf00      	nop
 8007106:	bd80      	pop	{r7, pc}
 8007108:	200004dc 	.word	0x200004dc
 800710c:	200004de 	.word	0x200004de
 8007110:	200004e0 	.word	0x200004e0
 8007114:	200004e1 	.word	0x200004e1
 8007118:	200004e2 	.word	0x200004e2
 800711c:	20000328 	.word	0x20000328
 8007120:	20000304 	.word	0x20000304

08007124 <MX_PresenceDetection_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static void MX_PresenceDetection_Process(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  static TMsg msg_dat;
  static TMsg msg_cmd;

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 8007128:	482d      	ldr	r0, [pc, #180]	; (80071e0 <MX_PresenceDetection_Process+0xbc>)
 800712a:	f000 f9ff 	bl	800752c <UART_ReceivedMSG>
 800712e:	4603      	mov	r3, r0
 8007130:	2b01      	cmp	r3, #1
 8007132:	d106      	bne.n	8007142 <MX_PresenceDetection_Process+0x1e>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 8007134:	4b2a      	ldr	r3, [pc, #168]	; (80071e0 <MX_PresenceDetection_Process+0xbc>)
 8007136:	791b      	ldrb	r3, [r3, #4]
 8007138:	2b32      	cmp	r3, #50	; 0x32
 800713a:	d102      	bne.n	8007142 <MX_PresenceDetection_Process+0x1e>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 800713c:	4828      	ldr	r0, [pc, #160]	; (80071e0 <MX_PresenceDetection_Process+0xbc>)
 800713e:	f001 f8fb 	bl	8008338 <HandleMSG>
    }
  }

  if (SensorReadRequest == 1U)
 8007142:	4b28      	ldr	r3, [pc, #160]	; (80071e4 <MX_PresenceDetection_Process+0xc0>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	b2db      	uxtb	r3, r3
 8007148:	2b01      	cmp	r3, #1
 800714a:	d146      	bne.n	80071da <MX_PresenceDetection_Process+0xb6>
  {
    SensorReadRequest = 0;
 800714c:	4b25      	ldr	r3, [pc, #148]	; (80071e4 <MX_PresenceDetection_Process+0xc0>)
 800714e:	2200      	movs	r2, #0
 8007150:	701a      	strb	r2, [r3, #0]

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 8007152:	4825      	ldr	r0, [pc, #148]	; (80071e8 <MX_PresenceDetection_Process+0xc4>)
 8007154:	f000 f86a 	bl	800722c <RTC_Handler>
    Infrared_Sensor_Handler(&msg_dat);
 8007158:	4823      	ldr	r0, [pc, #140]	; (80071e8 <MX_PresenceDetection_Process+0xc4>)
 800715a:	f000 f933 	bl	80073c4 <Infrared_Sensor_Handler>

    if (DiscardSamples < 1U)
 800715e:	4b23      	ldr	r3, [pc, #140]	; (80071ec <MX_PresenceDetection_Process+0xc8>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d102      	bne.n	800716c <MX_PresenceDetection_Process+0x48>
    {
      /* PresenceDetection specific part */
      PD_Data_Handler(&msg_dat);
 8007166:	4820      	ldr	r0, [pc, #128]	; (80071e8 <MX_PresenceDetection_Process+0xc4>)
 8007168:	f000 f8d4 	bl	8007314 <PD_Data_Handler>
    }

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 800716c:	481e      	ldr	r0, [pc, #120]	; (80071e8 <MX_PresenceDetection_Process+0xc4>)
 800716e:	f001 f8c9 	bl	8008304 <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 8007172:	4b1d      	ldr	r3, [pc, #116]	; (80071e8 <MX_PresenceDetection_Process+0xc4>)
 8007174:	221d      	movs	r2, #29
 8007176:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 8007178:	4b1d      	ldr	r3, [pc, #116]	; (80071f0 <MX_PresenceDetection_Process+0xcc>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d11e      	bne.n	80071be <MX_PresenceDetection_Process+0x9a>
    {
      OfflineDataCount--;
 8007180:	4b1c      	ldr	r3, [pc, #112]	; (80071f4 <MX_PresenceDetection_Process+0xd0>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	3b01      	subs	r3, #1
 8007186:	4a1b      	ldr	r2, [pc, #108]	; (80071f4 <MX_PresenceDetection_Process+0xd0>)
 8007188:	6013      	str	r3, [r2, #0]
      if (OfflineDataCount < 0)
 800718a:	4b1a      	ldr	r3, [pc, #104]	; (80071f4 <MX_PresenceDetection_Process+0xd0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	da02      	bge.n	8007198 <MX_PresenceDetection_Process+0x74>
      {
        OfflineDataCount = 0;
 8007192:	4b18      	ldr	r3, [pc, #96]	; (80071f4 <MX_PresenceDetection_Process+0xd0>)
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 8007198:	4b17      	ldr	r3, [pc, #92]	; (80071f8 <MX_PresenceDetection_Process+0xd4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3301      	adds	r3, #1
 800719e:	4a16      	ldr	r2, [pc, #88]	; (80071f8 <MX_PresenceDetection_Process+0xd4>)
 80071a0:	6013      	str	r3, [r2, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 80071a2:	4b15      	ldr	r3, [pc, #84]	; (80071f8 <MX_PresenceDetection_Process+0xd4>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b07      	cmp	r3, #7
 80071a8:	dd02      	ble.n	80071b0 <MX_PresenceDetection_Process+0x8c>
      {
        OfflineDataReadIndex = 0;
 80071aa:	4b13      	ldr	r3, [pc, #76]	; (80071f8 <MX_PresenceDetection_Process+0xd4>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 80071b0:	4b10      	ldr	r3, [pc, #64]	; (80071f4 <MX_PresenceDetection_Process+0xd0>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	dd02      	ble.n	80071be <MX_PresenceDetection_Process+0x9a>
      {
        SensorReadRequest = 1;
 80071b8:	4b0a      	ldr	r3, [pc, #40]	; (80071e4 <MX_PresenceDetection_Process+0xc0>)
 80071ba:	2201      	movs	r2, #1
 80071bc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (DiscardSamples > 0U)
 80071be:	4b0b      	ldr	r3, [pc, #44]	; (80071ec <MX_PresenceDetection_Process+0xc8>)
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d006      	beq.n	80071d4 <MX_PresenceDetection_Process+0xb0>
    {
      DiscardSamples--;
 80071c6:	4b09      	ldr	r3, [pc, #36]	; (80071ec <MX_PresenceDetection_Process+0xc8>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	4b07      	ldr	r3, [pc, #28]	; (80071ec <MX_PresenceDetection_Process+0xc8>)
 80071d0:	701a      	strb	r2, [r3, #0]
    else
    {
      UART_SendMsg(&msg_dat);
    }
  }
}
 80071d2:	e002      	b.n	80071da <MX_PresenceDetection_Process+0xb6>
      UART_SendMsg(&msg_dat);
 80071d4:	4804      	ldr	r0, [pc, #16]	; (80071e8 <MX_PresenceDetection_Process+0xc4>)
 80071d6:	f000 fa5f 	bl	8007698 <UART_SendMsg>
}
 80071da:	bf00      	nop
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	200004ec 	.word	0x200004ec
 80071e4:	2000032c 	.word	0x2000032c
 80071e8:	200005f0 	.word	0x200005f0
 80071ec:	200004e4 	.word	0x200004e4
 80071f0:	2000032d 	.word	0x2000032d
 80071f4:	200004d8 	.word	0x200004d8
 80071f8:	200004d0 	.word	0x200004d0

080071fc <Init_Sensors>:
  * @brief  Initialize all sensors
  * @param  None
  * @retval None
  */
static void Init_Sensors(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 8007200:	f000 ff82 	bl	8008108 <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 8007204:	f000 ff87 	bl	8008116 <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 8007208:	f000 ff8c 	bl	8008124 <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 800720c:	f000 ff91 	bl	8008132 <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 8007210:	f000 ff96 	bl	8008140 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 8007214:	f000 ff9c 	bl	8008150 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_TEMP_SetAvgTmos(AVG_TMOS);
 8007218:	2020      	movs	r0, #32
 800721a:	f001 f829 	bl	8008270 <BSP_SENSOR_TEMP_SetAvgTmos>
  BSP_SENSOR_TEMP_SetOutputDataRate(TEMP_ODR);
 800721e:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 8007222:	f000 fff2 	bl	800820a <BSP_SENSOR_TEMP_SetOutputDataRate>
}
 8007226:	bf00      	nop
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <RTC_Handler>:
  * @brief  Handles the time+date getting/sending
  * @param  Msg the time+date part of the stream
  * @retval None
  */
static void RTC_Handler(TMsg *Msg)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b08c      	sub	sp, #48	; 0x30
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 8007234:	2300      	movs	r3, #0
 8007236:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 800723a:	4b32      	ldr	r3, [pc, #200]	; (8007304 <RTC_Handler+0xd8>)
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	62bb      	str	r3, [r7, #40]	; 0x28

  if (UseOfflineData == 1)
 8007240:	4b31      	ldr	r3, [pc, #196]	; (8007308 <RTC_Handler+0xdc>)
 8007242:	781b      	ldrb	r3, [r3, #0]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d12b      	bne.n	80072a0 <RTC_Handler+0x74>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 8007248:	4b30      	ldr	r3, [pc, #192]	; (800730c <RTC_Handler+0xe0>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a30      	ldr	r2, [pc, #192]	; (8007310 <RTC_Handler+0xe4>)
 800724e:	2134      	movs	r1, #52	; 0x34
 8007250:	fb01 f303 	mul.w	r3, r1, r3
 8007254:	4413      	add	r3, r2
 8007256:	781a      	ldrb	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 800725c:	4b2b      	ldr	r3, [pc, #172]	; (800730c <RTC_Handler+0xe0>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a2b      	ldr	r2, [pc, #172]	; (8007310 <RTC_Handler+0xe4>)
 8007262:	2134      	movs	r1, #52	; 0x34
 8007264:	fb01 f303 	mul.w	r3, r1, r3
 8007268:	4413      	add	r3, r2
 800726a:	3301      	adds	r3, #1
 800726c:	781a      	ldrb	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 8007272:	4b26      	ldr	r3, [pc, #152]	; (800730c <RTC_Handler+0xe0>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a26      	ldr	r2, [pc, #152]	; (8007310 <RTC_Handler+0xe4>)
 8007278:	2134      	movs	r1, #52	; 0x34
 800727a:	fb01 f303 	mul.w	r3, r1, r3
 800727e:	4413      	add	r3, r2
 8007280:	3302      	adds	r3, #2
 8007282:	781a      	ldrb	r2, [r3, #0]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 8007288:	4b20      	ldr	r3, [pc, #128]	; (800730c <RTC_Handler+0xe0>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a20      	ldr	r2, [pc, #128]	; (8007310 <RTC_Handler+0xe4>)
 800728e:	2134      	movs	r1, #52	; 0x34
 8007290:	fb01 f303 	mul.w	r3, r1, r3
 8007294:	4413      	add	r3, r2
 8007296:	3303      	adds	r3, #3
 8007298:	781a      	ldrb	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 800729e:	e02d      	b.n	80072fc <RTC_Handler+0xd0>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 80072a0:	f107 0308 	add.w	r3, r7, #8
 80072a4:	2200      	movs	r2, #0
 80072a6:	4619      	mov	r1, r3
 80072a8:	4816      	ldr	r0, [pc, #88]	; (8007304 <RTC_Handler+0xd8>)
 80072aa:	f7fe f968 	bl	800557e <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 80072ae:	f107 031c 	add.w	r3, r7, #28
 80072b2:	2200      	movs	r2, #0
 80072b4:	4619      	mov	r1, r3
 80072b6:	4813      	ldr	r0, [pc, #76]	; (8007304 <RTC_Handler+0xd8>)
 80072b8:	f7fe fa43 	bl	8005742 <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072c0:	1ad3      	subs	r3, r2, r3
 80072c2:	2264      	movs	r2, #100	; 0x64
 80072c4:	fb02 f303 	mul.w	r3, r2, r3
 80072c8:	627b      	str	r3, [r7, #36]	; 0x24
    ans_int32 /= RtcSynchPrediv + 1;
 80072ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ce:	3301      	adds	r3, #1
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	623b      	str	r3, [r7, #32]
    sub_sec = (uint8_t)ans_uint32;
 80072dc:	6a3b      	ldr	r3, [r7, #32]
 80072de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 80072e2:	7a3a      	ldrb	r2, [r7, #8]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 80072e8:	7a7a      	ldrb	r2, [r7, #9]
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 80072ee:	7aba      	ldrb	r2, [r7, #10]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80072fa:	729a      	strb	r2, [r3, #10]
}
 80072fc:	bf00      	nop
 80072fe:	3730      	adds	r7, #48	; 0x30
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	20000198 	.word	0x20000198
 8007308:	2000032d 	.word	0x2000032d
 800730c:	200004d0 	.word	0x200004d0
 8007310:	20000330 	.word	0x20000330

08007314 <PD_Data_Handler>:
  * @brief  Presence Detection data handler
  * @param  Msg the Presence Detection data part of the stream
  * @retval None
  */
static void PD_Data_Handler(TMsg *Msg)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t elapsed_time_us = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
  IPD_input_t data_in = {.t_amb = 0, .t_obj = 0};
 8007320:	2300      	movs	r3, #0
 8007322:	813b      	strh	r3, [r7, #8]
 8007324:	2300      	movs	r3, #0
 8007326:	817b      	strh	r3, [r7, #10]
  static IPD_output_t data_out;

  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 8007328:	4b22      	ldr	r3, [pc, #136]	; (80073b4 <PD_Data_Handler+0xa0>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b02      	cmp	r3, #2
 8007332:	d13b      	bne.n	80073ac <PD_Data_Handler+0x98>
  {
    /* Fill input data */
    data_in.t_amb = TAmbRaw;
 8007334:	4b20      	ldr	r3, [pc, #128]	; (80073b8 <PD_Data_Handler+0xa4>)
 8007336:	f9b3 3000 	ldrsh.w	r3, [r3]
 800733a:	813b      	strh	r3, [r7, #8]
    data_in.t_obj = TObjRaw;
 800733c:	4b1f      	ldr	r3, [pc, #124]	; (80073bc <PD_Data_Handler+0xa8>)
 800733e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007342:	817b      	strh	r3, [r7, #10]

    /* Run Presence Detection algorithm */
    BSP_LED_On(LED2);
 8007344:	2000      	movs	r0, #0
 8007346:	f7fb f99f 	bl	8002688 <BSP_LED_On>
    DWT_Start();
 800734a:	f000 f8b5 	bl	80074b8 <DWT_Start>
    InfraredPD_manager_run(&data_in, &data_out);
 800734e:	f107 0308 	add.w	r3, r7, #8
 8007352:	491b      	ldr	r1, [pc, #108]	; (80073c0 <PD_Data_Handler+0xac>)
 8007354:	4618      	mov	r0, r3
 8007356:	f001 fc2b 	bl	8008bb0 <InfraredPD_manager_run>
    elapsed_time_us = DWT_Stop();
 800735a:	f000 f8bf 	bl	80074dc <DWT_Stop>
 800735e:	60f8      	str	r0, [r7, #12]
    BSP_LED_Off(LED2);
 8007360:	2000      	movs	r0, #0
 8007362:	f7fb f9a7 	bl	80026b4 <BSP_LED_Off>

    Serialize_s32(&Msg->Data[15], (int32_t)data_out.t_obj_comp, 4);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	3313      	adds	r3, #19
 800736a:	4a15      	ldr	r2, [pc, #84]	; (80073c0 <PD_Data_Handler+0xac>)
 800736c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007370:	4611      	mov	r1, r2
 8007372:	2204      	movs	r2, #4
 8007374:	4618      	mov	r0, r3
 8007376:	f001 fd37 	bl	8008de8 <Serialize_s32>
    Serialize_s32(&Msg->Data[19], (int32_t)data_out.t_obj_change, 4);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	3317      	adds	r3, #23
 800737e:	4a10      	ldr	r2, [pc, #64]	; (80073c0 <PD_Data_Handler+0xac>)
 8007380:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8007384:	4611      	mov	r1, r2
 8007386:	2204      	movs	r2, #4
 8007388:	4618      	mov	r0, r3
 800738a:	f001 fd2d 	bl	8008de8 <Serialize_s32>
    Msg->Data[23] = (uint8_t)data_out.mot_flag;
 800738e:	4b0c      	ldr	r3, [pc, #48]	; (80073c0 <PD_Data_Handler+0xac>)
 8007390:	791a      	ldrb	r2, [r3, #4]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	76da      	strb	r2, [r3, #27]
    Msg->Data[24] = (uint8_t)data_out.pres_flag;
 8007396:	4b0a      	ldr	r3, [pc, #40]	; (80073c0 <PD_Data_Handler+0xac>)
 8007398:	795a      	ldrb	r2, [r3, #5]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	771a      	strb	r2, [r3, #28]

    Serialize_s32(&Msg->Data[25], (int32_t)elapsed_time_us, 4);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	331d      	adds	r3, #29
 80073a2:	68f9      	ldr	r1, [r7, #12]
 80073a4:	2204      	movs	r2, #4
 80073a6:	4618      	mov	r0, r3
 80073a8:	f001 fd1e 	bl	8008de8 <Serialize_s32>
  }
}
 80073ac:	bf00      	nop
 80073ae:	3710      	adds	r7, #16
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	20000300 	.word	0x20000300
 80073b8:	200004e6 	.word	0x200004e6
 80073bc:	200004e8 	.word	0x200004e8
 80073c0:	200006f4 	.word	0x200006f4

080073c4 <Infrared_Sensor_Handler>:
  * @brief  Handles the Infrared data getting/sending
  * @param  Msg the IR part of the stream
  * @retval None
  */
static void Infrared_Sensor_Handler(TMsg *Msg)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 80073cc:	4b11      	ldr	r3, [pc, #68]	; (8007414 <Infrared_Sensor_Handler+0x50>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b02      	cmp	r3, #2
 80073d6:	d119      	bne.n	800740c <Infrared_Sensor_Handler+0x48>
  {
    BSP_SENSOR_TEMP_GetTAmbRaw(&TAmbRaw);
 80073d8:	480f      	ldr	r0, [pc, #60]	; (8007418 <Infrared_Sensor_Handler+0x54>)
 80073da:	f000 ff25 	bl	8008228 <BSP_SENSOR_TEMP_GetTAmbRaw>
    BSP_SENSOR_TEMP_GetTObjRaw(&TObjRaw);
 80073de:	480f      	ldr	r0, [pc, #60]	; (800741c <Infrared_Sensor_Handler+0x58>)
 80073e0:	f000 ff2e 	bl	8008240 <BSP_SENSOR_TEMP_GetTObjRaw>

    Serialize_s32(&Msg->Data[7], (int32_t)TAmbRaw, 4);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	330b      	adds	r3, #11
 80073e8:	4a0b      	ldr	r2, [pc, #44]	; (8007418 <Infrared_Sensor_Handler+0x54>)
 80073ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80073ee:	4611      	mov	r1, r2
 80073f0:	2204      	movs	r2, #4
 80073f2:	4618      	mov	r0, r3
 80073f4:	f001 fcf8 	bl	8008de8 <Serialize_s32>
    Serialize_s32(&Msg->Data[11], (int32_t)TObjRaw, 4);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	330f      	adds	r3, #15
 80073fc:	4a07      	ldr	r2, [pc, #28]	; (800741c <Infrared_Sensor_Handler+0x58>)
 80073fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8007402:	4611      	mov	r1, r2
 8007404:	2204      	movs	r2, #4
 8007406:	4618      	mov	r0, r3
 8007408:	f001 fcee 	bl	8008de8 <Serialize_s32>
  }
}
 800740c:	bf00      	nop
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20000300 	.word	0x20000300
 8007418:	200004e6 	.word	0x200004e6
 800741c:	200004e8 	.word	0x200004e8

08007420 <TIM_Config>:
  * @brief  Timer configuration
  * @param  Freq the desired Timer frequency
  * @retval None
  */
static void TIM_Config(uint32_t Freq)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 8007428:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800742c:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800742e:	4b14      	ldr	r3, [pc, #80]	; (8007480 <TIM_Config+0x60>)
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	fbb2 f3f3 	udiv	r3, r2, r3
 8007438:	3b01      	subs	r3, #1
 800743a:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	fbb2 f3f3 	udiv	r3, r2, r3
 8007444:	3b01      	subs	r3, #1
 8007446:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 8007448:	4a0e      	ldr	r2, [pc, #56]	; (8007484 <TIM_Config+0x64>)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800744e:	4b0d      	ldr	r3, [pc, #52]	; (8007484 <TIM_Config+0x64>)
 8007450:	2200      	movs	r2, #0
 8007452:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 8007454:	4a0b      	ldr	r2, [pc, #44]	; (8007484 <TIM_Config+0x64>)
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800745a:	4b0a      	ldr	r3, [pc, #40]	; (8007484 <TIM_Config+0x64>)
 800745c:	2200      	movs	r2, #0
 800745e:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007460:	4b08      	ldr	r3, [pc, #32]	; (8007484 <TIM_Config+0x64>)
 8007462:	2200      	movs	r2, #0
 8007464:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 8007466:	4807      	ldr	r0, [pc, #28]	; (8007484 <TIM_Config+0x64>)
 8007468:	f7fe fa78 	bl	800595c <HAL_TIM_Base_Init>
 800746c:	4603      	mov	r3, r0
 800746e:	2b00      	cmp	r3, #0
 8007470:	d001      	beq.n	8007476 <TIM_Config+0x56>
  {
    Error_Handler();
 8007472:	f7f9 fe81 	bl	8001178 <Error_Handler>
  }
}
 8007476:	bf00      	nop
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	20000004 	.word	0x20000004
 8007484:	200001b8 	.word	0x200001b8

08007488 <DWT_Init>:
  * @brief  Initialize DWT register for counting clock cycles purpose
  * @param  None
  * @retval None
  */
static void DWT_Init(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800748c:	4b08      	ldr	r3, [pc, #32]	; (80074b0 <DWT_Init+0x28>)
 800748e:	68db      	ldr	r3, [r3, #12]
 8007490:	4a07      	ldr	r2, [pc, #28]	; (80074b0 <DWT_Init+0x28>)
 8007492:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007496:	60d3      	str	r3, [r2, #12]
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8007498:	4b06      	ldr	r3, [pc, #24]	; (80074b4 <DWT_Init+0x2c>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a05      	ldr	r2, [pc, #20]	; (80074b4 <DWT_Init+0x2c>)
 800749e:	f023 0301 	bic.w	r3, r3, #1
 80074a2:	6013      	str	r3, [r2, #0]
}
 80074a4:	bf00      	nop
 80074a6:	46bd      	mov	sp, r7
 80074a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ac:	4770      	bx	lr
 80074ae:	bf00      	nop
 80074b0:	e000edf0 	.word	0xe000edf0
 80074b4:	e0001000 	.word	0xe0001000

080074b8 <DWT_Start>:
  * @brief  Start counting clock cycles
  * @param  None
  * @retval None
  */
static void DWT_Start(void)
{
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 80074bc:	4b06      	ldr	r3, [pc, #24]	; (80074d8 <DWT_Start+0x20>)
 80074be:	2200      	movs	r2, #0
 80074c0:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 80074c2:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <DWT_Start+0x20>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	4a04      	ldr	r2, [pc, #16]	; (80074d8 <DWT_Start+0x20>)
 80074c8:	f043 0301 	orr.w	r3, r3, #1
 80074cc:	6013      	str	r3, [r2, #0]
}
 80074ce:	bf00      	nop
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr
 80074d8:	e0001000 	.word	0xe0001000

080074dc <DWT_Stop>:
  * @brief  Stop counting clock cycles and calculate elapsed time in [us]
  * @param  None
  * @retval Elapsed time in [us]
  */
static uint32_t DWT_Stop(void)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	607b      	str	r3, [r7, #4]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 80074ea:	4b0d      	ldr	r3, [pc, #52]	; (8007520 <DWT_Stop+0x44>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	4a0c      	ldr	r2, [pc, #48]	; (8007520 <DWT_Stop+0x44>)
 80074f0:	f023 0301 	bic.w	r3, r3, #1
 80074f4:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 80074f6:	4b0a      	ldr	r3, [pc, #40]	; (8007520 <DWT_Stop+0x44>)
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 80074fc:	4b09      	ldr	r3, [pc, #36]	; (8007524 <DWT_Stop+0x48>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a09      	ldr	r2, [pc, #36]	; (8007528 <DWT_Stop+0x4c>)
 8007502:	fba2 2303 	umull	r2, r3, r2, r3
 8007506:	0c9b      	lsrs	r3, r3, #18
 8007508:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007512:	4618      	mov	r0, r3
 8007514:	370c      	adds	r7, #12
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
 800751e:	bf00      	nop
 8007520:	e0001000 	.word	0xe0001000
 8007524:	20000004 	.word	0x20000004
 8007528:	431bde83 	.word	0x431bde83

0800752c <UART_ReceivedMSG>:
  * @brief  Check if a message is received via UART
  * @param  Msg the pointer to the message to be received
  * @retval 1 if a complete message is found, 0 otherwise
  */
int UART_ReceivedMSG(TMsg *Msg)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b08a      	sub	sp, #40	; 0x28
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 8007534:	2300      	movs	r3, #0
 8007536:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 8007538:	4b54      	ldr	r3, [pc, #336]	; (800768c <UART_ReceivedMSG+0x160>)
 800753a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800753c:	4618      	mov	r0, r3
 800753e:	f000 f8df 	bl	8007700 <Get_DMA_Flag_Status>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	f040 809c 	bne.w	8007682 <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 800754a:	4b50      	ldr	r3, [pc, #320]	; (800768c <UART_ReceivedMSG+0x160>)
 800754c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800754e:	4618      	mov	r0, r3
 8007550:	f000 fab8 	bl	8007ac4 <Get_DMA_Counter>
 8007554:	4603      	mov	r3, r0
 8007556:	b29b      	uxth	r3, r3
 8007558:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800755c:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 800755e:	4b4c      	ldr	r3, [pc, #304]	; (8007690 <UART_ReceivedMSG+0x164>)
 8007560:	889b      	ldrh	r3, [r3, #4]
 8007562:	8bba      	ldrh	r2, [r7, #28]
 8007564:	429a      	cmp	r2, r3
 8007566:	d305      	bcc.n	8007574 <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 8007568:	4b49      	ldr	r3, [pc, #292]	; (8007690 <UART_ReceivedMSG+0x164>)
 800756a:	889b      	ldrh	r3, [r3, #4]
 800756c:	8bba      	ldrh	r2, [r7, #28]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	843b      	strh	r3, [r7, #32]
 8007572:	e007      	b.n	8007584 <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 8007574:	4b46      	ldr	r3, [pc, #280]	; (8007690 <UART_ReceivedMSG+0x164>)
 8007576:	889b      	ldrh	r3, [r3, #4]
 8007578:	8bba      	ldrh	r2, [r7, #28]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	b29b      	uxth	r3, r3
 800757e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007582:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 8007584:	4b42      	ldr	r3, [pc, #264]	; (8007690 <UART_ReceivedMSG+0x164>)
 8007586:	889b      	ldrh	r3, [r3, #4]
 8007588:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (k = 0; k < length; k++)
 800758a:	2300      	movs	r3, #0
 800758c:	847b      	strh	r3, [r7, #34]	; 0x22
 800758e:	e06d      	b.n	800766c <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 8007590:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007592:	4a40      	ldr	r2, [pc, #256]	; (8007694 <UART_ReceivedMSG+0x168>)
 8007594:	5cd3      	ldrb	r3, [r2, r3]
 8007596:	76fb      	strb	r3, [r7, #27]
      j++;
 8007598:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800759a:	3301      	adds	r3, #1
 800759c:	84bb      	strh	r3, [r7, #36]	; 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 800759e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a4:	d301      	bcc.n	80075aa <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 80075a6:	2300      	movs	r3, #0
 80075a8:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 80075aa:	7efb      	ldrb	r3, [r7, #27]
 80075ac:	2bf0      	cmp	r3, #240	; 0xf0
 80075ae:	d15a      	bne.n	8007666 <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 80075b0:	4b37      	ldr	r3, [pc, #220]	; (8007690 <UART_ReceivedMSG+0x164>)
 80075b2:	889b      	ldrh	r3, [r3, #4]
 80075b4:	84bb      	strh	r3, [r7, #36]	; 0x24

        for (i = 0; i < k; i += inc)
 80075b6:	2300      	movs	r3, #0
 80075b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80075ba:	e03a      	b.n	8007632 <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 80075bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075be:	3301      	adds	r3, #1
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075c6:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 80075c8:	8bfb      	ldrh	r3, [r7, #30]
 80075ca:	2bff      	cmp	r3, #255	; 0xff
 80075cc:	d904      	bls.n	80075d8 <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 80075ce:	4a30      	ldr	r2, [pc, #192]	; (8007690 <UART_ReceivedMSG+0x164>)
 80075d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075d2:	8093      	strh	r3, [r2, #4]
            return 0;
 80075d4:	2300      	movs	r3, #0
 80075d6:	e055      	b.n	8007684 <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 80075d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075da:	4a2e      	ldr	r2, [pc, #184]	; (8007694 <UART_ReceivedMSG+0x168>)
 80075dc:	5cd3      	ldrb	r3, [r2, r3]
 80075de:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 80075e0:	8b3b      	ldrh	r3, [r7, #24]
 80075e2:	4a2c      	ldr	r2, [pc, #176]	; (8007694 <UART_ReceivedMSG+0x168>)
 80075e4:	5cd3      	ldrb	r3, [r2, r3]
 80075e6:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 80075e8:	8bfb      	ldrh	r3, [r7, #30]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	4413      	add	r3, r2
 80075ee:	3304      	adds	r3, #4
 80075f0:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 80075f2:	7db9      	ldrb	r1, [r7, #22]
 80075f4:	7dfb      	ldrb	r3, [r7, #23]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	4618      	mov	r0, r3
 80075fa:	f001 fb54 	bl	8008ca6 <ReverseByteStuffCopyByte2>
 80075fe:	4603      	mov	r3, r0
 8007600:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 8007602:	7bfb      	ldrb	r3, [r7, #15]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d104      	bne.n	8007612 <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 8007608:	4a21      	ldr	r2, [pc, #132]	; (8007690 <UART_ReceivedMSG+0x164>)
 800760a:	8b3b      	ldrh	r3, [r7, #24]
 800760c:	8093      	strh	r3, [r2, #4]
            return 0;
 800760e:	2300      	movs	r3, #0
 8007610:	e038      	b.n	8007684 <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	b29a      	uxth	r2, r3
 8007616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007618:	4413      	add	r3, r2
 800761a:	b29b      	uxth	r3, r3
 800761c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007620:	84bb      	strh	r3, [r7, #36]	; 0x24
          source++;
 8007622:	8bfb      	ldrh	r3, [r7, #30]
 8007624:	3301      	adds	r3, #1
 8007626:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	b29a      	uxth	r2, r3
 800762c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800762e:	4413      	add	r3, r2
 8007630:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007632:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8007634:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007636:	429a      	cmp	r2, r3
 8007638:	d3c0      	bcc.n	80075bc <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 800763a:	8bfa      	ldrh	r2, [r7, #30]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 8007640:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007642:	3301      	adds	r3, #1
 8007644:	b29b      	uxth	r3, r3
 8007646:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800764a:	84bb      	strh	r3, [r7, #36]	; 0x24
        UartEngine.StartOfMsg = j;
 800764c:	4a10      	ldr	r2, [pc, #64]	; (8007690 <UART_ReceivedMSG+0x164>)
 800764e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007650:	8093      	strh	r3, [r2, #4]

        /* check message integrity */
        return (CHK_CheckAndRemove(Msg) != 0) ? 1 : 0;
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f001 fb78 	bl	8008d48 <CHK_CheckAndRemove>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	bf14      	ite	ne
 800765e:	2301      	movne	r3, #1
 8007660:	2300      	moveq	r3, #0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	e00e      	b.n	8007684 <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 8007666:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007668:	3301      	adds	r3, #1
 800766a:	847b      	strh	r3, [r7, #34]	; 0x22
 800766c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800766e:	8c3b      	ldrh	r3, [r7, #32]
 8007670:	429a      	cmp	r2, r3
 8007672:	d38d      	bcc.n	8007590 <UART_ReceivedMSG+0x64>
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 8007674:	8c3b      	ldrh	r3, [r7, #32]
 8007676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800767a:	d902      	bls.n	8007682 <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 800767c:	4a04      	ldr	r2, [pc, #16]	; (8007690 <UART_ReceivedMSG+0x164>)
 800767e:	8bbb      	ldrh	r3, [r7, #28]
 8007680:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3728      	adds	r7, #40	; 0x28
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	200002b0 	.word	0x200002b0
 8007690:	200008fc 	.word	0x200008fc
 8007694:	200006fc 	.word	0x200006fc

08007698 <UART_SendMsg>:
  * @brief  Send a message via UART
  * @param  Msg the pointer to the message to be sent
  * @retval None
  */
void UART_SendMsg(TMsg *Msg)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f001 fb27 	bl	8008cf4 <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	4807      	ldr	r0, [pc, #28]	; (80076c8 <UART_SendMsg+0x30>)
 80076aa:	f001 face 	bl	8008c4a <ByteStuffCopy>
 80076ae:	4603      	mov	r3, r0
 80076b0:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 80076b2:	89fa      	ldrh	r2, [r7, #14]
 80076b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80076b8:	4903      	ldr	r1, [pc, #12]	; (80076c8 <UART_SendMsg+0x30>)
 80076ba:	4804      	ldr	r0, [pc, #16]	; (80076cc <UART_SendMsg+0x34>)
 80076bc:	f7fe fee8 	bl	8006490 <HAL_UART_Transmit>
}
 80076c0:	bf00      	nop
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	20000904 	.word	0x20000904
 80076cc:	200002b0 	.word	0x200002b0

080076d0 <UART_StartReceiveMsg>:
  * @brief  Start receiving messages via DMA
  * @param  None
  * @retval None
  */
void UART_StartReceiveMsg(void)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 80076d4:	4b08      	ldr	r3, [pc, #32]	; (80076f8 <UART_StartReceiveMsg+0x28>)
 80076d6:	4a09      	ldr	r2, [pc, #36]	; (80076fc <UART_StartReceiveMsg+0x2c>)
 80076d8:	629a      	str	r2, [r3, #40]	; 0x28
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 80076da:	4b07      	ldr	r3, [pc, #28]	; (80076f8 <UART_StartReceiveMsg+0x28>)
 80076dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 80076e2:	4b05      	ldr	r3, [pc, #20]	; (80076f8 <UART_StartReceiveMsg+0x28>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 80076e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076ec:	4903      	ldr	r1, [pc, #12]	; (80076fc <UART_StartReceiveMsg+0x2c>)
 80076ee:	4802      	ldr	r0, [pc, #8]	; (80076f8 <UART_StartReceiveMsg+0x28>)
 80076f0:	f7fe ff59 	bl	80065a6 <HAL_UART_Receive_DMA>
}
 80076f4:	bf00      	nop
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	200002b0 	.word	0x200002b0
 80076fc:	200006fc 	.word	0x200006fc

08007700 <Get_DMA_Flag_Status>:
  * @brief  Get the DMA Stream pending flags
  * @param  handle_dma DMA handle
  * @retval The state of FLAG (SET or RESET)
  */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	4b8c      	ldr	r3, [pc, #560]	; (8007940 <Get_DMA_Flag_Status+0x240>)
 8007710:	429a      	cmp	r2, r3
 8007712:	d961      	bls.n	80077d8 <Get_DMA_Flag_Status+0xd8>
 8007714:	4b8b      	ldr	r3, [pc, #556]	; (8007944 <Get_DMA_Flag_Status+0x244>)
 8007716:	685a      	ldr	r2, [r3, #4]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	498a      	ldr	r1, [pc, #552]	; (8007948 <Get_DMA_Flag_Status+0x248>)
 800771e:	428b      	cmp	r3, r1
 8007720:	d057      	beq.n	80077d2 <Get_DMA_Flag_Status+0xd2>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	4989      	ldr	r1, [pc, #548]	; (800794c <Get_DMA_Flag_Status+0x24c>)
 8007728:	428b      	cmp	r3, r1
 800772a:	d050      	beq.n	80077ce <Get_DMA_Flag_Status+0xce>
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4987      	ldr	r1, [pc, #540]	; (8007950 <Get_DMA_Flag_Status+0x250>)
 8007732:	428b      	cmp	r3, r1
 8007734:	d049      	beq.n	80077ca <Get_DMA_Flag_Status+0xca>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4986      	ldr	r1, [pc, #536]	; (8007954 <Get_DMA_Flag_Status+0x254>)
 800773c:	428b      	cmp	r3, r1
 800773e:	d042      	beq.n	80077c6 <Get_DMA_Flag_Status+0xc6>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4984      	ldr	r1, [pc, #528]	; (8007958 <Get_DMA_Flag_Status+0x258>)
 8007746:	428b      	cmp	r3, r1
 8007748:	d03a      	beq.n	80077c0 <Get_DMA_Flag_Status+0xc0>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4983      	ldr	r1, [pc, #524]	; (800795c <Get_DMA_Flag_Status+0x25c>)
 8007750:	428b      	cmp	r3, r1
 8007752:	d032      	beq.n	80077ba <Get_DMA_Flag_Status+0xba>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4981      	ldr	r1, [pc, #516]	; (8007960 <Get_DMA_Flag_Status+0x260>)
 800775a:	428b      	cmp	r3, r1
 800775c:	d02a      	beq.n	80077b4 <Get_DMA_Flag_Status+0xb4>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4980      	ldr	r1, [pc, #512]	; (8007964 <Get_DMA_Flag_Status+0x264>)
 8007764:	428b      	cmp	r3, r1
 8007766:	d022      	beq.n	80077ae <Get_DMA_Flag_Status+0xae>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	497e      	ldr	r1, [pc, #504]	; (8007968 <Get_DMA_Flag_Status+0x268>)
 800776e:	428b      	cmp	r3, r1
 8007770:	d01a      	beq.n	80077a8 <Get_DMA_Flag_Status+0xa8>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	497d      	ldr	r1, [pc, #500]	; (800796c <Get_DMA_Flag_Status+0x26c>)
 8007778:	428b      	cmp	r3, r1
 800777a:	d012      	beq.n	80077a2 <Get_DMA_Flag_Status+0xa2>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	497b      	ldr	r1, [pc, #492]	; (8007970 <Get_DMA_Flag_Status+0x270>)
 8007782:	428b      	cmp	r3, r1
 8007784:	d00a      	beq.n	800779c <Get_DMA_Flag_Status+0x9c>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	497a      	ldr	r1, [pc, #488]	; (8007974 <Get_DMA_Flag_Status+0x274>)
 800778c:	428b      	cmp	r3, r1
 800778e:	d102      	bne.n	8007796 <Get_DMA_Flag_Status+0x96>
 8007790:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007794:	e01e      	b.n	80077d4 <Get_DMA_Flag_Status+0xd4>
 8007796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800779a:	e01b      	b.n	80077d4 <Get_DMA_Flag_Status+0xd4>
 800779c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80077a0:	e018      	b.n	80077d4 <Get_DMA_Flag_Status+0xd4>
 80077a2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80077a6:	e015      	b.n	80077d4 <Get_DMA_Flag_Status+0xd4>
 80077a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80077ac:	e012      	b.n	80077d4 <Get_DMA_Flag_Status+0xd4>
 80077ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077b2:	e00f      	b.n	80077d4 <Get_DMA_Flag_Status+0xd4>
 80077b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077b8:	e00c      	b.n	80077d4 <Get_DMA_Flag_Status+0xd4>
 80077ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077be:	e009      	b.n	80077d4 <Get_DMA_Flag_Status+0xd4>
 80077c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80077c4:	e006      	b.n	80077d4 <Get_DMA_Flag_Status+0xd4>
 80077c6:	2308      	movs	r3, #8
 80077c8:	e004      	b.n	80077d4 <Get_DMA_Flag_Status+0xd4>
 80077ca:	2308      	movs	r3, #8
 80077cc:	e002      	b.n	80077d4 <Get_DMA_Flag_Status+0xd4>
 80077ce:	2308      	movs	r3, #8
 80077d0:	e000      	b.n	80077d4 <Get_DMA_Flag_Status+0xd4>
 80077d2:	2308      	movs	r3, #8
 80077d4:	4013      	ands	r3, r2
 80077d6:	e154      	b.n	8007a82 <Get_DMA_Flag_Status+0x382>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	461a      	mov	r2, r3
 80077de:	4b66      	ldr	r3, [pc, #408]	; (8007978 <Get_DMA_Flag_Status+0x278>)
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d961      	bls.n	80078a8 <Get_DMA_Flag_Status+0x1a8>
 80077e4:	4b57      	ldr	r3, [pc, #348]	; (8007944 <Get_DMA_Flag_Status+0x244>)
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4956      	ldr	r1, [pc, #344]	; (8007948 <Get_DMA_Flag_Status+0x248>)
 80077ee:	428b      	cmp	r3, r1
 80077f0:	d057      	beq.n	80078a2 <Get_DMA_Flag_Status+0x1a2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4955      	ldr	r1, [pc, #340]	; (800794c <Get_DMA_Flag_Status+0x24c>)
 80077f8:	428b      	cmp	r3, r1
 80077fa:	d050      	beq.n	800789e <Get_DMA_Flag_Status+0x19e>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4953      	ldr	r1, [pc, #332]	; (8007950 <Get_DMA_Flag_Status+0x250>)
 8007802:	428b      	cmp	r3, r1
 8007804:	d049      	beq.n	800789a <Get_DMA_Flag_Status+0x19a>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4952      	ldr	r1, [pc, #328]	; (8007954 <Get_DMA_Flag_Status+0x254>)
 800780c:	428b      	cmp	r3, r1
 800780e:	d042      	beq.n	8007896 <Get_DMA_Flag_Status+0x196>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4950      	ldr	r1, [pc, #320]	; (8007958 <Get_DMA_Flag_Status+0x258>)
 8007816:	428b      	cmp	r3, r1
 8007818:	d03a      	beq.n	8007890 <Get_DMA_Flag_Status+0x190>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	494f      	ldr	r1, [pc, #316]	; (800795c <Get_DMA_Flag_Status+0x25c>)
 8007820:	428b      	cmp	r3, r1
 8007822:	d032      	beq.n	800788a <Get_DMA_Flag_Status+0x18a>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	494d      	ldr	r1, [pc, #308]	; (8007960 <Get_DMA_Flag_Status+0x260>)
 800782a:	428b      	cmp	r3, r1
 800782c:	d02a      	beq.n	8007884 <Get_DMA_Flag_Status+0x184>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	494c      	ldr	r1, [pc, #304]	; (8007964 <Get_DMA_Flag_Status+0x264>)
 8007834:	428b      	cmp	r3, r1
 8007836:	d022      	beq.n	800787e <Get_DMA_Flag_Status+0x17e>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	494a      	ldr	r1, [pc, #296]	; (8007968 <Get_DMA_Flag_Status+0x268>)
 800783e:	428b      	cmp	r3, r1
 8007840:	d01a      	beq.n	8007878 <Get_DMA_Flag_Status+0x178>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4949      	ldr	r1, [pc, #292]	; (800796c <Get_DMA_Flag_Status+0x26c>)
 8007848:	428b      	cmp	r3, r1
 800784a:	d012      	beq.n	8007872 <Get_DMA_Flag_Status+0x172>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4947      	ldr	r1, [pc, #284]	; (8007970 <Get_DMA_Flag_Status+0x270>)
 8007852:	428b      	cmp	r3, r1
 8007854:	d00a      	beq.n	800786c <Get_DMA_Flag_Status+0x16c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4946      	ldr	r1, [pc, #280]	; (8007974 <Get_DMA_Flag_Status+0x274>)
 800785c:	428b      	cmp	r3, r1
 800785e:	d102      	bne.n	8007866 <Get_DMA_Flag_Status+0x166>
 8007860:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007864:	e01e      	b.n	80078a4 <Get_DMA_Flag_Status+0x1a4>
 8007866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800786a:	e01b      	b.n	80078a4 <Get_DMA_Flag_Status+0x1a4>
 800786c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007870:	e018      	b.n	80078a4 <Get_DMA_Flag_Status+0x1a4>
 8007872:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007876:	e015      	b.n	80078a4 <Get_DMA_Flag_Status+0x1a4>
 8007878:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800787c:	e012      	b.n	80078a4 <Get_DMA_Flag_Status+0x1a4>
 800787e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007882:	e00f      	b.n	80078a4 <Get_DMA_Flag_Status+0x1a4>
 8007884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007888:	e00c      	b.n	80078a4 <Get_DMA_Flag_Status+0x1a4>
 800788a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800788e:	e009      	b.n	80078a4 <Get_DMA_Flag_Status+0x1a4>
 8007890:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007894:	e006      	b.n	80078a4 <Get_DMA_Flag_Status+0x1a4>
 8007896:	2308      	movs	r3, #8
 8007898:	e004      	b.n	80078a4 <Get_DMA_Flag_Status+0x1a4>
 800789a:	2308      	movs	r3, #8
 800789c:	e002      	b.n	80078a4 <Get_DMA_Flag_Status+0x1a4>
 800789e:	2308      	movs	r3, #8
 80078a0:	e000      	b.n	80078a4 <Get_DMA_Flag_Status+0x1a4>
 80078a2:	2308      	movs	r3, #8
 80078a4:	4013      	ands	r3, r2
 80078a6:	e0ec      	b.n	8007a82 <Get_DMA_Flag_Status+0x382>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	461a      	mov	r2, r3
 80078ae:	4b33      	ldr	r3, [pc, #204]	; (800797c <Get_DMA_Flag_Status+0x27c>)
 80078b0:	429a      	cmp	r2, r3
 80078b2:	f240 8085 	bls.w	80079c0 <Get_DMA_Flag_Status+0x2c0>
 80078b6:	4b32      	ldr	r3, [pc, #200]	; (8007980 <Get_DMA_Flag_Status+0x280>)
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4922      	ldr	r1, [pc, #136]	; (8007948 <Get_DMA_Flag_Status+0x248>)
 80078c0:	428b      	cmp	r3, r1
 80078c2:	d07a      	beq.n	80079ba <Get_DMA_Flag_Status+0x2ba>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4920      	ldr	r1, [pc, #128]	; (800794c <Get_DMA_Flag_Status+0x24c>)
 80078ca:	428b      	cmp	r3, r1
 80078cc:	d073      	beq.n	80079b6 <Get_DMA_Flag_Status+0x2b6>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	491f      	ldr	r1, [pc, #124]	; (8007950 <Get_DMA_Flag_Status+0x250>)
 80078d4:	428b      	cmp	r3, r1
 80078d6:	d06c      	beq.n	80079b2 <Get_DMA_Flag_Status+0x2b2>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	491d      	ldr	r1, [pc, #116]	; (8007954 <Get_DMA_Flag_Status+0x254>)
 80078de:	428b      	cmp	r3, r1
 80078e0:	d065      	beq.n	80079ae <Get_DMA_Flag_Status+0x2ae>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	491c      	ldr	r1, [pc, #112]	; (8007958 <Get_DMA_Flag_Status+0x258>)
 80078e8:	428b      	cmp	r3, r1
 80078ea:	d05d      	beq.n	80079a8 <Get_DMA_Flag_Status+0x2a8>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	491a      	ldr	r1, [pc, #104]	; (800795c <Get_DMA_Flag_Status+0x25c>)
 80078f2:	428b      	cmp	r3, r1
 80078f4:	d055      	beq.n	80079a2 <Get_DMA_Flag_Status+0x2a2>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4919      	ldr	r1, [pc, #100]	; (8007960 <Get_DMA_Flag_Status+0x260>)
 80078fc:	428b      	cmp	r3, r1
 80078fe:	d04d      	beq.n	800799c <Get_DMA_Flag_Status+0x29c>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4917      	ldr	r1, [pc, #92]	; (8007964 <Get_DMA_Flag_Status+0x264>)
 8007906:	428b      	cmp	r3, r1
 8007908:	d045      	beq.n	8007996 <Get_DMA_Flag_Status+0x296>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4916      	ldr	r1, [pc, #88]	; (8007968 <Get_DMA_Flag_Status+0x268>)
 8007910:	428b      	cmp	r3, r1
 8007912:	d03d      	beq.n	8007990 <Get_DMA_Flag_Status+0x290>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4914      	ldr	r1, [pc, #80]	; (800796c <Get_DMA_Flag_Status+0x26c>)
 800791a:	428b      	cmp	r3, r1
 800791c:	d035      	beq.n	800798a <Get_DMA_Flag_Status+0x28a>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4913      	ldr	r1, [pc, #76]	; (8007970 <Get_DMA_Flag_Status+0x270>)
 8007924:	428b      	cmp	r3, r1
 8007926:	d02d      	beq.n	8007984 <Get_DMA_Flag_Status+0x284>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4911      	ldr	r1, [pc, #68]	; (8007974 <Get_DMA_Flag_Status+0x274>)
 800792e:	428b      	cmp	r3, r1
 8007930:	d102      	bne.n	8007938 <Get_DMA_Flag_Status+0x238>
 8007932:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007936:	e041      	b.n	80079bc <Get_DMA_Flag_Status+0x2bc>
 8007938:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800793c:	e03e      	b.n	80079bc <Get_DMA_Flag_Status+0x2bc>
 800793e:	bf00      	nop
 8007940:	40026458 	.word	0x40026458
 8007944:	40026400 	.word	0x40026400
 8007948:	40026010 	.word	0x40026010
 800794c:	40026410 	.word	0x40026410
 8007950:	40026070 	.word	0x40026070
 8007954:	40026470 	.word	0x40026470
 8007958:	40026028 	.word	0x40026028
 800795c:	40026428 	.word	0x40026428
 8007960:	40026088 	.word	0x40026088
 8007964:	40026488 	.word	0x40026488
 8007968:	40026040 	.word	0x40026040
 800796c:	40026440 	.word	0x40026440
 8007970:	400260a0 	.word	0x400260a0
 8007974:	400264a0 	.word	0x400264a0
 8007978:	400260b8 	.word	0x400260b8
 800797c:	40026058 	.word	0x40026058
 8007980:	40026000 	.word	0x40026000
 8007984:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007988:	e018      	b.n	80079bc <Get_DMA_Flag_Status+0x2bc>
 800798a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800798e:	e015      	b.n	80079bc <Get_DMA_Flag_Status+0x2bc>
 8007990:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007994:	e012      	b.n	80079bc <Get_DMA_Flag_Status+0x2bc>
 8007996:	f44f 7300 	mov.w	r3, #512	; 0x200
 800799a:	e00f      	b.n	80079bc <Get_DMA_Flag_Status+0x2bc>
 800799c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079a0:	e00c      	b.n	80079bc <Get_DMA_Flag_Status+0x2bc>
 80079a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079a6:	e009      	b.n	80079bc <Get_DMA_Flag_Status+0x2bc>
 80079a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079ac:	e006      	b.n	80079bc <Get_DMA_Flag_Status+0x2bc>
 80079ae:	2308      	movs	r3, #8
 80079b0:	e004      	b.n	80079bc <Get_DMA_Flag_Status+0x2bc>
 80079b2:	2308      	movs	r3, #8
 80079b4:	e002      	b.n	80079bc <Get_DMA_Flag_Status+0x2bc>
 80079b6:	2308      	movs	r3, #8
 80079b8:	e000      	b.n	80079bc <Get_DMA_Flag_Status+0x2bc>
 80079ba:	2308      	movs	r3, #8
 80079bc:	4013      	ands	r3, r2
 80079be:	e060      	b.n	8007a82 <Get_DMA_Flag_Status+0x382>
 80079c0:	4b33      	ldr	r3, [pc, #204]	; (8007a90 <Get_DMA_Flag_Status+0x390>)
 80079c2:	681a      	ldr	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4932      	ldr	r1, [pc, #200]	; (8007a94 <Get_DMA_Flag_Status+0x394>)
 80079ca:	428b      	cmp	r3, r1
 80079cc:	d057      	beq.n	8007a7e <Get_DMA_Flag_Status+0x37e>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	4931      	ldr	r1, [pc, #196]	; (8007a98 <Get_DMA_Flag_Status+0x398>)
 80079d4:	428b      	cmp	r3, r1
 80079d6:	d050      	beq.n	8007a7a <Get_DMA_Flag_Status+0x37a>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	492f      	ldr	r1, [pc, #188]	; (8007a9c <Get_DMA_Flag_Status+0x39c>)
 80079de:	428b      	cmp	r3, r1
 80079e0:	d049      	beq.n	8007a76 <Get_DMA_Flag_Status+0x376>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	492e      	ldr	r1, [pc, #184]	; (8007aa0 <Get_DMA_Flag_Status+0x3a0>)
 80079e8:	428b      	cmp	r3, r1
 80079ea:	d042      	beq.n	8007a72 <Get_DMA_Flag_Status+0x372>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	492c      	ldr	r1, [pc, #176]	; (8007aa4 <Get_DMA_Flag_Status+0x3a4>)
 80079f2:	428b      	cmp	r3, r1
 80079f4:	d03a      	beq.n	8007a6c <Get_DMA_Flag_Status+0x36c>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	492b      	ldr	r1, [pc, #172]	; (8007aa8 <Get_DMA_Flag_Status+0x3a8>)
 80079fc:	428b      	cmp	r3, r1
 80079fe:	d032      	beq.n	8007a66 <Get_DMA_Flag_Status+0x366>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4929      	ldr	r1, [pc, #164]	; (8007aac <Get_DMA_Flag_Status+0x3ac>)
 8007a06:	428b      	cmp	r3, r1
 8007a08:	d02a      	beq.n	8007a60 <Get_DMA_Flag_Status+0x360>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4928      	ldr	r1, [pc, #160]	; (8007ab0 <Get_DMA_Flag_Status+0x3b0>)
 8007a10:	428b      	cmp	r3, r1
 8007a12:	d022      	beq.n	8007a5a <Get_DMA_Flag_Status+0x35a>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4926      	ldr	r1, [pc, #152]	; (8007ab4 <Get_DMA_Flag_Status+0x3b4>)
 8007a1a:	428b      	cmp	r3, r1
 8007a1c:	d01a      	beq.n	8007a54 <Get_DMA_Flag_Status+0x354>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4925      	ldr	r1, [pc, #148]	; (8007ab8 <Get_DMA_Flag_Status+0x3b8>)
 8007a24:	428b      	cmp	r3, r1
 8007a26:	d012      	beq.n	8007a4e <Get_DMA_Flag_Status+0x34e>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4923      	ldr	r1, [pc, #140]	; (8007abc <Get_DMA_Flag_Status+0x3bc>)
 8007a2e:	428b      	cmp	r3, r1
 8007a30:	d00a      	beq.n	8007a48 <Get_DMA_Flag_Status+0x348>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4922      	ldr	r1, [pc, #136]	; (8007ac0 <Get_DMA_Flag_Status+0x3c0>)
 8007a38:	428b      	cmp	r3, r1
 8007a3a:	d102      	bne.n	8007a42 <Get_DMA_Flag_Status+0x342>
 8007a3c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a40:	e01e      	b.n	8007a80 <Get_DMA_Flag_Status+0x380>
 8007a42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a46:	e01b      	b.n	8007a80 <Get_DMA_Flag_Status+0x380>
 8007a48:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a4c:	e018      	b.n	8007a80 <Get_DMA_Flag_Status+0x380>
 8007a4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a52:	e015      	b.n	8007a80 <Get_DMA_Flag_Status+0x380>
 8007a54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007a58:	e012      	b.n	8007a80 <Get_DMA_Flag_Status+0x380>
 8007a5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a5e:	e00f      	b.n	8007a80 <Get_DMA_Flag_Status+0x380>
 8007a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a64:	e00c      	b.n	8007a80 <Get_DMA_Flag_Status+0x380>
 8007a66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a6a:	e009      	b.n	8007a80 <Get_DMA_Flag_Status+0x380>
 8007a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a70:	e006      	b.n	8007a80 <Get_DMA_Flag_Status+0x380>
 8007a72:	2308      	movs	r3, #8
 8007a74:	e004      	b.n	8007a80 <Get_DMA_Flag_Status+0x380>
 8007a76:	2308      	movs	r3, #8
 8007a78:	e002      	b.n	8007a80 <Get_DMA_Flag_Status+0x380>
 8007a7a:	2308      	movs	r3, #8
 8007a7c:	e000      	b.n	8007a80 <Get_DMA_Flag_Status+0x380>
 8007a7e:	2308      	movs	r3, #8
 8007a80:	4013      	ands	r3, r2
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	370c      	adds	r7, #12
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr
 8007a8e:	bf00      	nop
 8007a90:	40026000 	.word	0x40026000
 8007a94:	40026010 	.word	0x40026010
 8007a98:	40026410 	.word	0x40026410
 8007a9c:	40026070 	.word	0x40026070
 8007aa0:	40026470 	.word	0x40026470
 8007aa4:	40026028 	.word	0x40026028
 8007aa8:	40026428 	.word	0x40026428
 8007aac:	40026088 	.word	0x40026088
 8007ab0:	40026488 	.word	0x40026488
 8007ab4:	40026040 	.word	0x40026040
 8007ab8:	40026440 	.word	0x40026440
 8007abc:	400260a0 	.word	0x400260a0
 8007ac0:	400264a0 	.word	0x400264a0

08007ac4 <Get_DMA_Counter>:
  * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
  * @param  handle_dma DMA handle
  * @retval The number of remaining data units in the current DMA Stream transfer
  */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	685b      	ldr	r3, [r3, #4]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	370c      	adds	r7, #12
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007adc:	4770      	bx	lr
	...

08007ae0 <CUSTOM_ENV_SENSOR_Init>:
  *         - ENV_HUMIDITY
  *         - ENV_GAS
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b08c      	sub	sp, #48	; 0x30
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007aea:	2300      	movs	r3, #0
 8007aec:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t function = ENV_TEMPERATURE;
 8007aee:	2301      	movs	r3, #1
 8007af0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t i;
  uint32_t component_functions = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	623b      	str	r3, [r7, #32]
  CUSTOM_ENV_SENSOR_Capabilities_t cap;

  switch (Instance)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d138      	bne.n	8007b6e <CUSTOM_ENV_SENSOR_Init+0x8e>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_0_Probe(Functions) != BSP_ERROR_NONE)
 8007afc:	6838      	ldr	r0, [r7, #0]
 8007afe:	f000 f941 	bl	8007d84 <STHS34PF80_0_Probe>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d002      	beq.n	8007b0e <CUSTOM_ENV_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 8007b08:	f04f 33ff 	mov.w	r3, #4294967295
 8007b0c:	e069      	b.n	8007be2 <CUSTOM_ENV_SENSOR_Init+0x102>
      }
      if (EnvDrv[Instance]->GetCapabilities(EnvCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8007b0e:	4a37      	ldr	r2, [pc, #220]	; (8007bec <CUSTOM_ENV_SENSOR_Init+0x10c>)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	4935      	ldr	r1, [pc, #212]	; (8007bf0 <CUSTOM_ENV_SENSOR_Init+0x110>)
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007b20:	f107 0108 	add.w	r1, r7, #8
 8007b24:	4610      	mov	r0, r2
 8007b26:	4798      	blx	r3
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d002      	beq.n	8007b34 <CUSTOM_ENV_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8007b2e:	f06f 0306 	mvn.w	r3, #6
 8007b32:	e056      	b.n	8007be2 <CUSTOM_ENV_SENSOR_Init+0x102>
      }
      if (cap.Temperature == 1U)
 8007b34:	7a3b      	ldrb	r3, [r7, #8]
 8007b36:	2b01      	cmp	r3, #1
 8007b38:	d103      	bne.n	8007b42 <CUSTOM_ENV_SENSOR_Init+0x62>
      {
        component_functions |= ENV_TEMPERATURE;
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	f043 0301 	orr.w	r3, r3, #1
 8007b40:	623b      	str	r3, [r7, #32]
      }
      if (cap.Humidity == 1U)
 8007b42:	7abb      	ldrb	r3, [r7, #10]
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	d103      	bne.n	8007b50 <CUSTOM_ENV_SENSOR_Init+0x70>
      {
        component_functions |= ENV_HUMIDITY;
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	f043 0304 	orr.w	r3, r3, #4
 8007b4e:	623b      	str	r3, [r7, #32]
      }
      if (cap.Pressure == 1U)
 8007b50:	7a7b      	ldrb	r3, [r7, #9]
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d103      	bne.n	8007b5e <CUSTOM_ENV_SENSOR_Init+0x7e>
      {
        component_functions |= ENV_PRESSURE;
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	f043 0302 	orr.w	r3, r3, #2
 8007b5c:	623b      	str	r3, [r7, #32]
      }
      if (cap.Gas == 1U)
 8007b5e:	7afb      	ldrb	r3, [r7, #11]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d108      	bne.n	8007b76 <CUSTOM_ENV_SENSOR_Init+0x96>
      {
        component_functions |= ENV_GAS;
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	f043 0308 	orr.w	r3, r3, #8
 8007b6a:	623b      	str	r3, [r7, #32]
      }
      break;
 8007b6c:	e003      	b.n	8007b76 <CUSTOM_ENV_SENSOR_Init+0x96>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007b6e:	f06f 0301 	mvn.w	r3, #1
 8007b72:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8007b74:	e000      	b.n	8007b78 <CUSTOM_ENV_SENSOR_Init+0x98>
      break;
 8007b76:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8007b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d001      	beq.n	8007b82 <CUSTOM_ENV_SENSOR_Init+0xa2>
  {
    return ret;
 8007b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b80:	e02f      	b.n	8007be2 <CUSTOM_ENV_SENSOR_Init+0x102>
  }

  for (i = 0; i < CUSTOM_ENV_FUNCTIONS_NBR; i++)
 8007b82:	2300      	movs	r3, #0
 8007b84:	627b      	str	r3, [r7, #36]	; 0x24
 8007b86:	e028      	b.n	8007bda <CUSTOM_ENV_SENSOR_Init+0xfa>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8007b88:	683a      	ldr	r2, [r7, #0]
 8007b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d11c      	bne.n	8007bce <CUSTOM_ENV_SENSOR_Init+0xee>
 8007b94:	6a3a      	ldr	r2, [r7, #32]
 8007b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b98:	4013      	ands	r3, r2
 8007b9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d116      	bne.n	8007bce <CUSTOM_ENV_SENSOR_Init+0xee>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007ba0:	4a14      	ldr	r2, [pc, #80]	; (8007bf4 <CUSTOM_ENV_SENSOR_Init+0x114>)
 8007ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ba8:	4913      	ldr	r1, [pc, #76]	; (8007bf8 <CUSTOM_ENV_SENSOR_Init+0x118>)
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	0092      	lsls	r2, r2, #2
 8007bae:	4413      	add	r3, r2
 8007bb0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	490e      	ldr	r1, [pc, #56]	; (8007bf0 <CUSTOM_ENV_SENSOR_Init+0x110>)
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	4798      	blx	r3
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d002      	beq.n	8007bce <CUSTOM_ENV_SENSOR_Init+0xee>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8007bc8:	f06f 0304 	mvn.w	r3, #4
 8007bcc:	e009      	b.n	8007be2 <CUSTOM_ENV_SENSOR_Init+0x102>
      }
    }
    function = function << 1;
 8007bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd0:	005b      	lsls	r3, r3, #1
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < CUSTOM_ENV_FUNCTIONS_NBR; i++)
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd6:	3301      	adds	r3, #1
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24
 8007bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d9d3      	bls.n	8007b88 <CUSTOM_ENV_SENSOR_Init+0xa8>
  }

  return ret;
 8007be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3730      	adds	r7, #48	; 0x30
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20000b18 	.word	0x20000b18
 8007bf0:	20000b04 	.word	0x20000b04
 8007bf4:	20000040 	.word	0x20000040
 8007bf8:	20000b08 	.word	0x20000b08

08007bfc <CUSTOM_ENV_SENSOR_Enable>:
  *         - ENV_HUMIDITY
  *         - ENV_GAS
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Enable(uint32_t Instance, uint32_t Function)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_ENV_INSTANCES_NBR)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d003      	beq.n	8007c14 <CUSTOM_ENV_SENSOR_Enable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007c0c:	f06f 0301 	mvn.w	r3, #1
 8007c10:	60fb      	str	r3, [r7, #12]
 8007c12:	e026      	b.n	8007c62 <CUSTOM_ENV_SENSOR_Enable+0x66>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007c14:	4a15      	ldr	r2, [pc, #84]	; (8007c6c <CUSTOM_ENV_SENSOR_Enable+0x70>)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d11a      	bne.n	8007c5c <CUSTOM_ENV_SENSOR_Enable+0x60>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Enable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007c26:	4a12      	ldr	r2, [pc, #72]	; (8007c70 <CUSTOM_ENV_SENSOR_Enable+0x74>)
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c2e:	4911      	ldr	r1, [pc, #68]	; (8007c74 <CUSTOM_ENV_SENSOR_Enable+0x78>)
 8007c30:	687a      	ldr	r2, [r7, #4]
 8007c32:	0092      	lsls	r2, r2, #2
 8007c34:	4413      	add	r3, r2
 8007c36:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	490e      	ldr	r1, [pc, #56]	; (8007c78 <CUSTOM_ENV_SENSOR_Enable+0x7c>)
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007c44:	4610      	mov	r0, r2
 8007c46:	4798      	blx	r3
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <CUSTOM_ENV_SENSOR_Enable+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007c4e:	f06f 0304 	mvn.w	r3, #4
 8007c52:	60fb      	str	r3, [r7, #12]
 8007c54:	e005      	b.n	8007c62 <CUSTOM_ENV_SENSOR_Enable+0x66>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007c56:	2300      	movs	r3, #0
 8007c58:	60fb      	str	r3, [r7, #12]
 8007c5a:	e002      	b.n	8007c62 <CUSTOM_ENV_SENSOR_Enable+0x66>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007c5c:	f06f 0301 	mvn.w	r3, #1
 8007c60:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007c62:	68fb      	ldr	r3, [r7, #12]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	20000b1c 	.word	0x20000b1c
 8007c70:	20000040 	.word	0x20000040
 8007c74:	20000b08 	.word	0x20000b08
 8007c78:	20000b04 	.word	0x20000b04

08007c7c <CUSTOM_ENV_SENSOR_Disable>:
  *         - ENV_HUMIDITY
  *         - ENV_GAS
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Disable(uint32_t Instance, uint32_t Function)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
 8007c84:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (Instance >= CUSTOM_ENV_INSTANCES_NBR)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d003      	beq.n	8007c94 <CUSTOM_ENV_SENSOR_Disable+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007c8c:	f06f 0301 	mvn.w	r3, #1
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	e026      	b.n	8007ce2 <CUSTOM_ENV_SENSOR_Disable+0x66>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007c94:	4a15      	ldr	r2, [pc, #84]	; (8007cec <CUSTOM_ENV_SENSOR_Disable+0x70>)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	429a      	cmp	r2, r3
 8007ca4:	d11a      	bne.n	8007cdc <CUSTOM_ENV_SENSOR_Disable+0x60>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->Disable(EnvCompObj[Instance]) != BSP_ERROR_NONE)
 8007ca6:	4a12      	ldr	r2, [pc, #72]	; (8007cf0 <CUSTOM_ENV_SENSOR_Disable+0x74>)
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cae:	4911      	ldr	r1, [pc, #68]	; (8007cf4 <CUSTOM_ENV_SENSOR_Disable+0x78>)
 8007cb0:	687a      	ldr	r2, [r7, #4]
 8007cb2:	0092      	lsls	r2, r2, #2
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	490e      	ldr	r1, [pc, #56]	; (8007cf8 <CUSTOM_ENV_SENSOR_Disable+0x7c>)
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007cc4:	4610      	mov	r0, r2
 8007cc6:	4798      	blx	r3
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <CUSTOM_ENV_SENSOR_Disable+0x5a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007cce:	f06f 0304 	mvn.w	r3, #4
 8007cd2:	60fb      	str	r3, [r7, #12]
 8007cd4:	e005      	b.n	8007ce2 <CUSTOM_ENV_SENSOR_Disable+0x66>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e002      	b.n	8007ce2 <CUSTOM_ENV_SENSOR_Disable+0x66>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007cdc:	f06f 0301 	mvn.w	r3, #1
 8007ce0:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3710      	adds	r7, #16
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20000b1c 	.word	0x20000b1c
 8007cf0:	20000040 	.word	0x20000040
 8007cf4:	20000b08 	.word	0x20000b08
 8007cf8:	20000b04 	.word	0x20000b04

08007cfc <CUSTOM_ENV_SENSOR_SetOutputDataRate>:
  *         - ENV_GAS
  * @param  Odr Output Data Rate value to be set
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_SetOutputDataRate(uint32_t Instance, uint32_t Function, float_t Odr)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_ENV_INSTANCES_NBR)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8007d10:	f06f 0301 	mvn.w	r3, #1
 8007d14:	617b      	str	r3, [r7, #20]
 8007d16:	e028      	b.n	8007d6a <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x6e>
  }
  else
  {
    if ((EnvCtx[Instance].Functions & Function) == Function)
 8007d18:	4a16      	ldr	r2, [pc, #88]	; (8007d74 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x78>)
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	4013      	ands	r3, r2
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d11c      	bne.n	8007d64 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x68>
    {
      if (EnvFuncDrv[Instance][FunctionIndex[Function]]->SetOutputDataRate(EnvCompObj[Instance], Odr) != BSP_ERROR_NONE)
 8007d2a:	4a13      	ldr	r2, [pc, #76]	; (8007d78 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x7c>)
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d32:	4912      	ldr	r1, [pc, #72]	; (8007d7c <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x80>)
 8007d34:	68fa      	ldr	r2, [r7, #12]
 8007d36:	0092      	lsls	r2, r2, #2
 8007d38:	4413      	add	r3, r2
 8007d3a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d3e:	68db      	ldr	r3, [r3, #12]
 8007d40:	490f      	ldr	r1, [pc, #60]	; (8007d80 <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x84>)
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d48:	ed97 0a01 	vldr	s0, [r7, #4]
 8007d4c:	4610      	mov	r0, r2
 8007d4e:	4798      	blx	r3
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d003      	beq.n	8007d5e <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007d56:	f06f 0304 	mvn.w	r3, #4
 8007d5a:	617b      	str	r3, [r7, #20]
 8007d5c:	e005      	b.n	8007d6a <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	e002      	b.n	8007d6a <CUSTOM_ENV_SENSOR_SetOutputDataRate+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8007d64:	f06f 0301 	mvn.w	r3, #1
 8007d68:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8007d6a:	697b      	ldr	r3, [r7, #20]
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	20000b1c 	.word	0x20000b1c
 8007d78:	20000040 	.word	0x20000040
 8007d7c:	20000b08 	.word	0x20000b08
 8007d80:	20000b04 	.word	0x20000b04

08007d84 <STHS34PF80_0_Probe>:
  * @param  Functions Environmental sensor functions. Could be:
  *         - ENV_TEMPERATURE
  * @retval BSP status
  */
static int32_t STHS34PF80_0_Probe(uint32_t Functions)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b092      	sub	sp, #72	; 0x48
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  STHS34PF80_IO_t            io_ctx;
  uint8_t                    id;
  int32_t                    ret = BSP_ERROR_NONE;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	647b      	str	r3, [r7, #68]	; 0x44
  static STHS34PF80_Object_t sths34pf80_obj_0;
  STHS34PF80_Capabilities_t  cap;

  /* Configure the driver */
  io_ctx.BusType     = STHS34PF80_I2C_BUS; /* I2C */
 8007d90:	2300      	movs	r3, #0
 8007d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.Address     = STHS34PF80_I2C_ADD;
 8007d94:	23b5      	movs	r3, #181	; 0xb5
 8007d96:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  io_ctx.Init        = CUSTOM_STHS34PF80_0_I2C_Init;
 8007d9a:	4b47      	ldr	r3, [pc, #284]	; (8007eb8 <STHS34PF80_0_Probe+0x134>)
 8007d9c:	627b      	str	r3, [r7, #36]	; 0x24
  io_ctx.DeInit      = CUSTOM_STHS34PF80_0_I2C_DeInit;
 8007d9e:	4b47      	ldr	r3, [pc, #284]	; (8007ebc <STHS34PF80_0_Probe+0x138>)
 8007da0:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.ReadReg     = CUSTOM_STHS34PF80_0_I2C_ReadReg;
 8007da2:	4b47      	ldr	r3, [pc, #284]	; (8007ec0 <STHS34PF80_0_Probe+0x13c>)
 8007da4:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.WriteReg    = CUSTOM_STHS34PF80_0_I2C_WriteReg;
 8007da6:	4b47      	ldr	r3, [pc, #284]	; (8007ec4 <STHS34PF80_0_Probe+0x140>)
 8007da8:	637b      	str	r3, [r7, #52]	; 0x34
  io_ctx.GetTick     = BSP_GetTick;
 8007daa:	4b47      	ldr	r3, [pc, #284]	; (8007ec8 <STHS34PF80_0_Probe+0x144>)
 8007dac:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.Delay       = HAL_Delay;
 8007dae:	4b47      	ldr	r3, [pc, #284]	; (8007ecc <STHS34PF80_0_Probe+0x148>)
 8007db0:	643b      	str	r3, [r7, #64]	; 0x40

  if (STHS34PF80_RegisterBusIO(&sths34pf80_obj_0, &io_ctx) != STHS34PF80_OK)
 8007db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007db6:	4619      	mov	r1, r3
 8007db8:	4845      	ldr	r0, [pc, #276]	; (8007ed0 <STHS34PF80_0_Probe+0x14c>)
 8007dba:	f7f9 fd69 	bl	8001890 <STHS34PF80_RegisterBusIO>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d003      	beq.n	8007dcc <STHS34PF80_0_Probe+0x48>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007dc4:	f06f 0306 	mvn.w	r3, #6
 8007dc8:	647b      	str	r3, [r7, #68]	; 0x44
 8007dca:	e06f      	b.n	8007eac <STHS34PF80_0_Probe+0x128>
  }
  else if (STHS34PF80_ReadID(&sths34pf80_obj_0, &id) != STHS34PF80_OK)
 8007dcc:	f107 0323 	add.w	r3, r7, #35	; 0x23
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	483f      	ldr	r0, [pc, #252]	; (8007ed0 <STHS34PF80_0_Probe+0x14c>)
 8007dd4:	f7f9 fdef 	bl	80019b6 <STHS34PF80_ReadID>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <STHS34PF80_0_Probe+0x62>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007dde:	f06f 0306 	mvn.w	r3, #6
 8007de2:	647b      	str	r3, [r7, #68]	; 0x44
 8007de4:	e062      	b.n	8007eac <STHS34PF80_0_Probe+0x128>
  }
  else if (id != STHS34PF80_ID)
 8007de6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007dea:	2bd3      	cmp	r3, #211	; 0xd3
 8007dec:	d003      	beq.n	8007df6 <STHS34PF80_0_Probe+0x72>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007dee:	f06f 0306 	mvn.w	r3, #6
 8007df2:	647b      	str	r3, [r7, #68]	; 0x44
 8007df4:	e05a      	b.n	8007eac <STHS34PF80_0_Probe+0x128>
  }
  else
  {
    (void)STHS34PF80_GetCapabilities(&sths34pf80_obj_0, &cap);
 8007df6:	f107 0308 	add.w	r3, r7, #8
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	4834      	ldr	r0, [pc, #208]	; (8007ed0 <STHS34PF80_0_Probe+0x14c>)
 8007dfe:	f7f9 fdf5 	bl	80019ec <STHS34PF80_GetCapabilities>

    EnvCtx[CUSTOM_STHS34PF80_0].Functions = ((uint32_t)cap.Temperature)
 8007e02:	7a3b      	ldrb	r3, [r7, #8]
 8007e04:	461a      	mov	r2, r3
                                          | ((uint32_t)cap.Pressure << 1)
 8007e06:	7a7b      	ldrb	r3, [r7, #9]
 8007e08:	005b      	lsls	r3, r3, #1
 8007e0a:	431a      	orrs	r2, r3
                                          | ((uint32_t)cap.Humidity << 2)
 8007e0c:	7abb      	ldrb	r3, [r7, #10]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	431a      	orrs	r2, r3
                                          | ((uint32_t)cap.Gas      << 3);
 8007e12:	7afb      	ldrb	r3, [r7, #11]
 8007e14:	00db      	lsls	r3, r3, #3
 8007e16:	4313      	orrs	r3, r2
    EnvCtx[CUSTOM_STHS34PF80_0].Functions = ((uint32_t)cap.Temperature)
 8007e18:	4a2e      	ldr	r2, [pc, #184]	; (8007ed4 <STHS34PF80_0_Probe+0x150>)
 8007e1a:	6013      	str	r3, [r2, #0]

    EnvCompObj[CUSTOM_STHS34PF80_0] = &sths34pf80_obj_0;
 8007e1c:	4b2e      	ldr	r3, [pc, #184]	; (8007ed8 <STHS34PF80_0_Probe+0x154>)
 8007e1e:	4a2c      	ldr	r2, [pc, #176]	; (8007ed0 <STHS34PF80_0_Probe+0x14c>)
 8007e20:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    EnvDrv[CUSTOM_STHS34PF80_0] = (ENV_SENSOR_CommonDrv_t *)(void *)&STHS34PF80_COMMON_Driver;
 8007e22:	4b2e      	ldr	r3, [pc, #184]	; (8007edc <STHS34PF80_0_Probe+0x158>)
 8007e24:	4a2e      	ldr	r2, [pc, #184]	; (8007ee0 <STHS34PF80_0_Probe+0x15c>)
 8007e26:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_TEMPERATURE) == ENV_TEMPERATURE) && (cap.Temperature == 1U))
 8007e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d11d      	bne.n	8007e6a <STHS34PF80_0_Probe+0xe6>
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d018      	beq.n	8007e6a <STHS34PF80_0_Probe+0xe6>
 8007e38:	7a3b      	ldrb	r3, [r7, #8]
 8007e3a:	2b01      	cmp	r3, #1
 8007e3c:	d115      	bne.n	8007e6a <STHS34PF80_0_Probe+0xe6>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      EnvFuncDrv[CUSTOM_STHS34PF80_0][FunctionIndex[ENV_TEMPERATURE]] = (ENV_SENSOR_FuncDrv_t *)(void *)&STHS34PF80_TEMP_Driver;
 8007e3e:	4b29      	ldr	r3, [pc, #164]	; (8007ee4 <STHS34PF80_0_Probe+0x160>)
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	4a29      	ldr	r2, [pc, #164]	; (8007ee8 <STHS34PF80_0_Probe+0x164>)
 8007e44:	4929      	ldr	r1, [pc, #164]	; (8007eec <STHS34PF80_0_Probe+0x168>)
 8007e46:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (EnvDrv[CUSTOM_STHS34PF80_0]->Init(EnvCompObj[CUSTOM_STHS34PF80_0]) != STHS34PF80_OK)
 8007e4a:	4b24      	ldr	r3, [pc, #144]	; (8007edc <STHS34PF80_0_Probe+0x158>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4a21      	ldr	r2, [pc, #132]	; (8007ed8 <STHS34PF80_0_Probe+0x154>)
 8007e52:	6812      	ldr	r2, [r2, #0]
 8007e54:	4610      	mov	r0, r2
 8007e56:	4798      	blx	r3
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d003      	beq.n	8007e66 <STHS34PF80_0_Probe+0xe2>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e5e:	f06f 0304 	mvn.w	r3, #4
 8007e62:	647b      	str	r3, [r7, #68]	; 0x44
 8007e64:	e001      	b.n	8007e6a <STHS34PF80_0_Probe+0xe6>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8007e66:	2300      	movs	r3, #0
 8007e68:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_PRESSURE) == ENV_PRESSURE))
 8007e6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d107      	bne.n	8007e80 <STHS34PF80_0_Probe+0xfc>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <STHS34PF80_0_Probe+0xfc>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e7a:	f06f 0304 	mvn.w	r3, #4
 8007e7e:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_HUMIDITY) == ENV_HUMIDITY))
 8007e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d107      	bne.n	8007e96 <STHS34PF80_0_Probe+0x112>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f003 0304 	and.w	r3, r3, #4
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d002      	beq.n	8007e96 <STHS34PF80_0_Probe+0x112>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007e90:	f06f 0304 	mvn.w	r3, #4
 8007e94:	647b      	str	r3, [r7, #68]	; 0x44
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & ENV_GAS) == ENV_GAS))
 8007e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d107      	bne.n	8007eac <STHS34PF80_0_Probe+0x128>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f003 0308 	and.w	r3, r3, #8
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d002      	beq.n	8007eac <STHS34PF80_0_Probe+0x128>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ea6:	f06f 0304 	mvn.w	r3, #4
 8007eaa:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8007eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3748      	adds	r7, #72	; 0x48
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}
 8007eb6:	bf00      	nop
 8007eb8:	080014f5 	.word	0x080014f5
 8007ebc:	08001559 	.word	0x08001559
 8007ec0:	0800160d 	.word	0x0800160d
 8007ec4:	080015a9 	.word	0x080015a9
 8007ec8:	08001671 	.word	0x08001671
 8007ecc:	080029b1 	.word	0x080029b1
 8007ed0:	20000b20 	.word	0x20000b20
 8007ed4:	20000b1c 	.word	0x20000b1c
 8007ed8:	20000b04 	.word	0x20000b04
 8007edc:	20000b18 	.word	0x20000b18
 8007ee0:	20000008 	.word	0x20000008
 8007ee4:	20000040 	.word	0x20000040
 8007ee8:	20000b08 	.word	0x20000b08
 8007eec:	20000018 	.word	0x20000018

08007ef0 <CUSTOM_ENV_SENSOR_Get_TAmbRaw>:
  * @param  Instance the device instance
  * @param  Value the ambient raw temperature data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_TAmbRaw(uint32_t Instance, int16_t *Value)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b084      	sub	sp, #16
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d111      	bne.n	8007f24 <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetAmbientTemperatureRaw(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007f00:	4a0d      	ldr	r2, [pc, #52]	; (8007f38 <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x48>)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f08:	6839      	ldr	r1, [r7, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7f9 fedf 	bl	8001cce <STHS34PF80_GetAmbientTemperatureRaw>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d003      	beq.n	8007f1e <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f16:	f06f 0304 	mvn.w	r3, #4
 8007f1a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007f1c:	e006      	b.n	8007f2c <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x3c>
        ret = BSP_ERROR_NONE;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	60fb      	str	r3, [r7, #12]
      break;
 8007f22:	e003      	b.n	8007f2c <CUSTOM_ENV_SENSOR_Get_TAmbRaw+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007f24:	f06f 0301 	mvn.w	r3, #1
 8007f28:	60fb      	str	r3, [r7, #12]
      break;
 8007f2a:	bf00      	nop
  }

  return ret;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}
 8007f36:	bf00      	nop
 8007f38:	20000b04 	.word	0x20000b04

08007f3c <CUSTOM_ENV_SENSOR_Get_TObjRaw>:
  * @param  Instance the device instance
  * @param  Value the object raw temperature data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_TObjRaw(uint32_t Instance, int16_t *Value)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d111      	bne.n	8007f70 <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetObjectTemperatureRaw(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007f4c:	4a0d      	ldr	r2, [pc, #52]	; (8007f84 <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x48>)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7f9 fea3 	bl	8001ca2 <STHS34PF80_GetObjectTemperatureRaw>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007f62:	f06f 0304 	mvn.w	r3, #4
 8007f66:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007f68:	e006      	b.n	8007f78 <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x3c>
        ret = BSP_ERROR_NONE;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60fb      	str	r3, [r7, #12]
      break;
 8007f6e:	e003      	b.n	8007f78 <CUSTOM_ENV_SENSOR_Get_TObjRaw+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007f70:	f06f 0301 	mvn.w	r3, #1
 8007f74:	60fb      	str	r3, [r7, #12]
      break;
 8007f76:	bf00      	nop
  }

  return ret;
 8007f78:	68fb      	ldr	r3, [r7, #12]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	20000b04 	.word	0x20000b04

08007f88 <CUSTOM_ENV_SENSOR_Get_AvgTmos>:
  * @param  Instance the device instance
  * @param  Value the AvgTmos data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_AvgTmos(uint32_t Instance, uint16_t *Value)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d111      	bne.n	8007fbc <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetAvgTmos(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007f98:	4a0d      	ldr	r2, [pc, #52]	; (8007fd0 <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x48>)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7f9 fed6 	bl	8001d54 <STHS34PF80_GetAvgTmos>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007fae:	f06f 0304 	mvn.w	r3, #4
 8007fb2:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8007fb4:	e006      	b.n	8007fc4 <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x3c>
        ret = BSP_ERROR_NONE;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	60fb      	str	r3, [r7, #12]
      break;
 8007fba:	e003      	b.n	8007fc4 <CUSTOM_ENV_SENSOR_Get_AvgTmos+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8007fbc:	f06f 0301 	mvn.w	r3, #1
 8007fc0:	60fb      	str	r3, [r7, #12]
      break;
 8007fc2:	bf00      	nop
  }

  return ret;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3710      	adds	r7, #16
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
 8007fce:	bf00      	nop
 8007fd0:	20000b04 	.word	0x20000b04

08007fd4 <CUSTOM_ENV_SENSOR_Set_AvgTmos>:
  * @param  Instance the device instance
  * @param  Value the AvgTmos data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Set_AvgTmos(uint32_t Instance, uint16_t Value)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	807b      	strh	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d112      	bne.n	800800c <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x38>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_SetAvgTmos(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8007fe6:	4a0e      	ldr	r2, [pc, #56]	; (8008020 <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x4c>)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fee:	887a      	ldrh	r2, [r7, #2]
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7f9 ff08 	bl	8001e08 <STHS34PF80_SetAvgTmos>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d003      	beq.n	8008006 <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x32>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007ffe:	f06f 0304 	mvn.w	r3, #4
 8008002:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8008004:	e006      	b.n	8008014 <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x40>
        ret = BSP_ERROR_NONE;
 8008006:	2300      	movs	r3, #0
 8008008:	60fb      	str	r3, [r7, #12]
      break;
 800800a:	e003      	b.n	8008014 <CUSTOM_ENV_SENSOR_Set_AvgTmos+0x40>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 800800c:	f06f 0301 	mvn.w	r3, #1
 8008010:	60fb      	str	r3, [r7, #12]
      break;
 8008012:	bf00      	nop
  }

  return ret;
 8008014:	68fb      	ldr	r3, [r7, #12]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
 800801e:	bf00      	nop
 8008020:	20000b04 	.word	0x20000b04

08008024 <CUSTOM_ENV_SENSOR_Get_AvgT>:
  * @param  Instance the device instance
  * @param  Value the AvgT data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_AvgT(uint32_t Instance, uint8_t *Value)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d111      	bne.n	8008058 <CUSTOM_ENV_SENSOR_Get_AvgT+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetAvgT(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8008034:	4a0d      	ldr	r2, [pc, #52]	; (800806c <CUSTOM_ENV_SENSOR_Get_AvgT+0x48>)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	4618      	mov	r0, r3
 8008040:	f7f9 ff24 	bl	8001e8c <STHS34PF80_GetAvgT>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d003      	beq.n	8008052 <CUSTOM_ENV_SENSOR_Get_AvgT+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800804a:	f06f 0304 	mvn.w	r3, #4
 800804e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8008050:	e006      	b.n	8008060 <CUSTOM_ENV_SENSOR_Get_AvgT+0x3c>
        ret = BSP_ERROR_NONE;
 8008052:	2300      	movs	r3, #0
 8008054:	60fb      	str	r3, [r7, #12]
      break;
 8008056:	e003      	b.n	8008060 <CUSTOM_ENV_SENSOR_Get_AvgT+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8008058:	f06f 0301 	mvn.w	r3, #1
 800805c:	60fb      	str	r3, [r7, #12]
      break;
 800805e:	bf00      	nop
  }

  return ret;
 8008060:	68fb      	ldr	r3, [r7, #12]
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20000b04 	.word	0x20000b04

08008070 <CUSTOM_ENV_SENSOR_Get_GainFactor>:
  * @param  Instance the device instance
  * @param  Value the GainFactor data
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_GainFactor(uint32_t Instance, uint8_t *Value)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d111      	bne.n	80080a4 <CUSTOM_ENV_SENSOR_Get_GainFactor+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetGainFactor(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 8008080:	4a0d      	ldr	r2, [pc, #52]	; (80080b8 <CUSTOM_ENV_SENSOR_Get_GainFactor+0x48>)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	4618      	mov	r0, r3
 800808c:	f7f9 ff3c 	bl	8001f08 <STHS34PF80_GetGainFactor>
 8008090:	4603      	mov	r3, r0
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <CUSTOM_ENV_SENSOR_Get_GainFactor+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008096:	f06f 0304 	mvn.w	r3, #4
 800809a:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 800809c:	e006      	b.n	80080ac <CUSTOM_ENV_SENSOR_Get_GainFactor+0x3c>
        ret = BSP_ERROR_NONE;
 800809e:	2300      	movs	r3, #0
 80080a0:	60fb      	str	r3, [r7, #12]
      break;
 80080a2:	e003      	b.n	80080ac <CUSTOM_ENV_SENSOR_Get_GainFactor+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80080a4:	f06f 0301 	mvn.w	r3, #1
 80080a8:	60fb      	str	r3, [r7, #12]
      break;
 80080aa:	bf00      	nop
  }

  return ret;
 80080ac:	68fb      	ldr	r3, [r7, #12]
}
 80080ae:	4618      	mov	r0, r3
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	20000b04 	.word	0x20000b04

080080bc <CUSTOM_ENV_SENSOR_Get_Sensitivity>:
  * @param  Instance the device instance
  * @param  Value the Sensitivity value
  * @retval BSP status
  */
int32_t CUSTOM_ENV_SENSOR_Get_Sensitivity(uint32_t Instance, uint16_t *Value)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  switch (Instance)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d111      	bne.n	80080f0 <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x34>
  {
#if (USE_CUSTOM_ENV_SENSOR_STHS34PF80_0 == 1)
    case CUSTOM_STHS34PF80_0:
      if (STHS34PF80_GetSensitivity(EnvCompObj[Instance], Value) != BSP_ERROR_NONE)
 80080cc:	4a0d      	ldr	r2, [pc, #52]	; (8008104 <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x48>)
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080d4:	6839      	ldr	r1, [r7, #0]
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7f9 ff42 	bl	8001f60 <STHS34PF80_GetSensitivity>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x2e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80080e2:	f06f 0304 	mvn.w	r3, #4
 80080e6:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 80080e8:	e006      	b.n	80080f8 <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x3c>
        ret = BSP_ERROR_NONE;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60fb      	str	r3, [r7, #12]
      break;
 80080ee:	e003      	b.n	80080f8 <CUSTOM_ENV_SENSOR_Get_Sensitivity+0x3c>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 80080f0:	f06f 0301 	mvn.w	r3, #1
 80080f4:	60fb      	str	r3, [r7, #12]
      break;
 80080f6:	bf00      	nop
  }

  return ret;
 80080f8:	68fb      	ldr	r3, [r7, #12]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3710      	adds	r7, #16
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20000b04 	.word	0x20000b04

08008108 <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8008108:	b480      	push	{r7}
 800810a:	af00      	add	r7, sp, #0
#ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
#endif
#endif
#endif
}
 800810c:	bf00      	nop
 800810e:	46bd      	mov	sp, r7
 8008110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008114:	4770      	bx	lr

08008116 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8008116:	b480      	push	{r7}
 8008118:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
#endif
#endif
}
 800811a:	bf00      	nop
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8008124:	b480      	push	{r7}
 8008126:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
#endif
#endif
}
 8008128:	bf00      	nop
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr

08008132 <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 8008132:	b480      	push	{r7}
 8008134:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
#endif
#endif
}
 8008136:	bf00      	nop
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_SENSOR_Init(CUSTOM_TEMP_INSTANCE_0, HYBRID_TEMPERATURE);
#endif
#else
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
 8008144:	2101      	movs	r1, #1
 8008146:	2000      	movs	r0, #0
 8008148:	f7ff fcca 	bl	8007ae0 <CUSTOM_ENV_SENSOR_Init>
#endif
#endif
#endif
}
 800814c:	bf00      	nop
 800814e:	bd80      	pop	{r7, pc}

08008150 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 8008150:	b480      	push	{r7}
 8008152:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
#endif
#endif
}
 8008154:	bf00      	nop
 8008156:	46bd      	mov	sp, r7
 8008158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815c:	4770      	bx	lr

0800815e <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 800815e:	b480      	push	{r7}
 8008160:	af00      	add	r7, sp, #0
#ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
#endif
#endif
#endif
}
 8008162:	bf00      	nop
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 800816c:	b480      	push	{r7}
 800816e:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
#endif
#endif
}
 8008170:	bf00      	nop
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr

0800817a <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 800817a:	b480      	push	{r7}
 800817c:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
#endif
#endif
}
 800817e:	bf00      	nop
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr

08008188 <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 8008188:	b480      	push	{r7}
 800818a:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
#endif
#endif
}
 800818c:	bf00      	nop
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_ENV_SENSOR_Enable(CUSTOM_TEMP_INSTANCE_0, HYBRID_TEMPERATURE);
#endif
#else
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
 800819a:	2101      	movs	r1, #1
 800819c:	2000      	movs	r0, #0
 800819e:	f7ff fd2d 	bl	8007bfc <CUSTOM_ENV_SENSOR_Enable>
#endif
#endif
#endif
}
 80081a2:	bf00      	nop
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 80081a6:	b480      	push	{r7}
 80081a8:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
#endif
#endif
}
 80081aa:	bf00      	nop
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr

080081b4 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 80081b4:	b480      	push	{r7}
 80081b6:	af00      	add	r7, sp, #0
#ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
#endif
#endif
#endif
}
 80081b8:	bf00      	nop
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 80081c2:	b480      	push	{r7}
 80081c4:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
#endif
#endif
}
 80081c6:	bf00      	nop
 80081c8:	46bd      	mov	sp, r7
 80081ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ce:	4770      	bx	lr

080081d0 <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
#endif
#endif
}
 80081d4:	bf00      	nop
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr

080081de <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 80081de:	b480      	push	{r7}
 80081e0:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
#endif
#endif
}
 80081e2:	bf00      	nop
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	af00      	add	r7, sp, #0
  (void)CUSTOM_HYBRID_ENV_SENSOR_Disable(CUSTOM_TEMP_INSTANCE_0, HYBRID_TEMPERATURE);
#endif
#else
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
 80081f0:	2101      	movs	r1, #1
 80081f2:	2000      	movs	r0, #0
 80081f4:	f7ff fd42 	bl	8007c7c <CUSTOM_ENV_SENSOR_Disable>
#endif
#endif
#endif
}
 80081f8:	bf00      	nop
 80081fa:	bd80      	pop	{r7, pc}

080081fc <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
#endif
#endif
}
 8008200:	bf00      	nop
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <BSP_SENSOR_TEMP_SetOutputDataRate>:
  * @brief  Set output data rate for temperature sensors
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_TEMP_SetOutputDataRate(float Odr)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	ed87 0a01 	vstr	s0, [r7, #4]
  (void)CUSTOM_HYBRID_ENV_SENSOR_SetOutputDataRate(CUSTOM_TEMP_INSTANCE_0, HYBRID_TEMPERATURE, Odr);
#endif
#else
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_SetOutputDataRate(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE, Odr);
 8008214:	ed97 0a01 	vldr	s0, [r7, #4]
 8008218:	2101      	movs	r1, #1
 800821a:	2000      	movs	r0, #0
 800821c:	f7ff fd6e 	bl	8007cfc <CUSTOM_ENV_SENSOR_SetOutputDataRate>
#endif
#endif
#endif
}
 8008220:	bf00      	nop
 8008222:	3708      	adds	r7, #8
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <BSP_SENSOR_TEMP_GetTAmbRaw>:
  * @brief  Get the TAmbRaw value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetTAmbRaw(int16_t *Value)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_TAmbRaw(CUSTOM_TEMP_INSTANCE_0, Value);
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	2000      	movs	r0, #0
 8008234:	f7ff fe5c 	bl	8007ef0 <CUSTOM_ENV_SENSOR_Get_TAmbRaw>
#endif
#endif
}
 8008238:	bf00      	nop
 800823a:	3708      	adds	r7, #8
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <BSP_SENSOR_TEMP_GetTObjRaw>:
  * @brief  Get the TObjRaw value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetTObjRaw(int16_t *Value)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_TObjRaw(CUSTOM_TEMP_INSTANCE_0, Value);
 8008248:	6879      	ldr	r1, [r7, #4]
 800824a:	2000      	movs	r0, #0
 800824c:	f7ff fe76 	bl	8007f3c <CUSTOM_ENV_SENSOR_Get_TObjRaw>
#endif
#endif
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <BSP_SENSOR_TEMP_GetAvgTmos>:
  * @brief  Get the AvgTmos value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetAvgTmos(uint16_t *Value)
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_AvgTmos(CUSTOM_TEMP_INSTANCE_0, Value);
 8008260:	6879      	ldr	r1, [r7, #4]
 8008262:	2000      	movs	r0, #0
 8008264:	f7ff fe90 	bl	8007f88 <CUSTOM_ENV_SENSOR_Get_AvgTmos>
#endif
#endif
}
 8008268:	bf00      	nop
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <BSP_SENSOR_TEMP_SetAvgTmos>:
  * @brief  Set the AvgTmos value to infrared temperature sensor
  * @param  Value the value to be written to
  * @retval None
  */
void BSP_SENSOR_TEMP_SetAvgTmos(uint16_t Value)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	4603      	mov	r3, r0
 8008278:	80fb      	strh	r3, [r7, #6]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Set_AvgTmos(CUSTOM_TEMP_INSTANCE_0, Value);
 800827a:	88fb      	ldrh	r3, [r7, #6]
 800827c:	4619      	mov	r1, r3
 800827e:	2000      	movs	r0, #0
 8008280:	f7ff fea8 	bl	8007fd4 <CUSTOM_ENV_SENSOR_Set_AvgTmos>
#endif
#endif
}
 8008284:	bf00      	nop
 8008286:	3708      	adds	r7, #8
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}

0800828c <BSP_SENSOR_TEMP_GetAvgT>:
  * @brief  Get the AvgT value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetAvgT(uint8_t *Value)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_AvgT(CUSTOM_TEMP_INSTANCE_0, Value);
 8008294:	6879      	ldr	r1, [r7, #4]
 8008296:	2000      	movs	r0, #0
 8008298:	f7ff fec4 	bl	8008024 <CUSTOM_ENV_SENSOR_Get_AvgT>
#endif
#endif
}
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <BSP_SENSOR_TEMP_GetGainFactor>:
  * @brief  Get the GainFactor value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetGainFactor(uint8_t *Value)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_GainFactor(CUSTOM_TEMP_INSTANCE_0, Value);
 80082ac:	6879      	ldr	r1, [r7, #4]
 80082ae:	2000      	movs	r0, #0
 80082b0:	f7ff fede 	bl	8008070 <CUSTOM_ENV_SENSOR_Get_GainFactor>
#endif
#endif
}
 80082b4:	bf00      	nop
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <BSP_SENSOR_TEMP_GetSensitivity>:
  * @brief  Get the Sensitivity value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetSensitivity(uint16_t *Value)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_Sensitivity(CUSTOM_TEMP_INSTANCE_0, Value);
 80082c4:	6879      	ldr	r1, [r7, #4]
 80082c6:	2000      	movs	r0, #0
 80082c8:	f7ff fef8 	bl	80080bc <CUSTOM_ENV_SENSOR_Get_Sensitivity>
#endif
#endif
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <BUILD_REPLY_HEADER>:
  * @brief  Build the reply header
  * @param  Msg the pointer to the message to be built
  * @retval None
  */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	795a      	ldrb	r2, [r3, #5]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2232      	movs	r2, #50	; 0x32
 80082e8:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	799b      	ldrb	r3, [r3, #6]
 80082ee:	3b80      	subs	r3, #128	; 0x80
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	719a      	strb	r2, [r3, #6]
}
 80082f6:	bf00      	nop
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
	...

08008304 <INIT_STREAMING_HEADER>:
  * @brief  Initialize the streaming header
  * @param  Msg the pointer to the header to be initialized
  * @retval None
  */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 800830c:	4b09      	ldr	r3, [pc, #36]	; (8008334 <INIT_STREAMING_HEADER+0x30>)
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	b2da      	uxtb	r2, r3
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2232      	movs	r2, #50	; 0x32
 800831a:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2208      	movs	r2, #8
 8008320:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2203      	movs	r2, #3
 8008326:	601a      	str	r2, [r3, #0]
}
 8008328:	bf00      	nop
 800832a:	370c      	adds	r7, #12
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr
 8008334:	20000080 	.word	0x20000080

08008338 <HandleMSG>:
  */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SourceAddr | CMD | PAYLOAD
 *      1          1         1       N
 */
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b098      	sub	sp, #96	; 0x60
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  int ret = 1;
 8008340:	2301      	movs	r3, #1
 8008342:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 8008344:	2300      	movs	r3, #0
 8008346:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b01      	cmp	r3, #1
 800834e:	d801      	bhi.n	8008354 <HandleMSG+0x1c>
  {
    return 0;
 8008350:	2300      	movs	r3, #0
 8008352:	e357      	b.n	8008a04 <HandleMSG+0x6cc>
  }

  if (Msg->Data[0] != DEV_ADDR)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	791b      	ldrb	r3, [r3, #4]
 8008358:	2b32      	cmp	r3, #50	; 0x32
 800835a:	d001      	beq.n	8008360 <HandleMSG+0x28>
  {
    return 0;
 800835c:	2300      	movs	r3, #0
 800835e:	e351      	b.n	8008a04 <HandleMSG+0x6cc>
  }

  switch (Msg->Data[2])   /* CMD */
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	799b      	ldrb	r3, [r3, #6]
 8008364:	2b12      	cmp	r3, #18
 8008366:	dc6b      	bgt.n	8008440 <HandleMSG+0x108>
 8008368:	2b00      	cmp	r3, #0
 800836a:	dc3d      	bgt.n	80083e8 <HandleMSG+0xb0>
 800836c:	e346      	b.n	80089fc <HandleMSG+0x6c4>
 800836e:	3b60      	subs	r3, #96	; 0x60
 8008370:	2b1a      	cmp	r3, #26
 8008372:	f200 8343 	bhi.w	80089fc <HandleMSG+0x6c4>
 8008376:	a201      	add	r2, pc, #4	; (adr r2, 800837c <HandleMSG+0x44>)
 8008378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800837c:	080084e3 	.word	0x080084e3
 8008380:	080089fd 	.word	0x080089fd
 8008384:	08008511 	.word	0x08008511
 8008388:	080089fd 	.word	0x080089fd
 800838c:	080089fd 	.word	0x080089fd
 8008390:	080089fd 	.word	0x080089fd
 8008394:	080089fd 	.word	0x080089fd
 8008398:	080089fd 	.word	0x080089fd
 800839c:	080089fd 	.word	0x080089fd
 80083a0:	080089fd 	.word	0x080089fd
 80083a4:	080089fd 	.word	0x080089fd
 80083a8:	080089fd 	.word	0x080089fd
 80083ac:	080089fd 	.word	0x080089fd
 80083b0:	080089fd 	.word	0x080089fd
 80083b4:	080089fd 	.word	0x080089fd
 80083b8:	080089fd 	.word	0x080089fd
 80083bc:	080089fd 	.word	0x080089fd
 80083c0:	080089fd 	.word	0x080089fd
 80083c4:	080089fd 	.word	0x080089fd
 80083c8:	080089fd 	.word	0x080089fd
 80083cc:	080089fd 	.word	0x080089fd
 80083d0:	080089fd 	.word	0x080089fd
 80083d4:	0800853f 	.word	0x0800853f
 80083d8:	080089fd 	.word	0x080089fd
 80083dc:	080089fd 	.word	0x080089fd
 80083e0:	080089fd 	.word	0x080089fd
 80083e4:	0800856d 	.word	0x0800856d
 80083e8:	3b01      	subs	r3, #1
 80083ea:	2b11      	cmp	r3, #17
 80083ec:	f200 8306 	bhi.w	80089fc <HandleMSG+0x6c4>
 80083f0:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <HandleMSG+0xc0>)
 80083f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f6:	bf00      	nop
 80083f8:	0800844d 	.word	0x0800844d
 80083fc:	08008487 	.word	0x08008487
 8008400:	080089fd 	.word	0x080089fd
 8008404:	080089fd 	.word	0x080089fd
 8008408:	080089fd 	.word	0x080089fd
 800840c:	080089fd 	.word	0x080089fd
 8008410:	080089fd 	.word	0x080089fd
 8008414:	0800859b 	.word	0x0800859b
 8008418:	08008647 	.word	0x08008647
 800841c:	080089fd 	.word	0x080089fd
 8008420:	080089fd 	.word	0x080089fd
 8008424:	08008691 	.word	0x08008691
 8008428:	080089fd 	.word	0x080089fd
 800842c:	0800846d 	.word	0x0800846d
 8008430:	080089fd 	.word	0x080089fd
 8008434:	080086d7 	.word	0x080086d7
 8008438:	0800894d 	.word	0x0800894d
 800843c:	0800899b 	.word	0x0800899b
 8008440:	2b7a      	cmp	r3, #122	; 0x7a
 8008442:	f300 82db 	bgt.w	80089fc <HandleMSG+0x6c4>
 8008446:	2b60      	cmp	r3, #96	; 0x60
 8008448:	da91      	bge.n	800836e <HandleMSG+0x36>
 800844a:	e2d7      	b.n	80089fc <HandleMSG+0x6c4>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b03      	cmp	r3, #3
 8008452:	d001      	beq.n	8008458 <HandleMSG+0x120>
      {
        return 0;
 8008454:	2300      	movs	r3, #0
 8008456:	e2d5      	b.n	8008a04 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7ff ff3b 	bl	80082d4 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2203      	movs	r2, #3
 8008462:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7ff f917 	bl	8007698 <UART_SendMsg>
      break;
 800846a:	e2ca      	b.n	8008a02 <HandleMSG+0x6ca>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b03      	cmp	r3, #3
 8008472:	d001      	beq.n	8008478 <HandleMSG+0x140>
      {
        return 0;
 8008474:	2300      	movs	r3, #0
 8008476:	e2c5      	b.n	8008a04 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	f7ff ff2b 	bl	80082d4 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2203      	movs	r2, #3
 8008482:	601a      	str	r2, [r3, #0]
      break;
 8008484:	e2bd      	b.n	8008a02 <HandleMSG+0x6ca>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b03      	cmp	r3, #3
 800848c:	d001      	beq.n	8008492 <HandleMSG+0x15a>
      {
        return 0;
 800848e:	2300      	movs	r3, #0
 8008490:	e2b8      	b.n	8008a04 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f7ff ff1e 	bl	80082d4 <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 8008498:	f107 020c 	add.w	r2, r7, #12
 800849c:	f107 0310 	add.w	r3, r7, #16
 80084a0:	4611      	mov	r1, r2
 80084a2:	4618      	mov	r0, r3
 80084a4:	f000 fb08 	bl	8008ab8 <Get_PresentationString>

      i = 0;
 80084a8:	2300      	movs	r3, #0
 80084aa:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 80084ac:	e00d      	b.n	80084ca <HandleMSG+0x192>
      {
        Msg->Data[3U + i] = ps[i];
 80084ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084b0:	3303      	adds	r3, #3
 80084b2:	f107 0110 	add.w	r1, r7, #16
 80084b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084b8:	440a      	add	r2, r1
 80084ba:	7811      	ldrb	r1, [r2, #0]
 80084bc:	687a      	ldr	r2, [r7, #4]
 80084be:	4413      	add	r3, r2
 80084c0:	460a      	mov	r2, r1
 80084c2:	711a      	strb	r2, [r3, #4]
        i++;
 80084c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084c6:	3301      	adds	r3, #1
 80084c8:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d3ed      	bcc.n	80084ae <HandleMSG+0x176>
      }

      Msg->Len = 3U + i;
 80084d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80084d4:	1cda      	adds	r2, r3, #3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f7ff f8dc 	bl	8007698 <UART_SendMsg>
      break;
 80084e0:	e28f      	b.n	8008a02 <HandleMSG+0x6ca>

    case CMD_PRESSURE_Init:
      if (Msg->Len < 3U)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2b02      	cmp	r3, #2
 80084e8:	d801      	bhi.n	80084ee <HandleMSG+0x1b6>
      {
        return 0;
 80084ea:	2300      	movs	r3, #0
 80084ec:	e28a      	b.n	8008a04 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f7ff fef0 	bl	80082d4 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	3307      	adds	r3, #7
 80084f8:	2204      	movs	r2, #4
 80084fa:	21ff      	movs	r1, #255	; 0xff
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fc73 	bl	8008de8 <Serialize_s32>
      Msg->Len = 3 + 4;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2207      	movs	r2, #7
 8008506:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7ff f8c5 	bl	8007698 <UART_SendMsg>
      break;
 800850e:	e278      	b.n	8008a02 <HandleMSG+0x6ca>

    case CMD_HUMIDITY_TEMPERATURE_Init:
      if (Msg->Len < 3U)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b02      	cmp	r3, #2
 8008516:	d801      	bhi.n	800851c <HandleMSG+0x1e4>
      {
        return 0;
 8008518:	2300      	movs	r3, #0
 800851a:	e273      	b.n	8008a04 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f7ff fed9 	bl	80082d4 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	3307      	adds	r3, #7
 8008526:	2204      	movs	r2, #4
 8008528:	2106      	movs	r1, #6
 800852a:	4618      	mov	r0, r3
 800852c:	f000 fc5c 	bl	8008de8 <Serialize_s32>
      Msg->Len = 3 + 4;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2207      	movs	r2, #7
 8008534:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7ff f8ae 	bl	8007698 <UART_SendMsg>
      break;
 800853c:	e261      	b.n	8008a02 <HandleMSG+0x6ca>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b02      	cmp	r3, #2
 8008544:	d801      	bhi.n	800854a <HandleMSG+0x212>
      {
        return 0;
 8008546:	2300      	movs	r3, #0
 8008548:	e25c      	b.n	8008a04 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 800854a:	6878      	ldr	r0, [r7, #4]
 800854c:	f7ff fec2 	bl	80082d4 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3307      	adds	r3, #7
 8008554:	2204      	movs	r2, #4
 8008556:	21ff      	movs	r1, #255	; 0xff
 8008558:	4618      	mov	r0, r3
 800855a:	f000 fc45 	bl	8008de8 <Serialize_s32>
      Msg->Len = 3 + 4;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2207      	movs	r2, #7
 8008562:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7ff f897 	bl	8007698 <UART_SendMsg>
      break;
 800856a:	e24a      	b.n	8008a02 <HandleMSG+0x6ca>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b02      	cmp	r3, #2
 8008572:	d801      	bhi.n	8008578 <HandleMSG+0x240>
      {
        return 0;
 8008574:	2300      	movs	r3, #0
 8008576:	e245      	b.n	8008a04 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7ff feab 	bl	80082d4 <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	3307      	adds	r3, #7
 8008582:	2204      	movs	r2, #4
 8008584:	21ff      	movs	r1, #255	; 0xff
 8008586:	4618      	mov	r0, r3
 8008588:	f000 fc2e 	bl	8008de8 <Serialize_s32>
      Msg->Len = 3 + 4;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2207      	movs	r2, #7
 8008590:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f7ff f880 	bl	8007698 <UART_SendMsg>
      break;
 8008598:	e233      	b.n	8008a02 <HandleMSG+0x6ca>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b02      	cmp	r3, #2
 80085a0:	d801      	bhi.n	80085a6 <HandleMSG+0x26e>
      {
        return 0;
 80085a2:	2300      	movs	r3, #0
 80085a4:	e22e      	b.n	8008a04 <HandleMSG+0x6cc>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3307      	adds	r3, #7
 80085aa:	2104      	movs	r1, #4
 80085ac:	4618      	mov	r0, r3
 80085ae:	f000 fbf5 	bl	8008d9c <Deserialize>
 80085b2:	4603      	mov	r3, r0
 80085b4:	4a4f      	ldr	r2, [pc, #316]	; (80086f4 <HandleMSG+0x3bc>)
 80085b6:	6013      	str	r3, [r2, #0]
      DiscardSamples = 2;
 80085b8:	4b4f      	ldr	r3, [pc, #316]	; (80086f8 <HandleMSG+0x3c0>)
 80085ba:	2202      	movs	r2, #2
 80085bc:	701a      	strb	r2, [r3, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 80085be:	4b4d      	ldr	r3, [pc, #308]	; (80086f4 <HandleMSG+0x3bc>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d101      	bne.n	80085ce <HandleMSG+0x296>
      {
        BSP_SENSOR_PRESS_Enable();
 80085ca:	f7ff fddd 	bl	8008188 <BSP_SENSOR_PRESS_Enable>
      }

      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 80085ce:	4b49      	ldr	r3, [pc, #292]	; (80086f4 <HandleMSG+0x3bc>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f003 0302 	and.w	r3, r3, #2
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	d101      	bne.n	80085de <HandleMSG+0x2a6>
      {
        BSP_SENSOR_TEMP_Enable();
 80085da:	f7ff fddc 	bl	8008196 <BSP_SENSOR_TEMP_Enable>
      }

      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 80085de:	4b45      	ldr	r3, [pc, #276]	; (80086f4 <HandleMSG+0x3bc>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f003 0304 	and.w	r3, r3, #4
 80085e6:	2b04      	cmp	r3, #4
 80085e8:	d101      	bne.n	80085ee <HandleMSG+0x2b6>
      {
        BSP_SENSOR_HUM_Enable();
 80085ea:	f7ff fddc 	bl	80081a6 <BSP_SENSOR_HUM_Enable>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 80085ee:	4b41      	ldr	r3, [pc, #260]	; (80086f4 <HandleMSG+0x3bc>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f003 0310 	and.w	r3, r3, #16
 80085f6:	2b10      	cmp	r3, #16
 80085f8:	d101      	bne.n	80085fe <HandleMSG+0x2c6>
      {
        BSP_SENSOR_ACC_Enable();
 80085fa:	f7ff fdb0 	bl	800815e <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 80085fe:	4b3d      	ldr	r3, [pc, #244]	; (80086f4 <HandleMSG+0x3bc>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f003 0320 	and.w	r3, r3, #32
 8008606:	2b20      	cmp	r3, #32
 8008608:	d101      	bne.n	800860e <HandleMSG+0x2d6>
      {
        BSP_SENSOR_GYR_Enable();
 800860a:	f7ff fdaf 	bl	800816c <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 800860e:	4b39      	ldr	r3, [pc, #228]	; (80086f4 <HandleMSG+0x3bc>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008616:	2b40      	cmp	r3, #64	; 0x40
 8008618:	d101      	bne.n	800861e <HandleMSG+0x2e6>
      {
        BSP_SENSOR_MAG_Enable();
 800861a:	f7ff fdae 	bl	800817a <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 800861e:	4837      	ldr	r0, [pc, #220]	; (80086fc <HandleMSG+0x3c4>)
 8008620:	f7fd f9ec 	bl	80059fc <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 8008624:	4b36      	ldr	r3, [pc, #216]	; (8008700 <HandleMSG+0x3c8>)
 8008626:	2201      	movs	r2, #1
 8008628:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	795a      	ldrb	r2, [r3, #5]
 800862e:	4b35      	ldr	r3, [pc, #212]	; (8008704 <HandleMSG+0x3cc>)
 8008630:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f7ff fe4e 	bl	80082d4 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2203      	movs	r2, #3
 800863c:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7ff f82a 	bl	8007698 <UART_SendMsg>
      break;
 8008644:	e1dd      	b.n	8008a02 <HandleMSG+0x6ca>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	2b02      	cmp	r3, #2
 800864c:	d801      	bhi.n	8008652 <HandleMSG+0x31a>
      {
        return 0;
 800864e:	2300      	movs	r3, #0
 8008650:	e1d8      	b.n	8008a04 <HandleMSG+0x6cc>
      }

      DataLoggerActive = 0;
 8008652:	4b2b      	ldr	r3, [pc, #172]	; (8008700 <HandleMSG+0x3c8>)
 8008654:	2200      	movs	r2, #0
 8008656:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 8008658:	4828      	ldr	r0, [pc, #160]	; (80086fc <HandleMSG+0x3c4>)
 800865a:	f7fd fa31 	bl	8005ac0 <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 800865e:	f7ff fda9 	bl	80081b4 <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 8008662:	f7ff fdae 	bl	80081c2 <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 8008666:	f7ff fdb3 	bl	80081d0 <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 800866a:	f7ff fdb8 	bl	80081de <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 800866e:	f7ff fdbd 	bl	80081ec <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 8008672:	f7ff fdc3 	bl	80081fc <BSP_SENSOR_HUM_Disable>

      SensorsEnabled = 0;
 8008676:	4b1f      	ldr	r3, [pc, #124]	; (80086f4 <HandleMSG+0x3bc>)
 8008678:	2200      	movs	r2, #0
 800867a:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 800867c:	4b22      	ldr	r3, [pc, #136]	; (8008708 <HandleMSG+0x3d0>)
 800867e:	2200      	movs	r2, #0
 8008680:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f7ff fe26 	bl	80082d4 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f7ff f805 	bl	8007698 <UART_SendMsg>
      break;
 800868e:	e1b8      	b.n	8008a02 <HandleMSG+0x6ca>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b02      	cmp	r3, #2
 8008696:	d801      	bhi.n	800869c <HandleMSG+0x364>
      {
        return 0;
 8008698:	2300      	movs	r3, #0
 800869a:	e1b3      	b.n	8008a04 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f7ff fe19 	bl	80082d4 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2203      	movs	r2, #3
 80086a6:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	79d8      	ldrb	r0, [r3, #7]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	7a19      	ldrb	r1, [r3, #8]
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	7a5b      	ldrb	r3, [r3, #9]
 80086b4:	461a      	mov	r2, r3
 80086b6:	f000 f9d5 	bl	8008a64 <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	7a98      	ldrb	r0, [r3, #10]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	7ad9      	ldrb	r1, [r3, #11]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	7b1a      	ldrb	r2, [r3, #12]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	7b5b      	ldrb	r3, [r3, #13]
 80086ca:	f000 f9a1 	bl	8008a10 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7fe ffe2 	bl	8007698 <UART_SendMsg>
      break;
 80086d4:	e195      	b.n	8008a02 <HandleMSG+0x6ca>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b36      	cmp	r3, #54	; 0x36
 80086dc:	d801      	bhi.n	80086e2 <HandleMSG+0x3aa>
      {
        return 0;
 80086de:	2300      	movs	r3, #0
 80086e0:	e190      	b.n	8008a04 <HandleMSG+0x6cc>
      }

      msg_offset = 4;
 80086e2:	2304      	movs	r3, #4
 80086e4:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	79db      	ldrb	r3, [r3, #7]
 80086ea:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 80086ec:	2300      	movs	r3, #0
 80086ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80086f0:	e11d      	b.n	800892e <HandleMSG+0x5f6>
 80086f2:	bf00      	nop
 80086f4:	20000300 	.word	0x20000300
 80086f8:	200004e4 	.word	0x200004e4
 80086fc:	200001b8 	.word	0x200001b8
 8008700:	200002fc 	.word	0x200002fc
 8008704:	20000080 	.word	0x20000080
 8008708:	2000032d 	.word	0x2000032d
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 800870c:	4ba6      	ldr	r3, [pc, #664]	; (80089a8 <HandleMSG+0x670>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2234      	movs	r2, #52	; 0x34
 8008712:	fb02 f303 	mul.w	r3, r2, r3
 8008716:	4aa5      	ldr	r2, [pc, #660]	; (80089ac <HandleMSG+0x674>)
 8008718:	4413      	add	r3, r2
 800871a:	6879      	ldr	r1, [r7, #4]
 800871c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800871e:	440a      	add	r2, r1
 8008720:	3204      	adds	r2, #4
 8008722:	7812      	ldrb	r2, [r2, #0]
 8008724:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 8008726:	4ba0      	ldr	r3, [pc, #640]	; (80089a8 <HandleMSG+0x670>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	2234      	movs	r2, #52	; 0x34
 800872c:	fb02 f303 	mul.w	r3, r2, r3
 8008730:	4a9e      	ldr	r2, [pc, #632]	; (80089ac <HandleMSG+0x674>)
 8008732:	4413      	add	r3, r2
 8008734:	3301      	adds	r3, #1
 8008736:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008738:	3201      	adds	r2, #1
 800873a:	6879      	ldr	r1, [r7, #4]
 800873c:	440a      	add	r2, r1
 800873e:	3204      	adds	r2, #4
 8008740:	7812      	ldrb	r2, [r2, #0]
 8008742:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 8008744:	4b98      	ldr	r3, [pc, #608]	; (80089a8 <HandleMSG+0x670>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2234      	movs	r2, #52	; 0x34
 800874a:	fb02 f303 	mul.w	r3, r2, r3
 800874e:	4a97      	ldr	r2, [pc, #604]	; (80089ac <HandleMSG+0x674>)
 8008750:	4413      	add	r3, r2
 8008752:	3302      	adds	r3, #2
 8008754:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008756:	3202      	adds	r2, #2
 8008758:	6879      	ldr	r1, [r7, #4]
 800875a:	440a      	add	r2, r1
 800875c:	3204      	adds	r2, #4
 800875e:	7812      	ldrb	r2, [r2, #0]
 8008760:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 8008762:	4b91      	ldr	r3, [pc, #580]	; (80089a8 <HandleMSG+0x670>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	2234      	movs	r2, #52	; 0x34
 8008768:	fb02 f303 	mul.w	r3, r2, r3
 800876c:	4a8f      	ldr	r2, [pc, #572]	; (80089ac <HandleMSG+0x674>)
 800876e:	4413      	add	r3, r2
 8008770:	3303      	adds	r3, #3
 8008772:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008774:	3203      	adds	r2, #3
 8008776:	6879      	ldr	r1, [r7, #4]
 8008778:	440a      	add	r2, r1
 800877a:	3204      	adds	r2, #4
 800877c:	7812      	ldrb	r2, [r2, #0]
 800877e:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 8008780:	4b89      	ldr	r3, [pc, #548]	; (80089a8 <HandleMSG+0x670>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2234      	movs	r2, #52	; 0x34
 8008786:	fb02 f303 	mul.w	r3, r2, r3
 800878a:	4a88      	ldr	r2, [pc, #544]	; (80089ac <HandleMSG+0x674>)
 800878c:	4413      	add	r3, r2
 800878e:	3304      	adds	r3, #4
 8008790:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008792:	3204      	adds	r2, #4
 8008794:	6879      	ldr	r1, [r7, #4]
 8008796:	440a      	add	r2, r1
 8008798:	3204      	adds	r2, #4
 800879a:	6812      	ldr	r2, [r2, #0]
 800879c:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 800879e:	4b82      	ldr	r3, [pc, #520]	; (80089a8 <HandleMSG+0x670>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2234      	movs	r2, #52	; 0x34
 80087a4:	fb02 f303 	mul.w	r3, r2, r3
 80087a8:	3308      	adds	r3, #8
 80087aa:	4a80      	ldr	r2, [pc, #512]	; (80089ac <HandleMSG+0x674>)
 80087ac:	4413      	add	r3, r2
 80087ae:	3304      	adds	r3, #4
 80087b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087b2:	3208      	adds	r2, #8
 80087b4:	6879      	ldr	r1, [r7, #4]
 80087b6:	440a      	add	r2, r1
 80087b8:	3204      	adds	r2, #4
 80087ba:	6812      	ldr	r2, [r2, #0]
 80087bc:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 80087be:	4b7a      	ldr	r3, [pc, #488]	; (80089a8 <HandleMSG+0x670>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2234      	movs	r2, #52	; 0x34
 80087c4:	fb02 f303 	mul.w	r3, r2, r3
 80087c8:	3308      	adds	r3, #8
 80087ca:	4a78      	ldr	r2, [pc, #480]	; (80089ac <HandleMSG+0x674>)
 80087cc:	4413      	add	r3, r2
 80087ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087d0:	320c      	adds	r2, #12
 80087d2:	6879      	ldr	r1, [r7, #4]
 80087d4:	440a      	add	r2, r1
 80087d6:	3204      	adds	r2, #4
 80087d8:	6812      	ldr	r2, [r2, #0]
 80087da:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 80087dc:	4b72      	ldr	r3, [pc, #456]	; (80089a8 <HandleMSG+0x670>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2234      	movs	r2, #52	; 0x34
 80087e2:	fb02 f303 	mul.w	r3, r2, r3
 80087e6:	3310      	adds	r3, #16
 80087e8:	4a70      	ldr	r2, [pc, #448]	; (80089ac <HandleMSG+0x674>)
 80087ea:	4413      	add	r3, r2
 80087ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80087ee:	3210      	adds	r2, #16
 80087f0:	6879      	ldr	r1, [r7, #4]
 80087f2:	440a      	add	r2, r1
 80087f4:	3204      	adds	r2, #4
 80087f6:	6812      	ldr	r2, [r2, #0]
 80087f8:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 80087fa:	4b6b      	ldr	r3, [pc, #428]	; (80089a8 <HandleMSG+0x670>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2234      	movs	r2, #52	; 0x34
 8008800:	fb02 f303 	mul.w	r3, r2, r3
 8008804:	3310      	adds	r3, #16
 8008806:	4a69      	ldr	r2, [pc, #420]	; (80089ac <HandleMSG+0x674>)
 8008808:	4413      	add	r3, r2
 800880a:	3304      	adds	r3, #4
 800880c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800880e:	3214      	adds	r2, #20
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	440a      	add	r2, r1
 8008814:	3204      	adds	r2, #4
 8008816:	6812      	ldr	r2, [r2, #0]
 8008818:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 800881a:	4b63      	ldr	r3, [pc, #396]	; (80089a8 <HandleMSG+0x670>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2234      	movs	r2, #52	; 0x34
 8008820:	fb02 f303 	mul.w	r3, r2, r3
 8008824:	3318      	adds	r3, #24
 8008826:	4a61      	ldr	r2, [pc, #388]	; (80089ac <HandleMSG+0x674>)
 8008828:	4413      	add	r3, r2
 800882a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800882c:	3218      	adds	r2, #24
 800882e:	6879      	ldr	r1, [r7, #4]
 8008830:	440a      	add	r2, r1
 8008832:	3204      	adds	r2, #4
 8008834:	6812      	ldr	r2, [r2, #0]
 8008836:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 8008838:	4b5b      	ldr	r3, [pc, #364]	; (80089a8 <HandleMSG+0x670>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	2234      	movs	r2, #52	; 0x34
 800883e:	fb02 f303 	mul.w	r3, r2, r3
 8008842:	3318      	adds	r3, #24
 8008844:	4a59      	ldr	r2, [pc, #356]	; (80089ac <HandleMSG+0x674>)
 8008846:	4413      	add	r3, r2
 8008848:	3304      	adds	r3, #4
 800884a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800884c:	321c      	adds	r2, #28
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	440a      	add	r2, r1
 8008852:	3204      	adds	r2, #4
 8008854:	6812      	ldr	r2, [r2, #0]
 8008856:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 8008858:	4b53      	ldr	r3, [pc, #332]	; (80089a8 <HandleMSG+0x670>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	2234      	movs	r2, #52	; 0x34
 800885e:	fb02 f303 	mul.w	r3, r2, r3
 8008862:	3320      	adds	r3, #32
 8008864:	4a51      	ldr	r2, [pc, #324]	; (80089ac <HandleMSG+0x674>)
 8008866:	4413      	add	r3, r2
 8008868:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800886a:	3220      	adds	r2, #32
 800886c:	6879      	ldr	r1, [r7, #4]
 800886e:	440a      	add	r2, r1
 8008870:	3204      	adds	r2, #4
 8008872:	6812      	ldr	r2, [r2, #0]
 8008874:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 8008876:	4b4c      	ldr	r3, [pc, #304]	; (80089a8 <HandleMSG+0x670>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2234      	movs	r2, #52	; 0x34
 800887c:	fb02 f303 	mul.w	r3, r2, r3
 8008880:	3320      	adds	r3, #32
 8008882:	4a4a      	ldr	r2, [pc, #296]	; (80089ac <HandleMSG+0x674>)
 8008884:	4413      	add	r3, r2
 8008886:	3304      	adds	r3, #4
 8008888:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800888a:	3224      	adds	r2, #36	; 0x24
 800888c:	6879      	ldr	r1, [r7, #4]
 800888e:	440a      	add	r2, r1
 8008890:	3204      	adds	r2, #4
 8008892:	6812      	ldr	r2, [r2, #0]
 8008894:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 8008896:	4b44      	ldr	r3, [pc, #272]	; (80089a8 <HandleMSG+0x670>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2234      	movs	r2, #52	; 0x34
 800889c:	fb02 f303 	mul.w	r3, r2, r3
 80088a0:	3328      	adds	r3, #40	; 0x28
 80088a2:	4a42      	ldr	r2, [pc, #264]	; (80089ac <HandleMSG+0x674>)
 80088a4:	4413      	add	r3, r2
 80088a6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088a8:	3228      	adds	r2, #40	; 0x28
 80088aa:	6879      	ldr	r1, [r7, #4]
 80088ac:	440a      	add	r2, r1
 80088ae:	3204      	adds	r2, #4
 80088b0:	6812      	ldr	r2, [r2, #0]
 80088b2:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 80088b4:	4b3c      	ldr	r3, [pc, #240]	; (80089a8 <HandleMSG+0x670>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2234      	movs	r2, #52	; 0x34
 80088ba:	fb02 f303 	mul.w	r3, r2, r3
 80088be:	3328      	adds	r3, #40	; 0x28
 80088c0:	4a3a      	ldr	r2, [pc, #232]	; (80089ac <HandleMSG+0x674>)
 80088c2:	4413      	add	r3, r2
 80088c4:	3304      	adds	r3, #4
 80088c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088c8:	322c      	adds	r2, #44	; 0x2c
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	440a      	add	r2, r1
 80088ce:	3204      	adds	r2, #4
 80088d0:	6812      	ldr	r2, [r2, #0]
 80088d2:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 80088d4:	4b34      	ldr	r3, [pc, #208]	; (80089a8 <HandleMSG+0x670>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	2234      	movs	r2, #52	; 0x34
 80088da:	fb02 f303 	mul.w	r3, r2, r3
 80088de:	3330      	adds	r3, #48	; 0x30
 80088e0:	4a32      	ldr	r2, [pc, #200]	; (80089ac <HandleMSG+0x674>)
 80088e2:	4413      	add	r3, r2
 80088e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80088e6:	3230      	adds	r2, #48	; 0x30
 80088e8:	6879      	ldr	r1, [r7, #4]
 80088ea:	440a      	add	r2, r1
 80088ec:	3204      	adds	r2, #4
 80088ee:	6812      	ldr	r2, [r2, #0]
 80088f0:	601a      	str	r2, [r3, #0]

        msg_offset += 52;
 80088f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088f4:	3334      	adds	r3, #52	; 0x34
 80088f6:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 80088f8:	4b2d      	ldr	r3, [pc, #180]	; (80089b0 <HandleMSG+0x678>)
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	3301      	adds	r3, #1
 80088fe:	4a2c      	ldr	r2, [pc, #176]	; (80089b0 <HandleMSG+0x678>)
 8008900:	6013      	str	r3, [r2, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 8008902:	4b2b      	ldr	r3, [pc, #172]	; (80089b0 <HandleMSG+0x678>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b08      	cmp	r3, #8
 8008908:	dd02      	ble.n	8008910 <HandleMSG+0x5d8>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 800890a:	4b29      	ldr	r3, [pc, #164]	; (80089b0 <HandleMSG+0x678>)
 800890c:	2208      	movs	r2, #8
 800890e:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 8008910:	4b25      	ldr	r3, [pc, #148]	; (80089a8 <HandleMSG+0x670>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	3301      	adds	r3, #1
 8008916:	4a24      	ldr	r2, [pc, #144]	; (80089a8 <HandleMSG+0x670>)
 8008918:	6013      	str	r3, [r2, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 800891a:	4b23      	ldr	r3, [pc, #140]	; (80089a8 <HandleMSG+0x670>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b07      	cmp	r3, #7
 8008920:	dd02      	ble.n	8008928 <HandleMSG+0x5f0>
        {
          OfflineDataWriteIndex = 0;
 8008922:	4b21      	ldr	r3, [pc, #132]	; (80089a8 <HandleMSG+0x670>)
 8008924:	2200      	movs	r2, #0
 8008926:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 8008928:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800892a:	3301      	adds	r3, #1
 800892c:	65bb      	str	r3, [r7, #88]	; 0x58
 800892e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008932:	429a      	cmp	r2, r3
 8008934:	f4ff aeea 	bcc.w	800870c <HandleMSG+0x3d4>
        }
      }

      SensorReadRequest = 1;
 8008938:	4b1e      	ldr	r3, [pc, #120]	; (80089b4 <HandleMSG+0x67c>)
 800893a:	2201      	movs	r2, #1
 800893c:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7ff fcc8 	bl	80082d4 <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2203      	movs	r2, #3
 8008948:	601a      	str	r2, [r3, #0]
      break;
 800894a:	e05a      	b.n	8008a02 <HandleMSG+0x6ca>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	2b03      	cmp	r3, #3
 8008952:	d801      	bhi.n	8008958 <HandleMSG+0x620>
      {
        return 0;
 8008954:	2300      	movs	r3, #0
 8008956:	e055      	b.n	8008a04 <HandleMSG+0x6cc>
      }

      if (Msg->Data[3] == 1U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	79db      	ldrb	r3, [r3, #7]
 800895c:	2b01      	cmp	r3, #1
 800895e:	d10e      	bne.n	800897e <HandleMSG+0x646>
      {
        UseOfflineData = 1U;
 8008960:	4b15      	ldr	r3, [pc, #84]	; (80089b8 <HandleMSG+0x680>)
 8008962:	2201      	movs	r2, #1
 8008964:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 8008966:	4b15      	ldr	r3, [pc, #84]	; (80089bc <HandleMSG+0x684>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a15      	ldr	r2, [pc, #84]	; (80089c0 <HandleMSG+0x688>)
 800896c:	6013      	str	r3, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 800896e:	4b13      	ldr	r3, [pc, #76]	; (80089bc <HandleMSG+0x684>)
 8008970:	f04f 32ff 	mov.w	r2, #4294967295
 8008974:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 8008976:	4813      	ldr	r0, [pc, #76]	; (80089c4 <HandleMSG+0x68c>)
 8008978:	f7fd f8a2 	bl	8005ac0 <HAL_TIM_Base_Stop_IT>
 800897c:	e006      	b.n	800898c <HandleMSG+0x654>
      }
      else
      {
        UseOfflineData = 0U;
 800897e:	4b0e      	ldr	r3, [pc, #56]	; (80089b8 <HandleMSG+0x680>)
 8008980:	2200      	movs	r2, #0
 8008982:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 8008984:	4b0e      	ldr	r3, [pc, #56]	; (80089c0 <HandleMSG+0x688>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	4a0c      	ldr	r2, [pc, #48]	; (80089bc <HandleMSG+0x684>)
 800898a:	6013      	str	r3, [r2, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f7ff fca1 	bl	80082d4 <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7fe fe80 	bl	8007698 <UART_SendMsg>
      break;
 8008998:	e033      	b.n	8008a02 <HandleMSG+0x6ca>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b02      	cmp	r3, #2
 80089a0:	d812      	bhi.n	80089c8 <HandleMSG+0x690>
      {
        return 0;
 80089a2:	2300      	movs	r3, #0
 80089a4:	e02e      	b.n	8008a04 <HandleMSG+0x6cc>
 80089a6:	bf00      	nop
 80089a8:	200004d4 	.word	0x200004d4
 80089ac:	20000330 	.word	0x20000330
 80089b0:	200004d8 	.word	0x200004d8
 80089b4:	2000032c 	.word	0x2000032c
 80089b8:	2000032d 	.word	0x2000032d
 80089bc:	20000300 	.word	0x20000300
 80089c0:	20000b58 	.word	0x20000b58
 80089c4:	200001b8 	.word	0x200001b8
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	3307      	adds	r3, #7
 80089cc:	4a0f      	ldr	r2, [pc, #60]	; (8008a0c <HandleMSG+0x6d4>)
 80089ce:	6812      	ldr	r2, [r2, #0]
 80089d0:	4611      	mov	r1, r2
 80089d2:	2204      	movs	r2, #4
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 fa07 	bl	8008de8 <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	330b      	adds	r3, #11
 80089de:	2201      	movs	r2, #1
 80089e0:	2102      	movs	r1, #2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 fa00 	bl	8008de8 <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff fc73 	bl	80082d4 <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2208      	movs	r2, #8
 80089f2:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f7fe fe4f 	bl	8007698 <UART_SendMsg>
      break;
 80089fa:	e002      	b.n	8008a02 <HandleMSG+0x6ca>

    default:
      ret = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 8008a00:	bf00      	nop
  }

  return ret;
 8008a02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3760      	adds	r7, #96	; 0x60
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	bd80      	pop	{r7, pc}
 8008a0c:	2000003c 	.word	0x2000003c

08008a10 <RTC_DateRegulate>:
  * @param  d the day value to be set
  * @param  dw the day-week value to be set
  * @retval None
  */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 8008a10:	b590      	push	{r4, r7, lr}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	4604      	mov	r4, r0
 8008a18:	4608      	mov	r0, r1
 8008a1a:	4611      	mov	r1, r2
 8008a1c:	461a      	mov	r2, r3
 8008a1e:	4623      	mov	r3, r4
 8008a20:	71fb      	strb	r3, [r7, #7]
 8008a22:	4603      	mov	r3, r0
 8008a24:	71bb      	strb	r3, [r7, #6]
 8008a26:	460b      	mov	r3, r1
 8008a28:	717b      	strb	r3, [r7, #5]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 8008a2e:	79fb      	ldrb	r3, [r7, #7]
 8008a30:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month   = m;
 8008a32:	79bb      	ldrb	r3, [r7, #6]
 8008a34:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date    = d;
 8008a36:	797b      	ldrb	r3, [r7, #5]
 8008a38:	73bb      	strb	r3, [r7, #14]
  sdatestructure.WeekDay = dw;
 8008a3a:	793b      	ldrb	r3, [r7, #4]
 8008a3c:	733b      	strb	r3, [r7, #12]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 8008a3e:	f107 030c 	add.w	r3, r7, #12
 8008a42:	2200      	movs	r2, #0
 8008a44:	4619      	mov	r1, r3
 8008a46:	4806      	ldr	r0, [pc, #24]	; (8008a60 <RTC_DateRegulate+0x50>)
 8008a48:	f7fc fdf7 	bl	800563a <HAL_RTC_SetDate>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d001      	beq.n	8008a56 <RTC_DateRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 8008a52:	f7f8 fb91 	bl	8001178 <Error_Handler>
  }
}
 8008a56:	bf00      	nop
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd90      	pop	{r4, r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20000198 	.word	0x20000198

08008a64 <RTC_TimeRegulate>:
  * @param  mm the minute value to be set
  * @param  ss the second value to be set
  * @retval None
  */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b088      	sub	sp, #32
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	71fb      	strb	r3, [r7, #7]
 8008a6e:	460b      	mov	r3, r1
 8008a70:	71bb      	strb	r3, [r7, #6]
 8008a72:	4613      	mov	r3, r2
 8008a74:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 8008a76:	79fb      	ldrb	r3, [r7, #7]
 8008a78:	733b      	strb	r3, [r7, #12]
  stimestructure.Minutes        = mm;
 8008a7a:	79bb      	ldrb	r3, [r7, #6]
 8008a7c:	737b      	strb	r3, [r7, #13]
  stimestructure.Seconds        = ss;
 8008a7e:	797b      	ldrb	r3, [r7, #5]
 8008a80:	73bb      	strb	r3, [r7, #14]
  stimestructure.SubSeconds     = 0;
 8008a82:	2300      	movs	r3, #0
 8008a84:	613b      	str	r3, [r7, #16]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 8008a92:	f107 030c 	add.w	r3, r7, #12
 8008a96:	2200      	movs	r2, #0
 8008a98:	4619      	mov	r1, r3
 8008a9a:	4806      	ldr	r0, [pc, #24]	; (8008ab4 <RTC_TimeRegulate+0x50>)
 8008a9c:	f7fc fcd5 	bl	800544a <HAL_RTC_SetTime>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 8008aa6:	f7f8 fb67 	bl	8001178 <Error_Handler>
  }
}
 8008aaa:	bf00      	nop
 8008aac:	3720      	adds	r7, #32
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20000198 	.word	0x20000198

08008ab8 <Get_PresentationString>:
  * @param  PresentationString the Presentation string
  * @param  Length the length of Presentation string
  * @retval None
  */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 8008ab8:	b5b0      	push	{r4, r5, r7, lr}
 8008aba:	b0a0      	sub	sp, #128	; 0x80
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST InfraredXX v"); /* Shift string pointer by this amount */
 8008ac2:	230f      	movs	r3, #15
 8008ac4:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	637b      	str	r3, [r7, #52]	; 0x34
  const char ps[] = {"MEMS shield demo,29,"FW_VERSION",%s,"BOARD_NAME};
 8008acc:	4b19      	ldr	r3, [pc, #100]	; (8008b34 <Get_PresentationString+0x7c>)
 8008ace:	f107 040c 	add.w	r4, r7, #12
 8008ad2:	461d      	mov	r5, r3
 8008ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008adc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8008ae0:	6020      	str	r0, [r4, #0]
 8008ae2:	3404      	adds	r4, #4
 8008ae4:	7021      	strb	r1, [r4, #0]

  InfraredPD_manager_get_version(lib_version_string, &lib_version_len);
 8008ae6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8008aea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008aee:	4611      	mov	r1, r2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f000 f86f 	bl	8008bd4 <InfraredPD_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0 resp. ST InfraredXX v1.0.0 resp. ST EnvXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 8008af6:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 8008afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afc:	429a      	cmp	r2, r3
 8008afe:	da06      	bge.n	8008b0e <Get_PresentationString+0x56>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 8008b00:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 8008b04:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8008b08:	4413      	add	r3, r2
 8008b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b0c:	e002      	b.n	8008b14 <Get_PresentationString+0x5c>
  }
  else
  {
    lib_version_num = lib_version_string;
 8008b0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008b12:	67fb      	str	r3, [r7, #124]	; 0x7c
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 8008b14:	f107 020c 	add.w	r2, r7, #12
 8008b18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008b1a:	2140      	movs	r1, #64	; 0x40
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f001 f85d 	bl	8009bdc <sniprintf>
 8008b22:	4603      	mov	r3, r0
 8008b24:	461a      	mov	r2, r3
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	601a      	str	r2, [r3, #0]
}
 8008b2a:	bf00      	nop
 8008b2c:	3780      	adds	r7, #128	; 0x80
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bdb0      	pop	{r4, r5, r7, pc}
 8008b32:	bf00      	nop
 8008b34:	0800a6f8 	.word	0x0800a6f8

08008b38 <InfraredPD_manager_init>:
  * @brief  Initialize the InfraredPD engine
  * @param  None
  * @retval None
  */
void InfraredPD_manager_init(void)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
  IPD_device_conf_t device_conf;
  IPD_algo_conf_t algo_conf;

  InfraredPD_Initialize(IPD_MCU_STM32);
 8008b3e:	2000      	movs	r0, #0
 8008b40:	f000 f976 	bl	8008e30 <InfraredPD_Initialize>

  device_conf.odr = Odr;
 8008b44:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <InfraredPD_manager_init+0x60>)
 8008b46:	781b      	ldrb	r3, [r3, #0]
 8008b48:	733b      	strb	r3, [r7, #12]
  device_conf.avg_tmos = AvgTmos;
 8008b4a:	4b14      	ldr	r3, [pc, #80]	; (8008b9c <InfraredPD_manager_init+0x64>)
 8008b4c:	881b      	ldrh	r3, [r3, #0]
 8008b4e:	81fb      	strh	r3, [r7, #14]
  device_conf.avg_t = AvgT;
 8008b50:	4b13      	ldr	r3, [pc, #76]	; (8008ba0 <InfraredPD_manager_init+0x68>)
 8008b52:	781b      	ldrb	r3, [r3, #0]
 8008b54:	743b      	strb	r3, [r7, #16]
  device_conf.gain_factor = GainFactor;
 8008b56:	4b13      	ldr	r3, [pc, #76]	; (8008ba4 <InfraredPD_manager_init+0x6c>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	747b      	strb	r3, [r7, #17]
  device_conf.sens_data = Sensitivity;
 8008b5c:	4b12      	ldr	r3, [pc, #72]	; (8008ba8 <InfraredPD_manager_init+0x70>)
 8008b5e:	881b      	ldrh	r3, [r3, #0]
 8008b60:	827b      	strh	r3, [r7, #18]
  device_conf.transmittance = 1.0f; /* 1.0f if no optical system is used */
 8008b62:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8008b66:	617b      	str	r3, [r7, #20]

  IPD_Instance = InfraredPD_CreateInstance(&algo_conf);
 8008b68:	1d3b      	adds	r3, r7, #4
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f000 f9fc 	bl	8008f68 <InfraredPD_CreateInstance>
 8008b70:	4603      	mov	r3, r0
 8008b72:	4a0e      	ldr	r2, [pc, #56]	; (8008bac <InfraredPD_manager_init+0x74>)
 8008b74:	6013      	str	r3, [r2, #0]

  /* User can modify the algo_conf settings here */

  if (InfraredPD_Start(IPD_Instance, &device_conf, &algo_conf) != IPD_INIT_OK)
 8008b76:	4b0d      	ldr	r3, [pc, #52]	; (8008bac <InfraredPD_manager_init+0x74>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	1d3a      	adds	r2, r7, #4
 8008b7c:	f107 010c 	add.w	r1, r7, #12
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fa0b 	bl	8008f9c <InfraredPD_Start>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d000      	beq.n	8008b8e <InfraredPD_manager_init+0x56>
  {
    for (;;)
 8008b8c:	e7fe      	b.n	8008b8c <InfraredPD_manager_init+0x54>
    {
      /* The library was not correctly started */
    }
  }
}
 8008b8e:	bf00      	nop
 8008b90:	3718      	adds	r7, #24
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	200004dc 	.word	0x200004dc
 8008b9c:	200004de 	.word	0x200004de
 8008ba0:	200004e0 	.word	0x200004e0
 8008ba4:	200004e1 	.word	0x200004e1
 8008ba8:	200004e2 	.word	0x200004e2
 8008bac:	20000b5c 	.word	0x20000b5c

08008bb0 <InfraredPD_manager_run>:
  * @param  data_in  Structure containing input data
  * @param  data_out Structure containing output data
  * @retval None
  */
void InfraredPD_manager_run(IPD_input_t *data_in, IPD_output_t *data_out)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b082      	sub	sp, #8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  InfraredPD_Update(IPD_Instance, data_in, data_out);
 8008bba:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <InfraredPD_manager_run+0x20>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	683a      	ldr	r2, [r7, #0]
 8008bc0:	6879      	ldr	r1, [r7, #4]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fbdc 	bl	8009380 <InfraredPD_Update>
}
 8008bc8:	bf00      	nop
 8008bca:	3708      	adds	r7, #8
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}
 8008bd0:	20000b5c 	.word	0x20000b5c

08008bd4 <InfraredPD_manager_get_version>:
  * @param  version Library version string (must be array of 35 char)
  * @param  length  Library version string length
  * @retval None
  */
void InfraredPD_manager_get_version(char *version, int *length)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  *length = (int)InfraredPD_GetLibVersion(version);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 ff16 	bl	8009a10 <InfraredPD_GetLibVersion>
 8008be4:	4603      	mov	r3, r0
 8008be6:	461a      	mov	r2, r3
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	601a      	str	r2, [r3, #0]
}
 8008bec:	bf00      	nop
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <ByteStuffCopyByte>:
  * @param  Dest destination
  * @param  Source source
  * @retval Total number of bytes processed
  */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b085      	sub	sp, #20
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 8008c00:	2302      	movs	r3, #2
 8008c02:	60fb      	str	r3, [r7, #12]

  switch (Source)
 8008c04:	78fb      	ldrb	r3, [r7, #3]
 8008c06:	2bf0      	cmp	r3, #240	; 0xf0
 8008c08:	d002      	beq.n	8008c10 <ByteStuffCopyByte+0x1c>
 8008c0a:	2bf1      	cmp	r3, #241	; 0xf1
 8008c0c:	d008      	beq.n	8008c20 <ByteStuffCopyByte+0x2c>
 8008c0e:	e00f      	b.n	8008c30 <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	22f1      	movs	r2, #241	; 0xf1
 8008c14:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	3301      	adds	r3, #1
 8008c1a:	22f2      	movs	r2, #242	; 0xf2
 8008c1c:	701a      	strb	r2, [r3, #0]
      break;
 8008c1e:	e00d      	b.n	8008c3c <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	22f1      	movs	r2, #241	; 0xf1
 8008c24:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	22f1      	movs	r2, #241	; 0xf1
 8008c2c:	701a      	strb	r2, [r3, #0]
      break;
 8008c2e:	e005      	b.n	8008c3c <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	78fa      	ldrb	r2, [r7, #3]
 8008c34:	701a      	strb	r2, [r3, #0]
      ret = 1;
 8008c36:	2301      	movs	r3, #1
 8008c38:	60fb      	str	r3, [r7, #12]
      break;
 8008c3a:	bf00      	nop
  }

  return ret;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3714      	adds	r7, #20
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <ByteStuffCopy>:
  * @param  Dest destination
  * @param  Source source
  * @retval Total number of bytes processed
  */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 8008c54:	2300      	movs	r3, #0
 8008c56:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 8008c58:	2300      	movs	r3, #0
 8008c5a:	60fb      	str	r3, [r7, #12]
 8008c5c:	e011      	b.n	8008c82 <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	18d0      	adds	r0, r2, r3
 8008c64:	683a      	ldr	r2, [r7, #0]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	4413      	add	r3, r2
 8008c6a:	3304      	adds	r3, #4
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	4619      	mov	r1, r3
 8008c70:	f7ff ffc0 	bl	8008bf4 <ByteStuffCopyByte>
 8008c74:	4602      	mov	r2, r0
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	4413      	add	r3, r2
 8008c7a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	3301      	adds	r3, #1
 8008c80:	60fb      	str	r3, [r7, #12]
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	68fa      	ldr	r2, [r7, #12]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d3e8      	bcc.n	8008c5e <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	687a      	ldr	r2, [r7, #4]
 8008c90:	4413      	add	r3, r2
 8008c92:	22f0      	movs	r2, #240	; 0xf0
 8008c94:	701a      	strb	r2, [r3, #0]
  count++;
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	3301      	adds	r3, #1
 8008c9a:	60bb      	str	r3, [r7, #8]
  return count;
 8008c9c:	68bb      	ldr	r3, [r7, #8]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <ReverseByteStuffCopyByte2>:
  * @param  Source1 input data
  * @param  Dest the destination data
  * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
  */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b083      	sub	sp, #12
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	4603      	mov	r3, r0
 8008cae:	603a      	str	r2, [r7, #0]
 8008cb0:	71fb      	strb	r3, [r7, #7]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	2bf1      	cmp	r3, #241	; 0xf1
 8008cba:	d111      	bne.n	8008ce0 <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 8008cbc:	79bb      	ldrb	r3, [r7, #6]
 8008cbe:	2bf1      	cmp	r3, #241	; 0xf1
 8008cc0:	d104      	bne.n	8008ccc <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	22f1      	movs	r2, #241	; 0xf1
 8008cc6:	701a      	strb	r2, [r3, #0]
      return 2;
 8008cc8:	2302      	movs	r3, #2
 8008cca:	e00d      	b.n	8008ce8 <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 8008ccc:	79bb      	ldrb	r3, [r7, #6]
 8008cce:	2bf2      	cmp	r3, #242	; 0xf2
 8008cd0:	d104      	bne.n	8008cdc <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	22f0      	movs	r2, #240	; 0xf0
 8008cd6:	701a      	strb	r2, [r3, #0]
      return 2;
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e005      	b.n	8008ce8 <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 8008cdc:	2300      	movs	r3, #0
 8008cde:	e003      	b.n	8008ce8 <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	79fa      	ldrb	r2, [r7, #7]
 8008ce4:	701a      	strb	r2, [r3, #0]
    return 1;
 8008ce6:	2301      	movs	r3, #1
  }
}
 8008ce8:	4618      	mov	r0, r3
 8008cea:	370c      	adds	r7, #12
 8008cec:	46bd      	mov	sp, r7
 8008cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf2:	4770      	bx	lr

08008cf4 <CHK_ComputeAndAdd>:
  * @brief  Compute and add checksum
  * @param  Msg pointer to the message
  * @retval None
  */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 8008cf4:	b480      	push	{r7}
 8008cf6:	b085      	sub	sp, #20
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8008d00:	2300      	movs	r3, #0
 8008d02:	60bb      	str	r3, [r7, #8]
 8008d04:	e00a      	b.n	8008d1c <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 8008d06:	687a      	ldr	r2, [r7, #4]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	4413      	add	r3, r2
 8008d0c:	3304      	adds	r3, #4
 8008d0e:	781b      	ldrb	r3, [r3, #0]
 8008d10:	7bfa      	ldrb	r2, [r7, #15]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	3301      	adds	r3, #1
 8008d1a:	60bb      	str	r3, [r7, #8]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d3ef      	bcc.n	8008d06 <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	3304      	adds	r3, #4
 8008d2e:	7bfa      	ldrb	r2, [r7, #15]
 8008d30:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	1c5a      	adds	r2, r3, #1
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	601a      	str	r2, [r3, #0]
}
 8008d3c:	bf00      	nop
 8008d3e:	3714      	adds	r7, #20
 8008d40:	46bd      	mov	sp, r7
 8008d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d46:	4770      	bx	lr

08008d48 <CHK_CheckAndRemove>:
  * @brief  Compute and remove checksum
  * @param  Msg pointer to the message
  * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
  */
int CHK_CheckAndRemove(TMsg *Msg)
{
 8008d48:	b480      	push	{r7}
 8008d4a:	b085      	sub	sp, #20
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 8008d50:	2300      	movs	r3, #0
 8008d52:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8008d54:	2300      	movs	r3, #0
 8008d56:	60bb      	str	r3, [r7, #8]
 8008d58:	e00a      	b.n	8008d70 <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	4413      	add	r3, r2
 8008d60:	3304      	adds	r3, #4
 8008d62:	781a      	ldrb	r2, [r3, #0]
 8008d64:	7bfb      	ldrb	r3, [r7, #15]
 8008d66:	4413      	add	r3, r2
 8008d68:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	60bb      	str	r3, [r7, #8]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	68ba      	ldr	r2, [r7, #8]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d3ef      	bcc.n	8008d5a <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	1e5a      	subs	r2, r3, #1
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 8008d84:	7bfb      	ldrb	r3, [r7, #15]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	bf0c      	ite	eq
 8008d8a:	2301      	moveq	r3, #1
 8008d8c:	2300      	movne	r3, #0
 8008d8e:	b2db      	uxtb	r3, r3
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3714      	adds	r7, #20
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <Deserialize>:
  * @param  Source source
  * @param  Len number of bytes
  * @retval Rebuild unsigned int variable
  */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	603b      	str	r3, [r7, #0]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	4413      	add	r3, r2
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 8008db6:	e00d      	b.n	8008dd4 <Deserialize+0x38>
  {
    app <<= 8;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	021b      	lsls	r3, r3, #8
 8008dbc:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	603b      	str	r3, [r7, #0]
 8008dc4:	687a      	ldr	r2, [r7, #4]
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	4413      	add	r3, r2
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	461a      	mov	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	4413      	add	r3, r2
 8008dd2:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1ee      	bne.n	8008db8 <Deserialize+0x1c>
  }

  return app;
 8008dda:	68fb      	ldr	r3, [r7, #12]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3714      	adds	r7, #20
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <Serialize_s32>:
  * @param  Source source
  * @param  Len number of bytes
  * @retval None
  */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b087      	sub	sp, #28
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 8008df4:	2300      	movs	r3, #0
 8008df6:	617b      	str	r3, [r7, #20]
 8008df8:	e00f      	b.n	8008e1a <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	4413      	add	r3, r2
 8008e04:	693a      	ldr	r2, [r7, #16]
 8008e06:	b2d2      	uxtb	r2, r2
 8008e08:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	0a1b      	lsrs	r3, r3, #8
 8008e0e:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	3301      	adds	r3, #1
 8008e18:	617b      	str	r3, [r7, #20]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d3eb      	bcc.n	8008dfa <Serialize_s32+0x12>
  }
}
 8008e22:	bf00      	nop
 8008e24:	bf00      	nop
 8008e26:	371c      	adds	r7, #28
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <InfraredPD_Initialize>:
 8008e30:	2802      	cmp	r0, #2
 8008e32:	d825      	bhi.n	8008e80 <InfraredPD_Initialize+0x50>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	d130      	bne.n	8008e9a <InfraredPD_Initialize+0x6a>
 8008e38:	4a3e      	ldr	r2, [pc, #248]	; (8008f34 <InfraredPD_Initialize+0x104>)
 8008e3a:	6813      	ldr	r3, [r2, #0]
 8008e3c:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8008e40:	f023 0301 	bic.w	r3, r3, #1
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 8008e4a:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8008e4e:	f24c 2240 	movw	r2, #49728	; 0xc240
 8008e52:	400b      	ands	r3, r1
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d02e      	beq.n	8008eb6 <InfraredPD_Initialize+0x86>
 8008e58:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 8008e5c:	f24c 2270 	movw	r2, #49776	; 0xc270
 8008e60:	400b      	ands	r3, r1
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d027      	beq.n	8008eb6 <InfraredPD_Initialize+0x86>
 8008e66:	4a34      	ldr	r2, [pc, #208]	; (8008f38 <InfraredPD_Initialize+0x108>)
 8008e68:	2301      	movs	r3, #1
 8008e6a:	6093      	str	r3, [r2, #8]
 8008e6c:	6893      	ldr	r3, [r2, #8]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d1fc      	bne.n	8008e6c <InfraredPD_Initialize+0x3c>
 8008e72:	4b32      	ldr	r3, [pc, #200]	; (8008f3c <InfraredPD_Initialize+0x10c>)
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	6812      	ldr	r2, [r2, #0]
 8008e78:	4b31      	ldr	r3, [pc, #196]	; (8008f40 <InfraredPD_Initialize+0x110>)
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d016      	beq.n	8008eac <InfraredPD_Initialize+0x7c>
 8008e7e:	e7fe      	b.n	8008e7e <InfraredPD_Initialize+0x4e>
 8008e80:	2803      	cmp	r0, #3
 8008e82:	d1d9      	bne.n	8008e38 <InfraredPD_Initialize+0x8>
 8008e84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008e88:	4a2e      	ldr	r2, [pc, #184]	; (8008f44 <InfraredPD_Initialize+0x114>)
 8008e8a:	6859      	ldr	r1, [r3, #4]
 8008e8c:	4291      	cmp	r1, r2
 8008e8e:	d00d      	beq.n	8008eac <InfraredPD_Initialize+0x7c>
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	4b2d      	ldr	r3, [pc, #180]	; (8008f48 <InfraredPD_Initialize+0x118>)
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d009      	beq.n	8008eac <InfraredPD_Initialize+0x7c>
 8008e98:	e7fe      	b.n	8008e98 <InfraredPD_Initialize+0x68>
 8008e9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e9e:	4a2b      	ldr	r2, [pc, #172]	; (8008f4c <InfraredPD_Initialize+0x11c>)
 8008ea0:	f8d3 37f8 	ldr.w	r3, [r3, #2040]	; 0x7f8
 8008ea4:	0c1b      	lsrs	r3, r3, #16
 8008ea6:	041b      	lsls	r3, r3, #16
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d103      	bne.n	8008eb4 <InfraredPD_Initialize+0x84>
 8008eac:	4b28      	ldr	r3, [pc, #160]	; (8008f50 <InfraredPD_Initialize+0x120>)
 8008eae:	2201      	movs	r2, #1
 8008eb0:	701a      	strb	r2, [r3, #0]
 8008eb2:	4770      	bx	lr
 8008eb4:	e7fe      	b.n	8008eb4 <InfraredPD_Initialize+0x84>
 8008eb6:	4b27      	ldr	r3, [pc, #156]	; (8008f54 <InfraredPD_Initialize+0x124>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d1d3      	bne.n	8008e66 <InfraredPD_Initialize+0x36>
 8008ebe:	4a26      	ldr	r2, [pc, #152]	; (8008f58 <InfraredPD_Initialize+0x128>)
 8008ec0:	6813      	ldr	r3, [r2, #0]
 8008ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ec6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8008eca:	d021      	beq.n	8008f10 <InfraredPD_Initialize+0xe0>
 8008ecc:	6813      	ldr	r3, [r2, #0]
 8008ece:	f240 4183 	movw	r1, #1155	; 0x483
 8008ed2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ed6:	428b      	cmp	r3, r1
 8008ed8:	d01a      	beq.n	8008f10 <InfraredPD_Initialize+0xe0>
 8008eda:	6813      	ldr	r3, [r2, #0]
 8008edc:	f240 4285 	movw	r2, #1157	; 0x485
 8008ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d013      	beq.n	8008f10 <InfraredPD_Initialize+0xe0>
 8008ee8:	4b1c      	ldr	r3, [pc, #112]	; (8008f5c <InfraredPD_Initialize+0x12c>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008ef0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8008ef4:	d1b7      	bne.n	8008e66 <InfraredPD_Initialize+0x36>
 8008ef6:	4a1a      	ldr	r2, [pc, #104]	; (8008f60 <InfraredPD_Initialize+0x130>)
 8008ef8:	2301      	movs	r3, #1
 8008efa:	6093      	str	r3, [r2, #8]
 8008efc:	6893      	ldr	r3, [r2, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d1fc      	bne.n	8008efc <InfraredPD_Initialize+0xcc>
 8008f02:	4b0e      	ldr	r3, [pc, #56]	; (8008f3c <InfraredPD_Initialize+0x10c>)
 8008f04:	6013      	str	r3, [r2, #0]
 8008f06:	6812      	ldr	r2, [r2, #0]
 8008f08:	4b0d      	ldr	r3, [pc, #52]	; (8008f40 <InfraredPD_Initialize+0x110>)
 8008f0a:	429a      	cmp	r2, r3
 8008f0c:	d0ce      	beq.n	8008eac <InfraredPD_Initialize+0x7c>
 8008f0e:	e7b6      	b.n	8008e7e <InfraredPD_Initialize+0x4e>
 8008f10:	4a14      	ldr	r2, [pc, #80]	; (8008f64 <InfraredPD_Initialize+0x134>)
 8008f12:	2301      	movs	r3, #1
 8008f14:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008f18:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d1fb      	bne.n	8008f18 <InfraredPD_Initialize+0xe8>
 8008f20:	4b06      	ldr	r3, [pc, #24]	; (8008f3c <InfraredPD_Initialize+0x10c>)
 8008f22:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008f26:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008f2a:	4b05      	ldr	r3, [pc, #20]	; (8008f40 <InfraredPD_Initialize+0x110>)
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d0bd      	beq.n	8008eac <InfraredPD_Initialize+0x7c>
 8008f30:	e7a5      	b.n	8008e7e <InfraredPD_Initialize+0x4e>
 8008f32:	bf00      	nop
 8008f34:	e0002000 	.word	0xe0002000
 8008f38:	40023000 	.word	0x40023000
 8008f3c:	f407a5c2 	.word	0xf407a5c2
 8008f40:	b5e8b5cd 	.word	0xb5e8b5cd
 8008f44:	0201e041 	.word	0x0201e041
 8008f48:	02028041 	.word	0x02028041
 8008f4c:	aa550000 	.word	0xaa550000
 8008f50:	200000f0 	.word	0x200000f0
 8008f54:	e0042000 	.word	0xe0042000
 8008f58:	5c001000 	.word	0x5c001000
 8008f5c:	50081000 	.word	0x50081000
 8008f60:	4c004000 	.word	0x4c004000
 8008f64:	58024000 	.word	0x58024000

08008f68 <InfraredPD_CreateInstance>:
 8008f68:	4b0a      	ldr	r3, [pc, #40]	; (8008f94 <InfraredPD_CreateInstance+0x2c>)
 8008f6a:	781b      	ldrb	r3, [r3, #0]
 8008f6c:	b183      	cbz	r3, 8008f90 <InfraredPD_CreateInstance+0x28>
 8008f6e:	b510      	push	{r4, lr}
 8008f70:	4604      	mov	r4, r0
 8008f72:	20c0      	movs	r0, #192	; 0xc0
 8008f74:	f000 fd76 	bl	8009a64 <malloc>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	b138      	cbz	r0, 8008f8c <InfraredPD_CreateInstance+0x24>
 8008f7c:	4a06      	ldr	r2, [pc, #24]	; (8008f98 <InfraredPD_CreateInstance+0x30>)
 8008f7e:	ca03      	ldmia	r2!, {r0, r1}
 8008f80:	f04f 0c00 	mov.w	ip, #0
 8008f84:	f883 c0a8 	strb.w	ip, [r3, #168]	; 0xa8
 8008f88:	6020      	str	r0, [r4, #0]
 8008f8a:	6061      	str	r1, [r4, #4]
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	bd10      	pop	{r4, pc}
 8008f90:	4618      	mov	r0, r3
 8008f92:	4770      	bx	lr
 8008f94:	200000f0 	.word	0x200000f0
 8008f98:	0800a720 	.word	0x0800a720

08008f9c <InfraredPD_Start>:
 8008f9c:	4bbc      	ldr	r3, [pc, #752]	; (8009290 <InfraredPD_Start+0x2f4>)
 8008f9e:	781b      	ldrb	r3, [r3, #0]
 8008fa0:	b90b      	cbnz	r3, 8008fa6 <InfraredPD_Start+0xa>
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	4770      	bx	lr
 8008fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008faa:	ed2d 8b04 	vpush	{d8-d9}
 8008fae:	4616      	mov	r6, r2
 8008fb0:	780a      	ldrb	r2, [r1, #0]
 8008fb2:	1e53      	subs	r3, r2, #1
 8008fb4:	2b01      	cmp	r3, #1
 8008fb6:	4604      	mov	r4, r0
 8008fb8:	460d      	mov	r5, r1
 8008fba:	d917      	bls.n	8008fec <InfraredPD_Start+0x50>
 8008fbc:	2a0f      	cmp	r2, #15
 8008fbe:	d846      	bhi.n	800904e <InfraredPD_Start+0xb2>
 8008fc0:	f248 1310 	movw	r3, #33040	; 0x8110
 8008fc4:	40d3      	lsrs	r3, r2
 8008fc6:	07db      	lsls	r3, r3, #31
 8008fc8:	f140 81aa 	bpl.w	8009320 <InfraredPD_Start+0x384>
 8008fcc:	884b      	ldrh	r3, [r1, #2]
 8008fce:	2b80      	cmp	r3, #128	; 0x80
 8008fd0:	f000 81ae 	beq.w	8009330 <InfraredPD_Start+0x394>
 8008fd4:	d90f      	bls.n	8008ff6 <InfraredPD_Start+0x5a>
 8008fd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fda:	f000 81ae 	beq.w	800933a <InfraredPD_Start+0x39e>
 8008fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fe2:	f040 817b 	bne.w	80092dc <InfraredPD_Start+0x340>
 8008fe6:	4bab      	ldr	r3, [pc, #684]	; (8009294 <InfraredPD_Start+0x2f8>)
 8008fe8:	60a3      	str	r3, [r4, #8]
 8008fea:	e020      	b.n	800902e <InfraredPD_Start+0x92>
 8008fec:	884b      	ldrh	r3, [r1, #2]
 8008fee:	2b80      	cmp	r3, #128	; 0x80
 8008ff0:	f000 8187 	beq.w	8009302 <InfraredPD_Start+0x366>
 8008ff4:	d810      	bhi.n	8009018 <InfraredPD_Start+0x7c>
 8008ff6:	2b08      	cmp	r3, #8
 8008ff8:	f000 817d 	beq.w	80092f6 <InfraredPD_Start+0x35a>
 8008ffc:	2b20      	cmp	r3, #32
 8008ffe:	d120      	bne.n	8009042 <InfraredPD_Start+0xa6>
 8009000:	4ba5      	ldr	r3, [pc, #660]	; (8009298 <InfraredPD_Start+0x2fc>)
 8009002:	60a3      	str	r3, [r4, #8]
 8009004:	792b      	ldrb	r3, [r5, #4]
 8009006:	3b01      	subs	r3, #1
 8009008:	2b07      	cmp	r3, #7
 800900a:	d838      	bhi.n	800907e <InfraredPD_Start+0xe2>
 800900c:	e8df f003 	tbb	[pc, r3]
 8009010:	ac37b13d 	.word	0xac37b13d
 8009014:	a7373737 	.word	0xa7373737
 8009018:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800901c:	f000 816e 	beq.w	80092fc <InfraredPD_Start+0x360>
 8009020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009024:	d106      	bne.n	8009034 <InfraredPD_Start+0x98>
 8009026:	4b9b      	ldr	r3, [pc, #620]	; (8009294 <InfraredPD_Start+0x2f8>)
 8009028:	6083      	str	r3, [r0, #8]
 800902a:	2a02      	cmp	r2, #2
 800902c:	d1ea      	bne.n	8009004 <InfraredPD_Start+0x68>
 800902e:	2301      	movs	r3, #1
 8009030:	702b      	strb	r3, [r5, #0]
 8009032:	e7e7      	b.n	8009004 <InfraredPD_Start+0x68>
 8009034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009038:	f040 814a 	bne.w	80092d0 <InfraredPD_Start+0x334>
 800903c:	4b97      	ldr	r3, [pc, #604]	; (800929c <InfraredPD_Start+0x300>)
 800903e:	6083      	str	r3, [r0, #8]
 8009040:	e7e0      	b.n	8009004 <InfraredPD_Start+0x68>
 8009042:	2b02      	cmp	r3, #2
 8009044:	f040 8144 	bne.w	80092d0 <InfraredPD_Start+0x334>
 8009048:	4b95      	ldr	r3, [pc, #596]	; (80092a0 <InfraredPD_Start+0x304>)
 800904a:	60a3      	str	r3, [r4, #8]
 800904c:	e7da      	b.n	8009004 <InfraredPD_Start+0x68>
 800904e:	2a1e      	cmp	r2, #30
 8009050:	f040 8166 	bne.w	8009320 <InfraredPD_Start+0x384>
 8009054:	884b      	ldrh	r3, [r1, #2]
 8009056:	2b80      	cmp	r3, #128	; 0x80
 8009058:	f000 815d 	beq.w	8009316 <InfraredPD_Start+0x37a>
 800905c:	d9cb      	bls.n	8008ff6 <InfraredPD_Start+0x5a>
 800905e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009062:	f000 8172 	beq.w	800934a <InfraredPD_Start+0x3ae>
 8009066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800906a:	d0bc      	beq.n	8008fe6 <InfraredPD_Start+0x4a>
 800906c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009070:	f040 812e 	bne.w	80092d0 <InfraredPD_Start+0x334>
 8009074:	4b89      	ldr	r3, [pc, #548]	; (800929c <InfraredPD_Start+0x300>)
 8009076:	6083      	str	r3, [r0, #8]
 8009078:	2304      	movs	r3, #4
 800907a:	702b      	strb	r3, [r5, #0]
 800907c:	e7c2      	b.n	8009004 <InfraredPD_Start+0x68>
 800907e:	2303      	movs	r3, #3
 8009080:	ecbd 8b04 	vpop	{d8-d9}
 8009084:	4618      	mov	r0, r3
 8009086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800908a:	4b86      	ldr	r3, [pc, #536]	; (80092a4 <InfraredPD_Start+0x308>)
 800908c:	eddf 7a86 	vldr	s15, [pc, #536]	; 80092a8 <InfraredPD_Start+0x30c>
 8009090:	60e3      	str	r3, [r4, #12]
 8009092:	796b      	ldrb	r3, [r5, #5]
 8009094:	2b01      	cmp	r3, #1
 8009096:	d002      	beq.n	800909e <InfraredPD_Start+0x102>
 8009098:	2b08      	cmp	r3, #8
 800909a:	f040 812a 	bne.w	80092f2 <InfraredPD_Start+0x356>
 800909e:	ed95 7a02 	vldr	s14, [r5, #8]
 80090a2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80090a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090aa:	f100 8120 	bmi.w	80092ee <InfraredPD_Start+0x352>
 80090ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80090b2:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80090b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090ba:	f300 8118 	bgt.w	80092ee <InfraredPD_Start+0x352>
 80090be:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80090c2:	eddf 6a7a 	vldr	s13, [pc, #488]	; 80092ac <InfraredPD_Start+0x310>
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	bfbc      	itt	lt
 80090ca:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 80090ce:	8073      	strhlt	r3, [r6, #2]
 80090d0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	bfbc      	itt	lt
 80090d8:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 80090dc:	80b3      	strhlt	r3, [r6, #4]
 80090de:	88eb      	ldrh	r3, [r5, #6]
 80090e0:	ee08 3a10 	vmov	s16, r3
 80090e4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80090e8:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80090ec:	edd4 6a02 	vldr	s13, [r4, #8]
 80090f0:	ee28 8a07 	vmul.f32	s16, s16, s14
 80090f4:	ee68 7a27 	vmul.f32	s15, s16, s15
 80090f8:	ed84 8a05 	vstr	s16, [r4, #20]
 80090fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009100:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8009104:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8009108:	ee87 0a26 	vdiv.f32	s0, s14, s13
 800910c:	ed84 7a04 	vstr	s14, [r4, #16]
 8009110:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009114:	ed84 0a06 	vstr	s0, [r4, #24]
 8009118:	f001 f9b0 	bl	800a47c <ceilf>
 800911c:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8009120:	2301      	movs	r3, #1
 8009122:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8009126:	ee10 3a10 	vmov	r3, s0
 800912a:	b298      	uxth	r0, r3
 800912c:	2300      	movs	r3, #0
 800912e:	83a0      	strh	r0, [r4, #28]
 8009130:	6223      	str	r3, [r4, #32]
 8009132:	7833      	ldrb	r3, [r6, #0]
 8009134:	b313      	cbz	r3, 800917c <InfraredPD_Start+0x1e0>
 8009136:	2b02      	cmp	r3, #2
 8009138:	f000 80e6 	beq.w	8009308 <InfraredPD_Start+0x36c>
 800913c:	7873      	ldrb	r3, [r6, #1]
 800913e:	b1eb      	cbz	r3, 800917c <InfraredPD_Start+0x1e0>
 8009140:	2300      	movs	r3, #0
 8009142:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8009146:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800914a:	2b01      	cmp	r3, #1
 800914c:	f000 8100 	beq.w	8009350 <InfraredPD_Start+0x3b4>
 8009150:	0080      	lsls	r0, r0, #2
 8009152:	f000 fc87 	bl	8009a64 <malloc>
 8009156:	6460      	str	r0, [r4, #68]	; 0x44
 8009158:	b980      	cbnz	r0, 800917c <InfraredPD_Start+0x1e0>
 800915a:	2306      	movs	r3, #6
 800915c:	e790      	b.n	8009080 <InfraredPD_Start+0xe4>
 800915e:	4b54      	ldr	r3, [pc, #336]	; (80092b0 <InfraredPD_Start+0x314>)
 8009160:	eddf 7a54 	vldr	s15, [pc, #336]	; 80092b4 <InfraredPD_Start+0x318>
 8009164:	60e3      	str	r3, [r4, #12]
 8009166:	e794      	b.n	8009092 <InfraredPD_Start+0xf6>
 8009168:	4b53      	ldr	r3, [pc, #332]	; (80092b8 <InfraredPD_Start+0x31c>)
 800916a:	eddf 7a54 	vldr	s15, [pc, #336]	; 80092bc <InfraredPD_Start+0x320>
 800916e:	60e3      	str	r3, [r4, #12]
 8009170:	e78f      	b.n	8009092 <InfraredPD_Start+0xf6>
 8009172:	4b53      	ldr	r3, [pc, #332]	; (80092c0 <InfraredPD_Start+0x324>)
 8009174:	eddf 7a53 	vldr	s15, [pc, #332]	; 80092c4 <InfraredPD_Start+0x328>
 8009178:	60e3      	str	r3, [r4, #12]
 800917a:	e78a      	b.n	8009092 <InfraredPD_Start+0xf6>
 800917c:	2300      	movs	r3, #0
 800917e:	7828      	ldrb	r0, [r5, #0]
 8009180:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8009184:	2301      	movs	r3, #1
 8009186:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800918a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800918e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8009192:	0040      	lsls	r0, r0, #1
 8009194:	2b01      	cmp	r3, #1
 8009196:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
 800919a:	f000 80c3 	beq.w	8009324 <InfraredPD_Start+0x388>
 800919e:	0080      	lsls	r0, r0, #2
 80091a0:	f000 fc60 	bl	8009a64 <malloc>
 80091a4:	6520      	str	r0, [r4, #80]	; 0x50
 80091a6:	2800      	cmp	r0, #0
 80091a8:	f000 80d7 	beq.w	800935a <InfraredPD_Start+0x3be>
 80091ac:	f04f 0800 	mov.w	r8, #0
 80091b0:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 80091b4:	2300      	movs	r3, #0
 80091b6:	65e3      	str	r3, [r4, #92]	; 0x5c
 80091b8:	88b3      	ldrh	r3, [r6, #4]
 80091ba:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80092c8 <InfraredPD_Start+0x32c>
 80091be:	ee07 3a90 	vmov	s15, r3
 80091c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80091c6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80091ca:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80091ce:	ee67 6aa8 	vmul.f32	s13, s15, s17
 80091d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80091d6:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
 80091da:	edc4 6a1a 	vstr	s13, [r4, #104]	; 0x68
 80091de:	ed84 7a1b 	vstr	s14, [r4, #108]	; 0x6c
 80091e2:	782f      	ldrb	r7, [r5, #0]
 80091e4:	ee07 7a90 	vmov	s15, r7
 80091e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80091ec:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80091f0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80091f4:	ee27 0ac0 	vnmul.f32	s0, s15, s0
 80091f8:	eeb1 9a67 	vneg.f32	s18, s15
 80091fc:	f001 f8fa 	bl	800a3f4 <expf>
 8009200:	eddf 7a32 	vldr	s15, [pc, #200]	; 80092cc <InfraredPD_Start+0x330>
 8009204:	ee38 0a40 	vsub.f32	s0, s16, s0
 8009208:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 800920c:	ee29 0a27 	vmul.f32	s0, s18, s15
 8009210:	f001 f8f0 	bl	800a3f4 <expf>
 8009214:	8873      	ldrh	r3, [r6, #2]
 8009216:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
 800921a:	ee07 3a90 	vmov	s15, r3
 800921e:	2201      	movs	r2, #1
 8009220:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
 8009224:	ebc7 1107 	rsb	r1, r7, r7, lsl #4
 8009228:	b2ba      	uxth	r2, r7
 800922a:	e9c4 8828 	strd	r8, r8, [r4, #160]	; 0xa0
 800922e:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
 8009232:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009236:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800923a:	0049      	lsls	r1, r1, #1
 800923c:	f8a4 1098 	strh.w	r1, [r4, #152]	; 0x98
 8009240:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8009244:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8009248:	00c9      	lsls	r1, r1, #3
 800924a:	0092      	lsls	r2, r2, #2
 800924c:	f8a4 109c 	strh.w	r1, [r4, #156]	; 0x9c
 8009250:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 8009254:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009258:	edc4 8a22 	vstr	s17, [r4, #136]	; 0x88
 800925c:	ee38 0a40 	vsub.f32	s0, s16, s0
 8009260:	ecbd 8b04 	vpop	{d8-d9}
 8009264:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8009268:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 800926c:	f104 07ac 	add.w	r7, r4, #172	; 0xac
 8009270:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
 8009274:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
 8009278:	f8a4 808e 	strh.w	r8, [r4, #142]	; 0x8e
 800927c:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8009280:	6830      	ldr	r0, [r6, #0]
 8009282:	6871      	ldr	r1, [r6, #4]
 8009284:	4643      	mov	r3, r8
 8009286:	34b8      	adds	r4, #184	; 0xb8
 8009288:	c403      	stmia	r4!, {r0, r1}
 800928a:	4618      	mov	r0, r3
 800928c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009290:	200000f0 	.word	0x200000f0
 8009294:	41680000 	.word	0x41680000
 8009298:	42006666 	.word	0x42006666
 800929c:	419b3333 	.word	0x419b3333
 80092a0:	42c6999a 	.word	0x42c6999a
 80092a4:	43168000 	.word	0x43168000
 80092a8:	3e1a1cad 	.word	0x3e1a1cad
 80092ac:	3f933333 	.word	0x3f933333
 80092b0:	4254cccd 	.word	0x4254cccd
 80092b4:	3d59e83f 	.word	0x3d59e83f
 80092b8:	42966666 	.word	0x42966666
 80092bc:	3d9a0275 	.word	0x3d9a0275
 80092c0:	42d4cccd 	.word	0x42d4cccd
 80092c4:	3dd9e83f 	.word	0x3dd9e83f
 80092c8:	4048e093 	.word	0x4048e093
 80092cc:	3ea0da75 	.word	0x3ea0da75
 80092d0:	ecbd 8b04 	vpop	{d8-d9}
 80092d4:	2302      	movs	r3, #2
 80092d6:	4618      	mov	r0, r3
 80092d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092e0:	d1f6      	bne.n	80092d0 <InfraredPD_Start+0x334>
 80092e2:	4b22      	ldr	r3, [pc, #136]	; (800936c <InfraredPD_Start+0x3d0>)
 80092e4:	60a3      	str	r3, [r4, #8]
 80092e6:	2a04      	cmp	r2, #4
 80092e8:	f63f aec6 	bhi.w	8009078 <InfraredPD_Start+0xdc>
 80092ec:	e68a      	b.n	8009004 <InfraredPD_Start+0x68>
 80092ee:	2305      	movs	r3, #5
 80092f0:	e6c6      	b.n	8009080 <InfraredPD_Start+0xe4>
 80092f2:	2304      	movs	r3, #4
 80092f4:	e6c4      	b.n	8009080 <InfraredPD_Start+0xe4>
 80092f6:	4b1e      	ldr	r3, [pc, #120]	; (8009370 <InfraredPD_Start+0x3d4>)
 80092f8:	60a3      	str	r3, [r4, #8]
 80092fa:	e683      	b.n	8009004 <InfraredPD_Start+0x68>
 80092fc:	4b1d      	ldr	r3, [pc, #116]	; (8009374 <InfraredPD_Start+0x3d8>)
 80092fe:	6083      	str	r3, [r0, #8]
 8009300:	e680      	b.n	8009004 <InfraredPD_Start+0x68>
 8009302:	4b1d      	ldr	r3, [pc, #116]	; (8009378 <InfraredPD_Start+0x3dc>)
 8009304:	6083      	str	r3, [r0, #8]
 8009306:	e67d      	b.n	8009004 <InfraredPD_Start+0x68>
 8009308:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800937c <InfraredPD_Start+0x3e0>
 800930c:	ee28 7a07 	vmul.f32	s14, s16, s14
 8009310:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
 8009314:	e712      	b.n	800913c <InfraredPD_Start+0x1a0>
 8009316:	4b18      	ldr	r3, [pc, #96]	; (8009378 <InfraredPD_Start+0x3dc>)
 8009318:	60a3      	str	r3, [r4, #8]
 800931a:	2308      	movs	r3, #8
 800931c:	702b      	strb	r3, [r5, #0]
 800931e:	e671      	b.n	8009004 <InfraredPD_Start+0x68>
 8009320:	2301      	movs	r3, #1
 8009322:	e6ad      	b.n	8009080 <InfraredPD_Start+0xe4>
 8009324:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8009326:	f000 fba5 	bl	8009a74 <free>
 800932a:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 800932e:	e736      	b.n	800919e <InfraredPD_Start+0x202>
 8009330:	4b11      	ldr	r3, [pc, #68]	; (8009378 <InfraredPD_Start+0x3dc>)
 8009332:	60a3      	str	r3, [r4, #8]
 8009334:	2a08      	cmp	r2, #8
 8009336:	d8f0      	bhi.n	800931a <InfraredPD_Start+0x37e>
 8009338:	e664      	b.n	8009004 <InfraredPD_Start+0x68>
 800933a:	4b0e      	ldr	r3, [pc, #56]	; (8009374 <InfraredPD_Start+0x3d8>)
 800933c:	60a3      	str	r3, [r4, #8]
 800933e:	2a02      	cmp	r2, #2
 8009340:	f67f ae60 	bls.w	8009004 <InfraredPD_Start+0x68>
 8009344:	2302      	movs	r3, #2
 8009346:	702b      	strb	r3, [r5, #0]
 8009348:	e65c      	b.n	8009004 <InfraredPD_Start+0x68>
 800934a:	4b0a      	ldr	r3, [pc, #40]	; (8009374 <InfraredPD_Start+0x3d8>)
 800934c:	6083      	str	r3, [r0, #8]
 800934e:	e7f9      	b.n	8009344 <InfraredPD_Start+0x3a8>
 8009350:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8009352:	f000 fb8f 	bl	8009a74 <free>
 8009356:	8ba0      	ldrh	r0, [r4, #28]
 8009358:	e6fa      	b.n	8009150 <InfraredPD_Start+0x1b4>
 800935a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800935c:	b118      	cbz	r0, 8009366 <InfraredPD_Start+0x3ca>
 800935e:	f000 fb89 	bl	8009a74 <free>
 8009362:	2307      	movs	r3, #7
 8009364:	e68c      	b.n	8009080 <InfraredPD_Start+0xe4>
 8009366:	2307      	movs	r3, #7
 8009368:	e68a      	b.n	8009080 <InfraredPD_Start+0xe4>
 800936a:	bf00      	nop
 800936c:	419b3333 	.word	0x419b3333
 8009370:	42560000 	.word	0x42560000
 8009374:	41873333 	.word	0x41873333
 8009378:	41b00000 	.word	0x41b00000
 800937c:	3223b1a8 	.word	0x3223b1a8

08009380 <InfraredPD_Update>:
 8009380:	4bba      	ldr	r3, [pc, #744]	; (800966c <InfraredPD_Update+0x2ec>)
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	b903      	cbnz	r3, 8009388 <InfraredPD_Update+0x8>
 8009386:	4770      	bx	lr
 8009388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800938c:	ed2d 8b02 	vpush	{d8}
 8009390:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8009394:	f890 60b1 	ldrb.w	r6, [r0, #177]	; 0xb1
 8009398:	4615      	mov	r5, r2
 800939a:	f9b1 2000 	ldrsh.w	r2, [r1]
 800939e:	fb16 f303 	smulbb	r3, r6, r3
 80093a2:	ee07 2a10 	vmov	s14, r2
 80093a6:	ee07 3a90 	vmov	s15, r3
 80093aa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80093ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80093b2:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 80093b6:	ed80 7a00 	vstr	s14, [r0]
 80093ba:	b083      	sub	sp, #12
 80093bc:	4604      	mov	r4, r0
 80093be:	edc0 7a01 	vstr	s15, [r0, #4]
 80093c2:	2a00      	cmp	r2, #0
 80093c4:	d067      	beq.n	8009496 <InfraredPD_Update+0x116>
 80093c6:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d168      	bne.n	80094a0 <InfraredPD_Update+0x120>
 80093ce:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f040 8303 	bne.w	80099de <InfraredPD_Update+0x65e>
 80093d8:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 80093dc:	6a07      	ldr	r7, [r0, #32]
 80093de:	3301      	adds	r3, #1
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80093e6:	3a01      	subs	r2, #1
 80093e8:	0090      	lsls	r0, r2, #2
 80093ea:	2f01      	cmp	r7, #1
 80093ec:	d068      	beq.n	80094c0 <InfraredPD_Update+0x140>
 80093ee:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8009670 <InfraredPD_Update+0x2f0>
 80093f2:	eeb0 6ae7 	vabs.f32	s12, s15
 80093f6:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80093fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093fe:	d57b      	bpl.n	80094f8 <InfraredPD_Update+0x178>
 8009400:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8009404:	2a00      	cmp	r2, #0
 8009406:	f000 81a8 	beq.w	800975a <InfraredPD_Update+0x3da>
 800940a:	2a01      	cmp	r2, #1
 800940c:	f000 8265 	beq.w	80098da <InfraredPD_Update+0x55a>
 8009410:	2a02      	cmp	r2, #2
 8009412:	f000 8246 	beq.w	80098a2 <InfraredPD_Update+0x522>
 8009416:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800941a:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 800941e:	2a00      	cmp	r2, #0
 8009420:	f000 80a6 	beq.w	8009570 <InfraredPD_Update+0x1f0>
 8009424:	e070      	b.n	8009508 <InfraredPD_Update+0x188>
 8009426:	2f01      	cmp	r7, #1
 8009428:	f000 82c2 	beq.w	80099b0 <InfraredPD_Update+0x630>
 800942c:	2300      	movs	r3, #0
 800942e:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8009432:	2f00      	cmp	r7, #0
 8009434:	f040 82d0 	bne.w	80099d8 <InfraredPD_Update+0x658>
 8009438:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 800943c:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
 8009440:	3301      	adds	r3, #1
 8009442:	b29b      	uxth	r3, r3
 8009444:	429a      	cmp	r2, r3
 8009446:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 800944a:	d10b      	bne.n	8009464 <InfraredPD_Update+0xe4>
 800944c:	2300      	movs	r3, #0
 800944e:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8009452:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8009456:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800945a:	b91b      	cbnz	r3, 8009464 <InfraredPD_Update+0xe4>
 800945c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8009460:	2300      	movs	r3, #0
 8009462:	65e3      	str	r3, [r4, #92]	; 0x5c
 8009464:	ee07 6a90 	vmov	s15, r6
 8009468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800946c:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8009470:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8009474:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009478:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800947c:	ee17 3a10 	vmov	r3, s14
 8009480:	802b      	strh	r3, [r5, #0]
 8009482:	ee17 3a90 	vmov	r3, s15
 8009486:	806b      	strh	r3, [r5, #2]
 8009488:	2300      	movs	r3, #0
 800948a:	716b      	strb	r3, [r5, #5]
 800948c:	712f      	strb	r7, [r5, #4]
 800948e:	2f01      	cmp	r7, #1
 8009490:	d101      	bne.n	8009496 <InfraredPD_Update+0x116>
 8009492:	2301      	movs	r3, #1
 8009494:	716b      	strb	r3, [r5, #5]
 8009496:	b003      	add	sp, #12
 8009498:	ecbd 8b02 	vpop	{d8}
 800949c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a0:	2200      	movs	r2, #0
 80094a2:	2301      	movs	r3, #1
 80094a4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80094a8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 80094ac:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 80094b0:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 80094b4:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
 80094b8:	f880 20a7 	strb.w	r2, [r0, #167]	; 0xa7
 80094bc:	6203      	str	r3, [r0, #32]
 80094be:	4610      	mov	r0, r2
 80094c0:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 80094c4:	b182      	cbz	r2, 80094e8 <InfraredPD_Update+0x168>
 80094c6:	2a01      	cmp	r2, #1
 80094c8:	f000 81e8 	beq.w	800989c <InfraredPD_Update+0x51c>
 80094cc:	2a02      	cmp	r2, #2
 80094ce:	d10b      	bne.n	80094e8 <InfraredPD_Update+0x168>
 80094d0:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8009674 <InfraredPD_Update+0x2f4>
 80094d4:	eddf 6a68 	vldr	s13, [pc, #416]	; 8009678 <InfraredPD_Update+0x2f8>
 80094d8:	eee7 6a06 	vfma.f32	s13, s14, s12
 80094dc:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80094e0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80094e4:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
 80094e8:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 80094ec:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
 80094f0:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 80094f4:	2701      	movs	r7, #1
 80094f6:	e77a      	b.n	80093ee <InfraredPD_Update+0x6e>
 80094f8:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 80094fc:	b3b2      	cbz	r2, 800956c <InfraredPD_Update+0x1ec>
 80094fe:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8009502:	b39a      	cbz	r2, 800956c <InfraredPD_Update+0x1ec>
 8009504:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8009508:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800950c:	8ba1      	ldrh	r1, [r4, #28]
 800950e:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 8009512:	3201      	adds	r2, #1
 8009514:	b2d2      	uxtb	r2, r2
 8009516:	428a      	cmp	r2, r1
 8009518:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 800951c:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 8009520:	bf08      	it	eq
 8009522:	2200      	moveq	r2, #0
 8009524:	ed4e 7a01 	vstr	s15, [lr, #-4]
 8009528:	bf08      	it	eq
 800952a:	f884 2040 	strbeq.w	r2, [r4, #64]	; 0x40
 800952e:	2901      	cmp	r1, #1
 8009530:	f240 81ce 	bls.w	80098d0 <InfraredPD_Update+0x550>
 8009534:	42b9      	cmp	r1, r7
 8009536:	f240 81df 	bls.w	80098f8 <InfraredPD_Update+0x578>
 800953a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800967c <InfraredPD_Update+0x2fc>
 800953e:	b167      	cbz	r7, 800955a <InfraredPD_Update+0x1da>
 8009540:	2200      	movs	r2, #0
 8009542:	4611      	mov	r1, r2
 8009544:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8009548:	3201      	adds	r2, #1
 800954a:	edd1 7a00 	vldr	s15, [r1]
 800954e:	b292      	uxth	r2, r2
 8009550:	42ba      	cmp	r2, r7
 8009552:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009556:	4611      	mov	r1, r2
 8009558:	d3f4      	bcc.n	8009544 <InfraredPD_Update+0x1c4>
 800955a:	ee07 7a90 	vmov	s15, r7
 800955e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8009562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009566:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 800956a:	e003      	b.n	8009574 <InfraredPD_Update+0x1f4>
 800956c:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8009570:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8009574:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8009576:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 800957a:	180a      	adds	r2, r1, r0
 800957c:	edc2 7a00 	vstr	s15, [r2]
 8009580:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8009584:	f894 c04c 	ldrb.w	ip, [r4, #76]	; 0x4c
 8009588:	429a      	cmp	r2, r3
 800958a:	d07b      	beq.n	8009684 <InfraredPD_Update+0x304>
 800958c:	ed94 6a1c 	vldr	s12, [r4, #112]	; 0x70
 8009590:	edd4 6a1d 	vldr	s13, [r4, #116]	; 0x74
 8009594:	ed94 5a1e 	vldr	s10, [r4, #120]	; 0x78
 8009598:	edd4 5a1f 	vldr	s11, [r4, #124]	; 0x7c
 800959c:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 80095a0:	f894 7090 	ldrb.w	r7, [r4, #144]	; 0x90
 80095a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80095a8:	ee37 8a46 	vsub.f32	s16, s14, s12
 80095ac:	ee77 7a66 	vsub.f32	s15, s14, s13
 80095b0:	ee28 8a05 	vmul.f32	s16, s16, s10
 80095b4:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80095b8:	eea6 8a28 	vfma.f32	s16, s12, s17
 80095bc:	eee8 7aa6 	vfma.f32	s15, s17, s13
 80095c0:	ed84 8a1e 	vstr	s16, [r4, #120]	; 0x78
 80095c4:	ee38 8a67 	vsub.f32	s16, s16, s15
 80095c8:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 80095cc:	ed84 8a20 	vstr	s16, [r4, #128]	; 0x80
 80095d0:	2f00      	cmp	r7, #0
 80095d2:	f000 80b4 	beq.w	800973e <InfraredPD_Update+0x3be>
 80095d6:	2f01      	cmp	r7, #1
 80095d8:	d114      	bne.n	8009604 <InfraredPD_Update+0x284>
 80095da:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
 80095de:	eef0 6ac8 	vabs.f32	s13, s16
 80095e2:	eef4 6ac7 	vcmpe.f32	s13, s14
 80095e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ea:	f140 80c0 	bpl.w	800976e <InfraredPD_Update+0x3ee>
 80095ee:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 80095f2:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
 80095f6:	3301      	adds	r3, #1
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	429a      	cmp	r2, r3
 80095fc:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 8009600:	f240 8146 	bls.w	8009890 <InfraredPD_Update+0x510>
 8009604:	f894 80a6 	ldrb.w	r8, [r4, #166]	; 0xa6
 8009608:	f1bc 0f00 	cmp.w	ip, #0
 800960c:	d108      	bne.n	8009620 <InfraredPD_Update+0x2a0>
 800960e:	f1b8 0f03 	cmp.w	r8, #3
 8009612:	d809      	bhi.n	8009628 <InfraredPD_Update+0x2a8>
 8009614:	e8df f018 	tbh	[pc, r8, lsl #1]
 8009618:	010d011c 	.word	0x010d011c
 800961c:	00af00fd 	.word	0x00af00fd
 8009620:	f1b8 0f00 	cmp.w	r8, #0
 8009624:	f43f af17 	beq.w	8009456 <InfraredPD_Update+0xd6>
 8009628:	ee07 6a90 	vmov	s15, r6
 800962c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009630:	f1b8 0f02 	cmp.w	r8, #2
 8009634:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8009638:	eec8 7a26 	vdiv.f32	s15, s16, s13
 800963c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009640:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009644:	ee17 3a10 	vmov	r3, s14
 8009648:	802b      	strh	r3, [r5, #0]
 800964a:	ee17 3a90 	vmov	r3, s15
 800964e:	806b      	strh	r3, [r5, #2]
 8009650:	f43f af1a 	beq.w	8009488 <InfraredPD_Update+0x108>
 8009654:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
 8009658:	f1b8 0f01 	cmp.w	r8, #1
 800965c:	f000 8080 	beq.w	8009760 <InfraredPD_Update+0x3e0>
 8009660:	796b      	ldrb	r3, [r5, #5]
 8009662:	712f      	strb	r7, [r5, #4]
 8009664:	2b01      	cmp	r3, #1
 8009666:	f47f af12 	bne.w	800948e <InfraredPD_Update+0x10e>
 800966a:	e712      	b.n	8009492 <InfraredPD_Update+0x112>
 800966c:	200000f0 	.word	0x200000f0
 8009670:	46f05e00 	.word	0x46f05e00
 8009674:	3c23d70a 	.word	0x3c23d70a
 8009678:	43889333 	.word	0x43889333
 800967c:	00000000 	.word	0x00000000
 8009680:	7fc00000 	.word	0x7fc00000
 8009684:	2200      	movs	r2, #0
 8009686:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
 800968a:	f1bc 0f00 	cmp.w	ip, #0
 800968e:	d169      	bne.n	8009764 <InfraredPD_Update+0x3e4>
 8009690:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8009692:	65a2      	str	r2, [r4, #88]	; 0x58
 8009694:	b1d3      	cbz	r3, 80096cc <InfraredPD_Update+0x34c>
 8009696:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 800967c <InfraredPD_Update+0x2fc>
 800969a:	2200      	movs	r2, #0
 800969c:	3201      	adds	r2, #1
 800969e:	ecb1 7a01 	vldmia	r1!, {s14}
 80096a2:	b290      	uxth	r0, r2
 80096a4:	4283      	cmp	r3, r0
 80096a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80096aa:	d8f7      	bhi.n	800969c <InfraredPD_Update+0x31c>
 80096ac:	ee07 3a10 	vmov	s14, r3
 80096b0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80096b4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80096b8:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 80096bc:	f1bc 0f00 	cmp.w	ip, #0
 80096c0:	d00a      	beq.n	80096d8 <InfraredPD_Update+0x358>
 80096c2:	f04f 0c00 	mov.w	ip, #0
 80096c6:	f884 c04c 	strb.w	ip, [r4, #76]	; 0x4c
 80096ca:	e75f      	b.n	800958c <InfraredPD_Update+0x20c>
 80096cc:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 8009680 <InfraredPD_Update+0x300>
 80096d0:	eeb0 7a67 	vmov.f32	s14, s15
 80096d4:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
 80096d8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f040 80c8 	bne.w	8009872 <InfraredPD_Update+0x4f2>
 80096e2:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 80096e6:	b17a      	cbz	r2, 8009708 <InfraredPD_Update+0x388>
 80096e8:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 80096ec:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 80096f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80096f4:	eef1 6a66 	vneg.f32	s13, s13
 80096f8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80096fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009700:	f340 8115 	ble.w	800992e <InfraredPD_Update+0x5ae>
 8009704:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8009708:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800970c:	2b00      	cmp	r3, #0
 800970e:	f47f af3d 	bne.w	800958c <InfraredPD_Update+0x20c>
 8009712:	edd4 6a16 	vldr	s13, [r4, #88]	; 0x58
 8009716:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 800971a:	ee37 7a66 	vsub.f32	s14, s14, s13
 800971e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009726:	f340 8127 	ble.w	8009978 <InfraredPD_Update+0x5f8>
 800972a:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 800972e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009732:	2301      	movs	r3, #1
 8009734:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8009738:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 800973c:	e726      	b.n	800958c <InfraredPD_Update+0x20c>
 800973e:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 8009742:	eef0 6ac8 	vabs.f32	s13, s16
 8009746:	eef4 6ac7 	vcmpe.f32	s13, s14
 800974a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800974e:	f77f af59 	ble.w	8009604 <InfraredPD_Update+0x284>
 8009752:	2701      	movs	r7, #1
 8009754:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 8009758:	e754      	b.n	8009604 <InfraredPD_Update+0x284>
 800975a:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 800975e:	e707      	b.n	8009570 <InfraredPD_Update+0x1f0>
 8009760:	712f      	strb	r7, [r5, #4]
 8009762:	e696      	b.n	8009492 <InfraredPD_Update+0x112>
 8009764:	2b00      	cmp	r3, #0
 8009766:	d196      	bne.n	8009696 <InfraredPD_Update+0x316>
 8009768:	4ba5      	ldr	r3, [pc, #660]	; (8009a00 <InfraredPD_Update+0x680>)
 800976a:	6563      	str	r3, [r4, #84]	; 0x54
 800976c:	e7a9      	b.n	80096c2 <InfraredPD_Update+0x342>
 800976e:	2300      	movs	r3, #0
 8009770:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 8009774:	e746      	b.n	8009604 <InfraredPD_Update+0x284>
 8009776:	f8b4 90a4 	ldrh.w	r9, [r4, #164]	; 0xa4
 800977a:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
 800977e:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8009782:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8009786:	f109 0901 	add.w	r9, r9, #1
 800978a:	fa1f f989 	uxth.w	r9, r9
 800978e:	ee17 0a90 	vmov	r0, s15
 8009792:	f8a4 90a4 	strh.w	r9, [r4, #164]	; 0xa4
 8009796:	ed8d 7a01 	vstr	s14, [sp, #4]
 800979a:	f7f6 ffff 	bl	800079c <__aeabi_f2d>
 800979e:	4682      	mov	sl, r0
 80097a0:	9801      	ldr	r0, [sp, #4]
 80097a2:	468b      	mov	fp, r1
 80097a4:	f7f6 fffa 	bl	800079c <__aeabi_f2d>
 80097a8:	a393      	add	r3, pc, #588	; (adr r3, 80099f8 <InfraredPD_Update+0x678>)
 80097aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ae:	f7f6 fd67 	bl	8000280 <__aeabi_dmul>
 80097b2:	4602      	mov	r2, r0
 80097b4:	460b      	mov	r3, r1
 80097b6:	4650      	mov	r0, sl
 80097b8:	4659      	mov	r1, fp
 80097ba:	f7f7 f8a7 	bl	800090c <__aeabi_dcmplt>
 80097be:	2800      	cmp	r0, #0
 80097c0:	f47f ae44 	bne.w	800944c <InfraredPD_Update+0xcc>
 80097c4:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 80097c8:	454b      	cmp	r3, r9
 80097ca:	f43f ae3f 	beq.w	800944c <InfraredPD_Update+0xcc>
 80097ce:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 80097d2:	ed9d 7a01 	vldr	s14, [sp, #4]
 80097d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80097da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097de:	d505      	bpl.n	80097ec <InfraredPD_Update+0x46c>
 80097e0:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
 80097e4:	f04f 0801 	mov.w	r8, #1
 80097e8:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 80097ec:	ee07 6a90 	vmov	s15, r6
 80097f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f4:	eec8 6aa7 	vdiv.f32	s13, s17, s15
 80097f8:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80097fc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8009800:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8009804:	ee16 3a90 	vmov	r3, s13
 8009808:	802b      	strh	r3, [r5, #0]
 800980a:	ee17 3a10 	vmov	r3, s14
 800980e:	806b      	strh	r3, [r5, #2]
 8009810:	e720      	b.n	8009654 <InfraredPD_Update+0x2d4>
 8009812:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 8009816:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 800981a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800981e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009822:	f57f ae00 	bpl.w	8009426 <InfraredPD_Update+0xa6>
 8009826:	2300      	movs	r3, #0
 8009828:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 800982c:	f8c4 30a2 	str.w	r3, [r4, #162]	; 0xa2
 8009830:	e611      	b.n	8009456 <InfraredPD_Update+0xd6>
 8009832:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 8009836:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 800983a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800983e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009842:	d57b      	bpl.n	800993c <InfraredPD_Update+0x5bc>
 8009844:	2300      	movs	r3, #0
 8009846:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 800984a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 800984e:	e602      	b.n	8009456 <InfraredPD_Update+0xd6>
 8009850:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8009854:	ee78 6ae7 	vsub.f32	s13, s17, s15
 8009858:	eef4 6ac7 	vcmpe.f32	s13, s14
 800985c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009860:	f340 8081 	ble.w	8009966 <InfraredPD_Update+0x5e6>
 8009864:	f04f 0803 	mov.w	r8, #3
 8009868:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 800986c:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
 8009870:	e7bc      	b.n	80097ec <InfraredPD_Update+0x46c>
 8009872:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8009876:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 800987a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800987e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8009882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009886:	d552      	bpl.n	800992e <InfraredPD_Update+0x5ae>
 8009888:	2300      	movs	r3, #0
 800988a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800988e:	e73b      	b.n	8009708 <InfraredPD_Update+0x388>
 8009890:	2700      	movs	r7, #0
 8009892:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 8009896:	f8a4 708e 	strh.w	r7, [r4, #142]	; 0x8e
 800989a:	e6b3      	b.n	8009604 <InfraredPD_Update+0x284>
 800989c:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 80098a0:	e622      	b.n	80094e8 <InfraredPD_Update+0x168>
 80098a2:	eddf 5a58 	vldr	s11, [pc, #352]	; 8009a04 <InfraredPD_Update+0x684>
 80098a6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009a08 <InfraredPD_Update+0x688>
 80098aa:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 80098ae:	ed94 5a0e 	vldr	s10, [r4, #56]	; 0x38
 80098b2:	eee7 6a25 	vfma.f32	s13, s14, s11
 80098b6:	eeb0 7a46 	vmov.f32	s14, s12
 80098ba:	ee66 5aa6 	vmul.f32	s11, s13, s13
 80098be:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
 80098c2:	ee95 7aa5 	vfnms.f32	s14, s11, s11
 80098c6:	eee5 7a07 	vfma.f32	s15, s10, s14
 80098ca:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 80098ce:	e5a4      	b.n	800941a <InfraredPD_Update+0x9a>
 80098d0:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80098d4:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 80098d8:	e64c      	b.n	8009574 <InfraredPD_Update+0x1f4>
 80098da:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 80098de:	edd4 6a05 	vldr	s13, [r4, #20]
 80098e2:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8009a04 <InfraredPD_Update+0x684>
 80098e6:	ee37 7a65 	vsub.f32	s14, s14, s11
 80098ea:	ee66 6a86 	vmul.f32	s13, s13, s12
 80098ee:	eee7 7a26 	vfma.f32	s15, s14, s13
 80098f2:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 80098f6:	e590      	b.n	800941a <InfraredPD_Update+0x9a>
 80098f8:	1e4f      	subs	r7, r1, #1
 80098fa:	4662      	mov	r2, ip
 80098fc:	fa1f fc87 	uxth.w	ip, r7
 8009900:	2700      	movs	r7, #0
 8009902:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 8009906:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8009a0c <InfraredPD_Update+0x68c>
 800990a:	1d17      	adds	r7, r2, #4
 800990c:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8009910:	ecf2 7a01 	vldmia	r2!, {s15}
 8009914:	4297      	cmp	r7, r2
 8009916:	ee37 7a27 	vadd.f32	s14, s14, s15
 800991a:	d1f9      	bne.n	8009910 <InfraredPD_Update+0x590>
 800991c:	ee07 1a90 	vmov	s15, r1
 8009920:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009928:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 800992c:	e622      	b.n	8009574 <InfraredPD_Update+0x1f4>
 800992e:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
 8009932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009936:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 800993a:	e6e5      	b.n	8009708 <InfraredPD_Update+0x388>
 800993c:	bba7      	cbnz	r7, 80099a8 <InfraredPD_Update+0x628>
 800993e:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 8009942:	b38b      	cbz	r3, 80099a8 <InfraredPD_Update+0x628>
 8009944:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8009948:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
 800994c:	3301      	adds	r3, #1
 800994e:	b29b      	uxth	r3, r3
 8009950:	429a      	cmp	r2, r3
 8009952:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8009956:	f47f af49 	bne.w	80097ec <InfraredPD_Update+0x46c>
 800995a:	2302      	movs	r3, #2
 800995c:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8009960:	f8a4 70a0 	strh.w	r7, [r4, #160]	; 0xa0
 8009964:	e57e      	b.n	8009464 <InfraredPD_Update+0xe4>
 8009966:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 800996a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800996e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009972:	f57f ad70 	bpl.w	8009456 <InfraredPD_Update+0xd6>
 8009976:	e735      	b.n	80097e4 <InfraredPD_Update+0x464>
 8009978:	eef1 7a67 	vneg.f32	s15, s15
 800997c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009984:	f57f ae02 	bpl.w	800958c <InfraredPD_Update+0x20c>
 8009988:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 800998c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009994:	f77f adfa 	ble.w	800958c <InfraredPD_Update+0x20c>
 8009998:	ee37 7a27 	vadd.f32	s14, s14, s15
 800999c:	2301      	movs	r3, #1
 800999e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80099a2:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 80099a6:	e5f1      	b.n	800958c <InfraredPD_Update+0x20c>
 80099a8:	2300      	movs	r3, #0
 80099aa:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 80099ae:	e71d      	b.n	80097ec <InfraredPD_Update+0x46c>
 80099b0:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 80099b4:	f8b4 109a 	ldrh.w	r1, [r4, #154]	; 0x9a
 80099b8:	3301      	adds	r3, #1
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	2200      	movs	r2, #0
 80099be:	4299      	cmp	r1, r3
 80099c0:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
 80099c4:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80099c8:	f47f ad4c 	bne.w	8009464 <InfraredPD_Update+0xe4>
 80099cc:	f884 70a6 	strb.w	r7, [r4, #166]	; 0xa6
 80099d0:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
 80099d4:	46b8      	mov	r8, r7
 80099d6:	e709      	b.n	80097ec <InfraredPD_Update+0x46c>
 80099d8:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80099dc:	e542      	b.n	8009464 <InfraredPD_Update+0xe4>
 80099de:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 80099e2:	6a07      	ldr	r7, [r0, #32]
 80099e4:	3301      	adds	r3, #1
 80099e6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80099ea:	fa12 f283 	uxtah	r2, r2, r3
 80099ee:	3701      	adds	r7, #1
 80099f0:	6207      	str	r7, [r0, #32]
 80099f2:	b29b      	uxth	r3, r3
 80099f4:	0090      	lsls	r0, r2, #2
 80099f6:	e4f8      	b.n	80093ea <InfraredPD_Update+0x6a>
 80099f8:	cccccccd 	.word	0xcccccccd
 80099fc:	3feccccc 	.word	0x3feccccc
 8009a00:	7fc00000 	.word	0x7fc00000
 8009a04:	3c23d70a 	.word	0x3c23d70a
 8009a08:	43889333 	.word	0x43889333
 8009a0c:	00000000 	.word	0x00000000

08009a10 <InfraredPD_GetLibVersion>:
 8009a10:	b570      	push	{r4, r5, r6, lr}
 8009a12:	4b12      	ldr	r3, [pc, #72]	; (8009a5c <InfraredPD_GetLibVersion+0x4c>)
 8009a14:	781e      	ldrb	r6, [r3, #0]
 8009a16:	b08a      	sub	sp, #40	; 0x28
 8009a18:	b1ee      	cbz	r6, 8009a56 <InfraredPD_GetLibVersion+0x46>
 8009a1a:	4d11      	ldr	r5, [pc, #68]	; (8009a60 <InfraredPD_GetLibVersion+0x50>)
 8009a1c:	4684      	mov	ip, r0
 8009a1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009a20:	f10d 0e04 	add.w	lr, sp, #4
 8009a24:	4674      	mov	r4, lr
 8009a26:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009a2a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8009a2e:	f84e 0b04 	str.w	r0, [lr], #4
 8009a32:	f88e 1000 	strb.w	r1, [lr]
 8009a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009a38:	f8cc 0000 	str.w	r0, [ip]
 8009a3c:	f8cc 2008 	str.w	r2, [ip, #8]
 8009a40:	6820      	ldr	r0, [r4, #0]
 8009a42:	7922      	ldrb	r2, [r4, #4]
 8009a44:	f8cc 1004 	str.w	r1, [ip, #4]
 8009a48:	2614      	movs	r6, #20
 8009a4a:	f8cc 300c 	str.w	r3, [ip, #12]
 8009a4e:	f8cc 0010 	str.w	r0, [ip, #16]
 8009a52:	f88c 2014 	strb.w	r2, [ip, #20]
 8009a56:	4630      	mov	r0, r6
 8009a58:	b00a      	add	sp, #40	; 0x28
 8009a5a:	bd70      	pop	{r4, r5, r6, pc}
 8009a5c:	200000f0 	.word	0x200000f0
 8009a60:	0800a728 	.word	0x0800a728

08009a64 <malloc>:
 8009a64:	4b02      	ldr	r3, [pc, #8]	; (8009a70 <malloc+0xc>)
 8009a66:	4601      	mov	r1, r0
 8009a68:	6818      	ldr	r0, [r3, #0]
 8009a6a:	f000 b82b 	b.w	8009ac4 <_malloc_r>
 8009a6e:	bf00      	nop
 8009a70:	200000d0 	.word	0x200000d0

08009a74 <free>:
 8009a74:	4b02      	ldr	r3, [pc, #8]	; (8009a80 <free+0xc>)
 8009a76:	4601      	mov	r1, r0
 8009a78:	6818      	ldr	r0, [r3, #0]
 8009a7a:	f000 b927 	b.w	8009ccc <_free_r>
 8009a7e:	bf00      	nop
 8009a80:	200000d0 	.word	0x200000d0

08009a84 <sbrk_aligned>:
 8009a84:	b570      	push	{r4, r5, r6, lr}
 8009a86:	4e0e      	ldr	r6, [pc, #56]	; (8009ac0 <sbrk_aligned+0x3c>)
 8009a88:	460c      	mov	r4, r1
 8009a8a:	6831      	ldr	r1, [r6, #0]
 8009a8c:	4605      	mov	r5, r0
 8009a8e:	b911      	cbnz	r1, 8009a96 <sbrk_aligned+0x12>
 8009a90:	f000 f8e0 	bl	8009c54 <_sbrk_r>
 8009a94:	6030      	str	r0, [r6, #0]
 8009a96:	4621      	mov	r1, r4
 8009a98:	4628      	mov	r0, r5
 8009a9a:	f000 f8db 	bl	8009c54 <_sbrk_r>
 8009a9e:	1c43      	adds	r3, r0, #1
 8009aa0:	d00a      	beq.n	8009ab8 <sbrk_aligned+0x34>
 8009aa2:	1cc4      	adds	r4, r0, #3
 8009aa4:	f024 0403 	bic.w	r4, r4, #3
 8009aa8:	42a0      	cmp	r0, r4
 8009aaa:	d007      	beq.n	8009abc <sbrk_aligned+0x38>
 8009aac:	1a21      	subs	r1, r4, r0
 8009aae:	4628      	mov	r0, r5
 8009ab0:	f000 f8d0 	bl	8009c54 <_sbrk_r>
 8009ab4:	3001      	adds	r0, #1
 8009ab6:	d101      	bne.n	8009abc <sbrk_aligned+0x38>
 8009ab8:	f04f 34ff 	mov.w	r4, #4294967295
 8009abc:	4620      	mov	r0, r4
 8009abe:	bd70      	pop	{r4, r5, r6, pc}
 8009ac0:	20000b64 	.word	0x20000b64

08009ac4 <_malloc_r>:
 8009ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac8:	1ccd      	adds	r5, r1, #3
 8009aca:	f025 0503 	bic.w	r5, r5, #3
 8009ace:	3508      	adds	r5, #8
 8009ad0:	2d0c      	cmp	r5, #12
 8009ad2:	bf38      	it	cc
 8009ad4:	250c      	movcc	r5, #12
 8009ad6:	2d00      	cmp	r5, #0
 8009ad8:	4607      	mov	r7, r0
 8009ada:	db01      	blt.n	8009ae0 <_malloc_r+0x1c>
 8009adc:	42a9      	cmp	r1, r5
 8009ade:	d905      	bls.n	8009aec <_malloc_r+0x28>
 8009ae0:	230c      	movs	r3, #12
 8009ae2:	603b      	str	r3, [r7, #0]
 8009ae4:	2600      	movs	r6, #0
 8009ae6:	4630      	mov	r0, r6
 8009ae8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009bc0 <_malloc_r+0xfc>
 8009af0:	f000 f868 	bl	8009bc4 <__malloc_lock>
 8009af4:	f8d8 3000 	ldr.w	r3, [r8]
 8009af8:	461c      	mov	r4, r3
 8009afa:	bb5c      	cbnz	r4, 8009b54 <_malloc_r+0x90>
 8009afc:	4629      	mov	r1, r5
 8009afe:	4638      	mov	r0, r7
 8009b00:	f7ff ffc0 	bl	8009a84 <sbrk_aligned>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	4604      	mov	r4, r0
 8009b08:	d155      	bne.n	8009bb6 <_malloc_r+0xf2>
 8009b0a:	f8d8 4000 	ldr.w	r4, [r8]
 8009b0e:	4626      	mov	r6, r4
 8009b10:	2e00      	cmp	r6, #0
 8009b12:	d145      	bne.n	8009ba0 <_malloc_r+0xdc>
 8009b14:	2c00      	cmp	r4, #0
 8009b16:	d048      	beq.n	8009baa <_malloc_r+0xe6>
 8009b18:	6823      	ldr	r3, [r4, #0]
 8009b1a:	4631      	mov	r1, r6
 8009b1c:	4638      	mov	r0, r7
 8009b1e:	eb04 0903 	add.w	r9, r4, r3
 8009b22:	f000 f897 	bl	8009c54 <_sbrk_r>
 8009b26:	4581      	cmp	r9, r0
 8009b28:	d13f      	bne.n	8009baa <_malloc_r+0xe6>
 8009b2a:	6821      	ldr	r1, [r4, #0]
 8009b2c:	1a6d      	subs	r5, r5, r1
 8009b2e:	4629      	mov	r1, r5
 8009b30:	4638      	mov	r0, r7
 8009b32:	f7ff ffa7 	bl	8009a84 <sbrk_aligned>
 8009b36:	3001      	adds	r0, #1
 8009b38:	d037      	beq.n	8009baa <_malloc_r+0xe6>
 8009b3a:	6823      	ldr	r3, [r4, #0]
 8009b3c:	442b      	add	r3, r5
 8009b3e:	6023      	str	r3, [r4, #0]
 8009b40:	f8d8 3000 	ldr.w	r3, [r8]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d038      	beq.n	8009bba <_malloc_r+0xf6>
 8009b48:	685a      	ldr	r2, [r3, #4]
 8009b4a:	42a2      	cmp	r2, r4
 8009b4c:	d12b      	bne.n	8009ba6 <_malloc_r+0xe2>
 8009b4e:	2200      	movs	r2, #0
 8009b50:	605a      	str	r2, [r3, #4]
 8009b52:	e00f      	b.n	8009b74 <_malloc_r+0xb0>
 8009b54:	6822      	ldr	r2, [r4, #0]
 8009b56:	1b52      	subs	r2, r2, r5
 8009b58:	d41f      	bmi.n	8009b9a <_malloc_r+0xd6>
 8009b5a:	2a0b      	cmp	r2, #11
 8009b5c:	d917      	bls.n	8009b8e <_malloc_r+0xca>
 8009b5e:	1961      	adds	r1, r4, r5
 8009b60:	42a3      	cmp	r3, r4
 8009b62:	6025      	str	r5, [r4, #0]
 8009b64:	bf18      	it	ne
 8009b66:	6059      	strne	r1, [r3, #4]
 8009b68:	6863      	ldr	r3, [r4, #4]
 8009b6a:	bf08      	it	eq
 8009b6c:	f8c8 1000 	streq.w	r1, [r8]
 8009b70:	5162      	str	r2, [r4, r5]
 8009b72:	604b      	str	r3, [r1, #4]
 8009b74:	4638      	mov	r0, r7
 8009b76:	f104 060b 	add.w	r6, r4, #11
 8009b7a:	f000 f829 	bl	8009bd0 <__malloc_unlock>
 8009b7e:	f026 0607 	bic.w	r6, r6, #7
 8009b82:	1d23      	adds	r3, r4, #4
 8009b84:	1af2      	subs	r2, r6, r3
 8009b86:	d0ae      	beq.n	8009ae6 <_malloc_r+0x22>
 8009b88:	1b9b      	subs	r3, r3, r6
 8009b8a:	50a3      	str	r3, [r4, r2]
 8009b8c:	e7ab      	b.n	8009ae6 <_malloc_r+0x22>
 8009b8e:	42a3      	cmp	r3, r4
 8009b90:	6862      	ldr	r2, [r4, #4]
 8009b92:	d1dd      	bne.n	8009b50 <_malloc_r+0x8c>
 8009b94:	f8c8 2000 	str.w	r2, [r8]
 8009b98:	e7ec      	b.n	8009b74 <_malloc_r+0xb0>
 8009b9a:	4623      	mov	r3, r4
 8009b9c:	6864      	ldr	r4, [r4, #4]
 8009b9e:	e7ac      	b.n	8009afa <_malloc_r+0x36>
 8009ba0:	4634      	mov	r4, r6
 8009ba2:	6876      	ldr	r6, [r6, #4]
 8009ba4:	e7b4      	b.n	8009b10 <_malloc_r+0x4c>
 8009ba6:	4613      	mov	r3, r2
 8009ba8:	e7cc      	b.n	8009b44 <_malloc_r+0x80>
 8009baa:	230c      	movs	r3, #12
 8009bac:	603b      	str	r3, [r7, #0]
 8009bae:	4638      	mov	r0, r7
 8009bb0:	f000 f80e 	bl	8009bd0 <__malloc_unlock>
 8009bb4:	e797      	b.n	8009ae6 <_malloc_r+0x22>
 8009bb6:	6025      	str	r5, [r4, #0]
 8009bb8:	e7dc      	b.n	8009b74 <_malloc_r+0xb0>
 8009bba:	605b      	str	r3, [r3, #4]
 8009bbc:	deff      	udf	#255	; 0xff
 8009bbe:	bf00      	nop
 8009bc0:	20000b60 	.word	0x20000b60

08009bc4 <__malloc_lock>:
 8009bc4:	4801      	ldr	r0, [pc, #4]	; (8009bcc <__malloc_lock+0x8>)
 8009bc6:	f000 b87f 	b.w	8009cc8 <__retarget_lock_acquire_recursive>
 8009bca:	bf00      	nop
 8009bcc:	20000ca4 	.word	0x20000ca4

08009bd0 <__malloc_unlock>:
 8009bd0:	4801      	ldr	r0, [pc, #4]	; (8009bd8 <__malloc_unlock+0x8>)
 8009bd2:	f000 b87a 	b.w	8009cca <__retarget_lock_release_recursive>
 8009bd6:	bf00      	nop
 8009bd8:	20000ca4 	.word	0x20000ca4

08009bdc <sniprintf>:
 8009bdc:	b40c      	push	{r2, r3}
 8009bde:	b530      	push	{r4, r5, lr}
 8009be0:	4b17      	ldr	r3, [pc, #92]	; (8009c40 <sniprintf+0x64>)
 8009be2:	1e0c      	subs	r4, r1, #0
 8009be4:	681d      	ldr	r5, [r3, #0]
 8009be6:	b09d      	sub	sp, #116	; 0x74
 8009be8:	da08      	bge.n	8009bfc <sniprintf+0x20>
 8009bea:	238b      	movs	r3, #139	; 0x8b
 8009bec:	602b      	str	r3, [r5, #0]
 8009bee:	f04f 30ff 	mov.w	r0, #4294967295
 8009bf2:	b01d      	add	sp, #116	; 0x74
 8009bf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009bf8:	b002      	add	sp, #8
 8009bfa:	4770      	bx	lr
 8009bfc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009c00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c04:	bf14      	ite	ne
 8009c06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c0a:	4623      	moveq	r3, r4
 8009c0c:	9304      	str	r3, [sp, #16]
 8009c0e:	9307      	str	r3, [sp, #28]
 8009c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009c14:	9002      	str	r0, [sp, #8]
 8009c16:	9006      	str	r0, [sp, #24]
 8009c18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c1e:	ab21      	add	r3, sp, #132	; 0x84
 8009c20:	a902      	add	r1, sp, #8
 8009c22:	4628      	mov	r0, r5
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	f000 f8f7 	bl	8009e18 <_svfiprintf_r>
 8009c2a:	1c43      	adds	r3, r0, #1
 8009c2c:	bfbc      	itt	lt
 8009c2e:	238b      	movlt	r3, #139	; 0x8b
 8009c30:	602b      	strlt	r3, [r5, #0]
 8009c32:	2c00      	cmp	r4, #0
 8009c34:	d0dd      	beq.n	8009bf2 <sniprintf+0x16>
 8009c36:	9b02      	ldr	r3, [sp, #8]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	701a      	strb	r2, [r3, #0]
 8009c3c:	e7d9      	b.n	8009bf2 <sniprintf+0x16>
 8009c3e:	bf00      	nop
 8009c40:	200000d0 	.word	0x200000d0

08009c44 <memset>:
 8009c44:	4402      	add	r2, r0
 8009c46:	4603      	mov	r3, r0
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	d100      	bne.n	8009c4e <memset+0xa>
 8009c4c:	4770      	bx	lr
 8009c4e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c52:	e7f9      	b.n	8009c48 <memset+0x4>

08009c54 <_sbrk_r>:
 8009c54:	b538      	push	{r3, r4, r5, lr}
 8009c56:	4d06      	ldr	r5, [pc, #24]	; (8009c70 <_sbrk_r+0x1c>)
 8009c58:	2300      	movs	r3, #0
 8009c5a:	4604      	mov	r4, r0
 8009c5c:	4608      	mov	r0, r1
 8009c5e:	602b      	str	r3, [r5, #0]
 8009c60:	f7f7 fda4 	bl	80017ac <_sbrk>
 8009c64:	1c43      	adds	r3, r0, #1
 8009c66:	d102      	bne.n	8009c6e <_sbrk_r+0x1a>
 8009c68:	682b      	ldr	r3, [r5, #0]
 8009c6a:	b103      	cbz	r3, 8009c6e <_sbrk_r+0x1a>
 8009c6c:	6023      	str	r3, [r4, #0]
 8009c6e:	bd38      	pop	{r3, r4, r5, pc}
 8009c70:	20000ca0 	.word	0x20000ca0

08009c74 <__errno>:
 8009c74:	4b01      	ldr	r3, [pc, #4]	; (8009c7c <__errno+0x8>)
 8009c76:	6818      	ldr	r0, [r3, #0]
 8009c78:	4770      	bx	lr
 8009c7a:	bf00      	nop
 8009c7c:	200000d0 	.word	0x200000d0

08009c80 <__libc_init_array>:
 8009c80:	b570      	push	{r4, r5, r6, lr}
 8009c82:	4d0d      	ldr	r5, [pc, #52]	; (8009cb8 <__libc_init_array+0x38>)
 8009c84:	4c0d      	ldr	r4, [pc, #52]	; (8009cbc <__libc_init_array+0x3c>)
 8009c86:	1b64      	subs	r4, r4, r5
 8009c88:	10a4      	asrs	r4, r4, #2
 8009c8a:	2600      	movs	r6, #0
 8009c8c:	42a6      	cmp	r6, r4
 8009c8e:	d109      	bne.n	8009ca4 <__libc_init_array+0x24>
 8009c90:	4d0b      	ldr	r5, [pc, #44]	; (8009cc0 <__libc_init_array+0x40>)
 8009c92:	4c0c      	ldr	r4, [pc, #48]	; (8009cc4 <__libc_init_array+0x44>)
 8009c94:	f000 fd24 	bl	800a6e0 <_init>
 8009c98:	1b64      	subs	r4, r4, r5
 8009c9a:	10a4      	asrs	r4, r4, #2
 8009c9c:	2600      	movs	r6, #0
 8009c9e:	42a6      	cmp	r6, r4
 8009ca0:	d105      	bne.n	8009cae <__libc_init_array+0x2e>
 8009ca2:	bd70      	pop	{r4, r5, r6, pc}
 8009ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ca8:	4798      	blx	r3
 8009caa:	3601      	adds	r6, #1
 8009cac:	e7ee      	b.n	8009c8c <__libc_init_array+0xc>
 8009cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cb2:	4798      	blx	r3
 8009cb4:	3601      	adds	r6, #1
 8009cb6:	e7f2      	b.n	8009c9e <__libc_init_array+0x1e>
 8009cb8:	0800a7bc 	.word	0x0800a7bc
 8009cbc:	0800a7bc 	.word	0x0800a7bc
 8009cc0:	0800a7bc 	.word	0x0800a7bc
 8009cc4:	0800a7c0 	.word	0x0800a7c0

08009cc8 <__retarget_lock_acquire_recursive>:
 8009cc8:	4770      	bx	lr

08009cca <__retarget_lock_release_recursive>:
 8009cca:	4770      	bx	lr

08009ccc <_free_r>:
 8009ccc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cce:	2900      	cmp	r1, #0
 8009cd0:	d044      	beq.n	8009d5c <_free_r+0x90>
 8009cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cd6:	9001      	str	r0, [sp, #4]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	f1a1 0404 	sub.w	r4, r1, #4
 8009cde:	bfb8      	it	lt
 8009ce0:	18e4      	addlt	r4, r4, r3
 8009ce2:	f7ff ff6f 	bl	8009bc4 <__malloc_lock>
 8009ce6:	4a1e      	ldr	r2, [pc, #120]	; (8009d60 <_free_r+0x94>)
 8009ce8:	9801      	ldr	r0, [sp, #4]
 8009cea:	6813      	ldr	r3, [r2, #0]
 8009cec:	b933      	cbnz	r3, 8009cfc <_free_r+0x30>
 8009cee:	6063      	str	r3, [r4, #4]
 8009cf0:	6014      	str	r4, [r2, #0]
 8009cf2:	b003      	add	sp, #12
 8009cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cf8:	f7ff bf6a 	b.w	8009bd0 <__malloc_unlock>
 8009cfc:	42a3      	cmp	r3, r4
 8009cfe:	d908      	bls.n	8009d12 <_free_r+0x46>
 8009d00:	6825      	ldr	r5, [r4, #0]
 8009d02:	1961      	adds	r1, r4, r5
 8009d04:	428b      	cmp	r3, r1
 8009d06:	bf01      	itttt	eq
 8009d08:	6819      	ldreq	r1, [r3, #0]
 8009d0a:	685b      	ldreq	r3, [r3, #4]
 8009d0c:	1949      	addeq	r1, r1, r5
 8009d0e:	6021      	streq	r1, [r4, #0]
 8009d10:	e7ed      	b.n	8009cee <_free_r+0x22>
 8009d12:	461a      	mov	r2, r3
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	b10b      	cbz	r3, 8009d1c <_free_r+0x50>
 8009d18:	42a3      	cmp	r3, r4
 8009d1a:	d9fa      	bls.n	8009d12 <_free_r+0x46>
 8009d1c:	6811      	ldr	r1, [r2, #0]
 8009d1e:	1855      	adds	r5, r2, r1
 8009d20:	42a5      	cmp	r5, r4
 8009d22:	d10b      	bne.n	8009d3c <_free_r+0x70>
 8009d24:	6824      	ldr	r4, [r4, #0]
 8009d26:	4421      	add	r1, r4
 8009d28:	1854      	adds	r4, r2, r1
 8009d2a:	42a3      	cmp	r3, r4
 8009d2c:	6011      	str	r1, [r2, #0]
 8009d2e:	d1e0      	bne.n	8009cf2 <_free_r+0x26>
 8009d30:	681c      	ldr	r4, [r3, #0]
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	6053      	str	r3, [r2, #4]
 8009d36:	440c      	add	r4, r1
 8009d38:	6014      	str	r4, [r2, #0]
 8009d3a:	e7da      	b.n	8009cf2 <_free_r+0x26>
 8009d3c:	d902      	bls.n	8009d44 <_free_r+0x78>
 8009d3e:	230c      	movs	r3, #12
 8009d40:	6003      	str	r3, [r0, #0]
 8009d42:	e7d6      	b.n	8009cf2 <_free_r+0x26>
 8009d44:	6825      	ldr	r5, [r4, #0]
 8009d46:	1961      	adds	r1, r4, r5
 8009d48:	428b      	cmp	r3, r1
 8009d4a:	bf04      	itt	eq
 8009d4c:	6819      	ldreq	r1, [r3, #0]
 8009d4e:	685b      	ldreq	r3, [r3, #4]
 8009d50:	6063      	str	r3, [r4, #4]
 8009d52:	bf04      	itt	eq
 8009d54:	1949      	addeq	r1, r1, r5
 8009d56:	6021      	streq	r1, [r4, #0]
 8009d58:	6054      	str	r4, [r2, #4]
 8009d5a:	e7ca      	b.n	8009cf2 <_free_r+0x26>
 8009d5c:	b003      	add	sp, #12
 8009d5e:	bd30      	pop	{r4, r5, pc}
 8009d60:	20000b60 	.word	0x20000b60

08009d64 <__ssputs_r>:
 8009d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d68:	688e      	ldr	r6, [r1, #8]
 8009d6a:	461f      	mov	r7, r3
 8009d6c:	42be      	cmp	r6, r7
 8009d6e:	680b      	ldr	r3, [r1, #0]
 8009d70:	4682      	mov	sl, r0
 8009d72:	460c      	mov	r4, r1
 8009d74:	4690      	mov	r8, r2
 8009d76:	d82c      	bhi.n	8009dd2 <__ssputs_r+0x6e>
 8009d78:	898a      	ldrh	r2, [r1, #12]
 8009d7a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d7e:	d026      	beq.n	8009dce <__ssputs_r+0x6a>
 8009d80:	6965      	ldr	r5, [r4, #20]
 8009d82:	6909      	ldr	r1, [r1, #16]
 8009d84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d88:	eba3 0901 	sub.w	r9, r3, r1
 8009d8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d90:	1c7b      	adds	r3, r7, #1
 8009d92:	444b      	add	r3, r9
 8009d94:	106d      	asrs	r5, r5, #1
 8009d96:	429d      	cmp	r5, r3
 8009d98:	bf38      	it	cc
 8009d9a:	461d      	movcc	r5, r3
 8009d9c:	0553      	lsls	r3, r2, #21
 8009d9e:	d527      	bpl.n	8009df0 <__ssputs_r+0x8c>
 8009da0:	4629      	mov	r1, r5
 8009da2:	f7ff fe8f 	bl	8009ac4 <_malloc_r>
 8009da6:	4606      	mov	r6, r0
 8009da8:	b360      	cbz	r0, 8009e04 <__ssputs_r+0xa0>
 8009daa:	6921      	ldr	r1, [r4, #16]
 8009dac:	464a      	mov	r2, r9
 8009dae:	f000 fadb 	bl	800a368 <memcpy>
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009db8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dbc:	81a3      	strh	r3, [r4, #12]
 8009dbe:	6126      	str	r6, [r4, #16]
 8009dc0:	6165      	str	r5, [r4, #20]
 8009dc2:	444e      	add	r6, r9
 8009dc4:	eba5 0509 	sub.w	r5, r5, r9
 8009dc8:	6026      	str	r6, [r4, #0]
 8009dca:	60a5      	str	r5, [r4, #8]
 8009dcc:	463e      	mov	r6, r7
 8009dce:	42be      	cmp	r6, r7
 8009dd0:	d900      	bls.n	8009dd4 <__ssputs_r+0x70>
 8009dd2:	463e      	mov	r6, r7
 8009dd4:	6820      	ldr	r0, [r4, #0]
 8009dd6:	4632      	mov	r2, r6
 8009dd8:	4641      	mov	r1, r8
 8009dda:	f000 faab 	bl	800a334 <memmove>
 8009dde:	68a3      	ldr	r3, [r4, #8]
 8009de0:	1b9b      	subs	r3, r3, r6
 8009de2:	60a3      	str	r3, [r4, #8]
 8009de4:	6823      	ldr	r3, [r4, #0]
 8009de6:	4433      	add	r3, r6
 8009de8:	6023      	str	r3, [r4, #0]
 8009dea:	2000      	movs	r0, #0
 8009dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009df0:	462a      	mov	r2, r5
 8009df2:	f000 fac7 	bl	800a384 <_realloc_r>
 8009df6:	4606      	mov	r6, r0
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d1e0      	bne.n	8009dbe <__ssputs_r+0x5a>
 8009dfc:	6921      	ldr	r1, [r4, #16]
 8009dfe:	4650      	mov	r0, sl
 8009e00:	f7ff ff64 	bl	8009ccc <_free_r>
 8009e04:	230c      	movs	r3, #12
 8009e06:	f8ca 3000 	str.w	r3, [sl]
 8009e0a:	89a3      	ldrh	r3, [r4, #12]
 8009e0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e10:	81a3      	strh	r3, [r4, #12]
 8009e12:	f04f 30ff 	mov.w	r0, #4294967295
 8009e16:	e7e9      	b.n	8009dec <__ssputs_r+0x88>

08009e18 <_svfiprintf_r>:
 8009e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	4698      	mov	r8, r3
 8009e1e:	898b      	ldrh	r3, [r1, #12]
 8009e20:	061b      	lsls	r3, r3, #24
 8009e22:	b09d      	sub	sp, #116	; 0x74
 8009e24:	4607      	mov	r7, r0
 8009e26:	460d      	mov	r5, r1
 8009e28:	4614      	mov	r4, r2
 8009e2a:	d50e      	bpl.n	8009e4a <_svfiprintf_r+0x32>
 8009e2c:	690b      	ldr	r3, [r1, #16]
 8009e2e:	b963      	cbnz	r3, 8009e4a <_svfiprintf_r+0x32>
 8009e30:	2140      	movs	r1, #64	; 0x40
 8009e32:	f7ff fe47 	bl	8009ac4 <_malloc_r>
 8009e36:	6028      	str	r0, [r5, #0]
 8009e38:	6128      	str	r0, [r5, #16]
 8009e3a:	b920      	cbnz	r0, 8009e46 <_svfiprintf_r+0x2e>
 8009e3c:	230c      	movs	r3, #12
 8009e3e:	603b      	str	r3, [r7, #0]
 8009e40:	f04f 30ff 	mov.w	r0, #4294967295
 8009e44:	e0d0      	b.n	8009fe8 <_svfiprintf_r+0x1d0>
 8009e46:	2340      	movs	r3, #64	; 0x40
 8009e48:	616b      	str	r3, [r5, #20]
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	9309      	str	r3, [sp, #36]	; 0x24
 8009e4e:	2320      	movs	r3, #32
 8009e50:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e54:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e58:	2330      	movs	r3, #48	; 0x30
 8009e5a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a000 <_svfiprintf_r+0x1e8>
 8009e5e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e62:	f04f 0901 	mov.w	r9, #1
 8009e66:	4623      	mov	r3, r4
 8009e68:	469a      	mov	sl, r3
 8009e6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e6e:	b10a      	cbz	r2, 8009e74 <_svfiprintf_r+0x5c>
 8009e70:	2a25      	cmp	r2, #37	; 0x25
 8009e72:	d1f9      	bne.n	8009e68 <_svfiprintf_r+0x50>
 8009e74:	ebba 0b04 	subs.w	fp, sl, r4
 8009e78:	d00b      	beq.n	8009e92 <_svfiprintf_r+0x7a>
 8009e7a:	465b      	mov	r3, fp
 8009e7c:	4622      	mov	r2, r4
 8009e7e:	4629      	mov	r1, r5
 8009e80:	4638      	mov	r0, r7
 8009e82:	f7ff ff6f 	bl	8009d64 <__ssputs_r>
 8009e86:	3001      	adds	r0, #1
 8009e88:	f000 80a9 	beq.w	8009fde <_svfiprintf_r+0x1c6>
 8009e8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e8e:	445a      	add	r2, fp
 8009e90:	9209      	str	r2, [sp, #36]	; 0x24
 8009e92:	f89a 3000 	ldrb.w	r3, [sl]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	f000 80a1 	beq.w	8009fde <_svfiprintf_r+0x1c6>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8009ea2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ea6:	f10a 0a01 	add.w	sl, sl, #1
 8009eaa:	9304      	str	r3, [sp, #16]
 8009eac:	9307      	str	r3, [sp, #28]
 8009eae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009eb2:	931a      	str	r3, [sp, #104]	; 0x68
 8009eb4:	4654      	mov	r4, sl
 8009eb6:	2205      	movs	r2, #5
 8009eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ebc:	4850      	ldr	r0, [pc, #320]	; (800a000 <_svfiprintf_r+0x1e8>)
 8009ebe:	f7f6 f98f 	bl	80001e0 <memchr>
 8009ec2:	9a04      	ldr	r2, [sp, #16]
 8009ec4:	b9d8      	cbnz	r0, 8009efe <_svfiprintf_r+0xe6>
 8009ec6:	06d0      	lsls	r0, r2, #27
 8009ec8:	bf44      	itt	mi
 8009eca:	2320      	movmi	r3, #32
 8009ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ed0:	0711      	lsls	r1, r2, #28
 8009ed2:	bf44      	itt	mi
 8009ed4:	232b      	movmi	r3, #43	; 0x2b
 8009ed6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009eda:	f89a 3000 	ldrb.w	r3, [sl]
 8009ede:	2b2a      	cmp	r3, #42	; 0x2a
 8009ee0:	d015      	beq.n	8009f0e <_svfiprintf_r+0xf6>
 8009ee2:	9a07      	ldr	r2, [sp, #28]
 8009ee4:	4654      	mov	r4, sl
 8009ee6:	2000      	movs	r0, #0
 8009ee8:	f04f 0c0a 	mov.w	ip, #10
 8009eec:	4621      	mov	r1, r4
 8009eee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ef2:	3b30      	subs	r3, #48	; 0x30
 8009ef4:	2b09      	cmp	r3, #9
 8009ef6:	d94d      	bls.n	8009f94 <_svfiprintf_r+0x17c>
 8009ef8:	b1b0      	cbz	r0, 8009f28 <_svfiprintf_r+0x110>
 8009efa:	9207      	str	r2, [sp, #28]
 8009efc:	e014      	b.n	8009f28 <_svfiprintf_r+0x110>
 8009efe:	eba0 0308 	sub.w	r3, r0, r8
 8009f02:	fa09 f303 	lsl.w	r3, r9, r3
 8009f06:	4313      	orrs	r3, r2
 8009f08:	9304      	str	r3, [sp, #16]
 8009f0a:	46a2      	mov	sl, r4
 8009f0c:	e7d2      	b.n	8009eb4 <_svfiprintf_r+0x9c>
 8009f0e:	9b03      	ldr	r3, [sp, #12]
 8009f10:	1d19      	adds	r1, r3, #4
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	9103      	str	r1, [sp, #12]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	bfbb      	ittet	lt
 8009f1a:	425b      	neglt	r3, r3
 8009f1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009f20:	9307      	strge	r3, [sp, #28]
 8009f22:	9307      	strlt	r3, [sp, #28]
 8009f24:	bfb8      	it	lt
 8009f26:	9204      	strlt	r2, [sp, #16]
 8009f28:	7823      	ldrb	r3, [r4, #0]
 8009f2a:	2b2e      	cmp	r3, #46	; 0x2e
 8009f2c:	d10c      	bne.n	8009f48 <_svfiprintf_r+0x130>
 8009f2e:	7863      	ldrb	r3, [r4, #1]
 8009f30:	2b2a      	cmp	r3, #42	; 0x2a
 8009f32:	d134      	bne.n	8009f9e <_svfiprintf_r+0x186>
 8009f34:	9b03      	ldr	r3, [sp, #12]
 8009f36:	1d1a      	adds	r2, r3, #4
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	9203      	str	r2, [sp, #12]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	bfb8      	it	lt
 8009f40:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f44:	3402      	adds	r4, #2
 8009f46:	9305      	str	r3, [sp, #20]
 8009f48:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a010 <_svfiprintf_r+0x1f8>
 8009f4c:	7821      	ldrb	r1, [r4, #0]
 8009f4e:	2203      	movs	r2, #3
 8009f50:	4650      	mov	r0, sl
 8009f52:	f7f6 f945 	bl	80001e0 <memchr>
 8009f56:	b138      	cbz	r0, 8009f68 <_svfiprintf_r+0x150>
 8009f58:	9b04      	ldr	r3, [sp, #16]
 8009f5a:	eba0 000a 	sub.w	r0, r0, sl
 8009f5e:	2240      	movs	r2, #64	; 0x40
 8009f60:	4082      	lsls	r2, r0
 8009f62:	4313      	orrs	r3, r2
 8009f64:	3401      	adds	r4, #1
 8009f66:	9304      	str	r3, [sp, #16]
 8009f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f6c:	4825      	ldr	r0, [pc, #148]	; (800a004 <_svfiprintf_r+0x1ec>)
 8009f6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f72:	2206      	movs	r2, #6
 8009f74:	f7f6 f934 	bl	80001e0 <memchr>
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	d038      	beq.n	8009fee <_svfiprintf_r+0x1d6>
 8009f7c:	4b22      	ldr	r3, [pc, #136]	; (800a008 <_svfiprintf_r+0x1f0>)
 8009f7e:	bb1b      	cbnz	r3, 8009fc8 <_svfiprintf_r+0x1b0>
 8009f80:	9b03      	ldr	r3, [sp, #12]
 8009f82:	3307      	adds	r3, #7
 8009f84:	f023 0307 	bic.w	r3, r3, #7
 8009f88:	3308      	adds	r3, #8
 8009f8a:	9303      	str	r3, [sp, #12]
 8009f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f8e:	4433      	add	r3, r6
 8009f90:	9309      	str	r3, [sp, #36]	; 0x24
 8009f92:	e768      	b.n	8009e66 <_svfiprintf_r+0x4e>
 8009f94:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f98:	460c      	mov	r4, r1
 8009f9a:	2001      	movs	r0, #1
 8009f9c:	e7a6      	b.n	8009eec <_svfiprintf_r+0xd4>
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	3401      	adds	r4, #1
 8009fa2:	9305      	str	r3, [sp, #20]
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	f04f 0c0a 	mov.w	ip, #10
 8009faa:	4620      	mov	r0, r4
 8009fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009fb0:	3a30      	subs	r2, #48	; 0x30
 8009fb2:	2a09      	cmp	r2, #9
 8009fb4:	d903      	bls.n	8009fbe <_svfiprintf_r+0x1a6>
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d0c6      	beq.n	8009f48 <_svfiprintf_r+0x130>
 8009fba:	9105      	str	r1, [sp, #20]
 8009fbc:	e7c4      	b.n	8009f48 <_svfiprintf_r+0x130>
 8009fbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fc2:	4604      	mov	r4, r0
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	e7f0      	b.n	8009faa <_svfiprintf_r+0x192>
 8009fc8:	ab03      	add	r3, sp, #12
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	462a      	mov	r2, r5
 8009fce:	4b0f      	ldr	r3, [pc, #60]	; (800a00c <_svfiprintf_r+0x1f4>)
 8009fd0:	a904      	add	r1, sp, #16
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	f3af 8000 	nop.w
 8009fd8:	1c42      	adds	r2, r0, #1
 8009fda:	4606      	mov	r6, r0
 8009fdc:	d1d6      	bne.n	8009f8c <_svfiprintf_r+0x174>
 8009fde:	89ab      	ldrh	r3, [r5, #12]
 8009fe0:	065b      	lsls	r3, r3, #25
 8009fe2:	f53f af2d 	bmi.w	8009e40 <_svfiprintf_r+0x28>
 8009fe6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009fe8:	b01d      	add	sp, #116	; 0x74
 8009fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fee:	ab03      	add	r3, sp, #12
 8009ff0:	9300      	str	r3, [sp, #0]
 8009ff2:	462a      	mov	r2, r5
 8009ff4:	4b05      	ldr	r3, [pc, #20]	; (800a00c <_svfiprintf_r+0x1f4>)
 8009ff6:	a904      	add	r1, sp, #16
 8009ff8:	4638      	mov	r0, r7
 8009ffa:	f000 f879 	bl	800a0f0 <_printf_i>
 8009ffe:	e7eb      	b.n	8009fd8 <_svfiprintf_r+0x1c0>
 800a000:	0800a768 	.word	0x0800a768
 800a004:	0800a772 	.word	0x0800a772
 800a008:	00000000 	.word	0x00000000
 800a00c:	08009d65 	.word	0x08009d65
 800a010:	0800a76e 	.word	0x0800a76e

0800a014 <_printf_common>:
 800a014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a018:	4616      	mov	r6, r2
 800a01a:	4699      	mov	r9, r3
 800a01c:	688a      	ldr	r2, [r1, #8]
 800a01e:	690b      	ldr	r3, [r1, #16]
 800a020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a024:	4293      	cmp	r3, r2
 800a026:	bfb8      	it	lt
 800a028:	4613      	movlt	r3, r2
 800a02a:	6033      	str	r3, [r6, #0]
 800a02c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a030:	4607      	mov	r7, r0
 800a032:	460c      	mov	r4, r1
 800a034:	b10a      	cbz	r2, 800a03a <_printf_common+0x26>
 800a036:	3301      	adds	r3, #1
 800a038:	6033      	str	r3, [r6, #0]
 800a03a:	6823      	ldr	r3, [r4, #0]
 800a03c:	0699      	lsls	r1, r3, #26
 800a03e:	bf42      	ittt	mi
 800a040:	6833      	ldrmi	r3, [r6, #0]
 800a042:	3302      	addmi	r3, #2
 800a044:	6033      	strmi	r3, [r6, #0]
 800a046:	6825      	ldr	r5, [r4, #0]
 800a048:	f015 0506 	ands.w	r5, r5, #6
 800a04c:	d106      	bne.n	800a05c <_printf_common+0x48>
 800a04e:	f104 0a19 	add.w	sl, r4, #25
 800a052:	68e3      	ldr	r3, [r4, #12]
 800a054:	6832      	ldr	r2, [r6, #0]
 800a056:	1a9b      	subs	r3, r3, r2
 800a058:	42ab      	cmp	r3, r5
 800a05a:	dc26      	bgt.n	800a0aa <_printf_common+0x96>
 800a05c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a060:	1e13      	subs	r3, r2, #0
 800a062:	6822      	ldr	r2, [r4, #0]
 800a064:	bf18      	it	ne
 800a066:	2301      	movne	r3, #1
 800a068:	0692      	lsls	r2, r2, #26
 800a06a:	d42b      	bmi.n	800a0c4 <_printf_common+0xb0>
 800a06c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a070:	4649      	mov	r1, r9
 800a072:	4638      	mov	r0, r7
 800a074:	47c0      	blx	r8
 800a076:	3001      	adds	r0, #1
 800a078:	d01e      	beq.n	800a0b8 <_printf_common+0xa4>
 800a07a:	6823      	ldr	r3, [r4, #0]
 800a07c:	6922      	ldr	r2, [r4, #16]
 800a07e:	f003 0306 	and.w	r3, r3, #6
 800a082:	2b04      	cmp	r3, #4
 800a084:	bf02      	ittt	eq
 800a086:	68e5      	ldreq	r5, [r4, #12]
 800a088:	6833      	ldreq	r3, [r6, #0]
 800a08a:	1aed      	subeq	r5, r5, r3
 800a08c:	68a3      	ldr	r3, [r4, #8]
 800a08e:	bf0c      	ite	eq
 800a090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a094:	2500      	movne	r5, #0
 800a096:	4293      	cmp	r3, r2
 800a098:	bfc4      	itt	gt
 800a09a:	1a9b      	subgt	r3, r3, r2
 800a09c:	18ed      	addgt	r5, r5, r3
 800a09e:	2600      	movs	r6, #0
 800a0a0:	341a      	adds	r4, #26
 800a0a2:	42b5      	cmp	r5, r6
 800a0a4:	d11a      	bne.n	800a0dc <_printf_common+0xc8>
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	e008      	b.n	800a0bc <_printf_common+0xa8>
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	4652      	mov	r2, sl
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	4638      	mov	r0, r7
 800a0b2:	47c0      	blx	r8
 800a0b4:	3001      	adds	r0, #1
 800a0b6:	d103      	bne.n	800a0c0 <_printf_common+0xac>
 800a0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c0:	3501      	adds	r5, #1
 800a0c2:	e7c6      	b.n	800a052 <_printf_common+0x3e>
 800a0c4:	18e1      	adds	r1, r4, r3
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	2030      	movs	r0, #48	; 0x30
 800a0ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a0ce:	4422      	add	r2, r4
 800a0d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a0d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a0d8:	3302      	adds	r3, #2
 800a0da:	e7c7      	b.n	800a06c <_printf_common+0x58>
 800a0dc:	2301      	movs	r3, #1
 800a0de:	4622      	mov	r2, r4
 800a0e0:	4649      	mov	r1, r9
 800a0e2:	4638      	mov	r0, r7
 800a0e4:	47c0      	blx	r8
 800a0e6:	3001      	adds	r0, #1
 800a0e8:	d0e6      	beq.n	800a0b8 <_printf_common+0xa4>
 800a0ea:	3601      	adds	r6, #1
 800a0ec:	e7d9      	b.n	800a0a2 <_printf_common+0x8e>
	...

0800a0f0 <_printf_i>:
 800a0f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0f4:	7e0f      	ldrb	r7, [r1, #24]
 800a0f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0f8:	2f78      	cmp	r7, #120	; 0x78
 800a0fa:	4691      	mov	r9, r2
 800a0fc:	4680      	mov	r8, r0
 800a0fe:	460c      	mov	r4, r1
 800a100:	469a      	mov	sl, r3
 800a102:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a106:	d807      	bhi.n	800a118 <_printf_i+0x28>
 800a108:	2f62      	cmp	r7, #98	; 0x62
 800a10a:	d80a      	bhi.n	800a122 <_printf_i+0x32>
 800a10c:	2f00      	cmp	r7, #0
 800a10e:	f000 80d4 	beq.w	800a2ba <_printf_i+0x1ca>
 800a112:	2f58      	cmp	r7, #88	; 0x58
 800a114:	f000 80c0 	beq.w	800a298 <_printf_i+0x1a8>
 800a118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a11c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a120:	e03a      	b.n	800a198 <_printf_i+0xa8>
 800a122:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a126:	2b15      	cmp	r3, #21
 800a128:	d8f6      	bhi.n	800a118 <_printf_i+0x28>
 800a12a:	a101      	add	r1, pc, #4	; (adr r1, 800a130 <_printf_i+0x40>)
 800a12c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a130:	0800a189 	.word	0x0800a189
 800a134:	0800a19d 	.word	0x0800a19d
 800a138:	0800a119 	.word	0x0800a119
 800a13c:	0800a119 	.word	0x0800a119
 800a140:	0800a119 	.word	0x0800a119
 800a144:	0800a119 	.word	0x0800a119
 800a148:	0800a19d 	.word	0x0800a19d
 800a14c:	0800a119 	.word	0x0800a119
 800a150:	0800a119 	.word	0x0800a119
 800a154:	0800a119 	.word	0x0800a119
 800a158:	0800a119 	.word	0x0800a119
 800a15c:	0800a2a1 	.word	0x0800a2a1
 800a160:	0800a1c9 	.word	0x0800a1c9
 800a164:	0800a25b 	.word	0x0800a25b
 800a168:	0800a119 	.word	0x0800a119
 800a16c:	0800a119 	.word	0x0800a119
 800a170:	0800a2c3 	.word	0x0800a2c3
 800a174:	0800a119 	.word	0x0800a119
 800a178:	0800a1c9 	.word	0x0800a1c9
 800a17c:	0800a119 	.word	0x0800a119
 800a180:	0800a119 	.word	0x0800a119
 800a184:	0800a263 	.word	0x0800a263
 800a188:	682b      	ldr	r3, [r5, #0]
 800a18a:	1d1a      	adds	r2, r3, #4
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	602a      	str	r2, [r5, #0]
 800a190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a194:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a198:	2301      	movs	r3, #1
 800a19a:	e09f      	b.n	800a2dc <_printf_i+0x1ec>
 800a19c:	6820      	ldr	r0, [r4, #0]
 800a19e:	682b      	ldr	r3, [r5, #0]
 800a1a0:	0607      	lsls	r7, r0, #24
 800a1a2:	f103 0104 	add.w	r1, r3, #4
 800a1a6:	6029      	str	r1, [r5, #0]
 800a1a8:	d501      	bpl.n	800a1ae <_printf_i+0xbe>
 800a1aa:	681e      	ldr	r6, [r3, #0]
 800a1ac:	e003      	b.n	800a1b6 <_printf_i+0xc6>
 800a1ae:	0646      	lsls	r6, r0, #25
 800a1b0:	d5fb      	bpl.n	800a1aa <_printf_i+0xba>
 800a1b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a1b6:	2e00      	cmp	r6, #0
 800a1b8:	da03      	bge.n	800a1c2 <_printf_i+0xd2>
 800a1ba:	232d      	movs	r3, #45	; 0x2d
 800a1bc:	4276      	negs	r6, r6
 800a1be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1c2:	485a      	ldr	r0, [pc, #360]	; (800a32c <_printf_i+0x23c>)
 800a1c4:	230a      	movs	r3, #10
 800a1c6:	e012      	b.n	800a1ee <_printf_i+0xfe>
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	6820      	ldr	r0, [r4, #0]
 800a1cc:	1d19      	adds	r1, r3, #4
 800a1ce:	6029      	str	r1, [r5, #0]
 800a1d0:	0605      	lsls	r5, r0, #24
 800a1d2:	d501      	bpl.n	800a1d8 <_printf_i+0xe8>
 800a1d4:	681e      	ldr	r6, [r3, #0]
 800a1d6:	e002      	b.n	800a1de <_printf_i+0xee>
 800a1d8:	0641      	lsls	r1, r0, #25
 800a1da:	d5fb      	bpl.n	800a1d4 <_printf_i+0xe4>
 800a1dc:	881e      	ldrh	r6, [r3, #0]
 800a1de:	4853      	ldr	r0, [pc, #332]	; (800a32c <_printf_i+0x23c>)
 800a1e0:	2f6f      	cmp	r7, #111	; 0x6f
 800a1e2:	bf0c      	ite	eq
 800a1e4:	2308      	moveq	r3, #8
 800a1e6:	230a      	movne	r3, #10
 800a1e8:	2100      	movs	r1, #0
 800a1ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1ee:	6865      	ldr	r5, [r4, #4]
 800a1f0:	60a5      	str	r5, [r4, #8]
 800a1f2:	2d00      	cmp	r5, #0
 800a1f4:	bfa2      	ittt	ge
 800a1f6:	6821      	ldrge	r1, [r4, #0]
 800a1f8:	f021 0104 	bicge.w	r1, r1, #4
 800a1fc:	6021      	strge	r1, [r4, #0]
 800a1fe:	b90e      	cbnz	r6, 800a204 <_printf_i+0x114>
 800a200:	2d00      	cmp	r5, #0
 800a202:	d04b      	beq.n	800a29c <_printf_i+0x1ac>
 800a204:	4615      	mov	r5, r2
 800a206:	fbb6 f1f3 	udiv	r1, r6, r3
 800a20a:	fb03 6711 	mls	r7, r3, r1, r6
 800a20e:	5dc7      	ldrb	r7, [r0, r7]
 800a210:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a214:	4637      	mov	r7, r6
 800a216:	42bb      	cmp	r3, r7
 800a218:	460e      	mov	r6, r1
 800a21a:	d9f4      	bls.n	800a206 <_printf_i+0x116>
 800a21c:	2b08      	cmp	r3, #8
 800a21e:	d10b      	bne.n	800a238 <_printf_i+0x148>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	07de      	lsls	r6, r3, #31
 800a224:	d508      	bpl.n	800a238 <_printf_i+0x148>
 800a226:	6923      	ldr	r3, [r4, #16]
 800a228:	6861      	ldr	r1, [r4, #4]
 800a22a:	4299      	cmp	r1, r3
 800a22c:	bfde      	ittt	le
 800a22e:	2330      	movle	r3, #48	; 0x30
 800a230:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a234:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a238:	1b52      	subs	r2, r2, r5
 800a23a:	6122      	str	r2, [r4, #16]
 800a23c:	f8cd a000 	str.w	sl, [sp]
 800a240:	464b      	mov	r3, r9
 800a242:	aa03      	add	r2, sp, #12
 800a244:	4621      	mov	r1, r4
 800a246:	4640      	mov	r0, r8
 800a248:	f7ff fee4 	bl	800a014 <_printf_common>
 800a24c:	3001      	adds	r0, #1
 800a24e:	d14a      	bne.n	800a2e6 <_printf_i+0x1f6>
 800a250:	f04f 30ff 	mov.w	r0, #4294967295
 800a254:	b004      	add	sp, #16
 800a256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a25a:	6823      	ldr	r3, [r4, #0]
 800a25c:	f043 0320 	orr.w	r3, r3, #32
 800a260:	6023      	str	r3, [r4, #0]
 800a262:	4833      	ldr	r0, [pc, #204]	; (800a330 <_printf_i+0x240>)
 800a264:	2778      	movs	r7, #120	; 0x78
 800a266:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a26a:	6823      	ldr	r3, [r4, #0]
 800a26c:	6829      	ldr	r1, [r5, #0]
 800a26e:	061f      	lsls	r7, r3, #24
 800a270:	f851 6b04 	ldr.w	r6, [r1], #4
 800a274:	d402      	bmi.n	800a27c <_printf_i+0x18c>
 800a276:	065f      	lsls	r7, r3, #25
 800a278:	bf48      	it	mi
 800a27a:	b2b6      	uxthmi	r6, r6
 800a27c:	07df      	lsls	r7, r3, #31
 800a27e:	bf48      	it	mi
 800a280:	f043 0320 	orrmi.w	r3, r3, #32
 800a284:	6029      	str	r1, [r5, #0]
 800a286:	bf48      	it	mi
 800a288:	6023      	strmi	r3, [r4, #0]
 800a28a:	b91e      	cbnz	r6, 800a294 <_printf_i+0x1a4>
 800a28c:	6823      	ldr	r3, [r4, #0]
 800a28e:	f023 0320 	bic.w	r3, r3, #32
 800a292:	6023      	str	r3, [r4, #0]
 800a294:	2310      	movs	r3, #16
 800a296:	e7a7      	b.n	800a1e8 <_printf_i+0xf8>
 800a298:	4824      	ldr	r0, [pc, #144]	; (800a32c <_printf_i+0x23c>)
 800a29a:	e7e4      	b.n	800a266 <_printf_i+0x176>
 800a29c:	4615      	mov	r5, r2
 800a29e:	e7bd      	b.n	800a21c <_printf_i+0x12c>
 800a2a0:	682b      	ldr	r3, [r5, #0]
 800a2a2:	6826      	ldr	r6, [r4, #0]
 800a2a4:	6961      	ldr	r1, [r4, #20]
 800a2a6:	1d18      	adds	r0, r3, #4
 800a2a8:	6028      	str	r0, [r5, #0]
 800a2aa:	0635      	lsls	r5, r6, #24
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	d501      	bpl.n	800a2b4 <_printf_i+0x1c4>
 800a2b0:	6019      	str	r1, [r3, #0]
 800a2b2:	e002      	b.n	800a2ba <_printf_i+0x1ca>
 800a2b4:	0670      	lsls	r0, r6, #25
 800a2b6:	d5fb      	bpl.n	800a2b0 <_printf_i+0x1c0>
 800a2b8:	8019      	strh	r1, [r3, #0]
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	6123      	str	r3, [r4, #16]
 800a2be:	4615      	mov	r5, r2
 800a2c0:	e7bc      	b.n	800a23c <_printf_i+0x14c>
 800a2c2:	682b      	ldr	r3, [r5, #0]
 800a2c4:	1d1a      	adds	r2, r3, #4
 800a2c6:	602a      	str	r2, [r5, #0]
 800a2c8:	681d      	ldr	r5, [r3, #0]
 800a2ca:	6862      	ldr	r2, [r4, #4]
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	4628      	mov	r0, r5
 800a2d0:	f7f5 ff86 	bl	80001e0 <memchr>
 800a2d4:	b108      	cbz	r0, 800a2da <_printf_i+0x1ea>
 800a2d6:	1b40      	subs	r0, r0, r5
 800a2d8:	6060      	str	r0, [r4, #4]
 800a2da:	6863      	ldr	r3, [r4, #4]
 800a2dc:	6123      	str	r3, [r4, #16]
 800a2de:	2300      	movs	r3, #0
 800a2e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2e4:	e7aa      	b.n	800a23c <_printf_i+0x14c>
 800a2e6:	6923      	ldr	r3, [r4, #16]
 800a2e8:	462a      	mov	r2, r5
 800a2ea:	4649      	mov	r1, r9
 800a2ec:	4640      	mov	r0, r8
 800a2ee:	47d0      	blx	sl
 800a2f0:	3001      	adds	r0, #1
 800a2f2:	d0ad      	beq.n	800a250 <_printf_i+0x160>
 800a2f4:	6823      	ldr	r3, [r4, #0]
 800a2f6:	079b      	lsls	r3, r3, #30
 800a2f8:	d413      	bmi.n	800a322 <_printf_i+0x232>
 800a2fa:	68e0      	ldr	r0, [r4, #12]
 800a2fc:	9b03      	ldr	r3, [sp, #12]
 800a2fe:	4298      	cmp	r0, r3
 800a300:	bfb8      	it	lt
 800a302:	4618      	movlt	r0, r3
 800a304:	e7a6      	b.n	800a254 <_printf_i+0x164>
 800a306:	2301      	movs	r3, #1
 800a308:	4632      	mov	r2, r6
 800a30a:	4649      	mov	r1, r9
 800a30c:	4640      	mov	r0, r8
 800a30e:	47d0      	blx	sl
 800a310:	3001      	adds	r0, #1
 800a312:	d09d      	beq.n	800a250 <_printf_i+0x160>
 800a314:	3501      	adds	r5, #1
 800a316:	68e3      	ldr	r3, [r4, #12]
 800a318:	9903      	ldr	r1, [sp, #12]
 800a31a:	1a5b      	subs	r3, r3, r1
 800a31c:	42ab      	cmp	r3, r5
 800a31e:	dcf2      	bgt.n	800a306 <_printf_i+0x216>
 800a320:	e7eb      	b.n	800a2fa <_printf_i+0x20a>
 800a322:	2500      	movs	r5, #0
 800a324:	f104 0619 	add.w	r6, r4, #25
 800a328:	e7f5      	b.n	800a316 <_printf_i+0x226>
 800a32a:	bf00      	nop
 800a32c:	0800a779 	.word	0x0800a779
 800a330:	0800a78a 	.word	0x0800a78a

0800a334 <memmove>:
 800a334:	4288      	cmp	r0, r1
 800a336:	b510      	push	{r4, lr}
 800a338:	eb01 0402 	add.w	r4, r1, r2
 800a33c:	d902      	bls.n	800a344 <memmove+0x10>
 800a33e:	4284      	cmp	r4, r0
 800a340:	4623      	mov	r3, r4
 800a342:	d807      	bhi.n	800a354 <memmove+0x20>
 800a344:	1e43      	subs	r3, r0, #1
 800a346:	42a1      	cmp	r1, r4
 800a348:	d008      	beq.n	800a35c <memmove+0x28>
 800a34a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a34e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a352:	e7f8      	b.n	800a346 <memmove+0x12>
 800a354:	4402      	add	r2, r0
 800a356:	4601      	mov	r1, r0
 800a358:	428a      	cmp	r2, r1
 800a35a:	d100      	bne.n	800a35e <memmove+0x2a>
 800a35c:	bd10      	pop	{r4, pc}
 800a35e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a362:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a366:	e7f7      	b.n	800a358 <memmove+0x24>

0800a368 <memcpy>:
 800a368:	440a      	add	r2, r1
 800a36a:	4291      	cmp	r1, r2
 800a36c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a370:	d100      	bne.n	800a374 <memcpy+0xc>
 800a372:	4770      	bx	lr
 800a374:	b510      	push	{r4, lr}
 800a376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a37a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a37e:	4291      	cmp	r1, r2
 800a380:	d1f9      	bne.n	800a376 <memcpy+0xe>
 800a382:	bd10      	pop	{r4, pc}

0800a384 <_realloc_r>:
 800a384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a388:	4680      	mov	r8, r0
 800a38a:	4614      	mov	r4, r2
 800a38c:	460e      	mov	r6, r1
 800a38e:	b921      	cbnz	r1, 800a39a <_realloc_r+0x16>
 800a390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a394:	4611      	mov	r1, r2
 800a396:	f7ff bb95 	b.w	8009ac4 <_malloc_r>
 800a39a:	b92a      	cbnz	r2, 800a3a8 <_realloc_r+0x24>
 800a39c:	f7ff fc96 	bl	8009ccc <_free_r>
 800a3a0:	4625      	mov	r5, r4
 800a3a2:	4628      	mov	r0, r5
 800a3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a8:	f000 f81b 	bl	800a3e2 <_malloc_usable_size_r>
 800a3ac:	4284      	cmp	r4, r0
 800a3ae:	4607      	mov	r7, r0
 800a3b0:	d802      	bhi.n	800a3b8 <_realloc_r+0x34>
 800a3b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3b6:	d812      	bhi.n	800a3de <_realloc_r+0x5a>
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	f7ff fb82 	bl	8009ac4 <_malloc_r>
 800a3c0:	4605      	mov	r5, r0
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	d0ed      	beq.n	800a3a2 <_realloc_r+0x1e>
 800a3c6:	42bc      	cmp	r4, r7
 800a3c8:	4622      	mov	r2, r4
 800a3ca:	4631      	mov	r1, r6
 800a3cc:	bf28      	it	cs
 800a3ce:	463a      	movcs	r2, r7
 800a3d0:	f7ff ffca 	bl	800a368 <memcpy>
 800a3d4:	4631      	mov	r1, r6
 800a3d6:	4640      	mov	r0, r8
 800a3d8:	f7ff fc78 	bl	8009ccc <_free_r>
 800a3dc:	e7e1      	b.n	800a3a2 <_realloc_r+0x1e>
 800a3de:	4635      	mov	r5, r6
 800a3e0:	e7df      	b.n	800a3a2 <_realloc_r+0x1e>

0800a3e2 <_malloc_usable_size_r>:
 800a3e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3e6:	1f18      	subs	r0, r3, #4
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	bfbc      	itt	lt
 800a3ec:	580b      	ldrlt	r3, [r1, r0]
 800a3ee:	18c0      	addlt	r0, r0, r3
 800a3f0:	4770      	bx	lr
	...

0800a3f4 <expf>:
 800a3f4:	b508      	push	{r3, lr}
 800a3f6:	ed2d 8b02 	vpush	{d8}
 800a3fa:	eef0 8a40 	vmov.f32	s17, s0
 800a3fe:	f000 f87f 	bl	800a500 <__ieee754_expf>
 800a402:	eeb0 8a40 	vmov.f32	s16, s0
 800a406:	eeb0 0a68 	vmov.f32	s0, s17
 800a40a:	f000 f829 	bl	800a460 <finitef>
 800a40e:	b160      	cbz	r0, 800a42a <expf+0x36>
 800a410:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800a450 <expf+0x5c>
 800a414:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a41c:	dd0a      	ble.n	800a434 <expf+0x40>
 800a41e:	f7ff fc29 	bl	8009c74 <__errno>
 800a422:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800a454 <expf+0x60>
 800a426:	2322      	movs	r3, #34	; 0x22
 800a428:	6003      	str	r3, [r0, #0]
 800a42a:	eeb0 0a48 	vmov.f32	s0, s16
 800a42e:	ecbd 8b02 	vpop	{d8}
 800a432:	bd08      	pop	{r3, pc}
 800a434:	eddf 7a08 	vldr	s15, [pc, #32]	; 800a458 <expf+0x64>
 800a438:	eef4 8ae7 	vcmpe.f32	s17, s15
 800a43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a440:	d5f3      	bpl.n	800a42a <expf+0x36>
 800a442:	f7ff fc17 	bl	8009c74 <__errno>
 800a446:	2322      	movs	r3, #34	; 0x22
 800a448:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800a45c <expf+0x68>
 800a44c:	6003      	str	r3, [r0, #0]
 800a44e:	e7ec      	b.n	800a42a <expf+0x36>
 800a450:	42b17217 	.word	0x42b17217
 800a454:	7f800000 	.word	0x7f800000
 800a458:	c2cff1b5 	.word	0xc2cff1b5
 800a45c:	00000000 	.word	0x00000000

0800a460 <finitef>:
 800a460:	b082      	sub	sp, #8
 800a462:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a466:	9801      	ldr	r0, [sp, #4]
 800a468:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800a46c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a470:	bfac      	ite	ge
 800a472:	2000      	movge	r0, #0
 800a474:	2001      	movlt	r0, #1
 800a476:	b002      	add	sp, #8
 800a478:	4770      	bx	lr
	...

0800a47c <ceilf>:
 800a47c:	ee10 3a10 	vmov	r3, s0
 800a480:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a484:	3a7f      	subs	r2, #127	; 0x7f
 800a486:	2a16      	cmp	r2, #22
 800a488:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a48c:	dc2a      	bgt.n	800a4e4 <ceilf+0x68>
 800a48e:	2a00      	cmp	r2, #0
 800a490:	da11      	bge.n	800a4b6 <ceilf+0x3a>
 800a492:	eddf 7a19 	vldr	s15, [pc, #100]	; 800a4f8 <ceilf+0x7c>
 800a496:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a49a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4a2:	dd05      	ble.n	800a4b0 <ceilf+0x34>
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	db23      	blt.n	800a4f0 <ceilf+0x74>
 800a4a8:	2900      	cmp	r1, #0
 800a4aa:	bf18      	it	ne
 800a4ac:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800a4b0:	ee00 3a10 	vmov	s0, r3
 800a4b4:	4770      	bx	lr
 800a4b6:	4911      	ldr	r1, [pc, #68]	; (800a4fc <ceilf+0x80>)
 800a4b8:	4111      	asrs	r1, r2
 800a4ba:	420b      	tst	r3, r1
 800a4bc:	d0fa      	beq.n	800a4b4 <ceilf+0x38>
 800a4be:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800a4f8 <ceilf+0x7c>
 800a4c2:	ee30 0a27 	vadd.f32	s0, s0, s15
 800a4c6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800a4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ce:	ddef      	ble.n	800a4b0 <ceilf+0x34>
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	bfc2      	ittt	gt
 800a4d4:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800a4d8:	fa40 f202 	asrgt.w	r2, r0, r2
 800a4dc:	189b      	addgt	r3, r3, r2
 800a4de:	ea23 0301 	bic.w	r3, r3, r1
 800a4e2:	e7e5      	b.n	800a4b0 <ceilf+0x34>
 800a4e4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a4e8:	d3e4      	bcc.n	800a4b4 <ceilf+0x38>
 800a4ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a4ee:	4770      	bx	lr
 800a4f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4f4:	e7dc      	b.n	800a4b0 <ceilf+0x34>
 800a4f6:	bf00      	nop
 800a4f8:	7149f2ca 	.word	0x7149f2ca
 800a4fc:	007fffff 	.word	0x007fffff

0800a500 <__ieee754_expf>:
 800a500:	ee10 2a10 	vmov	r2, s0
 800a504:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a508:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a50c:	d902      	bls.n	800a514 <__ieee754_expf+0x14>
 800a50e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a512:	4770      	bx	lr
 800a514:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800a518:	d106      	bne.n	800a528 <__ieee754_expf+0x28>
 800a51a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800a654 <__ieee754_expf+0x154>
 800a51e:	2900      	cmp	r1, #0
 800a520:	bf18      	it	ne
 800a522:	eeb0 0a67 	vmovne.f32	s0, s15
 800a526:	4770      	bx	lr
 800a528:	484b      	ldr	r0, [pc, #300]	; (800a658 <__ieee754_expf+0x158>)
 800a52a:	4282      	cmp	r2, r0
 800a52c:	dd02      	ble.n	800a534 <__ieee754_expf+0x34>
 800a52e:	2000      	movs	r0, #0
 800a530:	f000 b8d0 	b.w	800a6d4 <__math_oflowf>
 800a534:	2a00      	cmp	r2, #0
 800a536:	da05      	bge.n	800a544 <__ieee754_expf+0x44>
 800a538:	4a48      	ldr	r2, [pc, #288]	; (800a65c <__ieee754_expf+0x15c>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d902      	bls.n	800a544 <__ieee754_expf+0x44>
 800a53e:	2000      	movs	r0, #0
 800a540:	f000 b8c2 	b.w	800a6c8 <__math_uflowf>
 800a544:	4a46      	ldr	r2, [pc, #280]	; (800a660 <__ieee754_expf+0x160>)
 800a546:	4293      	cmp	r3, r2
 800a548:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a54c:	d952      	bls.n	800a5f4 <__ieee754_expf+0xf4>
 800a54e:	4a45      	ldr	r2, [pc, #276]	; (800a664 <__ieee754_expf+0x164>)
 800a550:	4293      	cmp	r3, r2
 800a552:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800a556:	d834      	bhi.n	800a5c2 <__ieee754_expf+0xc2>
 800a558:	4b43      	ldr	r3, [pc, #268]	; (800a668 <__ieee754_expf+0x168>)
 800a55a:	4413      	add	r3, r2
 800a55c:	ed93 7a00 	vldr	s14, [r3]
 800a560:	4b42      	ldr	r3, [pc, #264]	; (800a66c <__ieee754_expf+0x16c>)
 800a562:	4413      	add	r3, r2
 800a564:	ee30 7a47 	vsub.f32	s14, s0, s14
 800a568:	f1c1 0201 	rsb	r2, r1, #1
 800a56c:	edd3 7a00 	vldr	s15, [r3]
 800a570:	1a52      	subs	r2, r2, r1
 800a572:	ee37 0a67 	vsub.f32	s0, s14, s15
 800a576:	ee20 6a00 	vmul.f32	s12, s0, s0
 800a57a:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800a670 <__ieee754_expf+0x170>
 800a57e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a674 <__ieee754_expf+0x174>
 800a582:	eee6 6a05 	vfma.f32	s13, s12, s10
 800a586:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800a678 <__ieee754_expf+0x178>
 800a58a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a58e:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800a67c <__ieee754_expf+0x17c>
 800a592:	eee5 6a06 	vfma.f32	s13, s10, s12
 800a596:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800a680 <__ieee754_expf+0x180>
 800a59a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800a59e:	eef0 6a40 	vmov.f32	s13, s0
 800a5a2:	eee5 6a46 	vfms.f32	s13, s10, s12
 800a5a6:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800a5aa:	ee20 5a26 	vmul.f32	s10, s0, s13
 800a5ae:	bb92      	cbnz	r2, 800a616 <__ieee754_expf+0x116>
 800a5b0:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800a5b4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800a5b8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a5bc:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800a5c0:	4770      	bx	lr
 800a5c2:	4b30      	ldr	r3, [pc, #192]	; (800a684 <__ieee754_expf+0x184>)
 800a5c4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a688 <__ieee754_expf+0x188>
 800a5c8:	eddf 6a30 	vldr	s13, [pc, #192]	; 800a68c <__ieee754_expf+0x18c>
 800a5cc:	4413      	add	r3, r2
 800a5ce:	edd3 7a00 	vldr	s15, [r3]
 800a5d2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a5d6:	eeb0 7a40 	vmov.f32	s14, s0
 800a5da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5de:	ee17 2a90 	vmov	r2, s15
 800a5e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5e6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800a5ea:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a690 <__ieee754_expf+0x190>
 800a5ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a5f2:	e7be      	b.n	800a572 <__ieee754_expf+0x72>
 800a5f4:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800a5f8:	d20b      	bcs.n	800a612 <__ieee754_expf+0x112>
 800a5fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a694 <__ieee754_expf+0x194>
 800a5fe:	ee70 6a26 	vadd.f32	s13, s0, s13
 800a602:	eef4 6ae5 	vcmpe.f32	s13, s11
 800a606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a60a:	dd02      	ble.n	800a612 <__ieee754_expf+0x112>
 800a60c:	ee30 0a25 	vadd.f32	s0, s0, s11
 800a610:	4770      	bx	lr
 800a612:	2200      	movs	r2, #0
 800a614:	e7af      	b.n	800a576 <__ieee754_expf+0x76>
 800a616:	ee36 6a66 	vsub.f32	s12, s12, s13
 800a61a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800a61e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800a622:	bfb8      	it	lt
 800a624:	3264      	addlt	r2, #100	; 0x64
 800a626:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a62a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a62e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800a632:	ee17 3a90 	vmov	r3, s15
 800a636:	bfab      	itete	ge
 800a638:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800a63c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800a640:	ee00 3a10 	vmovge	s0, r3
 800a644:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800a698 <__ieee754_expf+0x198>
 800a648:	bfbc      	itt	lt
 800a64a:	ee00 3a10 	vmovlt	s0, r3
 800a64e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800a652:	4770      	bx	lr
 800a654:	00000000 	.word	0x00000000
 800a658:	42b17217 	.word	0x42b17217
 800a65c:	42cff1b5 	.word	0x42cff1b5
 800a660:	3eb17218 	.word	0x3eb17218
 800a664:	3f851591 	.word	0x3f851591
 800a668:	0800a7a4 	.word	0x0800a7a4
 800a66c:	0800a7ac 	.word	0x0800a7ac
 800a670:	3331bb4c 	.word	0x3331bb4c
 800a674:	b5ddea0e 	.word	0xb5ddea0e
 800a678:	388ab355 	.word	0x388ab355
 800a67c:	bb360b61 	.word	0xbb360b61
 800a680:	3e2aaaab 	.word	0x3e2aaaab
 800a684:	0800a79c 	.word	0x0800a79c
 800a688:	3fb8aa3b 	.word	0x3fb8aa3b
 800a68c:	3f317180 	.word	0x3f317180
 800a690:	3717f7d1 	.word	0x3717f7d1
 800a694:	7149f2ca 	.word	0x7149f2ca
 800a698:	0d800000 	.word	0x0d800000

0800a69c <with_errnof>:
 800a69c:	b513      	push	{r0, r1, r4, lr}
 800a69e:	4604      	mov	r4, r0
 800a6a0:	ed8d 0a01 	vstr	s0, [sp, #4]
 800a6a4:	f7ff fae6 	bl	8009c74 <__errno>
 800a6a8:	ed9d 0a01 	vldr	s0, [sp, #4]
 800a6ac:	6004      	str	r4, [r0, #0]
 800a6ae:	b002      	add	sp, #8
 800a6b0:	bd10      	pop	{r4, pc}

0800a6b2 <xflowf>:
 800a6b2:	b130      	cbz	r0, 800a6c2 <xflowf+0x10>
 800a6b4:	eef1 7a40 	vneg.f32	s15, s0
 800a6b8:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a6bc:	2022      	movs	r0, #34	; 0x22
 800a6be:	f7ff bfed 	b.w	800a69c <with_errnof>
 800a6c2:	eef0 7a40 	vmov.f32	s15, s0
 800a6c6:	e7f7      	b.n	800a6b8 <xflowf+0x6>

0800a6c8 <__math_uflowf>:
 800a6c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a6d0 <__math_uflowf+0x8>
 800a6cc:	f7ff bff1 	b.w	800a6b2 <xflowf>
 800a6d0:	10000000 	.word	0x10000000

0800a6d4 <__math_oflowf>:
 800a6d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a6dc <__math_oflowf+0x8>
 800a6d8:	f7ff bfeb 	b.w	800a6b2 <xflowf>
 800a6dc:	70000000 	.word	0x70000000

0800a6e0 <_init>:
 800a6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e2:	bf00      	nop
 800a6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6e6:	bc08      	pop	{r3}
 800a6e8:	469e      	mov	lr, r3
 800a6ea:	4770      	bx	lr

0800a6ec <_fini>:
 800a6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ee:	bf00      	nop
 800a6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6f2:	bc08      	pop	{r3}
 800a6f4:	469e      	mov	lr, r3
 800a6f6:	4770      	bx	lr
