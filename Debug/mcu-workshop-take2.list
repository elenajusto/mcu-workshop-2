
mcu-workshop-take2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005674  08005674  00015674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005768  08005768  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005768  08005768  00015768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005770  08005770  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005770  08005770  00015770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005774  08005774  00015774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  2000005c  080057d4  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  080057d4  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f993  00000000  00000000  0002011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022a2  00000000  00000000  0002fab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  00031d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b39  00000000  00000000  00032bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018dc9  00000000  00000000  000336f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000114c6  00000000  00000000  0004c4ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a1e29  00000000  00000000  0005d980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004480  00000000  00000000  000ff7ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00103c2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800565c 	.word	0x0800565c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800565c 	.word	0x0800565c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_uldivmod>:
 800096c:	b953      	cbnz	r3, 8000984 <__aeabi_uldivmod+0x18>
 800096e:	b94a      	cbnz	r2, 8000984 <__aeabi_uldivmod+0x18>
 8000970:	2900      	cmp	r1, #0
 8000972:	bf08      	it	eq
 8000974:	2800      	cmpeq	r0, #0
 8000976:	bf1c      	itt	ne
 8000978:	f04f 31ff 	movne.w	r1, #4294967295
 800097c:	f04f 30ff 	movne.w	r0, #4294967295
 8000980:	f000 b970 	b.w	8000c64 <__aeabi_idiv0>
 8000984:	f1ad 0c08 	sub.w	ip, sp, #8
 8000988:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800098c:	f000 f806 	bl	800099c <__udivmoddi4>
 8000990:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000998:	b004      	add	sp, #16
 800099a:	4770      	bx	lr

0800099c <__udivmoddi4>:
 800099c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a0:	9e08      	ldr	r6, [sp, #32]
 80009a2:	460d      	mov	r5, r1
 80009a4:	4604      	mov	r4, r0
 80009a6:	460f      	mov	r7, r1
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d14a      	bne.n	8000a42 <__udivmoddi4+0xa6>
 80009ac:	428a      	cmp	r2, r1
 80009ae:	4694      	mov	ip, r2
 80009b0:	d965      	bls.n	8000a7e <__udivmoddi4+0xe2>
 80009b2:	fab2 f382 	clz	r3, r2
 80009b6:	b143      	cbz	r3, 80009ca <__udivmoddi4+0x2e>
 80009b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80009bc:	f1c3 0220 	rsb	r2, r3, #32
 80009c0:	409f      	lsls	r7, r3
 80009c2:	fa20 f202 	lsr.w	r2, r0, r2
 80009c6:	4317      	orrs	r7, r2
 80009c8:	409c      	lsls	r4, r3
 80009ca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009ce:	fa1f f58c 	uxth.w	r5, ip
 80009d2:	fbb7 f1fe 	udiv	r1, r7, lr
 80009d6:	0c22      	lsrs	r2, r4, #16
 80009d8:	fb0e 7711 	mls	r7, lr, r1, r7
 80009dc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009e0:	fb01 f005 	mul.w	r0, r1, r5
 80009e4:	4290      	cmp	r0, r2
 80009e6:	d90a      	bls.n	80009fe <__udivmoddi4+0x62>
 80009e8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ec:	f101 37ff 	add.w	r7, r1, #4294967295
 80009f0:	f080 811c 	bcs.w	8000c2c <__udivmoddi4+0x290>
 80009f4:	4290      	cmp	r0, r2
 80009f6:	f240 8119 	bls.w	8000c2c <__udivmoddi4+0x290>
 80009fa:	3902      	subs	r1, #2
 80009fc:	4462      	add	r2, ip
 80009fe:	1a12      	subs	r2, r2, r0
 8000a00:	b2a4      	uxth	r4, r4
 8000a02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a0e:	fb00 f505 	mul.w	r5, r0, r5
 8000a12:	42a5      	cmp	r5, r4
 8000a14:	d90a      	bls.n	8000a2c <__udivmoddi4+0x90>
 8000a16:	eb1c 0404 	adds.w	r4, ip, r4
 8000a1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a1e:	f080 8107 	bcs.w	8000c30 <__udivmoddi4+0x294>
 8000a22:	42a5      	cmp	r5, r4
 8000a24:	f240 8104 	bls.w	8000c30 <__udivmoddi4+0x294>
 8000a28:	4464      	add	r4, ip
 8000a2a:	3802      	subs	r0, #2
 8000a2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a30:	1b64      	subs	r4, r4, r5
 8000a32:	2100      	movs	r1, #0
 8000a34:	b11e      	cbz	r6, 8000a3e <__udivmoddi4+0xa2>
 8000a36:	40dc      	lsrs	r4, r3
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0xbc>
 8000a46:	2e00      	cmp	r6, #0
 8000a48:	f000 80ed 	beq.w	8000c26 <__udivmoddi4+0x28a>
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a52:	4608      	mov	r0, r1
 8000a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a58:	fab3 f183 	clz	r1, r3
 8000a5c:	2900      	cmp	r1, #0
 8000a5e:	d149      	bne.n	8000af4 <__udivmoddi4+0x158>
 8000a60:	42ab      	cmp	r3, r5
 8000a62:	d302      	bcc.n	8000a6a <__udivmoddi4+0xce>
 8000a64:	4282      	cmp	r2, r0
 8000a66:	f200 80f8 	bhi.w	8000c5a <__udivmoddi4+0x2be>
 8000a6a:	1a84      	subs	r4, r0, r2
 8000a6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a70:	2001      	movs	r0, #1
 8000a72:	4617      	mov	r7, r2
 8000a74:	2e00      	cmp	r6, #0
 8000a76:	d0e2      	beq.n	8000a3e <__udivmoddi4+0xa2>
 8000a78:	e9c6 4700 	strd	r4, r7, [r6]
 8000a7c:	e7df      	b.n	8000a3e <__udivmoddi4+0xa2>
 8000a7e:	b902      	cbnz	r2, 8000a82 <__udivmoddi4+0xe6>
 8000a80:	deff      	udf	#255	; 0xff
 8000a82:	fab2 f382 	clz	r3, r2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f040 8090 	bne.w	8000bac <__udivmoddi4+0x210>
 8000a8c:	1a8a      	subs	r2, r1, r2
 8000a8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a92:	fa1f fe8c 	uxth.w	lr, ip
 8000a96:	2101      	movs	r1, #1
 8000a98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000aa0:	0c22      	lsrs	r2, r4, #16
 8000aa2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000aa6:	fb0e f005 	mul.w	r0, lr, r5
 8000aaa:	4290      	cmp	r0, r2
 8000aac:	d908      	bls.n	8000ac0 <__udivmoddi4+0x124>
 8000aae:	eb1c 0202 	adds.w	r2, ip, r2
 8000ab2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0x122>
 8000ab8:	4290      	cmp	r0, r2
 8000aba:	f200 80cb 	bhi.w	8000c54 <__udivmoddi4+0x2b8>
 8000abe:	4645      	mov	r5, r8
 8000ac0:	1a12      	subs	r2, r2, r0
 8000ac2:	b2a4      	uxth	r4, r4
 8000ac4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ac8:	fb07 2210 	mls	r2, r7, r0, r2
 8000acc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ad0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ad4:	45a6      	cmp	lr, r4
 8000ad6:	d908      	bls.n	8000aea <__udivmoddi4+0x14e>
 8000ad8:	eb1c 0404 	adds.w	r4, ip, r4
 8000adc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ae0:	d202      	bcs.n	8000ae8 <__udivmoddi4+0x14c>
 8000ae2:	45a6      	cmp	lr, r4
 8000ae4:	f200 80bb 	bhi.w	8000c5e <__udivmoddi4+0x2c2>
 8000ae8:	4610      	mov	r0, r2
 8000aea:	eba4 040e 	sub.w	r4, r4, lr
 8000aee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000af2:	e79f      	b.n	8000a34 <__udivmoddi4+0x98>
 8000af4:	f1c1 0720 	rsb	r7, r1, #32
 8000af8:	408b      	lsls	r3, r1
 8000afa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000afe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b02:	fa05 f401 	lsl.w	r4, r5, r1
 8000b06:	fa20 f307 	lsr.w	r3, r0, r7
 8000b0a:	40fd      	lsrs	r5, r7
 8000b0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b10:	4323      	orrs	r3, r4
 8000b12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b16:	fa1f fe8c 	uxth.w	lr, ip
 8000b1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b1e:	0c1c      	lsrs	r4, r3, #16
 8000b20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b24:	fb08 f50e 	mul.w	r5, r8, lr
 8000b28:	42a5      	cmp	r5, r4
 8000b2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b32:	d90b      	bls.n	8000b4c <__udivmoddi4+0x1b0>
 8000b34:	eb1c 0404 	adds.w	r4, ip, r4
 8000b38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b3c:	f080 8088 	bcs.w	8000c50 <__udivmoddi4+0x2b4>
 8000b40:	42a5      	cmp	r5, r4
 8000b42:	f240 8085 	bls.w	8000c50 <__udivmoddi4+0x2b4>
 8000b46:	f1a8 0802 	sub.w	r8, r8, #2
 8000b4a:	4464      	add	r4, ip
 8000b4c:	1b64      	subs	r4, r4, r5
 8000b4e:	b29d      	uxth	r5, r3
 8000b50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b54:	fb09 4413 	mls	r4, r9, r3, r4
 8000b58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d908      	bls.n	8000b76 <__udivmoddi4+0x1da>
 8000b64:	eb1c 0404 	adds.w	r4, ip, r4
 8000b68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b6c:	d26c      	bcs.n	8000c48 <__udivmoddi4+0x2ac>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	d96a      	bls.n	8000c48 <__udivmoddi4+0x2ac>
 8000b72:	3b02      	subs	r3, #2
 8000b74:	4464      	add	r4, ip
 8000b76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b7e:	eba4 040e 	sub.w	r4, r4, lr
 8000b82:	42ac      	cmp	r4, r5
 8000b84:	46c8      	mov	r8, r9
 8000b86:	46ae      	mov	lr, r5
 8000b88:	d356      	bcc.n	8000c38 <__udivmoddi4+0x29c>
 8000b8a:	d053      	beq.n	8000c34 <__udivmoddi4+0x298>
 8000b8c:	b156      	cbz	r6, 8000ba4 <__udivmoddi4+0x208>
 8000b8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b92:	eb64 040e 	sbc.w	r4, r4, lr
 8000b96:	fa04 f707 	lsl.w	r7, r4, r7
 8000b9a:	40ca      	lsrs	r2, r1
 8000b9c:	40cc      	lsrs	r4, r1
 8000b9e:	4317      	orrs	r7, r2
 8000ba0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bac:	f1c3 0120 	rsb	r1, r3, #32
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000bb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000bbc:	409d      	lsls	r5, r3
 8000bbe:	432a      	orrs	r2, r5
 8000bc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bcc:	fb07 1510 	mls	r5, r7, r0, r1
 8000bd0:	0c11      	lsrs	r1, r2, #16
 8000bd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000bda:	428d      	cmp	r5, r1
 8000bdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x258>
 8000be2:	eb1c 0101 	adds.w	r1, ip, r1
 8000be6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bea:	d22f      	bcs.n	8000c4c <__udivmoddi4+0x2b0>
 8000bec:	428d      	cmp	r5, r1
 8000bee:	d92d      	bls.n	8000c4c <__udivmoddi4+0x2b0>
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1b49      	subs	r1, r1, r5
 8000bf6:	b292      	uxth	r2, r2
 8000bf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000c00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c04:	fb05 f10e 	mul.w	r1, r5, lr
 8000c08:	4291      	cmp	r1, r2
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x282>
 8000c0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c14:	d216      	bcs.n	8000c44 <__udivmoddi4+0x2a8>
 8000c16:	4291      	cmp	r1, r2
 8000c18:	d914      	bls.n	8000c44 <__udivmoddi4+0x2a8>
 8000c1a:	3d02      	subs	r5, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a52      	subs	r2, r2, r1
 8000c20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c24:	e738      	b.n	8000a98 <__udivmoddi4+0xfc>
 8000c26:	4631      	mov	r1, r6
 8000c28:	4630      	mov	r0, r6
 8000c2a:	e708      	b.n	8000a3e <__udivmoddi4+0xa2>
 8000c2c:	4639      	mov	r1, r7
 8000c2e:	e6e6      	b.n	80009fe <__udivmoddi4+0x62>
 8000c30:	4610      	mov	r0, r2
 8000c32:	e6fb      	b.n	8000a2c <__udivmoddi4+0x90>
 8000c34:	4548      	cmp	r0, r9
 8000c36:	d2a9      	bcs.n	8000b8c <__udivmoddi4+0x1f0>
 8000c38:	ebb9 0802 	subs.w	r8, r9, r2
 8000c3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c40:	3b01      	subs	r3, #1
 8000c42:	e7a3      	b.n	8000b8c <__udivmoddi4+0x1f0>
 8000c44:	4645      	mov	r5, r8
 8000c46:	e7ea      	b.n	8000c1e <__udivmoddi4+0x282>
 8000c48:	462b      	mov	r3, r5
 8000c4a:	e794      	b.n	8000b76 <__udivmoddi4+0x1da>
 8000c4c:	4640      	mov	r0, r8
 8000c4e:	e7d1      	b.n	8000bf4 <__udivmoddi4+0x258>
 8000c50:	46d0      	mov	r8, sl
 8000c52:	e77b      	b.n	8000b4c <__udivmoddi4+0x1b0>
 8000c54:	3d02      	subs	r5, #2
 8000c56:	4462      	add	r2, ip
 8000c58:	e732      	b.n	8000ac0 <__udivmoddi4+0x124>
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e70a      	b.n	8000a74 <__udivmoddi4+0xd8>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	e742      	b.n	8000aea <__udivmoddi4+0x14e>

08000c64 <__aeabi_idiv0>:
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f000 fc68 	bl	8001540 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f86a 	bl	8000d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f000 f9da 	bl	800102c <MX_GPIO_Init>
  MX_CRC_Init();
 8000c78:	f000 f926 	bl	8000ec8 <MX_CRC_Init>
  MX_RTC_Init();
 8000c7c:	f000 f938 	bl	8000ef0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000c80:	f000 f9aa 	bl	8000fd8 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000c84:	f000 f95a 	bl	8000f3c <MX_TIM4_Init>
  MX_ADC1_Init();
 8000c88:	f000 f8cc 	bl	8000e24 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Debug
  sprintf(msg, "Timer Starting.\r\n");
 8000c8c:	4924      	ldr	r1, [pc, #144]	; (8000d20 <main+0xb8>)
 8000c8e:	4825      	ldr	r0, [pc, #148]	; (8000d24 <main+0xbc>)
 8000c90:	f003 ff76 	bl	8004b80 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000c94:	4823      	ldr	r0, [pc, #140]	; (8000d24 <main+0xbc>)
 8000c96:	f7ff faa3 	bl	80001e0 <strlen>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	4920      	ldr	r1, [pc, #128]	; (8000d24 <main+0xbc>)
 8000ca4:	4820      	ldr	r0, [pc, #128]	; (8000d28 <main+0xc0>)
 8000ca6:	f002 fd01 	bl	80036ac <HAL_UART_Transmit>

  // Start Timer
  // Enable the TIM4 peripheral
  //__HAL_RCC_TIM4_CLK_ENABLE();
  HAL_NVIC_SetPriority(TIM4_IRQn, 1, 1);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2101      	movs	r1, #1
 8000cae:	201e      	movs	r0, #30
 8000cb0:	f000 fff5 	bl	8001c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cb4:	201e      	movs	r0, #30
 8000cb6:	f001 f80e 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim4);
 8000cba:	481c      	ldr	r0, [pc, #112]	; (8000d2c <main+0xc4>)
 8000cbc:	f002 f8bc 	bl	8002e38 <HAL_TIM_Base_Start_IT>

  // Initialise infraredPD instance
  InfraredPD_Initialize(mcu);
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <main+0xc8>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 f8ad 	bl	8003e24 <InfraredPD_Initialize>
  IPD_Instance = InfraredPD_CreateInstance(&algo_conf);
 8000cca:	481a      	ldr	r0, [pc, #104]	; (8000d34 <main+0xcc>)
 8000ccc:	f003 f946 	bl	8003f5c <InfraredPD_CreateInstance>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <main+0xd0>)
 8000cd4:	6013      	str	r3, [r2, #0]

  device_conf.odr = 30;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <main+0xd4>)
 8000cd8:	221e      	movs	r2, #30
 8000cda:	701a      	strb	r2, [r3, #0]
  device_conf.avg_tmos = 32;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <main+0xd4>)
 8000cde:	2220      	movs	r2, #32
 8000ce0:	805a      	strh	r2, [r3, #2]
  device_conf.avg_t = 8;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <main+0xd4>)
 8000ce4:	2208      	movs	r2, #8
 8000ce6:	711a      	strb	r2, [r3, #4]

  status = InfraredPD_Start(IPD_Instance, &device_conf, &algo_conf);
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <main+0xd0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <main+0xcc>)
 8000cee:	4913      	ldr	r1, [pc, #76]	; (8000d3c <main+0xd4>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 f94d 	bl	8003f90 <InfraredPD_Start>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <main+0xd8>)
 8000cfc:	701a      	strb	r2, [r3, #0]

  // Debug
  sprintf(msg, "Program Starting.");
 8000cfe:	4911      	ldr	r1, [pc, #68]	; (8000d44 <main+0xdc>)
 8000d00:	4808      	ldr	r0, [pc, #32]	; (8000d24 <main+0xbc>)
 8000d02:	f003 ff3d 	bl	8004b80 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000d06:	4807      	ldr	r0, [pc, #28]	; (8000d24 <main+0xbc>)
 8000d08:	f7ff fa6a 	bl	80001e0 <strlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
 8000d14:	4903      	ldr	r1, [pc, #12]	; (8000d24 <main+0xbc>)
 8000d16:	4804      	ldr	r0, [pc, #16]	; (8000d28 <main+0xc0>)
 8000d18:	f002 fcc8 	bl	80036ac <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <main+0xb4>
 8000d1e:	bf00      	nop
 8000d20:	08005674 	.word	0x08005674
 8000d24:	2000007c 	.word	0x2000007c
 8000d28:	2000014c 	.word	0x2000014c
 8000d2c:	20000104 	.word	0x20000104
 8000d30:	200001a0 	.word	0x200001a0
 8000d34:	200001a4 	.word	0x200001a4
 8000d38:	2000019c 	.word	0x2000019c
 8000d3c:	200001ac 	.word	0x200001ac
 8000d40:	200001b8 	.word	0x200001b8
 8000d44:	08005688 	.word	0x08005688

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b094      	sub	sp, #80	; 0x50
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	f107 0320 	add.w	r3, r7, #32
 8000d52:	2230      	movs	r2, #48	; 0x30
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f003 ff32 	bl	8004bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <SystemClock_Config+0xd4>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	4a29      	ldr	r2, [pc, #164]	; (8000e1c <SystemClock_Config+0xd4>)
 8000d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <SystemClock_Config+0xd4>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <SystemClock_Config+0xd8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d94:	4a22      	ldr	r2, [pc, #136]	; (8000e20 <SystemClock_Config+0xd8>)
 8000d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <SystemClock_Config+0xd8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000da8:	230a      	movs	r3, #10
 8000daa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dac:	2301      	movs	r3, #1
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db0:	2310      	movs	r3, #16
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000db4:	2301      	movs	r3, #1
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db8:	2302      	movs	r3, #2
 8000dba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dc0:	2310      	movs	r3, #16
 8000dc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dc4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dce:	2307      	movs	r3, #7
 8000dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	f107 0320 	add.w	r3, r7, #32
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 f952 	bl	8002080 <HAL_RCC_OscConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000de2:	f000 f9d7 	bl	8001194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	230f      	movs	r3, #15
 8000de8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dea:	2302      	movs	r3, #2
 8000dec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2102      	movs	r1, #2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 fbb4 	bl	8002570 <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e0e:	f000 f9c1 	bl	8001194 <Error_Handler>
  }
}
 8000e12:	bf00      	nop
 8000e14:	3750      	adds	r7, #80	; 0x50
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000

08000e24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b084      	sub	sp, #16
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e36:	4b21      	ldr	r3, [pc, #132]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e38:	4a21      	ldr	r2, [pc, #132]	; (8000ec0 <MX_ADC1_Init+0x9c>)
 8000e3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e4a:	4b1c      	ldr	r3, [pc, #112]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e50:	4b1a      	ldr	r3, [pc, #104]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e56:	4b19      	ldr	r3, [pc, #100]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e5e:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e66:	4a17      	ldr	r2, [pc, #92]	; (8000ec4 <MX_ADC1_Init+0xa0>)
 8000e68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e76:	4b11      	ldr	r3, [pc, #68]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e80:	2201      	movs	r2, #1
 8000e82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e84:	480d      	ldr	r0, [pc, #52]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000e86:	f000 fbcd 	bl	8001624 <HAL_ADC_Init>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e90:	f000 f980 	bl	8001194 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <MX_ADC1_Init+0x98>)
 8000ea6:	f000 fc01 	bl	80016ac <HAL_ADC_ConfigChannel>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000eb0:	f000 f970 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000094 	.word	0x20000094
 8000ec0:	40012000 	.word	0x40012000
 8000ec4:	0f000001 	.word	0x0f000001

08000ec8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <MX_CRC_Init+0x20>)
 8000ece:	4a07      	ldr	r2, [pc, #28]	; (8000eec <MX_CRC_Init+0x24>)
 8000ed0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ed2:	4805      	ldr	r0, [pc, #20]	; (8000ee8 <MX_CRC_Init+0x20>)
 8000ed4:	f000 ff19 	bl	8001d0a <HAL_CRC_Init>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ede:	f000 f959 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200000dc 	.word	0x200000dc
 8000eec:	40023000 	.word	0x40023000

08000ef0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_RTC_Init+0x44>)
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <MX_RTC_Init+0x48>)
 8000ef8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_RTC_Init+0x44>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_RTC_Init+0x44>)
 8000f02:	227f      	movs	r2, #127	; 0x7f
 8000f04:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_RTC_Init+0x44>)
 8000f08:	22ff      	movs	r2, #255	; 0xff
 8000f0a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <MX_RTC_Init+0x44>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f12:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <MX_RTC_Init+0x44>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <MX_RTC_Init+0x44>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_RTC_Init+0x44>)
 8000f20:	f001 fe34 	bl	8002b8c <HAL_RTC_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f2a:	f000 f933 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200000e4 	.word	0x200000e4
 8000f38:	40002800 	.word	0x40002800

08000f3c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f42:	f107 0308 	add.w	r3, r7, #8
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f50:	463b      	mov	r3, r7
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	; (8000fd0 <MX_TIM4_Init+0x94>)
 8000f5a:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <MX_TIM4_Init+0x98>)
 8000f5c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 319;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <MX_TIM4_Init+0x94>)
 8000f60:	f240 123f 	movw	r2, #319	; 0x13f
 8000f64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_TIM4_Init+0x94>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_TIM4_Init+0x94>)
 8000f6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f74:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <MX_TIM4_Init+0x94>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_TIM4_Init+0x94>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f80:	4813      	ldr	r0, [pc, #76]	; (8000fd0 <MX_TIM4_Init+0x94>)
 8000f82:	f001 ff09 	bl	8002d98 <HAL_TIM_Base_Init>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000f8c:	f000 f902 	bl	8001194 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f96:	f107 0308 	add.w	r3, r7, #8
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <MX_TIM4_Init+0x94>)
 8000f9e:	f002 f89d 	bl	80030dc <HAL_TIM_ConfigClockSource>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000fa8:	f000 f8f4 	bl	8001194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	; (8000fd0 <MX_TIM4_Init+0x94>)
 8000fba:	f002 faa5 	bl	8003508 <HAL_TIMEx_MasterConfigSynchronization>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000fc4:	f000 f8e6 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000104 	.word	0x20000104
 8000fd4:	40000800 	.word	0x40000800

08000fd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fdc:	4b11      	ldr	r3, [pc, #68]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000fde:	4a12      	ldr	r2, [pc, #72]	; (8001028 <MX_USART2_UART_Init+0x50>)
 8000fe0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000fe4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fea:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ffc:	4b09      	ldr	r3, [pc, #36]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8000ffe:	220c      	movs	r2, #12
 8001000:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001002:	4b08      	ldr	r3, [pc, #32]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <MX_USART2_UART_Init+0x4c>)
 8001010:	f002 fafc 	bl	800360c <HAL_UART_Init>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800101a:	f000 f8bb 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2000014c 	.word	0x2000014c
 8001028:	40004400 	.word	0x40004400

0800102c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	; 0x28
 8001030:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	4b26      	ldr	r3, [pc, #152]	; (80010e0 <MX_GPIO_Init+0xb4>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a25      	ldr	r2, [pc, #148]	; (80010e0 <MX_GPIO_Init+0xb4>)
 800104c:	f043 0304 	orr.w	r3, r3, #4
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b23      	ldr	r3, [pc, #140]	; (80010e0 <MX_GPIO_Init+0xb4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0304 	and.w	r3, r3, #4
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b1f      	ldr	r3, [pc, #124]	; (80010e0 <MX_GPIO_Init+0xb4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a1e      	ldr	r2, [pc, #120]	; (80010e0 <MX_GPIO_Init+0xb4>)
 8001068:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b1c      	ldr	r3, [pc, #112]	; (80010e0 <MX_GPIO_Init+0xb4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_GPIO_Init+0xb4>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a17      	ldr	r2, [pc, #92]	; (80010e0 <MX_GPIO_Init+0xb4>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_GPIO_Init+0xb4>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001096:	2300      	movs	r3, #0
 8001098:	607b      	str	r3, [r7, #4]
 800109a:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_GPIO_Init+0xb4>)
 800109c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109e:	4a10      	ldr	r2, [pc, #64]	; (80010e0 <MX_GPIO_Init+0xb4>)
 80010a0:	f043 0302 	orr.w	r3, r3, #2
 80010a4:	6313      	str	r3, [r2, #48]	; 0x30
 80010a6:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_GPIO_Init+0xb4>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	f003 0302 	and.w	r3, r3, #2
 80010ae:	607b      	str	r3, [r7, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010b2:	2200      	movs	r2, #0
 80010b4:	2120      	movs	r1, #32
 80010b6:	480b      	ldr	r0, [pc, #44]	; (80010e4 <MX_GPIO_Init+0xb8>)
 80010b8:	f000 ffc8 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010bc:	2320      	movs	r3, #32
 80010be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c0:	2301      	movs	r3, #1
 80010c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	2300      	movs	r3, #0
 80010ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	4804      	ldr	r0, [pc, #16]	; (80010e4 <MX_GPIO_Init+0xb8>)
 80010d4:	f000 fe36 	bl	8001d44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800
 80010e4:	40020000 	.word	0x40020000

080010e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b086      	sub	sp, #24
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d134      	bne.n	8001164 <HAL_TIM_PeriodElapsedCallback+0x7c>
		// InfraredPD functions
		IPD_input_t data_in;
		IPD_output_t data_out;

		// Debug
		sprintf(msg, "Running.\r\n");
 80010fa:	491d      	ldr	r1, [pc, #116]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80010fc:	481d      	ldr	r0, [pc, #116]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80010fe:	f003 fd3f 	bl	8004b80 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001102:	481c      	ldr	r0, [pc, #112]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001104:	f7ff f86c 	bl	80001e0 <strlen>
 8001108:	4603      	mov	r3, r0
 800110a:	b29a      	uxth	r2, r3
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	4918      	ldr	r1, [pc, #96]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001112:	4819      	ldr	r0, [pc, #100]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001114:	f002 faca 	bl	80036ac <HAL_UART_Transmit>

		//ReadSensor(data_in.t_amb, data_in.t_obj);

		InfraredPD_Update(&IPD_Instance, &data_in, &data_out);
 8001118:	f107 020c 	add.w	r2, r7, #12
 800111c:	f107 0314 	add.w	r3, r7, #20
 8001120:	4619      	mov	r1, r3
 8001122:	4816      	ldr	r0, [pc, #88]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001124:	f003 f928 	bl	8004378 <InfraredPD_Update>

		ObjectTempComp = data_out.t_obj_comp;
 8001128:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x98>)
 800112e:	801a      	strh	r2, [r3, #0]
		ObjectTempCompChange = data_out.t_obj_change;
 8001130:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8001136:	801a      	strh	r2, [r3, #0]
		MotionDetected = data_out.mot_flag;
 8001138:	7c3a      	ldrb	r2, [r7, #16]
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800113c:	701a      	strb	r2, [r3, #0]
		PresenceDetected = data_out.pres_flag;
 800113e:	7c7a      	ldrb	r2, [r7, #17]
 8001140:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001142:	701a      	strb	r2, [r3, #0]

		sprintf(msg, "ObjectTemp: %u\n\r", &ObjectTempComp);
 8001144:	4a0e      	ldr	r2, [pc, #56]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001146:	4912      	ldr	r1, [pc, #72]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001148:	480a      	ldr	r0, [pc, #40]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800114a:	f003 fd19 	bl	8004b80 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800114e:	4809      	ldr	r0, [pc, #36]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001150:	f7ff f846 	bl	80001e0 <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	b29a      	uxth	r2, r3
 8001158:	f04f 33ff 	mov.w	r3, #4294967295
 800115c:	4905      	ldr	r1, [pc, #20]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800115e:	4806      	ldr	r0, [pc, #24]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001160:	f002 faa4 	bl	80036ac <HAL_UART_Transmit>
	}
}
 8001164:	bf00      	nop
 8001166:	3718      	adds	r7, #24
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40000800 	.word	0x40000800
 8001170:	0800569c 	.word	0x0800569c
 8001174:	2000007c 	.word	0x2000007c
 8001178:	2000014c 	.word	0x2000014c
 800117c:	2000019c 	.word	0x2000019c
 8001180:	20000194 	.word	0x20000194
 8001184:	20000196 	.word	0x20000196
 8001188:	20000198 	.word	0x20000198
 800118c:	20000199 	.word	0x20000199
 8001190:	080056a8 	.word	0x080056a8

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119c:	e7fe      	b.n	800119c <Error_Handler+0x8>
	...

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_MspInit+0x4c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_MspInit+0x4c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011de:	2007      	movs	r0, #7
 80011e0:	f000 fd52 	bl	8001c88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e4:	bf00      	nop
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a17      	ldr	r2, [pc, #92]	; (800126c <HAL_ADC_MspInit+0x7c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d127      	bne.n	8001262 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_ADC_MspInit+0x80>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <HAL_ADC_MspInit+0x80>)
 800121c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <HAL_ADC_MspInit+0x80>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b0f      	ldr	r3, [pc, #60]	; (8001270 <HAL_ADC_MspInit+0x80>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <HAL_ADC_MspInit+0x80>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <HAL_ADC_MspInit+0x80>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800124a:	2301      	movs	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124e:	2303      	movs	r3, #3
 8001250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001256:	f107 0314 	add.w	r3, r7, #20
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <HAL_ADC_MspInit+0x84>)
 800125e:	f000 fd71 	bl	8001d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	3728      	adds	r7, #40	; 0x28
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40012000 	.word	0x40012000
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000

08001278 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <HAL_CRC_MspInit+0x3c>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d10d      	bne.n	80012a6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_CRC_MspInit+0x40>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a09      	ldr	r2, [pc, #36]	; (80012b8 <HAL_CRC_MspInit+0x40>)
 8001294:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <HAL_CRC_MspInit+0x40>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80012a6:	bf00      	nop
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023000 	.word	0x40023000
 80012b8:	40023800 	.word	0x40023800

080012bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b088      	sub	sp, #32
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0c      	ldr	r2, [pc, #48]	; (800130c <HAL_RTC_MspInit+0x50>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d111      	bne.n	8001302 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012de:	2302      	movs	r3, #2
 80012e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e6:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012e8:	f107 030c 	add.w	r3, r7, #12
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 fb5f 	bl	80029b0 <HAL_RCCEx_PeriphCLKConfig>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80012f8:	f7ff ff4c 	bl	8001194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80012fc:	4b04      	ldr	r3, [pc, #16]	; (8001310 <HAL_RTC_MspInit+0x54>)
 80012fe:	2201      	movs	r2, #1
 8001300:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001302:	bf00      	nop
 8001304:	3720      	adds	r7, #32
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40002800 	.word	0x40002800
 8001310:	42470e3c 	.word	0x42470e3c

08001314 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_TIM_Base_MspInit+0x48>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d115      	bne.n	8001352 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_TIM_Base_MspInit+0x4c>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	4a0c      	ldr	r2, [pc, #48]	; (8001360 <HAL_TIM_Base_MspInit+0x4c>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6413      	str	r3, [r2, #64]	; 0x40
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <HAL_TIM_Base_MspInit+0x4c>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	60fb      	str	r3, [r7, #12]
 8001340:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	201e      	movs	r0, #30
 8001348:	f000 fca9 	bl	8001c9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800134c:	201e      	movs	r0, #30
 800134e:	f000 fcc2 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001352:	bf00      	nop
 8001354:	3710      	adds	r7, #16
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40000800 	.word	0x40000800
 8001360:	40023800 	.word	0x40023800

08001364 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <HAL_UART_MspInit+0x84>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d12b      	bne.n	80013de <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_UART_MspInit+0x88>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a17      	ldr	r2, [pc, #92]	; (80013ec <HAL_UART_MspInit+0x88>)
 8001390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_UART_MspInit+0x88>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_UART_MspInit+0x88>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a10      	ldr	r2, [pc, #64]	; (80013ec <HAL_UART_MspInit+0x88>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_UART_MspInit+0x88>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013be:	230c      	movs	r3, #12
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ce:	2307      	movs	r3, #7
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	4805      	ldr	r0, [pc, #20]	; (80013f0 <HAL_UART_MspInit+0x8c>)
 80013da:	f000 fcb3 	bl	8001d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40004400 	.word	0x40004400
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020000 	.word	0x40020000

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler+0x4>

080013fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <HardFault_Handler+0x4>

08001400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <MemManage_Handler+0x4>

08001406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001406:	b480      	push	{r7}
 8001408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	e7fe      	b.n	8001410 <UsageFault_Handler+0x4>

08001412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001432:	bf00      	nop
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001440:	f000 f8d0 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	bd80      	pop	{r7, pc}

08001448 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800144c:	4802      	ldr	r0, [pc, #8]	; (8001458 <TIM4_IRQHandler+0x10>)
 800144e:	f001 fd55 	bl	8002efc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	20000104 	.word	0x20000104

0800145c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001464:	4a14      	ldr	r2, [pc, #80]	; (80014b8 <_sbrk+0x5c>)
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <_sbrk+0x60>)
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001470:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <_sbrk+0x64>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d102      	bne.n	800147e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <_sbrk+0x64>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <_sbrk+0x68>)
 800147c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <_sbrk+0x64>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4413      	add	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	429a      	cmp	r2, r3
 800148a:	d207      	bcs.n	800149c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800148c:	f003 fbb0 	bl	8004bf0 <__errno>
 8001490:	4603      	mov	r3, r0
 8001492:	220c      	movs	r2, #12
 8001494:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001496:	f04f 33ff 	mov.w	r3, #4294967295
 800149a:	e009      	b.n	80014b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800149c:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <_sbrk+0x64>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	4a05      	ldr	r2, [pc, #20]	; (80014c0 <_sbrk+0x64>)
 80014ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ae:	68fb      	ldr	r3, [r7, #12]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20018000 	.word	0x20018000
 80014bc:	00000400 	.word	0x00000400
 80014c0:	200001bc 	.word	0x200001bc
 80014c4:	20000310 	.word	0x20000310

080014c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <SystemInit+0x20>)
 80014ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <SystemInit+0x20>)
 80014d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001524 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014f0:	f7ff ffea 	bl	80014c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014f4:	480c      	ldr	r0, [pc, #48]	; (8001528 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014f6:	490d      	ldr	r1, [pc, #52]	; (800152c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014f8:	4a0d      	ldr	r2, [pc, #52]	; (8001530 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014fc:	e002      	b.n	8001504 <LoopCopyDataInit>

080014fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001502:	3304      	adds	r3, #4

08001504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001508:	d3f9      	bcc.n	80014fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800150c:	4c0a      	ldr	r4, [pc, #40]	; (8001538 <LoopFillZerobss+0x22>)
  movs r3, #0
 800150e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001510:	e001      	b.n	8001516 <LoopFillZerobss>

08001512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001514:	3204      	adds	r2, #4

08001516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001518:	d3fb      	bcc.n	8001512 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800151a:	f003 fb6f 	bl	8004bfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800151e:	f7ff fba3 	bl	8000c68 <main>
  bx  lr    
 8001522:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001524:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800152c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001530:	08005778 	.word	0x08005778
  ldr r2, =_sbss
 8001534:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001538:	2000030c 	.word	0x2000030c

0800153c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800153c:	e7fe      	b.n	800153c <ADC_IRQHandler>
	...

08001540 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001544:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <HAL_Init+0x40>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0d      	ldr	r2, [pc, #52]	; (8001580 <HAL_Init+0x40>)
 800154a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800154e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001550:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_Init+0x40>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_Init+0x40>)
 8001556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_Init+0x40>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_Init+0x40>)
 8001562:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001566:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 fb8d 	bl	8001c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	2000      	movs	r0, #0
 8001570:	f000 f808 	bl	8001584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff fe14 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023c00 	.word	0x40023c00

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x54>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x58>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 fba5 	bl	8001cf2 <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00e      	b.n	80015d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d80a      	bhi.n	80015ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f000 fb6d 	bl	8001c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <HAL_InitTick+0x5c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000008 	.word	0x20000008
 80015e0:	20000004 	.word	0x20000004

080015e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x20>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b06      	ldr	r3, [pc, #24]	; (8001608 <HAL_IncTick+0x24>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a04      	ldr	r2, [pc, #16]	; (8001608 <HAL_IncTick+0x24>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	20000008 	.word	0x20000008
 8001608:	200001c0 	.word	0x200001c0

0800160c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return uwTick;
 8001610:	4b03      	ldr	r3, [pc, #12]	; (8001620 <HAL_GetTick+0x14>)
 8001612:	681b      	ldr	r3, [r3, #0]
}
 8001614:	4618      	mov	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	200001c0 	.word	0x200001c0

08001624 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800162c:	2300      	movs	r3, #0
 800162e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e033      	b.n	80016a2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f7ff fdd4 	bl	80011f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2200      	movs	r2, #0
 8001652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 0310 	and.w	r3, r3, #16
 800165e:	2b00      	cmp	r3, #0
 8001660:	d118      	bne.n	8001694 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800166a:	f023 0302 	bic.w	r3, r3, #2
 800166e:	f043 0202 	orr.w	r2, r3, #2
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f93a 	bl	80018f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f023 0303 	bic.w	r3, r3, #3
 800168a:	f043 0201 	orr.w	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	641a      	str	r2, [r3, #64]	; 0x40
 8001692:	e001      	b.n	8001698 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3710      	adds	r7, #16
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
	...

080016ac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_ADC_ConfigChannel+0x1c>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e105      	b.n	80018d4 <HAL_ADC_ConfigChannel+0x228>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b09      	cmp	r3, #9
 80016d6:	d925      	bls.n	8001724 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68d9      	ldr	r1, [r3, #12]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	461a      	mov	r2, r3
 80016e6:	4613      	mov	r3, r2
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4413      	add	r3, r2
 80016ec:	3b1e      	subs	r3, #30
 80016ee:	2207      	movs	r2, #7
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43da      	mvns	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	400a      	ands	r2, r1
 80016fc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68d9      	ldr	r1, [r3, #12]
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	b29b      	uxth	r3, r3
 800170e:	4618      	mov	r0, r3
 8001710:	4603      	mov	r3, r0
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4403      	add	r3, r0
 8001716:	3b1e      	subs	r3, #30
 8001718:	409a      	lsls	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	e022      	b.n	800176a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	6919      	ldr	r1, [r3, #16]
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	4613      	mov	r3, r2
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	4413      	add	r3, r2
 8001738:	2207      	movs	r2, #7
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	400a      	ands	r2, r1
 8001746:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6919      	ldr	r1, [r3, #16]
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	689a      	ldr	r2, [r3, #8]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	4618      	mov	r0, r3
 800175a:	4603      	mov	r3, r0
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4403      	add	r3, r0
 8001760:	409a      	lsls	r2, r3
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b06      	cmp	r3, #6
 8001770:	d824      	bhi.n	80017bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	4613      	mov	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	3b05      	subs	r3, #5
 8001784:	221f      	movs	r2, #31
 8001786:	fa02 f303 	lsl.w	r3, r2, r3
 800178a:	43da      	mvns	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	400a      	ands	r2, r1
 8001792:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	4618      	mov	r0, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	4613      	mov	r3, r2
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	4413      	add	r3, r2
 80017ac:	3b05      	subs	r3, #5
 80017ae:	fa00 f203 	lsl.w	r2, r0, r3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ba:	e04c      	b.n	8001856 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b0c      	cmp	r3, #12
 80017c2:	d824      	bhi.n	800180e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	3b23      	subs	r3, #35	; 0x23
 80017d6:	221f      	movs	r2, #31
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43da      	mvns	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	400a      	ands	r2, r1
 80017e4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b29b      	uxth	r3, r3
 80017f2:	4618      	mov	r0, r3
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	3b23      	subs	r3, #35	; 0x23
 8001800:	fa00 f203 	lsl.w	r2, r0, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	430a      	orrs	r2, r1
 800180a:	631a      	str	r2, [r3, #48]	; 0x30
 800180c:	e023      	b.n	8001856 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	3b41      	subs	r3, #65	; 0x41
 8001820:	221f      	movs	r2, #31
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	43da      	mvns	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	400a      	ands	r2, r1
 800182e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	b29b      	uxth	r3, r3
 800183c:	4618      	mov	r0, r3
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685a      	ldr	r2, [r3, #4]
 8001842:	4613      	mov	r3, r2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	4413      	add	r3, r2
 8001848:	3b41      	subs	r3, #65	; 0x41
 800184a:	fa00 f203 	lsl.w	r2, r0, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_ADC_ConfigChannel+0x234>)
 8001858:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <HAL_ADC_ConfigChannel+0x238>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d109      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x1cc>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2b12      	cmp	r3, #18
 800186a:	d105      	bne.n	8001878 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a19      	ldr	r2, [pc, #100]	; (80018e4 <HAL_ADC_ConfigChannel+0x238>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d123      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x21e>
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2b10      	cmp	r3, #16
 8001888:	d003      	beq.n	8001892 <HAL_ADC_ConfigChannel+0x1e6>
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2b11      	cmp	r3, #17
 8001890:	d11b      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b10      	cmp	r3, #16
 80018a4:	d111      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018a6:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_ADC_ConfigChannel+0x23c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a10      	ldr	r2, [pc, #64]	; (80018ec <HAL_ADC_ConfigChannel+0x240>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	0c9a      	lsrs	r2, r3, #18
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80018bc:	e002      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	3b01      	subs	r3, #1
 80018c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1f9      	bne.n	80018be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40012300 	.word	0x40012300
 80018e4:	40012000 	.word	0x40012000
 80018e8:	20000000 	.word	0x20000000
 80018ec:	431bde83 	.word	0x431bde83

080018f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018f8:	4b79      	ldr	r3, [pc, #484]	; (8001ae0 <ADC_Init+0x1f0>)
 80018fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	431a      	orrs	r2, r3
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001924:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	691b      	ldr	r3, [r3, #16]
 8001930:	021a      	lsls	r2, r3, #8
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	685a      	ldr	r2, [r3, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001948:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	6859      	ldr	r1, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800196a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	6899      	ldr	r1, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68da      	ldr	r2, [r3, #12]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	430a      	orrs	r2, r1
 800197c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001982:	4a58      	ldr	r2, [pc, #352]	; (8001ae4 <ADC_Init+0x1f4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d022      	beq.n	80019ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001996:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	6899      	ldr	r1, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6899      	ldr	r1, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	e00f      	b.n	80019ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	689a      	ldr	r2, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f022 0202 	bic.w	r2, r2, #2
 80019fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6899      	ldr	r1, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	7e1b      	ldrb	r3, [r3, #24]
 8001a08:	005a      	lsls	r2, r3, #1
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d01b      	beq.n	8001a54 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a2a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	685a      	ldr	r2, [r3, #4]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a3a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6859      	ldr	r1, [r3, #4]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a46:	3b01      	subs	r3, #1
 8001a48:	035a      	lsls	r2, r3, #13
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	e007      	b.n	8001a64 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a62:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69db      	ldr	r3, [r3, #28]
 8001a7e:	3b01      	subs	r3, #1
 8001a80:	051a      	lsls	r2, r3, #20
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	430a      	orrs	r2, r1
 8001a88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689a      	ldr	r2, [r3, #8]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	6899      	ldr	r1, [r3, #8]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001aa6:	025a      	lsls	r2, r3, #9
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	430a      	orrs	r2, r1
 8001aae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	689a      	ldr	r2, [r3, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001abe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6899      	ldr	r1, [r3, #8]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	029a      	lsls	r2, r3, #10
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	609a      	str	r2, [r3, #8]
}
 8001ad4:	bf00      	nop
 8001ad6:	3714      	adds	r7, #20
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	40012300 	.word	0x40012300
 8001ae4:	0f000001 	.word	0x0f000001

08001ae8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	db0b      	blt.n	8001b76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	f003 021f 	and.w	r2, r3, #31
 8001b64:	4907      	ldr	r1, [pc, #28]	; (8001b84 <__NVIC_EnableIRQ+0x38>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	095b      	lsrs	r3, r3, #5
 8001b6c:	2001      	movs	r0, #1
 8001b6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b76:	bf00      	nop
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	e000e100 	.word	0xe000e100

08001b88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	db0a      	blt.n	8001bb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	b2da      	uxtb	r2, r3
 8001ba0:	490c      	ldr	r1, [pc, #48]	; (8001bd4 <__NVIC_SetPriority+0x4c>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	0112      	lsls	r2, r2, #4
 8001ba8:	b2d2      	uxtb	r2, r2
 8001baa:	440b      	add	r3, r1
 8001bac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb0:	e00a      	b.n	8001bc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	b2da      	uxtb	r2, r3
 8001bb6:	4908      	ldr	r1, [pc, #32]	; (8001bd8 <__NVIC_SetPriority+0x50>)
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	3b04      	subs	r3, #4
 8001bc0:	0112      	lsls	r2, r2, #4
 8001bc2:	b2d2      	uxtb	r2, r2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	761a      	strb	r2, [r3, #24]
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000e100 	.word	0xe000e100
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f1c3 0307 	rsb	r3, r3, #7
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	bf28      	it	cs
 8001bfa:	2304      	movcs	r3, #4
 8001bfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3304      	adds	r3, #4
 8001c02:	2b06      	cmp	r3, #6
 8001c04:	d902      	bls.n	8001c0c <NVIC_EncodePriority+0x30>
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3b03      	subs	r3, #3
 8001c0a:	e000      	b.n	8001c0e <NVIC_EncodePriority+0x32>
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	f04f 32ff 	mov.w	r2, #4294967295
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43da      	mvns	r2, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	401a      	ands	r2, r3
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c24:	f04f 31ff 	mov.w	r1, #4294967295
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2e:	43d9      	mvns	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c34:	4313      	orrs	r3, r2
         );
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3724      	adds	r7, #36	; 0x24
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c54:	d301      	bcc.n	8001c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00f      	b.n	8001c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5a:	4a0a      	ldr	r2, [pc, #40]	; (8001c84 <SysTick_Config+0x40>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c62:	210f      	movs	r1, #15
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f7ff ff8e 	bl	8001b88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c6c:	4b05      	ldr	r3, [pc, #20]	; (8001c84 <SysTick_Config+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c72:	4b04      	ldr	r3, [pc, #16]	; (8001c84 <SysTick_Config+0x40>)
 8001c74:	2207      	movs	r2, #7
 8001c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	e000e010 	.word	0xe000e010

08001c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f7ff ff29 	bl	8001ae8 <__NVIC_SetPriorityGrouping>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
 8001caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb0:	f7ff ff3e 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 8001cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	6978      	ldr	r0, [r7, #20]
 8001cbc:	f7ff ff8e 	bl	8001bdc <NVIC_EncodePriority>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff5d 	bl	8001b88 <__NVIC_SetPriority>
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff31 	bl	8001b4c <__NVIC_EnableIRQ>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ffa2 	bl	8001c44 <SysTick_Config>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b082      	sub	sp, #8
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d101      	bne.n	8001d1c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e00e      	b.n	8001d3a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	795b      	ldrb	r3, [r3, #5]
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d105      	bne.n	8001d32 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff faa3 	bl	8001278 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	; 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
 8001d5e:	e159      	b.n	8002014 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d60:	2201      	movs	r2, #1
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	4013      	ands	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	f040 8148 	bne.w	800200e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d005      	beq.n	8001d96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d130      	bne.n	8001df8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	091b      	lsrs	r3, r3, #4
 8001de2:	f003 0201 	and.w	r2, r3, #1
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	2b03      	cmp	r3, #3
 8001e02:	d017      	beq.n	8001e34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	2203      	movs	r2, #3
 8001e10:	fa02 f303 	lsl.w	r3, r2, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d123      	bne.n	8001e88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	69b9      	ldr	r1, [r7, #24]
 8001e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80a2 	beq.w	800200e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	4b57      	ldr	r3, [pc, #348]	; (800202c <HAL_GPIO_Init+0x2e8>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	4a56      	ldr	r2, [pc, #344]	; (800202c <HAL_GPIO_Init+0x2e8>)
 8001ed4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eda:	4b54      	ldr	r3, [pc, #336]	; (800202c <HAL_GPIO_Init+0x2e8>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee2:	60fb      	str	r3, [r7, #12]
 8001ee4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ee6:	4a52      	ldr	r2, [pc, #328]	; (8002030 <HAL_GPIO_Init+0x2ec>)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	3302      	adds	r3, #2
 8001eee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	220f      	movs	r2, #15
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a49      	ldr	r2, [pc, #292]	; (8002034 <HAL_GPIO_Init+0x2f0>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d019      	beq.n	8001f46 <HAL_GPIO_Init+0x202>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a48      	ldr	r2, [pc, #288]	; (8002038 <HAL_GPIO_Init+0x2f4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d013      	beq.n	8001f42 <HAL_GPIO_Init+0x1fe>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a47      	ldr	r2, [pc, #284]	; (800203c <HAL_GPIO_Init+0x2f8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d00d      	beq.n	8001f3e <HAL_GPIO_Init+0x1fa>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a46      	ldr	r2, [pc, #280]	; (8002040 <HAL_GPIO_Init+0x2fc>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d007      	beq.n	8001f3a <HAL_GPIO_Init+0x1f6>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a45      	ldr	r2, [pc, #276]	; (8002044 <HAL_GPIO_Init+0x300>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d101      	bne.n	8001f36 <HAL_GPIO_Init+0x1f2>
 8001f32:	2304      	movs	r3, #4
 8001f34:	e008      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f36:	2307      	movs	r3, #7
 8001f38:	e006      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e004      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e002      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x204>
 8001f46:	2300      	movs	r3, #0
 8001f48:	69fa      	ldr	r2, [r7, #28]
 8001f4a:	f002 0203 	and.w	r2, r2, #3
 8001f4e:	0092      	lsls	r2, r2, #2
 8001f50:	4093      	lsls	r3, r2
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4313      	orrs	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f58:	4935      	ldr	r1, [pc, #212]	; (8002030 <HAL_GPIO_Init+0x2ec>)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	089b      	lsrs	r3, r3, #2
 8001f5e:	3302      	adds	r3, #2
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f66:	4b38      	ldr	r3, [pc, #224]	; (8002048 <HAL_GPIO_Init+0x304>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f8a:	4a2f      	ldr	r2, [pc, #188]	; (8002048 <HAL_GPIO_Init+0x304>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f90:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_GPIO_Init+0x304>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb4:	4a24      	ldr	r2, [pc, #144]	; (8002048 <HAL_GPIO_Init+0x304>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fba:	4b23      	ldr	r3, [pc, #140]	; (8002048 <HAL_GPIO_Init+0x304>)
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	43db      	mvns	r3, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d003      	beq.n	8001fde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fde:	4a1a      	ldr	r2, [pc, #104]	; (8002048 <HAL_GPIO_Init+0x304>)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <HAL_GPIO_Init+0x304>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	43db      	mvns	r3, r3
 8001fee:	69ba      	ldr	r2, [r7, #24]
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	4313      	orrs	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002008:	4a0f      	ldr	r2, [pc, #60]	; (8002048 <HAL_GPIO_Init+0x304>)
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3301      	adds	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	2b0f      	cmp	r3, #15
 8002018:	f67f aea2 	bls.w	8001d60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800201c:	bf00      	nop
 800201e:	bf00      	nop
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	40023800 	.word	0x40023800
 8002030:	40013800 	.word	0x40013800
 8002034:	40020000 	.word	0x40020000
 8002038:	40020400 	.word	0x40020400
 800203c:	40020800 	.word	0x40020800
 8002040:	40020c00 	.word	0x40020c00
 8002044:	40021000 	.word	0x40021000
 8002048:	40013c00 	.word	0x40013c00

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002068:	e003      	b.n	8002072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	041a      	lsls	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	619a      	str	r2, [r3, #24]
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d101      	bne.n	8002092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e267      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d075      	beq.n	800218a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800209e:	4b88      	ldr	r3, [pc, #544]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	f003 030c 	and.w	r3, r3, #12
 80020a6:	2b04      	cmp	r3, #4
 80020a8:	d00c      	beq.n	80020c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020aa:	4b85      	ldr	r3, [pc, #532]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80020b2:	2b08      	cmp	r3, #8
 80020b4:	d112      	bne.n	80020dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020b6:	4b82      	ldr	r3, [pc, #520]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c2:	d10b      	bne.n	80020dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c4:	4b7e      	ldr	r3, [pc, #504]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d05b      	beq.n	8002188 <HAL_RCC_OscConfig+0x108>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d157      	bne.n	8002188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e242      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e4:	d106      	bne.n	80020f4 <HAL_RCC_OscConfig+0x74>
 80020e6:	4b76      	ldr	r3, [pc, #472]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a75      	ldr	r2, [pc, #468]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 80020ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01d      	b.n	8002130 <HAL_RCC_OscConfig+0xb0>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x98>
 80020fe:	4b70      	ldr	r3, [pc, #448]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6f      	ldr	r2, [pc, #444]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b6d      	ldr	r3, [pc, #436]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a6c      	ldr	r2, [pc, #432]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0xb0>
 8002118:	4b69      	ldr	r3, [pc, #420]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a68      	ldr	r2, [pc, #416]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b66      	ldr	r3, [pc, #408]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a65      	ldr	r2, [pc, #404]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff fa68 	bl	800160c <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002140:	f7ff fa64 	bl	800160c <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e207      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b5b      	ldr	r3, [pc, #364]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0xc0>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7ff fa54 	bl	800160c <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff fa50 	bl	800160c <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1f3      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	4b51      	ldr	r3, [pc, #324]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0xe8>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d063      	beq.n	800225e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002196:	4b4a      	ldr	r3, [pc, #296]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a2:	4b47      	ldr	r3, [pc, #284]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d11c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021ae:	4b44      	ldr	r3, [pc, #272]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_RCC_OscConfig+0x152>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e1c7      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b3b      	ldr	r3, [pc, #236]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4937      	ldr	r1, [pc, #220]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	e03a      	b.n	800225e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d020      	beq.n	8002232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f0:	4b34      	ldr	r3, [pc, #208]	; (80022c4 <HAL_RCC_OscConfig+0x244>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f6:	f7ff fa09 	bl	800160c <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	e008      	b.n	8002210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021fe:	f7ff fa05 	bl	800160c <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d901      	bls.n	8002210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e1a8      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002210:	4b2b      	ldr	r3, [pc, #172]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0302 	and.w	r3, r3, #2
 8002218:	2b00      	cmp	r3, #0
 800221a:	d0f0      	beq.n	80021fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221c:	4b28      	ldr	r3, [pc, #160]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4925      	ldr	r1, [pc, #148]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]
 8002230:	e015      	b.n	800225e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <HAL_RCC_OscConfig+0x244>)
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002238:	f7ff f9e8 	bl	800160c <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002240:	f7ff f9e4 	bl	800160c <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e187      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1f0      	bne.n	8002240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0308 	and.w	r3, r3, #8
 8002266:	2b00      	cmp	r3, #0
 8002268:	d036      	beq.n	80022d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d016      	beq.n	80022a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <HAL_RCC_OscConfig+0x248>)
 8002274:	2201      	movs	r2, #1
 8002276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002278:	f7ff f9c8 	bl	800160c <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002280:	f7ff f9c4 	bl	800160c <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b02      	cmp	r3, #2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e167      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002292:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <HAL_RCC_OscConfig+0x240>)
 8002294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d0f0      	beq.n	8002280 <HAL_RCC_OscConfig+0x200>
 800229e:	e01b      	b.n	80022d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_RCC_OscConfig+0x248>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022a6:	f7ff f9b1 	bl	800160c <HAL_GetTick>
 80022aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ac:	e00e      	b.n	80022cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022ae:	f7ff f9ad 	bl	800160c <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	d907      	bls.n	80022cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022bc:	2303      	movs	r3, #3
 80022be:	e150      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
 80022c0:	40023800 	.word	0x40023800
 80022c4:	42470000 	.word	0x42470000
 80022c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022cc:	4b88      	ldr	r3, [pc, #544]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 80022ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1ea      	bne.n	80022ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0304 	and.w	r3, r3, #4
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	f000 8097 	beq.w	8002414 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ea:	4b81      	ldr	r3, [pc, #516]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d10f      	bne.n	8002316 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	4b7d      	ldr	r3, [pc, #500]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	4a7c      	ldr	r2, [pc, #496]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002304:	6413      	str	r3, [r2, #64]	; 0x40
 8002306:	4b7a      	ldr	r3, [pc, #488]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230e:	60bb      	str	r3, [r7, #8]
 8002310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002312:	2301      	movs	r3, #1
 8002314:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002316:	4b77      	ldr	r3, [pc, #476]	; (80024f4 <HAL_RCC_OscConfig+0x474>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d118      	bne.n	8002354 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002322:	4b74      	ldr	r3, [pc, #464]	; (80024f4 <HAL_RCC_OscConfig+0x474>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a73      	ldr	r2, [pc, #460]	; (80024f4 <HAL_RCC_OscConfig+0x474>)
 8002328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800232e:	f7ff f96d 	bl	800160c <HAL_GetTick>
 8002332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002334:	e008      	b.n	8002348 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002336:	f7ff f969 	bl	800160c <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d901      	bls.n	8002348 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	e10c      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002348:	4b6a      	ldr	r3, [pc, #424]	; (80024f4 <HAL_RCC_OscConfig+0x474>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d0f0      	beq.n	8002336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d106      	bne.n	800236a <HAL_RCC_OscConfig+0x2ea>
 800235c:	4b64      	ldr	r3, [pc, #400]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 800235e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002360:	4a63      	ldr	r2, [pc, #396]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002362:	f043 0301 	orr.w	r3, r3, #1
 8002366:	6713      	str	r3, [r2, #112]	; 0x70
 8002368:	e01c      	b.n	80023a4 <HAL_RCC_OscConfig+0x324>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b05      	cmp	r3, #5
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x30c>
 8002372:	4b5f      	ldr	r3, [pc, #380]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002376:	4a5e      	ldr	r2, [pc, #376]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002378:	f043 0304 	orr.w	r3, r3, #4
 800237c:	6713      	str	r3, [r2, #112]	; 0x70
 800237e:	4b5c      	ldr	r3, [pc, #368]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002382:	4a5b      	ldr	r2, [pc, #364]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6713      	str	r3, [r2, #112]	; 0x70
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0x324>
 800238c:	4b58      	ldr	r3, [pc, #352]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 800238e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002390:	4a57      	ldr	r2, [pc, #348]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002392:	f023 0301 	bic.w	r3, r3, #1
 8002396:	6713      	str	r3, [r2, #112]	; 0x70
 8002398:	4b55      	ldr	r3, [pc, #340]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 800239a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800239c:	4a54      	ldr	r2, [pc, #336]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 800239e:	f023 0304 	bic.w	r3, r3, #4
 80023a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d015      	beq.n	80023d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ac:	f7ff f92e 	bl	800160c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023b4:	f7ff f92a 	bl	800160c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e0cb      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023ca:	4b49      	ldr	r3, [pc, #292]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0ee      	beq.n	80023b4 <HAL_RCC_OscConfig+0x334>
 80023d6:	e014      	b.n	8002402 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d8:	f7ff f918 	bl	800160c <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023de:	e00a      	b.n	80023f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023e0:	f7ff f914 	bl	800160c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e0b5      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f6:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 80023f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d1ee      	bne.n	80023e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002402:	7dfb      	ldrb	r3, [r7, #23]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d105      	bne.n	8002414 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002408:	4b39      	ldr	r3, [pc, #228]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	4a38      	ldr	r2, [pc, #224]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 800240e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002412:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	2b00      	cmp	r3, #0
 800241a:	f000 80a1 	beq.w	8002560 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800241e:	4b34      	ldr	r3, [pc, #208]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b08      	cmp	r3, #8
 8002428:	d05c      	beq.n	80024e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d141      	bne.n	80024b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002432:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <HAL_RCC_OscConfig+0x478>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff f8e8 	bl	800160c <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002440:	f7ff f8e4 	bl	800160c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e087      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002452:	4b27      	ldr	r3, [pc, #156]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69da      	ldr	r2, [r3, #28]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6a1b      	ldr	r3, [r3, #32]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246c:	019b      	lsls	r3, r3, #6
 800246e:	431a      	orrs	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002474:	085b      	lsrs	r3, r3, #1
 8002476:	3b01      	subs	r3, #1
 8002478:	041b      	lsls	r3, r3, #16
 800247a:	431a      	orrs	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	061b      	lsls	r3, r3, #24
 8002482:	491b      	ldr	r1, [pc, #108]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 8002484:	4313      	orrs	r3, r2
 8002486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002488:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <HAL_RCC_OscConfig+0x478>)
 800248a:	2201      	movs	r2, #1
 800248c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248e:	f7ff f8bd 	bl	800160c <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002494:	e008      	b.n	80024a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002496:	f7ff f8b9 	bl	800160c <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e05c      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024a8:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0f0      	beq.n	8002496 <HAL_RCC_OscConfig+0x416>
 80024b4:	e054      	b.n	8002560 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b6:	4b10      	ldr	r3, [pc, #64]	; (80024f8 <HAL_RCC_OscConfig+0x478>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024bc:	f7ff f8a6 	bl	800160c <HAL_GetTick>
 80024c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024c4:	f7ff f8a2 	bl	800160c <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e045      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d6:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <HAL_RCC_OscConfig+0x470>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f0      	bne.n	80024c4 <HAL_RCC_OscConfig+0x444>
 80024e2:	e03d      	b.n	8002560 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d107      	bne.n	80024fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e038      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40007000 	.word	0x40007000
 80024f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024fc:	4b1b      	ldr	r3, [pc, #108]	; (800256c <HAL_RCC_OscConfig+0x4ec>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	699b      	ldr	r3, [r3, #24]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d028      	beq.n	800255c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002514:	429a      	cmp	r2, r3
 8002516:	d121      	bne.n	800255c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d11a      	bne.n	800255c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002526:	68fa      	ldr	r2, [r7, #12]
 8002528:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800252c:	4013      	ands	r3, r2
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002534:	4293      	cmp	r3, r2
 8002536:	d111      	bne.n	800255c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002542:	085b      	lsrs	r3, r3, #1
 8002544:	3b01      	subs	r3, #1
 8002546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002548:	429a      	cmp	r2, r3
 800254a:	d107      	bne.n	800255c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002560:	2300      	movs	r3, #0
}
 8002562:	4618      	mov	r0, r3
 8002564:	3718      	adds	r7, #24
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800

08002570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e0cc      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002584:	4b68      	ldr	r3, [pc, #416]	; (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d90c      	bls.n	80025ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002592:	4b65      	ldr	r3, [pc, #404]	; (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 8002594:	683a      	ldr	r2, [r7, #0]
 8002596:	b2d2      	uxtb	r2, r2
 8002598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b63      	ldr	r3, [pc, #396]	; (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0b8      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0302 	and.w	r3, r3, #2
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d020      	beq.n	80025fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0304 	and.w	r3, r3, #4
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025c4:	4b59      	ldr	r3, [pc, #356]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80025ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025dc:	4b53      	ldr	r3, [pc, #332]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	4a52      	ldr	r2, [pc, #328]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025e8:	4b50      	ldr	r3, [pc, #320]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	494d      	ldr	r1, [pc, #308]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d044      	beq.n	8002690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d107      	bne.n	800261e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b47      	ldr	r3, [pc, #284]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d119      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e07f      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b02      	cmp	r3, #2
 8002624:	d003      	beq.n	800262e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800262a:	2b03      	cmp	r3, #3
 800262c:	d107      	bne.n	800263e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800262e:	4b3f      	ldr	r3, [pc, #252]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e06f      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800263e:	4b3b      	ldr	r3, [pc, #236]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e067      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800264e:	4b37      	ldr	r3, [pc, #220]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f023 0203 	bic.w	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4934      	ldr	r1, [pc, #208]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 800265c:	4313      	orrs	r3, r2
 800265e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002660:	f7fe ffd4 	bl	800160c <HAL_GetTick>
 8002664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002666:	e00a      	b.n	800267e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002668:	f7fe ffd0 	bl	800160c <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	f241 3288 	movw	r2, #5000	; 0x1388
 8002676:	4293      	cmp	r3, r2
 8002678:	d901      	bls.n	800267e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e04f      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800267e:	4b2b      	ldr	r3, [pc, #172]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 020c 	and.w	r2, r3, #12
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	429a      	cmp	r2, r3
 800268e:	d1eb      	bne.n	8002668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002690:	4b25      	ldr	r3, [pc, #148]	; (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d20c      	bcs.n	80026b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800269e:	4b22      	ldr	r3, [pc, #136]	; (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_RCC_ClockConfig+0x1b8>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0307 	and.w	r3, r3, #7
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e032      	b.n	800271e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0304 	and.w	r3, r3, #4
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d008      	beq.n	80026d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c4:	4b19      	ldr	r3, [pc, #100]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4916      	ldr	r1, [pc, #88]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d009      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026e2:	4b12      	ldr	r3, [pc, #72]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	490e      	ldr	r1, [pc, #56]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026f6:	f000 f821 	bl	800273c <HAL_RCC_GetSysClockFreq>
 80026fa:	4602      	mov	r2, r0
 80026fc:	4b0b      	ldr	r3, [pc, #44]	; (800272c <HAL_RCC_ClockConfig+0x1bc>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	091b      	lsrs	r3, r3, #4
 8002702:	f003 030f 	and.w	r3, r3, #15
 8002706:	490a      	ldr	r1, [pc, #40]	; (8002730 <HAL_RCC_ClockConfig+0x1c0>)
 8002708:	5ccb      	ldrb	r3, [r1, r3]
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	4a09      	ldr	r2, [pc, #36]	; (8002734 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_RCC_ClockConfig+0x1c8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe ff34 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40023c00 	.word	0x40023c00
 800272c:	40023800 	.word	0x40023800
 8002730:	08005704 	.word	0x08005704
 8002734:	20000000 	.word	0x20000000
 8002738:	20000004 	.word	0x20000004

0800273c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800273c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002740:	b094      	sub	sp, #80	; 0x50
 8002742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	647b      	str	r3, [r7, #68]	; 0x44
 8002748:	2300      	movs	r3, #0
 800274a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800274c:	2300      	movs	r3, #0
 800274e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002750:	2300      	movs	r3, #0
 8002752:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002754:	4b79      	ldr	r3, [pc, #484]	; (800293c <HAL_RCC_GetSysClockFreq+0x200>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f003 030c 	and.w	r3, r3, #12
 800275c:	2b08      	cmp	r3, #8
 800275e:	d00d      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x40>
 8002760:	2b08      	cmp	r3, #8
 8002762:	f200 80e1 	bhi.w	8002928 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_RCC_GetSysClockFreq+0x34>
 800276a:	2b04      	cmp	r3, #4
 800276c:	d003      	beq.n	8002776 <HAL_RCC_GetSysClockFreq+0x3a>
 800276e:	e0db      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002770:	4b73      	ldr	r3, [pc, #460]	; (8002940 <HAL_RCC_GetSysClockFreq+0x204>)
 8002772:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002774:	e0db      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002776:	4b73      	ldr	r3, [pc, #460]	; (8002944 <HAL_RCC_GetSysClockFreq+0x208>)
 8002778:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800277a:	e0d8      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800277c:	4b6f      	ldr	r3, [pc, #444]	; (800293c <HAL_RCC_GetSysClockFreq+0x200>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002784:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002786:	4b6d      	ldr	r3, [pc, #436]	; (800293c <HAL_RCC_GetSysClockFreq+0x200>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d063      	beq.n	800285a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002792:	4b6a      	ldr	r3, [pc, #424]	; (800293c <HAL_RCC_GetSysClockFreq+0x200>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	099b      	lsrs	r3, r3, #6
 8002798:	2200      	movs	r2, #0
 800279a:	63bb      	str	r3, [r7, #56]	; 0x38
 800279c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800279e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a4:	633b      	str	r3, [r7, #48]	; 0x30
 80027a6:	2300      	movs	r3, #0
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
 80027aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027ae:	4622      	mov	r2, r4
 80027b0:	462b      	mov	r3, r5
 80027b2:	f04f 0000 	mov.w	r0, #0
 80027b6:	f04f 0100 	mov.w	r1, #0
 80027ba:	0159      	lsls	r1, r3, #5
 80027bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027c0:	0150      	lsls	r0, r2, #5
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4621      	mov	r1, r4
 80027c8:	1a51      	subs	r1, r2, r1
 80027ca:	6139      	str	r1, [r7, #16]
 80027cc:	4629      	mov	r1, r5
 80027ce:	eb63 0301 	sbc.w	r3, r3, r1
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027e0:	4659      	mov	r1, fp
 80027e2:	018b      	lsls	r3, r1, #6
 80027e4:	4651      	mov	r1, sl
 80027e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027ea:	4651      	mov	r1, sl
 80027ec:	018a      	lsls	r2, r1, #6
 80027ee:	4651      	mov	r1, sl
 80027f0:	ebb2 0801 	subs.w	r8, r2, r1
 80027f4:	4659      	mov	r1, fp
 80027f6:	eb63 0901 	sbc.w	r9, r3, r1
 80027fa:	f04f 0200 	mov.w	r2, #0
 80027fe:	f04f 0300 	mov.w	r3, #0
 8002802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800280a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800280e:	4690      	mov	r8, r2
 8002810:	4699      	mov	r9, r3
 8002812:	4623      	mov	r3, r4
 8002814:	eb18 0303 	adds.w	r3, r8, r3
 8002818:	60bb      	str	r3, [r7, #8]
 800281a:	462b      	mov	r3, r5
 800281c:	eb49 0303 	adc.w	r3, r9, r3
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	f04f 0300 	mov.w	r3, #0
 800282a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800282e:	4629      	mov	r1, r5
 8002830:	024b      	lsls	r3, r1, #9
 8002832:	4621      	mov	r1, r4
 8002834:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002838:	4621      	mov	r1, r4
 800283a:	024a      	lsls	r2, r1, #9
 800283c:	4610      	mov	r0, r2
 800283e:	4619      	mov	r1, r3
 8002840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002842:	2200      	movs	r2, #0
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
 8002846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800284c:	f7fe f88e 	bl	800096c <__aeabi_uldivmod>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4613      	mov	r3, r2
 8002856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002858:	e058      	b.n	800290c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800285a:	4b38      	ldr	r3, [pc, #224]	; (800293c <HAL_RCC_GetSysClockFreq+0x200>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	099b      	lsrs	r3, r3, #6
 8002860:	2200      	movs	r2, #0
 8002862:	4618      	mov	r0, r3
 8002864:	4611      	mov	r1, r2
 8002866:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800286a:	623b      	str	r3, [r7, #32]
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
 8002870:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002874:	4642      	mov	r2, r8
 8002876:	464b      	mov	r3, r9
 8002878:	f04f 0000 	mov.w	r0, #0
 800287c:	f04f 0100 	mov.w	r1, #0
 8002880:	0159      	lsls	r1, r3, #5
 8002882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002886:	0150      	lsls	r0, r2, #5
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	4641      	mov	r1, r8
 800288e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002892:	4649      	mov	r1, r9
 8002894:	eb63 0b01 	sbc.w	fp, r3, r1
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	f04f 0300 	mov.w	r3, #0
 80028a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028ac:	ebb2 040a 	subs.w	r4, r2, sl
 80028b0:	eb63 050b 	sbc.w	r5, r3, fp
 80028b4:	f04f 0200 	mov.w	r2, #0
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	00eb      	lsls	r3, r5, #3
 80028be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028c2:	00e2      	lsls	r2, r4, #3
 80028c4:	4614      	mov	r4, r2
 80028c6:	461d      	mov	r5, r3
 80028c8:	4643      	mov	r3, r8
 80028ca:	18e3      	adds	r3, r4, r3
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	464b      	mov	r3, r9
 80028d0:	eb45 0303 	adc.w	r3, r5, r3
 80028d4:	607b      	str	r3, [r7, #4]
 80028d6:	f04f 0200 	mov.w	r2, #0
 80028da:	f04f 0300 	mov.w	r3, #0
 80028de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028e2:	4629      	mov	r1, r5
 80028e4:	028b      	lsls	r3, r1, #10
 80028e6:	4621      	mov	r1, r4
 80028e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028ec:	4621      	mov	r1, r4
 80028ee:	028a      	lsls	r2, r1, #10
 80028f0:	4610      	mov	r0, r2
 80028f2:	4619      	mov	r1, r3
 80028f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80028f6:	2200      	movs	r2, #0
 80028f8:	61bb      	str	r3, [r7, #24]
 80028fa:	61fa      	str	r2, [r7, #28]
 80028fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002900:	f7fe f834 	bl	800096c <__aeabi_uldivmod>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4613      	mov	r3, r2
 800290a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800290c:	4b0b      	ldr	r3, [pc, #44]	; (800293c <HAL_RCC_GetSysClockFreq+0x200>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	0c1b      	lsrs	r3, r3, #16
 8002912:	f003 0303 	and.w	r3, r3, #3
 8002916:	3301      	adds	r3, #1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800291c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800291e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002920:	fbb2 f3f3 	udiv	r3, r2, r3
 8002924:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002926:	e002      	b.n	800292e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_RCC_GetSysClockFreq+0x204>)
 800292a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800292c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800292e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002930:	4618      	mov	r0, r3
 8002932:	3750      	adds	r7, #80	; 0x50
 8002934:	46bd      	mov	sp, r7
 8002936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	00f42400 	.word	0x00f42400
 8002944:	007a1200 	.word	0x007a1200

08002948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800294c:	4b03      	ldr	r3, [pc, #12]	; (800295c <HAL_RCC_GetHCLKFreq+0x14>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	20000000 	.word	0x20000000

08002960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002964:	f7ff fff0 	bl	8002948 <HAL_RCC_GetHCLKFreq>
 8002968:	4602      	mov	r2, r0
 800296a:	4b05      	ldr	r3, [pc, #20]	; (8002980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	0a9b      	lsrs	r3, r3, #10
 8002970:	f003 0307 	and.w	r3, r3, #7
 8002974:	4903      	ldr	r1, [pc, #12]	; (8002984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002976:	5ccb      	ldrb	r3, [r1, r3]
 8002978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	bd80      	pop	{r7, pc}
 8002980:	40023800 	.word	0x40023800
 8002984:	08005714 	.word	0x08005714

08002988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800298c:	f7ff ffdc 	bl	8002948 <HAL_RCC_GetHCLKFreq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	0b5b      	lsrs	r3, r3, #13
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	4903      	ldr	r1, [pc, #12]	; (80029ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800299e:	5ccb      	ldrb	r3, [r1, r3]
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40023800 	.word	0x40023800
 80029ac:	08005714 	.word	0x08005714

080029b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029b8:	2300      	movs	r3, #0
 80029ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d105      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d035      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80029d8:	4b67      	ldr	r3, [pc, #412]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029de:	f7fe fe15 	bl	800160c <HAL_GetTick>
 80029e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029e4:	e008      	b.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029e6:	f7fe fe11 	bl	800160c <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e0ba      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80029f8:	4b60      	ldr	r3, [pc, #384]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d1f0      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	019a      	lsls	r2, r3, #6
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	071b      	lsls	r3, r3, #28
 8002a10:	495a      	ldr	r1, [pc, #360]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a18:	4b57      	ldr	r3, [pc, #348]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a1e:	f7fe fdf5 	bl	800160c <HAL_GetTick>
 8002a22:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a24:	e008      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002a26:	f7fe fdf1 	bl	800160c <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e09a      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a38:	4b50      	ldr	r3, [pc, #320]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f000 8083 	beq.w	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	4b49      	ldr	r3, [pc, #292]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	4a48      	ldr	r2, [pc, #288]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a60:	6413      	str	r3, [r2, #64]	; 0x40
 8002a62:	4b46      	ldr	r3, [pc, #280]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a6e:	4b44      	ldr	r3, [pc, #272]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a43      	ldr	r2, [pc, #268]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a7a:	f7fe fdc7 	bl	800160c <HAL_GetTick>
 8002a7e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a82:	f7fe fdc3 	bl	800160c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e06c      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a94:	4b3a      	ldr	r3, [pc, #232]	; (8002b80 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aa0:	4b36      	ldr	r3, [pc, #216]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d02f      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d028      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002abe:	4b2f      	ldr	r3, [pc, #188]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ac8:	4b2e      	ldr	r3, [pc, #184]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ace:	4b2d      	ldr	r3, [pc, #180]	; (8002b84 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ad4:	4a29      	ldr	r2, [pc, #164]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ada:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d114      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ae6:	f7fe fd91 	bl	800160c <HAL_GetTick>
 8002aea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aec:	e00a      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aee:	f7fe fd8d 	bl	800160c <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e034      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ee      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b1c:	d10d      	bne.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002b1e:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002b2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b32:	4912      	ldr	r1, [pc, #72]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	608b      	str	r3, [r1, #8]
 8002b38:	e005      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	4a0f      	ldr	r2, [pc, #60]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b40:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b44:	6093      	str	r3, [r2, #8]
 8002b46:	4b0d      	ldr	r3, [pc, #52]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b52:	490a      	ldr	r1, [pc, #40]	; (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0308 	and.w	r3, r3, #8
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7c1a      	ldrb	r2, [r3, #16]
 8002b68:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b6a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	42470068 	.word	0x42470068
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40007000 	.word	0x40007000
 8002b84:	42470e40 	.word	0x42470e40
 8002b88:	424711e0 	.word	0x424711e0

08002b8c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e073      	b.n	8002c8a <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	7f5b      	ldrb	r3, [r3, #29]
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d105      	bne.n	8002bb8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7fe fb82 	bl	80012bc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d055      	beq.n	8002c78 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	22ca      	movs	r2, #202	; 0xca
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2253      	movs	r2, #83	; 0x53
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f87f 	bl	8002ce0 <RTC_EnterInitMode>
 8002be2:	4603      	mov	r3, r0
 8002be4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d12c      	bne.n	8002c46 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bfe:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	6899      	ldr	r1, [r3, #8]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	695b      	ldr	r3, [r3, #20]
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68d2      	ldr	r2, [r2, #12]
 8002c26:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6919      	ldr	r1, [r3, #16]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	041a      	lsls	r2, r3, #16
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 f886 	bl	8002d4e <RTC_ExitInitMode>
 8002c42:	4603      	mov	r3, r0
 8002c44:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002c46:	7bfb      	ldrb	r3, [r7, #15]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d110      	bne.n	8002c6e <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699a      	ldr	r2, [r3, #24]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	22ff      	movs	r2, #255	; 0xff
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24
 8002c76:	e001      	b.n	8002c7c <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d102      	bne.n	8002c88 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2201      	movs	r2, #1
 8002c86:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3710      	adds	r7, #16
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	; (8002cdc <HAL_RTC_WaitForSynchro+0x48>)
 8002ca6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca8:	f7fe fcb0 	bl	800160c <HAL_GetTick>
 8002cac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002cae:	e009      	b.n	8002cc4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cb0:	f7fe fcac 	bl	800160c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e007      	b.n	8002cd4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0320 	and.w	r3, r3, #32
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0ee      	beq.n	8002cb0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	00013f5f 	.word	0x00013f5f

08002ce0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002cec:	2300      	movs	r3, #0
 8002cee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d122      	bne.n	8002d44 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68da      	ldr	r2, [r3, #12]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d0c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d0e:	f7fe fc7d 	bl	800160c <HAL_GetTick>
 8002d12:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d14:	e00c      	b.n	8002d30 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002d16:	f7fe fc79 	bl	800160c <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d24:	d904      	bls.n	8002d30 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2204      	movs	r2, #4
 8002d2a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <RTC_EnterInitMode+0x64>
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d1e8      	bne.n	8002d16 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b084      	sub	sp, #16
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d56:	2300      	movs	r3, #0
 8002d58:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d68:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10a      	bne.n	8002d8e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff ff8b 	bl	8002c94 <HAL_RTC_WaitForSynchro>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2204      	movs	r2, #4
 8002d88:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d101      	bne.n	8002daa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e041      	b.n	8002e2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d106      	bne.n	8002dc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7fe faa8 	bl	8001314 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	f000 fa70 	bl	80032bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d001      	beq.n	8002e50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e044      	b.n	8002eda <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a1e      	ldr	r2, [pc, #120]	; (8002ee8 <HAL_TIM_Base_Start_IT+0xb0>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d018      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x6c>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7a:	d013      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x6c>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a1a      	ldr	r2, [pc, #104]	; (8002eec <HAL_TIM_Base_Start_IT+0xb4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d00e      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x6c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a19      	ldr	r2, [pc, #100]	; (8002ef0 <HAL_TIM_Base_Start_IT+0xb8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d009      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x6c>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a17      	ldr	r2, [pc, #92]	; (8002ef4 <HAL_TIM_Base_Start_IT+0xbc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d004      	beq.n	8002ea4 <HAL_TIM_Base_Start_IT+0x6c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a16      	ldr	r2, [pc, #88]	; (8002ef8 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d111      	bne.n	8002ec8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2b06      	cmp	r3, #6
 8002eb4:	d010      	beq.n	8002ed8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f042 0201 	orr.w	r2, r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec6:	e007      	b.n	8002ed8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f042 0201 	orr.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40010000 	.word	0x40010000
 8002eec:	40000400 	.word	0x40000400
 8002ef0:	40000800 	.word	0x40000800
 8002ef4:	40000c00 	.word	0x40000c00
 8002ef8:	40014000 	.word	0x40014000

08002efc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d020      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01b      	beq.n	8002f60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0202 	mvn.w	r2, #2
 8002f30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f999 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 f98b 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 f99c 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0304 	and.w	r3, r3, #4
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d020      	beq.n	8002fac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01b      	beq.n	8002fac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0204 	mvn.w	r2, #4
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 f973 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f965 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f976 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 0308 	and.w	r3, r3, #8
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d020      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0308 	and.w	r3, r3, #8
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d01b      	beq.n	8002ff8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0208 	mvn.w	r2, #8
 8002fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2204      	movs	r2, #4
 8002fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f94d 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e005      	b.n	8002ff2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f93f 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f950 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	f003 0310 	and.w	r3, r3, #16
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d020      	beq.n	8003044 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	d01b      	beq.n	8003044 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0210 	mvn.w	r2, #16
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2208      	movs	r2, #8
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f927 	bl	800327e <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f919 	bl	800326a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f92a 	bl	8003292 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00c      	beq.n	8003068 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0201 	mvn.w	r2, #1
 8003060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f7fe f840 	bl	80010e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00c      	beq.n	800308c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fab6 	bl	80035f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00c      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f8fb 	bl	80032a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 0320 	and.w	r3, r3, #32
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0320 	and.w	r3, r3, #32
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d007      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0220 	mvn.w	r2, #32
 80030cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fa88 	bl	80035e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_TIM_ConfigClockSource+0x1c>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e0b4      	b.n	8003262 <HAL_TIM_ConfigClockSource+0x186>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003116:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800311e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003130:	d03e      	beq.n	80031b0 <HAL_TIM_ConfigClockSource+0xd4>
 8003132:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003136:	f200 8087 	bhi.w	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 800313a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800313e:	f000 8086 	beq.w	800324e <HAL_TIM_ConfigClockSource+0x172>
 8003142:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003146:	d87f      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003148:	2b70      	cmp	r3, #112	; 0x70
 800314a:	d01a      	beq.n	8003182 <HAL_TIM_ConfigClockSource+0xa6>
 800314c:	2b70      	cmp	r3, #112	; 0x70
 800314e:	d87b      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003150:	2b60      	cmp	r3, #96	; 0x60
 8003152:	d050      	beq.n	80031f6 <HAL_TIM_ConfigClockSource+0x11a>
 8003154:	2b60      	cmp	r3, #96	; 0x60
 8003156:	d877      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003158:	2b50      	cmp	r3, #80	; 0x50
 800315a:	d03c      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0xfa>
 800315c:	2b50      	cmp	r3, #80	; 0x50
 800315e:	d873      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003160:	2b40      	cmp	r3, #64	; 0x40
 8003162:	d058      	beq.n	8003216 <HAL_TIM_ConfigClockSource+0x13a>
 8003164:	2b40      	cmp	r3, #64	; 0x40
 8003166:	d86f      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003168:	2b30      	cmp	r3, #48	; 0x30
 800316a:	d064      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15a>
 800316c:	2b30      	cmp	r3, #48	; 0x30
 800316e:	d86b      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003170:	2b20      	cmp	r3, #32
 8003172:	d060      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15a>
 8003174:	2b20      	cmp	r3, #32
 8003176:	d867      	bhi.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d05c      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15a>
 800317c:	2b10      	cmp	r3, #16
 800317e:	d05a      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x15a>
 8003180:	e062      	b.n	8003248 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003192:	f000 f999 	bl	80034c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80031a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	609a      	str	r2, [r3, #8]
      break;
 80031ae:	e04f      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031c0:	f000 f982 	bl	80034c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80031d2:	609a      	str	r2, [r3, #8]
      break;
 80031d4:	e03c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80031e2:	461a      	mov	r2, r3
 80031e4:	f000 f8f6 	bl	80033d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2150      	movs	r1, #80	; 0x50
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f94f 	bl	8003492 <TIM_ITRx_SetConfig>
      break;
 80031f4:	e02c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003202:	461a      	mov	r2, r3
 8003204:	f000 f915 	bl	8003432 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2160      	movs	r1, #96	; 0x60
 800320e:	4618      	mov	r0, r3
 8003210:	f000 f93f 	bl	8003492 <TIM_ITRx_SetConfig>
      break;
 8003214:	e01c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	461a      	mov	r2, r3
 8003224:	f000 f8d6 	bl	80033d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2140      	movs	r1, #64	; 0x40
 800322e:	4618      	mov	r0, r3
 8003230:	f000 f92f 	bl	8003492 <TIM_ITRx_SetConfig>
      break;
 8003234:	e00c      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4619      	mov	r1, r3
 8003240:	4610      	mov	r0, r2
 8003242:	f000 f926 	bl	8003492 <TIM_ITRx_SetConfig>
      break;
 8003246:	e003      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	73fb      	strb	r3, [r7, #15]
      break;
 800324c:	e000      	b.n	8003250 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800324e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr

0800327e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800327e:	b480      	push	{r7}
 8003280:	b083      	sub	sp, #12
 8003282:	af00      	add	r7, sp, #0
 8003284:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003286:	bf00      	nop
 8003288:	370c      	adds	r7, #12
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr

08003292 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003292:	b480      	push	{r7}
 8003294:	b083      	sub	sp, #12
 8003296:	af00      	add	r7, sp, #0
 8003298:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800329a:	bf00      	nop
 800329c:	370c      	adds	r7, #12
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr

080032a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a3a      	ldr	r2, [pc, #232]	; (80033b8 <TIM_Base_SetConfig+0xfc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d00f      	beq.n	80032f4 <TIM_Base_SetConfig+0x38>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032da:	d00b      	beq.n	80032f4 <TIM_Base_SetConfig+0x38>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a37      	ldr	r2, [pc, #220]	; (80033bc <TIM_Base_SetConfig+0x100>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d007      	beq.n	80032f4 <TIM_Base_SetConfig+0x38>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a36      	ldr	r2, [pc, #216]	; (80033c0 <TIM_Base_SetConfig+0x104>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d003      	beq.n	80032f4 <TIM_Base_SetConfig+0x38>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a35      	ldr	r2, [pc, #212]	; (80033c4 <TIM_Base_SetConfig+0x108>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d108      	bne.n	8003306 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4313      	orrs	r3, r2
 8003304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a2b      	ldr	r2, [pc, #172]	; (80033b8 <TIM_Base_SetConfig+0xfc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d01b      	beq.n	8003346 <TIM_Base_SetConfig+0x8a>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003314:	d017      	beq.n	8003346 <TIM_Base_SetConfig+0x8a>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a28      	ldr	r2, [pc, #160]	; (80033bc <TIM_Base_SetConfig+0x100>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d013      	beq.n	8003346 <TIM_Base_SetConfig+0x8a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a27      	ldr	r2, [pc, #156]	; (80033c0 <TIM_Base_SetConfig+0x104>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d00f      	beq.n	8003346 <TIM_Base_SetConfig+0x8a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a26      	ldr	r2, [pc, #152]	; (80033c4 <TIM_Base_SetConfig+0x108>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00b      	beq.n	8003346 <TIM_Base_SetConfig+0x8a>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a25      	ldr	r2, [pc, #148]	; (80033c8 <TIM_Base_SetConfig+0x10c>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <TIM_Base_SetConfig+0x8a>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a24      	ldr	r2, [pc, #144]	; (80033cc <TIM_Base_SetConfig+0x110>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d003      	beq.n	8003346 <TIM_Base_SetConfig+0x8a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a23      	ldr	r2, [pc, #140]	; (80033d0 <TIM_Base_SetConfig+0x114>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d108      	bne.n	8003358 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800334c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	68db      	ldr	r3, [r3, #12]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4313      	orrs	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	695b      	ldr	r3, [r3, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a0e      	ldr	r2, [pc, #56]	; (80033b8 <TIM_Base_SetConfig+0xfc>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d103      	bne.n	800338c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	691a      	ldr	r2, [r3, #16]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b01      	cmp	r3, #1
 800339c:	d105      	bne.n	80033aa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	f023 0201 	bic.w	r2, r3, #1
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	611a      	str	r2, [r3, #16]
  }
}
 80033aa:	bf00      	nop
 80033ac:	3714      	adds	r7, #20
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	40010000 	.word	0x40010000
 80033bc:	40000400 	.word	0x40000400
 80033c0:	40000800 	.word	0x40000800
 80033c4:	40000c00 	.word	0x40000c00
 80033c8:	40014000 	.word	0x40014000
 80033cc:	40014400 	.word	0x40014400
 80033d0:	40014800 	.word	0x40014800

080033d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b087      	sub	sp, #28
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	f023 0201 	bic.w	r2, r3, #1
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f023 030a 	bic.w	r3, r3, #10
 8003410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	697a      	ldr	r2, [r7, #20]
 8003424:	621a      	str	r2, [r3, #32]
}
 8003426:	bf00      	nop
 8003428:	371c      	adds	r7, #28
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003432:	b480      	push	{r7}
 8003434:	b087      	sub	sp, #28
 8003436:	af00      	add	r7, sp, #0
 8003438:	60f8      	str	r0, [r7, #12]
 800343a:	60b9      	str	r1, [r7, #8]
 800343c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f023 0210 	bic.w	r2, r3, #16
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800345c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	031b      	lsls	r3, r3, #12
 8003462:	693a      	ldr	r2, [r7, #16]
 8003464:	4313      	orrs	r3, r2
 8003466:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800346e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	4313      	orrs	r3, r2
 8003478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	621a      	str	r2, [r3, #32]
}
 8003486:	bf00      	nop
 8003488:	371c      	adds	r7, #28
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003492:	b480      	push	{r7}
 8003494:	b085      	sub	sp, #20
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	f043 0307 	orr.w	r3, r3, #7
 80034b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	609a      	str	r2, [r3, #8]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b087      	sub	sp, #28
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	60f8      	str	r0, [r7, #12]
 80034d0:	60b9      	str	r1, [r7, #8]
 80034d2:	607a      	str	r2, [r7, #4]
 80034d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	021a      	lsls	r2, r3, #8
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	609a      	str	r2, [r3, #8]
}
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003518:	2b01      	cmp	r3, #1
 800351a:	d101      	bne.n	8003520 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800351c:	2302      	movs	r3, #2
 800351e:	e050      	b.n	80035c2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003546:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4313      	orrs	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d018      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800356c:	d013      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a18      	ldr	r2, [pc, #96]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d00e      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a16      	ldr	r2, [pc, #88]	; (80035d8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d009      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a15      	ldr	r2, [pc, #84]	; (80035dc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d004      	beq.n	8003596 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d10c      	bne.n	80035b0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800359c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	40010000 	.word	0x40010000
 80035d4:	40000400 	.word	0x40000400
 80035d8:	40000800 	.word	0x40000800
 80035dc:	40000c00 	.word	0x40000c00
 80035e0:	40014000 	.word	0x40014000

080035e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e042      	b.n	80036a4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d106      	bne.n	8003638 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fd fe96 	bl	8001364 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2224      	movs	r2, #36	; 0x24
 800363c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68da      	ldr	r2, [r3, #12]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800364e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f973 	bl	800393c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003664:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695a      	ldr	r2, [r3, #20]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003674:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68da      	ldr	r2, [r3, #12]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003684:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2220      	movs	r2, #32
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3708      	adds	r7, #8
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	; 0x28
 80036b0:	af02      	add	r7, sp, #8
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	603b      	str	r3, [r7, #0]
 80036b8:	4613      	mov	r3, r2
 80036ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d175      	bne.n	80037b8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_UART_Transmit+0x2c>
 80036d2:	88fb      	ldrh	r3, [r7, #6]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e06e      	b.n	80037ba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2221      	movs	r2, #33	; 0x21
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036ea:	f7fd ff8f 	bl	800160c <HAL_GetTick>
 80036ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	88fa      	ldrh	r2, [r7, #6]
 80036f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	88fa      	ldrh	r2, [r7, #6]
 80036fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003704:	d108      	bne.n	8003718 <HAL_UART_Transmit+0x6c>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d104      	bne.n	8003718 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800370e:	2300      	movs	r3, #0
 8003710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	e003      	b.n	8003720 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800371c:	2300      	movs	r3, #0
 800371e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003720:	e02e      	b.n	8003780 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	2200      	movs	r2, #0
 800372a:	2180      	movs	r1, #128	; 0x80
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f848 	bl	80037c2 <UART_WaitOnFlagUntilTimeout>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e03a      	b.n	80037ba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d10b      	bne.n	8003762 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	881b      	ldrh	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003758:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	3302      	adds	r3, #2
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e007      	b.n	8003772 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	781a      	ldrb	r2, [r3, #0]
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	3301      	adds	r3, #1
 8003770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1cb      	bne.n	8003722 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2200      	movs	r2, #0
 8003792:	2140      	movs	r1, #64	; 0x40
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 f814 	bl	80037c2 <UART_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e006      	b.n	80037ba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2220      	movs	r2, #32
 80037b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80037b4:	2300      	movs	r3, #0
 80037b6:	e000      	b.n	80037ba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80037b8:	2302      	movs	r3, #2
  }
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3720      	adds	r7, #32
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	60f8      	str	r0, [r7, #12]
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	603b      	str	r3, [r7, #0]
 80037ce:	4613      	mov	r3, r2
 80037d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037d2:	e03b      	b.n	800384c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037d4:	6a3b      	ldr	r3, [r7, #32]
 80037d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037da:	d037      	beq.n	800384c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037dc:	f7fd ff16 	bl	800160c <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	6a3a      	ldr	r2, [r7, #32]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d302      	bcc.n	80037f2 <UART_WaitOnFlagUntilTimeout+0x30>
 80037ec:	6a3b      	ldr	r3, [r7, #32]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e03a      	b.n	800386c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d023      	beq.n	800384c <UART_WaitOnFlagUntilTimeout+0x8a>
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	2b80      	cmp	r3, #128	; 0x80
 8003808:	d020      	beq.n	800384c <UART_WaitOnFlagUntilTimeout+0x8a>
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2b40      	cmp	r3, #64	; 0x40
 800380e:	d01d      	beq.n	800384c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b08      	cmp	r3, #8
 800381c:	d116      	bne.n	800384c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800381e:	2300      	movs	r3, #0
 8003820:	617b      	str	r3, [r7, #20]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	617b      	str	r3, [r7, #20]
 8003832:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f000 f81d 	bl	8003874 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2208      	movs	r2, #8
 800383e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e00f      	b.n	800386c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	4013      	ands	r3, r2
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	429a      	cmp	r2, r3
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	461a      	mov	r2, r3
 8003864:	79fb      	ldrb	r3, [r7, #7]
 8003866:	429a      	cmp	r2, r3
 8003868:	d0b4      	beq.n	80037d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003874:	b480      	push	{r7}
 8003876:	b095      	sub	sp, #84	; 0x54
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	330c      	adds	r3, #12
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	330c      	adds	r3, #12
 800389a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800389c:	643a      	str	r2, [r7, #64]	; 0x40
 800389e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80038a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e5      	bne.n	800387c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3314      	adds	r3, #20
 80038b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	e853 3f00 	ldrex	r3, [r3]
 80038be:	61fb      	str	r3, [r7, #28]
   return(result);
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	f023 0301 	bic.w	r3, r3, #1
 80038c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	3314      	adds	r3, #20
 80038ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038d8:	e841 2300 	strex	r3, r2, [r1]
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80038de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1e5      	bne.n	80038b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d119      	bne.n	8003920 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	330c      	adds	r3, #12
 80038f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f023 0310 	bic.w	r3, r3, #16
 8003902:	647b      	str	r3, [r7, #68]	; 0x44
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	330c      	adds	r3, #12
 800390a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800390c:	61ba      	str	r2, [r7, #24]
 800390e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	6979      	ldr	r1, [r7, #20]
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	613b      	str	r3, [r7, #16]
   return(result);
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e5      	bne.n	80038ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800392e:	bf00      	nop
 8003930:	3754      	adds	r7, #84	; 0x54
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800393c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003940:	b0c0      	sub	sp, #256	; 0x100
 8003942:	af00      	add	r7, sp, #0
 8003944:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003958:	68d9      	ldr	r1, [r3, #12]
 800395a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	ea40 0301 	orr.w	r3, r0, r1
 8003964:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800396a:	689a      	ldr	r2, [r3, #8]
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	431a      	orrs	r2, r3
 8003974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	431a      	orrs	r2, r3
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003994:	f021 010c 	bic.w	r1, r1, #12
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039a2:	430b      	orrs	r3, r1
 80039a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b6:	6999      	ldr	r1, [r3, #24]
 80039b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	ea40 0301 	orr.w	r3, r0, r1
 80039c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4b8f      	ldr	r3, [pc, #572]	; (8003c08 <UART_SetConfig+0x2cc>)
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d005      	beq.n	80039dc <UART_SetConfig+0xa0>
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4b8d      	ldr	r3, [pc, #564]	; (8003c0c <UART_SetConfig+0x2d0>)
 80039d8:	429a      	cmp	r2, r3
 80039da:	d104      	bne.n	80039e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039dc:	f7fe ffd4 	bl	8002988 <HAL_RCC_GetPCLK2Freq>
 80039e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80039e4:	e003      	b.n	80039ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039e6:	f7fe ffbb 	bl	8002960 <HAL_RCC_GetPCLK1Freq>
 80039ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039f8:	f040 810c 	bne.w	8003c14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a00:	2200      	movs	r2, #0
 8003a02:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a06:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a0e:	4622      	mov	r2, r4
 8003a10:	462b      	mov	r3, r5
 8003a12:	1891      	adds	r1, r2, r2
 8003a14:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a16:	415b      	adcs	r3, r3
 8003a18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a1e:	4621      	mov	r1, r4
 8003a20:	eb12 0801 	adds.w	r8, r2, r1
 8003a24:	4629      	mov	r1, r5
 8003a26:	eb43 0901 	adc.w	r9, r3, r1
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a3e:	4690      	mov	r8, r2
 8003a40:	4699      	mov	r9, r3
 8003a42:	4623      	mov	r3, r4
 8003a44:	eb18 0303 	adds.w	r3, r8, r3
 8003a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a4c:	462b      	mov	r3, r5
 8003a4e:	eb49 0303 	adc.w	r3, r9, r3
 8003a52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a62:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	18db      	adds	r3, r3, r3
 8003a6e:	653b      	str	r3, [r7, #80]	; 0x50
 8003a70:	4613      	mov	r3, r2
 8003a72:	eb42 0303 	adc.w	r3, r2, r3
 8003a76:	657b      	str	r3, [r7, #84]	; 0x54
 8003a78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003a7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003a80:	f7fc ff74 	bl	800096c <__aeabi_uldivmod>
 8003a84:	4602      	mov	r2, r0
 8003a86:	460b      	mov	r3, r1
 8003a88:	4b61      	ldr	r3, [pc, #388]	; (8003c10 <UART_SetConfig+0x2d4>)
 8003a8a:	fba3 2302 	umull	r2, r3, r3, r2
 8003a8e:	095b      	lsrs	r3, r3, #5
 8003a90:	011c      	lsls	r4, r3, #4
 8003a92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a96:	2200      	movs	r2, #0
 8003a98:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003a9c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003aa0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003aa4:	4642      	mov	r2, r8
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	1891      	adds	r1, r2, r2
 8003aaa:	64b9      	str	r1, [r7, #72]	; 0x48
 8003aac:	415b      	adcs	r3, r3
 8003aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ab0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ab4:	4641      	mov	r1, r8
 8003ab6:	eb12 0a01 	adds.w	sl, r2, r1
 8003aba:	4649      	mov	r1, r9
 8003abc:	eb43 0b01 	adc.w	fp, r3, r1
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003acc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ad0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ad4:	4692      	mov	sl, r2
 8003ad6:	469b      	mov	fp, r3
 8003ad8:	4643      	mov	r3, r8
 8003ada:	eb1a 0303 	adds.w	r3, sl, r3
 8003ade:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ae2:	464b      	mov	r3, r9
 8003ae4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ae8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003af8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003afc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b00:	460b      	mov	r3, r1
 8003b02:	18db      	adds	r3, r3, r3
 8003b04:	643b      	str	r3, [r7, #64]	; 0x40
 8003b06:	4613      	mov	r3, r2
 8003b08:	eb42 0303 	adc.w	r3, r2, r3
 8003b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8003b0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b16:	f7fc ff29 	bl	800096c <__aeabi_uldivmod>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4611      	mov	r1, r2
 8003b20:	4b3b      	ldr	r3, [pc, #236]	; (8003c10 <UART_SetConfig+0x2d4>)
 8003b22:	fba3 2301 	umull	r2, r3, r3, r1
 8003b26:	095b      	lsrs	r3, r3, #5
 8003b28:	2264      	movs	r2, #100	; 0x64
 8003b2a:	fb02 f303 	mul.w	r3, r2, r3
 8003b2e:	1acb      	subs	r3, r1, r3
 8003b30:	00db      	lsls	r3, r3, #3
 8003b32:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b36:	4b36      	ldr	r3, [pc, #216]	; (8003c10 <UART_SetConfig+0x2d4>)
 8003b38:	fba3 2302 	umull	r2, r3, r3, r2
 8003b3c:	095b      	lsrs	r3, r3, #5
 8003b3e:	005b      	lsls	r3, r3, #1
 8003b40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b44:	441c      	add	r4, r3
 8003b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b50:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b58:	4642      	mov	r2, r8
 8003b5a:	464b      	mov	r3, r9
 8003b5c:	1891      	adds	r1, r2, r2
 8003b5e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b60:	415b      	adcs	r3, r3
 8003b62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b68:	4641      	mov	r1, r8
 8003b6a:	1851      	adds	r1, r2, r1
 8003b6c:	6339      	str	r1, [r7, #48]	; 0x30
 8003b6e:	4649      	mov	r1, r9
 8003b70:	414b      	adcs	r3, r1
 8003b72:	637b      	str	r3, [r7, #52]	; 0x34
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	f04f 0300 	mov.w	r3, #0
 8003b7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003b80:	4659      	mov	r1, fp
 8003b82:	00cb      	lsls	r3, r1, #3
 8003b84:	4651      	mov	r1, sl
 8003b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b8a:	4651      	mov	r1, sl
 8003b8c:	00ca      	lsls	r2, r1, #3
 8003b8e:	4610      	mov	r0, r2
 8003b90:	4619      	mov	r1, r3
 8003b92:	4603      	mov	r3, r0
 8003b94:	4642      	mov	r2, r8
 8003b96:	189b      	adds	r3, r3, r2
 8003b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b9c:	464b      	mov	r3, r9
 8003b9e:	460a      	mov	r2, r1
 8003ba0:	eb42 0303 	adc.w	r3, r2, r3
 8003ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bb4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	18db      	adds	r3, r3, r3
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	eb42 0303 	adc.w	r3, r2, r3
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bd2:	f7fc fecb 	bl	800096c <__aeabi_uldivmod>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4b0d      	ldr	r3, [pc, #52]	; (8003c10 <UART_SetConfig+0x2d4>)
 8003bdc:	fba3 1302 	umull	r1, r3, r3, r2
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	2164      	movs	r1, #100	; 0x64
 8003be4:	fb01 f303 	mul.w	r3, r1, r3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	3332      	adds	r3, #50	; 0x32
 8003bee:	4a08      	ldr	r2, [pc, #32]	; (8003c10 <UART_SetConfig+0x2d4>)
 8003bf0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bf4:	095b      	lsrs	r3, r3, #5
 8003bf6:	f003 0207 	and.w	r2, r3, #7
 8003bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4422      	add	r2, r4
 8003c02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c04:	e106      	b.n	8003e14 <UART_SetConfig+0x4d8>
 8003c06:	bf00      	nop
 8003c08:	40011000 	.word	0x40011000
 8003c0c:	40011400 	.word	0x40011400
 8003c10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c1e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c26:	4642      	mov	r2, r8
 8003c28:	464b      	mov	r3, r9
 8003c2a:	1891      	adds	r1, r2, r2
 8003c2c:	6239      	str	r1, [r7, #32]
 8003c2e:	415b      	adcs	r3, r3
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
 8003c32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c36:	4641      	mov	r1, r8
 8003c38:	1854      	adds	r4, r2, r1
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	eb43 0501 	adc.w	r5, r3, r1
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	00eb      	lsls	r3, r5, #3
 8003c4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c4e:	00e2      	lsls	r2, r4, #3
 8003c50:	4614      	mov	r4, r2
 8003c52:	461d      	mov	r5, r3
 8003c54:	4643      	mov	r3, r8
 8003c56:	18e3      	adds	r3, r4, r3
 8003c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c5c:	464b      	mov	r3, r9
 8003c5e:	eb45 0303 	adc.w	r3, r5, r3
 8003c62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c72:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003c82:	4629      	mov	r1, r5
 8003c84:	008b      	lsls	r3, r1, #2
 8003c86:	4621      	mov	r1, r4
 8003c88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	008a      	lsls	r2, r1, #2
 8003c90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003c94:	f7fc fe6a 	bl	800096c <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4b60      	ldr	r3, [pc, #384]	; (8003e20 <UART_SetConfig+0x4e4>)
 8003c9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	011c      	lsls	r4, r3, #4
 8003ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cb0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cb4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cb8:	4642      	mov	r2, r8
 8003cba:	464b      	mov	r3, r9
 8003cbc:	1891      	adds	r1, r2, r2
 8003cbe:	61b9      	str	r1, [r7, #24]
 8003cc0:	415b      	adcs	r3, r3
 8003cc2:	61fb      	str	r3, [r7, #28]
 8003cc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cc8:	4641      	mov	r1, r8
 8003cca:	1851      	adds	r1, r2, r1
 8003ccc:	6139      	str	r1, [r7, #16]
 8003cce:	4649      	mov	r1, r9
 8003cd0:	414b      	adcs	r3, r1
 8003cd2:	617b      	str	r3, [r7, #20]
 8003cd4:	f04f 0200 	mov.w	r2, #0
 8003cd8:	f04f 0300 	mov.w	r3, #0
 8003cdc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ce0:	4659      	mov	r1, fp
 8003ce2:	00cb      	lsls	r3, r1, #3
 8003ce4:	4651      	mov	r1, sl
 8003ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cea:	4651      	mov	r1, sl
 8003cec:	00ca      	lsls	r2, r1, #3
 8003cee:	4610      	mov	r0, r2
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	4642      	mov	r2, r8
 8003cf6:	189b      	adds	r3, r3, r2
 8003cf8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003cfc:	464b      	mov	r3, r9
 8003cfe:	460a      	mov	r2, r1
 8003d00:	eb42 0303 	adc.w	r3, r2, r3
 8003d04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d20:	4649      	mov	r1, r9
 8003d22:	008b      	lsls	r3, r1, #2
 8003d24:	4641      	mov	r1, r8
 8003d26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d2a:	4641      	mov	r1, r8
 8003d2c:	008a      	lsls	r2, r1, #2
 8003d2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d32:	f7fc fe1b 	bl	800096c <__aeabi_uldivmod>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4611      	mov	r1, r2
 8003d3c:	4b38      	ldr	r3, [pc, #224]	; (8003e20 <UART_SetConfig+0x4e4>)
 8003d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003d42:	095b      	lsrs	r3, r3, #5
 8003d44:	2264      	movs	r2, #100	; 0x64
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	1acb      	subs	r3, r1, r3
 8003d4c:	011b      	lsls	r3, r3, #4
 8003d4e:	3332      	adds	r3, #50	; 0x32
 8003d50:	4a33      	ldr	r2, [pc, #204]	; (8003e20 <UART_SetConfig+0x4e4>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	095b      	lsrs	r3, r3, #5
 8003d58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d5c:	441c      	add	r4, r3
 8003d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d62:	2200      	movs	r2, #0
 8003d64:	673b      	str	r3, [r7, #112]	; 0x70
 8003d66:	677a      	str	r2, [r7, #116]	; 0x74
 8003d68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d6c:	4642      	mov	r2, r8
 8003d6e:	464b      	mov	r3, r9
 8003d70:	1891      	adds	r1, r2, r2
 8003d72:	60b9      	str	r1, [r7, #8]
 8003d74:	415b      	adcs	r3, r3
 8003d76:	60fb      	str	r3, [r7, #12]
 8003d78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	1851      	adds	r1, r2, r1
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	4649      	mov	r1, r9
 8003d84:	414b      	adcs	r3, r1
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d94:	4659      	mov	r1, fp
 8003d96:	00cb      	lsls	r3, r1, #3
 8003d98:	4651      	mov	r1, sl
 8003d9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d9e:	4651      	mov	r1, sl
 8003da0:	00ca      	lsls	r2, r1, #3
 8003da2:	4610      	mov	r0, r2
 8003da4:	4619      	mov	r1, r3
 8003da6:	4603      	mov	r3, r0
 8003da8:	4642      	mov	r2, r8
 8003daa:	189b      	adds	r3, r3, r2
 8003dac:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dae:	464b      	mov	r3, r9
 8003db0:	460a      	mov	r2, r1
 8003db2:	eb42 0303 	adc.w	r3, r2, r3
 8003db6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	663b      	str	r3, [r7, #96]	; 0x60
 8003dc2:	667a      	str	r2, [r7, #100]	; 0x64
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003dd0:	4649      	mov	r1, r9
 8003dd2:	008b      	lsls	r3, r1, #2
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dda:	4641      	mov	r1, r8
 8003ddc:	008a      	lsls	r2, r1, #2
 8003dde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003de2:	f7fc fdc3 	bl	800096c <__aeabi_uldivmod>
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <UART_SetConfig+0x4e4>)
 8003dec:	fba3 1302 	umull	r1, r3, r3, r2
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	2164      	movs	r1, #100	; 0x64
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	3332      	adds	r3, #50	; 0x32
 8003dfe:	4a08      	ldr	r2, [pc, #32]	; (8003e20 <UART_SetConfig+0x4e4>)
 8003e00:	fba2 2303 	umull	r2, r3, r2, r3
 8003e04:	095b      	lsrs	r3, r3, #5
 8003e06:	f003 020f 	and.w	r2, r3, #15
 8003e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4422      	add	r2, r4
 8003e12:	609a      	str	r2, [r3, #8]
}
 8003e14:	bf00      	nop
 8003e16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e20:	51eb851f 	.word	0x51eb851f

08003e24 <InfraredPD_Initialize>:
 8003e24:	2802      	cmp	r0, #2
 8003e26:	d825      	bhi.n	8003e74 <InfraredPD_Initialize+0x50>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d130      	bne.n	8003e8e <InfraredPD_Initialize+0x6a>
 8003e2c:	4a3e      	ldr	r2, [pc, #248]	; (8003f28 <InfraredPD_Initialize+0x104>)
 8003e2e:	6813      	ldr	r3, [r2, #0]
 8003e30:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8003e34:	f023 0301 	bic.w	r3, r3, #1
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 8003e3e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8003e42:	f24c 2240 	movw	r2, #49728	; 0xc240
 8003e46:	400b      	ands	r3, r1
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d02e      	beq.n	8003eaa <InfraredPD_Initialize+0x86>
 8003e4c:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 8003e50:	f24c 2270 	movw	r2, #49776	; 0xc270
 8003e54:	400b      	ands	r3, r1
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d027      	beq.n	8003eaa <InfraredPD_Initialize+0x86>
 8003e5a:	4a34      	ldr	r2, [pc, #208]	; (8003f2c <InfraredPD_Initialize+0x108>)
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	6093      	str	r3, [r2, #8]
 8003e60:	6893      	ldr	r3, [r2, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1fc      	bne.n	8003e60 <InfraredPD_Initialize+0x3c>
 8003e66:	4b32      	ldr	r3, [pc, #200]	; (8003f30 <InfraredPD_Initialize+0x10c>)
 8003e68:	6013      	str	r3, [r2, #0]
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	4b31      	ldr	r3, [pc, #196]	; (8003f34 <InfraredPD_Initialize+0x110>)
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d016      	beq.n	8003ea0 <InfraredPD_Initialize+0x7c>
 8003e72:	e7fe      	b.n	8003e72 <InfraredPD_Initialize+0x4e>
 8003e74:	2803      	cmp	r0, #3
 8003e76:	d1d9      	bne.n	8003e2c <InfraredPD_Initialize+0x8>
 8003e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003e7c:	4a2e      	ldr	r2, [pc, #184]	; (8003f38 <InfraredPD_Initialize+0x114>)
 8003e7e:	6859      	ldr	r1, [r3, #4]
 8003e80:	4291      	cmp	r1, r2
 8003e82:	d00d      	beq.n	8003ea0 <InfraredPD_Initialize+0x7c>
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	4b2d      	ldr	r3, [pc, #180]	; (8003f3c <InfraredPD_Initialize+0x118>)
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d009      	beq.n	8003ea0 <InfraredPD_Initialize+0x7c>
 8003e8c:	e7fe      	b.n	8003e8c <InfraredPD_Initialize+0x68>
 8003e8e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003e92:	4a2b      	ldr	r2, [pc, #172]	; (8003f40 <InfraredPD_Initialize+0x11c>)
 8003e94:	f8d3 37f8 	ldr.w	r3, [r3, #2040]	; 0x7f8
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	041b      	lsls	r3, r3, #16
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d103      	bne.n	8003ea8 <InfraredPD_Initialize+0x84>
 8003ea0:	4b28      	ldr	r3, [pc, #160]	; (8003f44 <InfraredPD_Initialize+0x120>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	4770      	bx	lr
 8003ea8:	e7fe      	b.n	8003ea8 <InfraredPD_Initialize+0x84>
 8003eaa:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <InfraredPD_Initialize+0x124>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1d3      	bne.n	8003e5a <InfraredPD_Initialize+0x36>
 8003eb2:	4a26      	ldr	r2, [pc, #152]	; (8003f4c <InfraredPD_Initialize+0x128>)
 8003eb4:	6813      	ldr	r3, [r2, #0]
 8003eb6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eba:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8003ebe:	d021      	beq.n	8003f04 <InfraredPD_Initialize+0xe0>
 8003ec0:	6813      	ldr	r3, [r2, #0]
 8003ec2:	f240 4183 	movw	r1, #1155	; 0x483
 8003ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eca:	428b      	cmp	r3, r1
 8003ecc:	d01a      	beq.n	8003f04 <InfraredPD_Initialize+0xe0>
 8003ece:	6813      	ldr	r3, [r2, #0]
 8003ed0:	f240 4285 	movw	r2, #1157	; 0x485
 8003ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d013      	beq.n	8003f04 <InfraredPD_Initialize+0xe0>
 8003edc:	4b1c      	ldr	r3, [pc, #112]	; (8003f50 <InfraredPD_Initialize+0x12c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ee4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003ee8:	d1b7      	bne.n	8003e5a <InfraredPD_Initialize+0x36>
 8003eea:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <InfraredPD_Initialize+0x130>)
 8003eec:	2301      	movs	r3, #1
 8003eee:	6093      	str	r3, [r2, #8]
 8003ef0:	6893      	ldr	r3, [r2, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1fc      	bne.n	8003ef0 <InfraredPD_Initialize+0xcc>
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	; (8003f30 <InfraredPD_Initialize+0x10c>)
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	4b0d      	ldr	r3, [pc, #52]	; (8003f34 <InfraredPD_Initialize+0x110>)
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d0ce      	beq.n	8003ea0 <InfraredPD_Initialize+0x7c>
 8003f02:	e7b6      	b.n	8003e72 <InfraredPD_Initialize+0x4e>
 8003f04:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <InfraredPD_Initialize+0x134>)
 8003f06:	2301      	movs	r3, #1
 8003f08:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8003f0c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d1fb      	bne.n	8003f0c <InfraredPD_Initialize+0xe8>
 8003f14:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <InfraredPD_Initialize+0x10c>)
 8003f16:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8003f1a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8003f1e:	4b05      	ldr	r3, [pc, #20]	; (8003f34 <InfraredPD_Initialize+0x110>)
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d0bd      	beq.n	8003ea0 <InfraredPD_Initialize+0x7c>
 8003f24:	e7a5      	b.n	8003e72 <InfraredPD_Initialize+0x4e>
 8003f26:	bf00      	nop
 8003f28:	e0002000 	.word	0xe0002000
 8003f2c:	40023000 	.word	0x40023000
 8003f30:	f407a5c2 	.word	0xf407a5c2
 8003f34:	b5e8b5cd 	.word	0xb5e8b5cd
 8003f38:	0201e041 	.word	0x0201e041
 8003f3c:	02028041 	.word	0x02028041
 8003f40:	aa550000 	.word	0xaa550000
 8003f44:	20000078 	.word	0x20000078
 8003f48:	e0042000 	.word	0xe0042000
 8003f4c:	5c001000 	.word	0x5c001000
 8003f50:	50081000 	.word	0x50081000
 8003f54:	4c004000 	.word	0x4c004000
 8003f58:	58024000 	.word	0x58024000

08003f5c <InfraredPD_CreateInstance>:
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <InfraredPD_CreateInstance+0x2c>)
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b183      	cbz	r3, 8003f84 <InfraredPD_CreateInstance+0x28>
 8003f62:	b510      	push	{r4, lr}
 8003f64:	4604      	mov	r4, r0
 8003f66:	20c0      	movs	r0, #192	; 0xc0
 8003f68:	f000 fd4e 	bl	8004a08 <malloc>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	b138      	cbz	r0, 8003f80 <InfraredPD_CreateInstance+0x24>
 8003f70:	4a06      	ldr	r2, [pc, #24]	; (8003f8c <InfraredPD_CreateInstance+0x30>)
 8003f72:	ca03      	ldmia	r2!, {r0, r1}
 8003f74:	f04f 0c00 	mov.w	ip, #0
 8003f78:	f883 c0a8 	strb.w	ip, [r3, #168]	; 0xa8
 8003f7c:	6020      	str	r0, [r4, #0]
 8003f7e:	6061      	str	r1, [r4, #4]
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd10      	pop	{r4, pc}
 8003f84:	4618      	mov	r0, r3
 8003f86:	4770      	bx	lr
 8003f88:	20000078 	.word	0x20000078
 8003f8c:	080056d8 	.word	0x080056d8

08003f90 <InfraredPD_Start>:
 8003f90:	4bbc      	ldr	r3, [pc, #752]	; (8004284 <InfraredPD_Start+0x2f4>)
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	b90b      	cbnz	r3, 8003f9a <InfraredPD_Start+0xa>
 8003f96:	4618      	mov	r0, r3
 8003f98:	4770      	bx	lr
 8003f9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f9e:	ed2d 8b04 	vpush	{d8-d9}
 8003fa2:	4616      	mov	r6, r2
 8003fa4:	780a      	ldrb	r2, [r1, #0]
 8003fa6:	1e53      	subs	r3, r2, #1
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	4604      	mov	r4, r0
 8003fac:	460d      	mov	r5, r1
 8003fae:	d917      	bls.n	8003fe0 <InfraredPD_Start+0x50>
 8003fb0:	2a0f      	cmp	r2, #15
 8003fb2:	d846      	bhi.n	8004042 <InfraredPD_Start+0xb2>
 8003fb4:	f248 1310 	movw	r3, #33040	; 0x8110
 8003fb8:	40d3      	lsrs	r3, r2
 8003fba:	07db      	lsls	r3, r3, #31
 8003fbc:	f140 81aa 	bpl.w	8004314 <InfraredPD_Start+0x384>
 8003fc0:	884b      	ldrh	r3, [r1, #2]
 8003fc2:	2b80      	cmp	r3, #128	; 0x80
 8003fc4:	f000 81ae 	beq.w	8004324 <InfraredPD_Start+0x394>
 8003fc8:	d90f      	bls.n	8003fea <InfraredPD_Start+0x5a>
 8003fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fce:	f000 81ae 	beq.w	800432e <InfraredPD_Start+0x39e>
 8003fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd6:	f040 817b 	bne.w	80042d0 <InfraredPD_Start+0x340>
 8003fda:	4bab      	ldr	r3, [pc, #684]	; (8004288 <InfraredPD_Start+0x2f8>)
 8003fdc:	60a3      	str	r3, [r4, #8]
 8003fde:	e020      	b.n	8004022 <InfraredPD_Start+0x92>
 8003fe0:	884b      	ldrh	r3, [r1, #2]
 8003fe2:	2b80      	cmp	r3, #128	; 0x80
 8003fe4:	f000 8187 	beq.w	80042f6 <InfraredPD_Start+0x366>
 8003fe8:	d810      	bhi.n	800400c <InfraredPD_Start+0x7c>
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	f000 817d 	beq.w	80042ea <InfraredPD_Start+0x35a>
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d120      	bne.n	8004036 <InfraredPD_Start+0xa6>
 8003ff4:	4ba5      	ldr	r3, [pc, #660]	; (800428c <InfraredPD_Start+0x2fc>)
 8003ff6:	60a3      	str	r3, [r4, #8]
 8003ff8:	792b      	ldrb	r3, [r5, #4]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	2b07      	cmp	r3, #7
 8003ffe:	d838      	bhi.n	8004072 <InfraredPD_Start+0xe2>
 8004000:	e8df f003 	tbb	[pc, r3]
 8004004:	ac37b13d 	.word	0xac37b13d
 8004008:	a7373737 	.word	0xa7373737
 800400c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004010:	f000 816e 	beq.w	80042f0 <InfraredPD_Start+0x360>
 8004014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004018:	d106      	bne.n	8004028 <InfraredPD_Start+0x98>
 800401a:	4b9b      	ldr	r3, [pc, #620]	; (8004288 <InfraredPD_Start+0x2f8>)
 800401c:	6083      	str	r3, [r0, #8]
 800401e:	2a02      	cmp	r2, #2
 8004020:	d1ea      	bne.n	8003ff8 <InfraredPD_Start+0x68>
 8004022:	2301      	movs	r3, #1
 8004024:	702b      	strb	r3, [r5, #0]
 8004026:	e7e7      	b.n	8003ff8 <InfraredPD_Start+0x68>
 8004028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800402c:	f040 814a 	bne.w	80042c4 <InfraredPD_Start+0x334>
 8004030:	4b97      	ldr	r3, [pc, #604]	; (8004290 <InfraredPD_Start+0x300>)
 8004032:	6083      	str	r3, [r0, #8]
 8004034:	e7e0      	b.n	8003ff8 <InfraredPD_Start+0x68>
 8004036:	2b02      	cmp	r3, #2
 8004038:	f040 8144 	bne.w	80042c4 <InfraredPD_Start+0x334>
 800403c:	4b95      	ldr	r3, [pc, #596]	; (8004294 <InfraredPD_Start+0x304>)
 800403e:	60a3      	str	r3, [r4, #8]
 8004040:	e7da      	b.n	8003ff8 <InfraredPD_Start+0x68>
 8004042:	2a1e      	cmp	r2, #30
 8004044:	f040 8166 	bne.w	8004314 <InfraredPD_Start+0x384>
 8004048:	884b      	ldrh	r3, [r1, #2]
 800404a:	2b80      	cmp	r3, #128	; 0x80
 800404c:	f000 815d 	beq.w	800430a <InfraredPD_Start+0x37a>
 8004050:	d9cb      	bls.n	8003fea <InfraredPD_Start+0x5a>
 8004052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004056:	f000 8172 	beq.w	800433e <InfraredPD_Start+0x3ae>
 800405a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405e:	d0bc      	beq.n	8003fda <InfraredPD_Start+0x4a>
 8004060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004064:	f040 812e 	bne.w	80042c4 <InfraredPD_Start+0x334>
 8004068:	4b89      	ldr	r3, [pc, #548]	; (8004290 <InfraredPD_Start+0x300>)
 800406a:	6083      	str	r3, [r0, #8]
 800406c:	2304      	movs	r3, #4
 800406e:	702b      	strb	r3, [r5, #0]
 8004070:	e7c2      	b.n	8003ff8 <InfraredPD_Start+0x68>
 8004072:	2303      	movs	r3, #3
 8004074:	ecbd 8b04 	vpop	{d8-d9}
 8004078:	4618      	mov	r0, r3
 800407a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800407e:	4b86      	ldr	r3, [pc, #536]	; (8004298 <InfraredPD_Start+0x308>)
 8004080:	eddf 7a86 	vldr	s15, [pc, #536]	; 800429c <InfraredPD_Start+0x30c>
 8004084:	60e3      	str	r3, [r4, #12]
 8004086:	796b      	ldrb	r3, [r5, #5]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d002      	beq.n	8004092 <InfraredPD_Start+0x102>
 800408c:	2b08      	cmp	r3, #8
 800408e:	f040 812a 	bne.w	80042e6 <InfraredPD_Start+0x356>
 8004092:	ed95 7a02 	vldr	s14, [r5, #8]
 8004096:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800409a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800409e:	f100 8120 	bmi.w	80042e2 <InfraredPD_Start+0x352>
 80040a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040a6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80040aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ae:	f300 8118 	bgt.w	80042e2 <InfraredPD_Start+0x352>
 80040b2:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80040b6:	eddf 6a7a 	vldr	s13, [pc, #488]	; 80042a0 <InfraredPD_Start+0x310>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	bfbc      	itt	lt
 80040be:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 80040c2:	8073      	strhlt	r3, [r6, #2]
 80040c4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bfbc      	itt	lt
 80040cc:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 80040d0:	80b3      	strhlt	r3, [r6, #4]
 80040d2:	88eb      	ldrh	r3, [r5, #6]
 80040d4:	ee08 3a10 	vmov	s16, r3
 80040d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80040dc:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80040e0:	edd4 6a02 	vldr	s13, [r4, #8]
 80040e4:	ee28 8a07 	vmul.f32	s16, s16, s14
 80040e8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80040ec:	ed84 8a05 	vstr	s16, [r4, #20]
 80040f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80040f4:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80040f8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80040fc:	ee87 0a26 	vdiv.f32	s0, s14, s13
 8004100:	ed84 7a04 	vstr	s14, [r4, #16]
 8004104:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004108:	ed84 0a06 	vstr	s0, [r4, #24]
 800410c:	f001 f974 	bl	80053f8 <ceilf>
 8004110:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8004114:	2301      	movs	r3, #1
 8004116:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800411a:	ee10 3a10 	vmov	r3, s0
 800411e:	b298      	uxth	r0, r3
 8004120:	2300      	movs	r3, #0
 8004122:	83a0      	strh	r0, [r4, #28]
 8004124:	6223      	str	r3, [r4, #32]
 8004126:	7833      	ldrb	r3, [r6, #0]
 8004128:	b313      	cbz	r3, 8004170 <InfraredPD_Start+0x1e0>
 800412a:	2b02      	cmp	r3, #2
 800412c:	f000 80e6 	beq.w	80042fc <InfraredPD_Start+0x36c>
 8004130:	7873      	ldrb	r3, [r6, #1]
 8004132:	b1eb      	cbz	r3, 8004170 <InfraredPD_Start+0x1e0>
 8004134:	2300      	movs	r3, #0
 8004136:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800413a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800413e:	2b01      	cmp	r3, #1
 8004140:	f000 8100 	beq.w	8004344 <InfraredPD_Start+0x3b4>
 8004144:	0080      	lsls	r0, r0, #2
 8004146:	f000 fc5f 	bl	8004a08 <malloc>
 800414a:	6460      	str	r0, [r4, #68]	; 0x44
 800414c:	b980      	cbnz	r0, 8004170 <InfraredPD_Start+0x1e0>
 800414e:	2306      	movs	r3, #6
 8004150:	e790      	b.n	8004074 <InfraredPD_Start+0xe4>
 8004152:	4b54      	ldr	r3, [pc, #336]	; (80042a4 <InfraredPD_Start+0x314>)
 8004154:	eddf 7a54 	vldr	s15, [pc, #336]	; 80042a8 <InfraredPD_Start+0x318>
 8004158:	60e3      	str	r3, [r4, #12]
 800415a:	e794      	b.n	8004086 <InfraredPD_Start+0xf6>
 800415c:	4b53      	ldr	r3, [pc, #332]	; (80042ac <InfraredPD_Start+0x31c>)
 800415e:	eddf 7a54 	vldr	s15, [pc, #336]	; 80042b0 <InfraredPD_Start+0x320>
 8004162:	60e3      	str	r3, [r4, #12]
 8004164:	e78f      	b.n	8004086 <InfraredPD_Start+0xf6>
 8004166:	4b53      	ldr	r3, [pc, #332]	; (80042b4 <InfraredPD_Start+0x324>)
 8004168:	eddf 7a53 	vldr	s15, [pc, #332]	; 80042b8 <InfraredPD_Start+0x328>
 800416c:	60e3      	str	r3, [r4, #12]
 800416e:	e78a      	b.n	8004086 <InfraredPD_Start+0xf6>
 8004170:	2300      	movs	r3, #0
 8004172:	7828      	ldrb	r0, [r5, #0]
 8004174:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8004178:	2301      	movs	r3, #1
 800417a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800417e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8004182:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004186:	0040      	lsls	r0, r0, #1
 8004188:	2b01      	cmp	r3, #1
 800418a:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
 800418e:	f000 80c3 	beq.w	8004318 <InfraredPD_Start+0x388>
 8004192:	0080      	lsls	r0, r0, #2
 8004194:	f000 fc38 	bl	8004a08 <malloc>
 8004198:	6520      	str	r0, [r4, #80]	; 0x50
 800419a:	2800      	cmp	r0, #0
 800419c:	f000 80d7 	beq.w	800434e <InfraredPD_Start+0x3be>
 80041a0:	f04f 0800 	mov.w	r8, #0
 80041a4:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 80041a8:	2300      	movs	r3, #0
 80041aa:	65e3      	str	r3, [r4, #92]	; 0x5c
 80041ac:	88b3      	ldrh	r3, [r6, #4]
 80041ae:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80042bc <InfraredPD_Start+0x32c>
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041ba:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 80041be:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 80041c2:	ee67 6aa8 	vmul.f32	s13, s15, s17
 80041c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041ca:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
 80041ce:	edc4 6a1a 	vstr	s13, [r4, #104]	; 0x68
 80041d2:	ed84 7a1b 	vstr	s14, [r4, #108]	; 0x6c
 80041d6:	782f      	ldrb	r7, [r5, #0]
 80041d8:	ee07 7a90 	vmov	s15, r7
 80041dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80041e0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80041e4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80041e8:	ee27 0ac0 	vnmul.f32	s0, s15, s0
 80041ec:	eeb1 9a67 	vneg.f32	s18, s15
 80041f0:	f001 f8be 	bl	8005370 <expf>
 80041f4:	eddf 7a32 	vldr	s15, [pc, #200]	; 80042c0 <InfraredPD_Start+0x330>
 80041f8:	ee38 0a40 	vsub.f32	s0, s16, s0
 80041fc:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 8004200:	ee29 0a27 	vmul.f32	s0, s18, s15
 8004204:	f001 f8b4 	bl	8005370 <expf>
 8004208:	8873      	ldrh	r3, [r6, #2]
 800420a:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
 800420e:	ee07 3a90 	vmov	s15, r3
 8004212:	2201      	movs	r2, #1
 8004214:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
 8004218:	ebc7 1107 	rsb	r1, r7, r7, lsl #4
 800421c:	b2ba      	uxth	r2, r7
 800421e:	e9c4 8828 	strd	r8, r8, [r4, #160]	; 0xa0
 8004222:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
 8004226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800422a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800422e:	0049      	lsls	r1, r1, #1
 8004230:	f8a4 1098 	strh.w	r1, [r4, #152]	; 0x98
 8004234:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8004238:	ee67 8aa8 	vmul.f32	s17, s15, s17
 800423c:	00c9      	lsls	r1, r1, #3
 800423e:	0092      	lsls	r2, r2, #2
 8004240:	f8a4 109c 	strh.w	r1, [r4, #156]	; 0x9c
 8004244:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 8004248:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800424c:	edc4 8a22 	vstr	s17, [r4, #136]	; 0x88
 8004250:	ee38 0a40 	vsub.f32	s0, s16, s0
 8004254:	ecbd 8b04 	vpop	{d8-d9}
 8004258:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 800425c:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8004260:	f104 07ac 	add.w	r7, r4, #172	; 0xac
 8004264:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
 8004268:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
 800426c:	f8a4 808e 	strh.w	r8, [r4, #142]	; 0x8e
 8004270:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004274:	6830      	ldr	r0, [r6, #0]
 8004276:	6871      	ldr	r1, [r6, #4]
 8004278:	4643      	mov	r3, r8
 800427a:	34b8      	adds	r4, #184	; 0xb8
 800427c:	c403      	stmia	r4!, {r0, r1}
 800427e:	4618      	mov	r0, r3
 8004280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004284:	20000078 	.word	0x20000078
 8004288:	41680000 	.word	0x41680000
 800428c:	42006666 	.word	0x42006666
 8004290:	419b3333 	.word	0x419b3333
 8004294:	42c6999a 	.word	0x42c6999a
 8004298:	43168000 	.word	0x43168000
 800429c:	3e1a1cad 	.word	0x3e1a1cad
 80042a0:	3f933333 	.word	0x3f933333
 80042a4:	4254cccd 	.word	0x4254cccd
 80042a8:	3d59e83f 	.word	0x3d59e83f
 80042ac:	42966666 	.word	0x42966666
 80042b0:	3d9a0275 	.word	0x3d9a0275
 80042b4:	42d4cccd 	.word	0x42d4cccd
 80042b8:	3dd9e83f 	.word	0x3dd9e83f
 80042bc:	4048e093 	.word	0x4048e093
 80042c0:	3ea0da75 	.word	0x3ea0da75
 80042c4:	ecbd 8b04 	vpop	{d8-d9}
 80042c8:	2302      	movs	r3, #2
 80042ca:	4618      	mov	r0, r3
 80042cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042d4:	d1f6      	bne.n	80042c4 <InfraredPD_Start+0x334>
 80042d6:	4b22      	ldr	r3, [pc, #136]	; (8004360 <InfraredPD_Start+0x3d0>)
 80042d8:	60a3      	str	r3, [r4, #8]
 80042da:	2a04      	cmp	r2, #4
 80042dc:	f63f aec6 	bhi.w	800406c <InfraredPD_Start+0xdc>
 80042e0:	e68a      	b.n	8003ff8 <InfraredPD_Start+0x68>
 80042e2:	2305      	movs	r3, #5
 80042e4:	e6c6      	b.n	8004074 <InfraredPD_Start+0xe4>
 80042e6:	2304      	movs	r3, #4
 80042e8:	e6c4      	b.n	8004074 <InfraredPD_Start+0xe4>
 80042ea:	4b1e      	ldr	r3, [pc, #120]	; (8004364 <InfraredPD_Start+0x3d4>)
 80042ec:	60a3      	str	r3, [r4, #8]
 80042ee:	e683      	b.n	8003ff8 <InfraredPD_Start+0x68>
 80042f0:	4b1d      	ldr	r3, [pc, #116]	; (8004368 <InfraredPD_Start+0x3d8>)
 80042f2:	6083      	str	r3, [r0, #8]
 80042f4:	e680      	b.n	8003ff8 <InfraredPD_Start+0x68>
 80042f6:	4b1d      	ldr	r3, [pc, #116]	; (800436c <InfraredPD_Start+0x3dc>)
 80042f8:	6083      	str	r3, [r0, #8]
 80042fa:	e67d      	b.n	8003ff8 <InfraredPD_Start+0x68>
 80042fc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004370 <InfraredPD_Start+0x3e0>
 8004300:	ee28 7a07 	vmul.f32	s14, s16, s14
 8004304:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
 8004308:	e712      	b.n	8004130 <InfraredPD_Start+0x1a0>
 800430a:	4b18      	ldr	r3, [pc, #96]	; (800436c <InfraredPD_Start+0x3dc>)
 800430c:	60a3      	str	r3, [r4, #8]
 800430e:	2308      	movs	r3, #8
 8004310:	702b      	strb	r3, [r5, #0]
 8004312:	e671      	b.n	8003ff8 <InfraredPD_Start+0x68>
 8004314:	2301      	movs	r3, #1
 8004316:	e6ad      	b.n	8004074 <InfraredPD_Start+0xe4>
 8004318:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800431a:	f000 fb7d 	bl	8004a18 <free>
 800431e:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8004322:	e736      	b.n	8004192 <InfraredPD_Start+0x202>
 8004324:	4b11      	ldr	r3, [pc, #68]	; (800436c <InfraredPD_Start+0x3dc>)
 8004326:	60a3      	str	r3, [r4, #8]
 8004328:	2a08      	cmp	r2, #8
 800432a:	d8f0      	bhi.n	800430e <InfraredPD_Start+0x37e>
 800432c:	e664      	b.n	8003ff8 <InfraredPD_Start+0x68>
 800432e:	4b0e      	ldr	r3, [pc, #56]	; (8004368 <InfraredPD_Start+0x3d8>)
 8004330:	60a3      	str	r3, [r4, #8]
 8004332:	2a02      	cmp	r2, #2
 8004334:	f67f ae60 	bls.w	8003ff8 <InfraredPD_Start+0x68>
 8004338:	2302      	movs	r3, #2
 800433a:	702b      	strb	r3, [r5, #0]
 800433c:	e65c      	b.n	8003ff8 <InfraredPD_Start+0x68>
 800433e:	4b0a      	ldr	r3, [pc, #40]	; (8004368 <InfraredPD_Start+0x3d8>)
 8004340:	6083      	str	r3, [r0, #8]
 8004342:	e7f9      	b.n	8004338 <InfraredPD_Start+0x3a8>
 8004344:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004346:	f000 fb67 	bl	8004a18 <free>
 800434a:	8ba0      	ldrh	r0, [r4, #28]
 800434c:	e6fa      	b.n	8004144 <InfraredPD_Start+0x1b4>
 800434e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004350:	b118      	cbz	r0, 800435a <InfraredPD_Start+0x3ca>
 8004352:	f000 fb61 	bl	8004a18 <free>
 8004356:	2307      	movs	r3, #7
 8004358:	e68c      	b.n	8004074 <InfraredPD_Start+0xe4>
 800435a:	2307      	movs	r3, #7
 800435c:	e68a      	b.n	8004074 <InfraredPD_Start+0xe4>
 800435e:	bf00      	nop
 8004360:	419b3333 	.word	0x419b3333
 8004364:	42560000 	.word	0x42560000
 8004368:	41873333 	.word	0x41873333
 800436c:	41b00000 	.word	0x41b00000
 8004370:	3223b1a8 	.word	0x3223b1a8
 8004374:	00000000 	.word	0x00000000

08004378 <InfraredPD_Update>:
 8004378:	4bba      	ldr	r3, [pc, #744]	; (8004664 <InfraredPD_Update+0x2ec>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	b903      	cbnz	r3, 8004380 <InfraredPD_Update+0x8>
 800437e:	4770      	bx	lr
 8004380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004384:	ed2d 8b02 	vpush	{d8}
 8004388:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 800438c:	f890 60b1 	ldrb.w	r6, [r0, #177]	; 0xb1
 8004390:	4615      	mov	r5, r2
 8004392:	f9b1 2000 	ldrsh.w	r2, [r1]
 8004396:	fb16 f303 	smulbb	r3, r6, r3
 800439a:	ee07 2a10 	vmov	s14, r2
 800439e:	ee07 3a90 	vmov	s15, r3
 80043a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80043a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043aa:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 80043ae:	ed80 7a00 	vstr	s14, [r0]
 80043b2:	b083      	sub	sp, #12
 80043b4:	4604      	mov	r4, r0
 80043b6:	edc0 7a01 	vstr	s15, [r0, #4]
 80043ba:	2a00      	cmp	r2, #0
 80043bc:	d067      	beq.n	800448e <InfraredPD_Update+0x116>
 80043be:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d168      	bne.n	8004498 <InfraredPD_Update+0x120>
 80043c6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	f040 8303 	bne.w	80049d6 <InfraredPD_Update+0x65e>
 80043d0:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 80043d4:	6a07      	ldr	r7, [r0, #32]
 80043d6:	3301      	adds	r3, #1
 80043d8:	b29b      	uxth	r3, r3
 80043da:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80043de:	3a01      	subs	r2, #1
 80043e0:	0090      	lsls	r0, r2, #2
 80043e2:	2f01      	cmp	r7, #1
 80043e4:	d068      	beq.n	80044b8 <InfraredPD_Update+0x140>
 80043e6:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8004668 <InfraredPD_Update+0x2f0>
 80043ea:	eeb0 6ae7 	vabs.f32	s12, s15
 80043ee:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80043f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043f6:	d57b      	bpl.n	80044f0 <InfraredPD_Update+0x178>
 80043f8:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 80043fc:	2a00      	cmp	r2, #0
 80043fe:	f000 81a8 	beq.w	8004752 <InfraredPD_Update+0x3da>
 8004402:	2a01      	cmp	r2, #1
 8004404:	f000 8265 	beq.w	80048d2 <InfraredPD_Update+0x55a>
 8004408:	2a02      	cmp	r2, #2
 800440a:	f000 8246 	beq.w	800489a <InfraredPD_Update+0x522>
 800440e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8004412:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 8004416:	2a00      	cmp	r2, #0
 8004418:	f000 80a6 	beq.w	8004568 <InfraredPD_Update+0x1f0>
 800441c:	e070      	b.n	8004500 <InfraredPD_Update+0x188>
 800441e:	2f01      	cmp	r7, #1
 8004420:	f000 82c2 	beq.w	80049a8 <InfraredPD_Update+0x630>
 8004424:	2300      	movs	r3, #0
 8004426:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 800442a:	2f00      	cmp	r7, #0
 800442c:	f040 82d0 	bne.w	80049d0 <InfraredPD_Update+0x658>
 8004430:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8004434:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
 8004438:	3301      	adds	r3, #1
 800443a:	b29b      	uxth	r3, r3
 800443c:	429a      	cmp	r2, r3
 800443e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8004442:	d10b      	bne.n	800445c <InfraredPD_Update+0xe4>
 8004444:	2300      	movs	r3, #0
 8004446:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 800444a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 800444e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8004452:	b91b      	cbnz	r3, 800445c <InfraredPD_Update+0xe4>
 8004454:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8004458:	2300      	movs	r3, #0
 800445a:	65e3      	str	r3, [r4, #92]	; 0x5c
 800445c:	ee07 6a90 	vmov	s15, r6
 8004460:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004464:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8004468:	eec8 7a26 	vdiv.f32	s15, s16, s13
 800446c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004470:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004474:	ee17 3a10 	vmov	r3, s14
 8004478:	802b      	strh	r3, [r5, #0]
 800447a:	ee17 3a90 	vmov	r3, s15
 800447e:	806b      	strh	r3, [r5, #2]
 8004480:	2300      	movs	r3, #0
 8004482:	716b      	strb	r3, [r5, #5]
 8004484:	712f      	strb	r7, [r5, #4]
 8004486:	2f01      	cmp	r7, #1
 8004488:	d101      	bne.n	800448e <InfraredPD_Update+0x116>
 800448a:	2301      	movs	r3, #1
 800448c:	716b      	strb	r3, [r5, #5]
 800448e:	b003      	add	sp, #12
 8004490:	ecbd 8b02 	vpop	{d8}
 8004494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004498:	2200      	movs	r2, #0
 800449a:	2301      	movs	r3, #1
 800449c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80044a0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 80044a4:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 80044a8:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 80044ac:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
 80044b0:	f880 20a7 	strb.w	r2, [r0, #167]	; 0xa7
 80044b4:	6203      	str	r3, [r0, #32]
 80044b6:	4610      	mov	r0, r2
 80044b8:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 80044bc:	b182      	cbz	r2, 80044e0 <InfraredPD_Update+0x168>
 80044be:	2a01      	cmp	r2, #1
 80044c0:	f000 81e8 	beq.w	8004894 <InfraredPD_Update+0x51c>
 80044c4:	2a02      	cmp	r2, #2
 80044c6:	d10b      	bne.n	80044e0 <InfraredPD_Update+0x168>
 80044c8:	ed9f 6a68 	vldr	s12, [pc, #416]	; 800466c <InfraredPD_Update+0x2f4>
 80044cc:	eddf 6a68 	vldr	s13, [pc, #416]	; 8004670 <InfraredPD_Update+0x2f8>
 80044d0:	eee7 6a06 	vfma.f32	s13, s14, s12
 80044d4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80044d8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80044dc:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
 80044e0:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 80044e4:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
 80044e8:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 80044ec:	2701      	movs	r7, #1
 80044ee:	e77a      	b.n	80043e6 <InfraredPD_Update+0x6e>
 80044f0:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 80044f4:	b3b2      	cbz	r2, 8004564 <InfraredPD_Update+0x1ec>
 80044f6:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 80044fa:	b39a      	cbz	r2, 8004564 <InfraredPD_Update+0x1ec>
 80044fc:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8004500:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8004504:	8ba1      	ldrh	r1, [r4, #28]
 8004506:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800450a:	3201      	adds	r2, #1
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	428a      	cmp	r2, r1
 8004510:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8004514:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 8004518:	bf08      	it	eq
 800451a:	2200      	moveq	r2, #0
 800451c:	ed4e 7a01 	vstr	s15, [lr, #-4]
 8004520:	bf08      	it	eq
 8004522:	f884 2040 	strbeq.w	r2, [r4, #64]	; 0x40
 8004526:	2901      	cmp	r1, #1
 8004528:	f240 81ce 	bls.w	80048c8 <InfraredPD_Update+0x550>
 800452c:	42b9      	cmp	r1, r7
 800452e:	f240 81df 	bls.w	80048f0 <InfraredPD_Update+0x578>
 8004532:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004674 <InfraredPD_Update+0x2fc>
 8004536:	b167      	cbz	r7, 8004552 <InfraredPD_Update+0x1da>
 8004538:	2200      	movs	r2, #0
 800453a:	4611      	mov	r1, r2
 800453c:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8004540:	3201      	adds	r2, #1
 8004542:	edd1 7a00 	vldr	s15, [r1]
 8004546:	b292      	uxth	r2, r2
 8004548:	42ba      	cmp	r2, r7
 800454a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800454e:	4611      	mov	r1, r2
 8004550:	d3f4      	bcc.n	800453c <InfraredPD_Update+0x1c4>
 8004552:	ee07 7a90 	vmov	s15, r7
 8004556:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800455a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800455e:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8004562:	e003      	b.n	800456c <InfraredPD_Update+0x1f4>
 8004564:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8004568:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 800456c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800456e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8004572:	180a      	adds	r2, r1, r0
 8004574:	edc2 7a00 	vstr	s15, [r2]
 8004578:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800457c:	f894 c04c 	ldrb.w	ip, [r4, #76]	; 0x4c
 8004580:	429a      	cmp	r2, r3
 8004582:	d07b      	beq.n	800467c <InfraredPD_Update+0x304>
 8004584:	ed94 6a1c 	vldr	s12, [r4, #112]	; 0x70
 8004588:	edd4 6a1d 	vldr	s13, [r4, #116]	; 0x74
 800458c:	ed94 5a1e 	vldr	s10, [r4, #120]	; 0x78
 8004590:	edd4 5a1f 	vldr	s11, [r4, #124]	; 0x7c
 8004594:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 8004598:	f894 7090 	ldrb.w	r7, [r4, #144]	; 0x90
 800459c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045a0:	ee37 8a46 	vsub.f32	s16, s14, s12
 80045a4:	ee77 7a66 	vsub.f32	s15, s14, s13
 80045a8:	ee28 8a05 	vmul.f32	s16, s16, s10
 80045ac:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80045b0:	eea6 8a28 	vfma.f32	s16, s12, s17
 80045b4:	eee8 7aa6 	vfma.f32	s15, s17, s13
 80045b8:	ed84 8a1e 	vstr	s16, [r4, #120]	; 0x78
 80045bc:	ee38 8a67 	vsub.f32	s16, s16, s15
 80045c0:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 80045c4:	ed84 8a20 	vstr	s16, [r4, #128]	; 0x80
 80045c8:	2f00      	cmp	r7, #0
 80045ca:	f000 80b4 	beq.w	8004736 <InfraredPD_Update+0x3be>
 80045ce:	2f01      	cmp	r7, #1
 80045d0:	d114      	bne.n	80045fc <InfraredPD_Update+0x284>
 80045d2:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
 80045d6:	eef0 6ac8 	vabs.f32	s13, s16
 80045da:	eef4 6ac7 	vcmpe.f32	s13, s14
 80045de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e2:	f140 80c0 	bpl.w	8004766 <InfraredPD_Update+0x3ee>
 80045e6:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 80045ea:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
 80045ee:	3301      	adds	r3, #1
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	429a      	cmp	r2, r3
 80045f4:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 80045f8:	f240 8146 	bls.w	8004888 <InfraredPD_Update+0x510>
 80045fc:	f894 80a6 	ldrb.w	r8, [r4, #166]	; 0xa6
 8004600:	f1bc 0f00 	cmp.w	ip, #0
 8004604:	d108      	bne.n	8004618 <InfraredPD_Update+0x2a0>
 8004606:	f1b8 0f03 	cmp.w	r8, #3
 800460a:	d809      	bhi.n	8004620 <InfraredPD_Update+0x2a8>
 800460c:	e8df f018 	tbh	[pc, r8, lsl #1]
 8004610:	010d011c 	.word	0x010d011c
 8004614:	00af00fd 	.word	0x00af00fd
 8004618:	f1b8 0f00 	cmp.w	r8, #0
 800461c:	f43f af17 	beq.w	800444e <InfraredPD_Update+0xd6>
 8004620:	ee07 6a90 	vmov	s15, r6
 8004624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004628:	f1b8 0f02 	cmp.w	r8, #2
 800462c:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8004630:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8004634:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004638:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800463c:	ee17 3a10 	vmov	r3, s14
 8004640:	802b      	strh	r3, [r5, #0]
 8004642:	ee17 3a90 	vmov	r3, s15
 8004646:	806b      	strh	r3, [r5, #2]
 8004648:	f43f af1a 	beq.w	8004480 <InfraredPD_Update+0x108>
 800464c:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
 8004650:	f1b8 0f01 	cmp.w	r8, #1
 8004654:	f000 8080 	beq.w	8004758 <InfraredPD_Update+0x3e0>
 8004658:	796b      	ldrb	r3, [r5, #5]
 800465a:	712f      	strb	r7, [r5, #4]
 800465c:	2b01      	cmp	r3, #1
 800465e:	f47f af12 	bne.w	8004486 <InfraredPD_Update+0x10e>
 8004662:	e712      	b.n	800448a <InfraredPD_Update+0x112>
 8004664:	20000078 	.word	0x20000078
 8004668:	46f05e00 	.word	0x46f05e00
 800466c:	3c23d70a 	.word	0x3c23d70a
 8004670:	43889333 	.word	0x43889333
 8004674:	00000000 	.word	0x00000000
 8004678:	7fc00000 	.word	0x7fc00000
 800467c:	2200      	movs	r2, #0
 800467e:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
 8004682:	f1bc 0f00 	cmp.w	ip, #0
 8004686:	d169      	bne.n	800475c <InfraredPD_Update+0x3e4>
 8004688:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800468a:	65a2      	str	r2, [r4, #88]	; 0x58
 800468c:	b1d3      	cbz	r3, 80046c4 <InfraredPD_Update+0x34c>
 800468e:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 8004674 <InfraredPD_Update+0x2fc>
 8004692:	2200      	movs	r2, #0
 8004694:	3201      	adds	r2, #1
 8004696:	ecb1 7a01 	vldmia	r1!, {s14}
 800469a:	b290      	uxth	r0, r2
 800469c:	4283      	cmp	r3, r0
 800469e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80046a2:	d8f7      	bhi.n	8004694 <InfraredPD_Update+0x31c>
 80046a4:	ee07 3a10 	vmov	s14, r3
 80046a8:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80046ac:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80046b0:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 80046b4:	f1bc 0f00 	cmp.w	ip, #0
 80046b8:	d00a      	beq.n	80046d0 <InfraredPD_Update+0x358>
 80046ba:	f04f 0c00 	mov.w	ip, #0
 80046be:	f884 c04c 	strb.w	ip, [r4, #76]	; 0x4c
 80046c2:	e75f      	b.n	8004584 <InfraredPD_Update+0x20c>
 80046c4:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 8004678 <InfraredPD_Update+0x300>
 80046c8:	eeb0 7a67 	vmov.f32	s14, s15
 80046cc:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
 80046d0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	f040 80c8 	bne.w	800486a <InfraredPD_Update+0x4f2>
 80046da:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 80046de:	b17a      	cbz	r2, 8004700 <InfraredPD_Update+0x388>
 80046e0:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 80046e4:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 80046e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ec:	eef1 6a66 	vneg.f32	s13, s13
 80046f0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80046f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046f8:	f340 8115 	ble.w	8004926 <InfraredPD_Update+0x5ae>
 80046fc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8004700:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8004704:	2b00      	cmp	r3, #0
 8004706:	f47f af3d 	bne.w	8004584 <InfraredPD_Update+0x20c>
 800470a:	edd4 6a16 	vldr	s13, [r4, #88]	; 0x58
 800470e:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 8004712:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800471a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471e:	f340 8127 	ble.w	8004970 <InfraredPD_Update+0x5f8>
 8004722:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8004726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800472a:	2301      	movs	r3, #1
 800472c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8004730:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 8004734:	e726      	b.n	8004584 <InfraredPD_Update+0x20c>
 8004736:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 800473a:	eef0 6ac8 	vabs.f32	s13, s16
 800473e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004746:	f77f af59 	ble.w	80045fc <InfraredPD_Update+0x284>
 800474a:	2701      	movs	r7, #1
 800474c:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 8004750:	e754      	b.n	80045fc <InfraredPD_Update+0x284>
 8004752:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8004756:	e707      	b.n	8004568 <InfraredPD_Update+0x1f0>
 8004758:	712f      	strb	r7, [r5, #4]
 800475a:	e696      	b.n	800448a <InfraredPD_Update+0x112>
 800475c:	2b00      	cmp	r3, #0
 800475e:	d196      	bne.n	800468e <InfraredPD_Update+0x316>
 8004760:	4ba5      	ldr	r3, [pc, #660]	; (80049f8 <InfraredPD_Update+0x680>)
 8004762:	6563      	str	r3, [r4, #84]	; 0x54
 8004764:	e7a9      	b.n	80046ba <InfraredPD_Update+0x342>
 8004766:	2300      	movs	r3, #0
 8004768:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 800476c:	e746      	b.n	80045fc <InfraredPD_Update+0x284>
 800476e:	f8b4 90a4 	ldrh.w	r9, [r4, #164]	; 0xa4
 8004772:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
 8004776:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 800477a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800477e:	f109 0901 	add.w	r9, r9, #1
 8004782:	fa1f f989 	uxth.w	r9, r9
 8004786:	ee17 0a90 	vmov	r0, s15
 800478a:	f8a4 90a4 	strh.w	r9, [r4, #164]	; 0xa4
 800478e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8004792:	f7fc f80b 	bl	80007ac <__aeabi_f2d>
 8004796:	4682      	mov	sl, r0
 8004798:	9801      	ldr	r0, [sp, #4]
 800479a:	468b      	mov	fp, r1
 800479c:	f7fc f806 	bl	80007ac <__aeabi_f2d>
 80047a0:	a393      	add	r3, pc, #588	; (adr r3, 80049f0 <InfraredPD_Update+0x678>)
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	f7fb fd73 	bl	8000290 <__aeabi_dmul>
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	4650      	mov	r0, sl
 80047b0:	4659      	mov	r1, fp
 80047b2:	f7fc f8b3 	bl	800091c <__aeabi_dcmplt>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	f47f ae44 	bne.w	8004444 <InfraredPD_Update+0xcc>
 80047bc:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 80047c0:	454b      	cmp	r3, r9
 80047c2:	f43f ae3f 	beq.w	8004444 <InfraredPD_Update+0xcc>
 80047c6:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 80047ca:	ed9d 7a01 	vldr	s14, [sp, #4]
 80047ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d6:	d505      	bpl.n	80047e4 <InfraredPD_Update+0x46c>
 80047d8:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
 80047dc:	f04f 0801 	mov.w	r8, #1
 80047e0:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 80047e4:	ee07 6a90 	vmov	s15, r6
 80047e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ec:	eec8 6aa7 	vdiv.f32	s13, s17, s15
 80047f0:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80047f4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80047f8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80047fc:	ee16 3a90 	vmov	r3, s13
 8004800:	802b      	strh	r3, [r5, #0]
 8004802:	ee17 3a10 	vmov	r3, s14
 8004806:	806b      	strh	r3, [r5, #2]
 8004808:	e720      	b.n	800464c <InfraredPD_Update+0x2d4>
 800480a:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 800480e:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8004812:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481a:	f57f ae00 	bpl.w	800441e <InfraredPD_Update+0xa6>
 800481e:	2300      	movs	r3, #0
 8004820:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8004824:	f8c4 30a2 	str.w	r3, [r4, #162]	; 0xa2
 8004828:	e611      	b.n	800444e <InfraredPD_Update+0xd6>
 800482a:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 800482e:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8004832:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800483a:	d57b      	bpl.n	8004934 <InfraredPD_Update+0x5bc>
 800483c:	2300      	movs	r3, #0
 800483e:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8004842:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8004846:	e602      	b.n	800444e <InfraredPD_Update+0xd6>
 8004848:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 800484c:	ee78 6ae7 	vsub.f32	s13, s17, s15
 8004850:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004854:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004858:	f340 8081 	ble.w	800495e <InfraredPD_Update+0x5e6>
 800485c:	f04f 0803 	mov.w	r8, #3
 8004860:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 8004864:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
 8004868:	e7bc      	b.n	80047e4 <InfraredPD_Update+0x46c>
 800486a:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 800486e:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 8004872:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004876:	eef4 7ae6 	vcmpe.f32	s15, s13
 800487a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487e:	d552      	bpl.n	8004926 <InfraredPD_Update+0x5ae>
 8004880:	2300      	movs	r3, #0
 8004882:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8004886:	e73b      	b.n	8004700 <InfraredPD_Update+0x388>
 8004888:	2700      	movs	r7, #0
 800488a:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 800488e:	f8a4 708e 	strh.w	r7, [r4, #142]	; 0x8e
 8004892:	e6b3      	b.n	80045fc <InfraredPD_Update+0x284>
 8004894:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 8004898:	e622      	b.n	80044e0 <InfraredPD_Update+0x168>
 800489a:	eddf 5a58 	vldr	s11, [pc, #352]	; 80049fc <InfraredPD_Update+0x684>
 800489e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004a00 <InfraredPD_Update+0x688>
 80048a2:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 80048a6:	ed94 5a0e 	vldr	s10, [r4, #56]	; 0x38
 80048aa:	eee7 6a25 	vfma.f32	s13, s14, s11
 80048ae:	eeb0 7a46 	vmov.f32	s14, s12
 80048b2:	ee66 5aa6 	vmul.f32	s11, s13, s13
 80048b6:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
 80048ba:	ee95 7aa5 	vfnms.f32	s14, s11, s11
 80048be:	eee5 7a07 	vfma.f32	s15, s10, s14
 80048c2:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 80048c6:	e5a4      	b.n	8004412 <InfraredPD_Update+0x9a>
 80048c8:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80048cc:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 80048d0:	e64c      	b.n	800456c <InfraredPD_Update+0x1f4>
 80048d2:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 80048d6:	edd4 6a05 	vldr	s13, [r4, #20]
 80048da:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80049fc <InfraredPD_Update+0x684>
 80048de:	ee37 7a65 	vsub.f32	s14, s14, s11
 80048e2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80048e6:	eee7 7a26 	vfma.f32	s15, s14, s13
 80048ea:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 80048ee:	e590      	b.n	8004412 <InfraredPD_Update+0x9a>
 80048f0:	1e4f      	subs	r7, r1, #1
 80048f2:	4662      	mov	r2, ip
 80048f4:	fa1f fc87 	uxth.w	ip, r7
 80048f8:	2700      	movs	r7, #0
 80048fa:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 80048fe:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8004a04 <InfraredPD_Update+0x68c>
 8004902:	1d17      	adds	r7, r2, #4
 8004904:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8004908:	ecf2 7a01 	vldmia	r2!, {s15}
 800490c:	4297      	cmp	r7, r2
 800490e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004912:	d1f9      	bne.n	8004908 <InfraredPD_Update+0x590>
 8004914:	ee07 1a90 	vmov	s15, r1
 8004918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004920:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8004924:	e622      	b.n	800456c <InfraredPD_Update+0x1f4>
 8004926:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
 800492a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800492e:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 8004932:	e6e5      	b.n	8004700 <InfraredPD_Update+0x388>
 8004934:	bba7      	cbnz	r7, 80049a0 <InfraredPD_Update+0x628>
 8004936:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 800493a:	b38b      	cbz	r3, 80049a0 <InfraredPD_Update+0x628>
 800493c:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8004940:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
 8004944:	3301      	adds	r3, #1
 8004946:	b29b      	uxth	r3, r3
 8004948:	429a      	cmp	r2, r3
 800494a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 800494e:	f47f af49 	bne.w	80047e4 <InfraredPD_Update+0x46c>
 8004952:	2302      	movs	r3, #2
 8004954:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8004958:	f8a4 70a0 	strh.w	r7, [r4, #160]	; 0xa0
 800495c:	e57e      	b.n	800445c <InfraredPD_Update+0xe4>
 800495e:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8004962:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496a:	f57f ad70 	bpl.w	800444e <InfraredPD_Update+0xd6>
 800496e:	e735      	b.n	80047dc <InfraredPD_Update+0x464>
 8004970:	eef1 7a67 	vneg.f32	s15, s15
 8004974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800497c:	f57f ae02 	bpl.w	8004584 <InfraredPD_Update+0x20c>
 8004980:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8004984:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498c:	f77f adfa 	ble.w	8004584 <InfraredPD_Update+0x20c>
 8004990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004994:	2301      	movs	r3, #1
 8004996:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800499a:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 800499e:	e5f1      	b.n	8004584 <InfraredPD_Update+0x20c>
 80049a0:	2300      	movs	r3, #0
 80049a2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 80049a6:	e71d      	b.n	80047e4 <InfraredPD_Update+0x46c>
 80049a8:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 80049ac:	f8b4 109a 	ldrh.w	r1, [r4, #154]	; 0x9a
 80049b0:	3301      	adds	r3, #1
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	2200      	movs	r2, #0
 80049b6:	4299      	cmp	r1, r3
 80049b8:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
 80049bc:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80049c0:	f47f ad4c 	bne.w	800445c <InfraredPD_Update+0xe4>
 80049c4:	f884 70a6 	strb.w	r7, [r4, #166]	; 0xa6
 80049c8:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
 80049cc:	46b8      	mov	r8, r7
 80049ce:	e709      	b.n	80047e4 <InfraredPD_Update+0x46c>
 80049d0:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80049d4:	e542      	b.n	800445c <InfraredPD_Update+0xe4>
 80049d6:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 80049da:	6a07      	ldr	r7, [r0, #32]
 80049dc:	3301      	adds	r3, #1
 80049de:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80049e2:	fa12 f283 	uxtah	r2, r2, r3
 80049e6:	3701      	adds	r7, #1
 80049e8:	6207      	str	r7, [r0, #32]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	0090      	lsls	r0, r2, #2
 80049ee:	e4f8      	b.n	80043e2 <InfraredPD_Update+0x6a>
 80049f0:	cccccccd 	.word	0xcccccccd
 80049f4:	3feccccc 	.word	0x3feccccc
 80049f8:	7fc00000 	.word	0x7fc00000
 80049fc:	3c23d70a 	.word	0x3c23d70a
 8004a00:	43889333 	.word	0x43889333
 8004a04:	00000000 	.word	0x00000000

08004a08 <malloc>:
 8004a08:	4b02      	ldr	r3, [pc, #8]	; (8004a14 <malloc+0xc>)
 8004a0a:	4601      	mov	r1, r0
 8004a0c:	6818      	ldr	r0, [r3, #0]
 8004a0e:	f000 b82b 	b.w	8004a68 <_malloc_r>
 8004a12:	bf00      	nop
 8004a14:	20000058 	.word	0x20000058

08004a18 <free>:
 8004a18:	4b02      	ldr	r3, [pc, #8]	; (8004a24 <free+0xc>)
 8004a1a:	4601      	mov	r1, r0
 8004a1c:	6818      	ldr	r0, [r3, #0]
 8004a1e:	f000 b913 	b.w	8004c48 <_free_r>
 8004a22:	bf00      	nop
 8004a24:	20000058 	.word	0x20000058

08004a28 <sbrk_aligned>:
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	4e0e      	ldr	r6, [pc, #56]	; (8004a64 <sbrk_aligned+0x3c>)
 8004a2c:	460c      	mov	r4, r1
 8004a2e:	6831      	ldr	r1, [r6, #0]
 8004a30:	4605      	mov	r5, r0
 8004a32:	b911      	cbnz	r1, 8004a3a <sbrk_aligned+0x12>
 8004a34:	f000 f8cc 	bl	8004bd0 <_sbrk_r>
 8004a38:	6030      	str	r0, [r6, #0]
 8004a3a:	4621      	mov	r1, r4
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	f000 f8c7 	bl	8004bd0 <_sbrk_r>
 8004a42:	1c43      	adds	r3, r0, #1
 8004a44:	d00a      	beq.n	8004a5c <sbrk_aligned+0x34>
 8004a46:	1cc4      	adds	r4, r0, #3
 8004a48:	f024 0403 	bic.w	r4, r4, #3
 8004a4c:	42a0      	cmp	r0, r4
 8004a4e:	d007      	beq.n	8004a60 <sbrk_aligned+0x38>
 8004a50:	1a21      	subs	r1, r4, r0
 8004a52:	4628      	mov	r0, r5
 8004a54:	f000 f8bc 	bl	8004bd0 <_sbrk_r>
 8004a58:	3001      	adds	r0, #1
 8004a5a:	d101      	bne.n	8004a60 <sbrk_aligned+0x38>
 8004a5c:	f04f 34ff 	mov.w	r4, #4294967295
 8004a60:	4620      	mov	r0, r4
 8004a62:	bd70      	pop	{r4, r5, r6, pc}
 8004a64:	200001c8 	.word	0x200001c8

08004a68 <_malloc_r>:
 8004a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a6c:	1ccd      	adds	r5, r1, #3
 8004a6e:	f025 0503 	bic.w	r5, r5, #3
 8004a72:	3508      	adds	r5, #8
 8004a74:	2d0c      	cmp	r5, #12
 8004a76:	bf38      	it	cc
 8004a78:	250c      	movcc	r5, #12
 8004a7a:	2d00      	cmp	r5, #0
 8004a7c:	4607      	mov	r7, r0
 8004a7e:	db01      	blt.n	8004a84 <_malloc_r+0x1c>
 8004a80:	42a9      	cmp	r1, r5
 8004a82:	d905      	bls.n	8004a90 <_malloc_r+0x28>
 8004a84:	230c      	movs	r3, #12
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	2600      	movs	r6, #0
 8004a8a:	4630      	mov	r0, r6
 8004a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b64 <_malloc_r+0xfc>
 8004a94:	f000 f868 	bl	8004b68 <__malloc_lock>
 8004a98:	f8d8 3000 	ldr.w	r3, [r8]
 8004a9c:	461c      	mov	r4, r3
 8004a9e:	bb5c      	cbnz	r4, 8004af8 <_malloc_r+0x90>
 8004aa0:	4629      	mov	r1, r5
 8004aa2:	4638      	mov	r0, r7
 8004aa4:	f7ff ffc0 	bl	8004a28 <sbrk_aligned>
 8004aa8:	1c43      	adds	r3, r0, #1
 8004aaa:	4604      	mov	r4, r0
 8004aac:	d155      	bne.n	8004b5a <_malloc_r+0xf2>
 8004aae:	f8d8 4000 	ldr.w	r4, [r8]
 8004ab2:	4626      	mov	r6, r4
 8004ab4:	2e00      	cmp	r6, #0
 8004ab6:	d145      	bne.n	8004b44 <_malloc_r+0xdc>
 8004ab8:	2c00      	cmp	r4, #0
 8004aba:	d048      	beq.n	8004b4e <_malloc_r+0xe6>
 8004abc:	6823      	ldr	r3, [r4, #0]
 8004abe:	4631      	mov	r1, r6
 8004ac0:	4638      	mov	r0, r7
 8004ac2:	eb04 0903 	add.w	r9, r4, r3
 8004ac6:	f000 f883 	bl	8004bd0 <_sbrk_r>
 8004aca:	4581      	cmp	r9, r0
 8004acc:	d13f      	bne.n	8004b4e <_malloc_r+0xe6>
 8004ace:	6821      	ldr	r1, [r4, #0]
 8004ad0:	1a6d      	subs	r5, r5, r1
 8004ad2:	4629      	mov	r1, r5
 8004ad4:	4638      	mov	r0, r7
 8004ad6:	f7ff ffa7 	bl	8004a28 <sbrk_aligned>
 8004ada:	3001      	adds	r0, #1
 8004adc:	d037      	beq.n	8004b4e <_malloc_r+0xe6>
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	442b      	add	r3, r5
 8004ae2:	6023      	str	r3, [r4, #0]
 8004ae4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d038      	beq.n	8004b5e <_malloc_r+0xf6>
 8004aec:	685a      	ldr	r2, [r3, #4]
 8004aee:	42a2      	cmp	r2, r4
 8004af0:	d12b      	bne.n	8004b4a <_malloc_r+0xe2>
 8004af2:	2200      	movs	r2, #0
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	e00f      	b.n	8004b18 <_malloc_r+0xb0>
 8004af8:	6822      	ldr	r2, [r4, #0]
 8004afa:	1b52      	subs	r2, r2, r5
 8004afc:	d41f      	bmi.n	8004b3e <_malloc_r+0xd6>
 8004afe:	2a0b      	cmp	r2, #11
 8004b00:	d917      	bls.n	8004b32 <_malloc_r+0xca>
 8004b02:	1961      	adds	r1, r4, r5
 8004b04:	42a3      	cmp	r3, r4
 8004b06:	6025      	str	r5, [r4, #0]
 8004b08:	bf18      	it	ne
 8004b0a:	6059      	strne	r1, [r3, #4]
 8004b0c:	6863      	ldr	r3, [r4, #4]
 8004b0e:	bf08      	it	eq
 8004b10:	f8c8 1000 	streq.w	r1, [r8]
 8004b14:	5162      	str	r2, [r4, r5]
 8004b16:	604b      	str	r3, [r1, #4]
 8004b18:	4638      	mov	r0, r7
 8004b1a:	f104 060b 	add.w	r6, r4, #11
 8004b1e:	f000 f829 	bl	8004b74 <__malloc_unlock>
 8004b22:	f026 0607 	bic.w	r6, r6, #7
 8004b26:	1d23      	adds	r3, r4, #4
 8004b28:	1af2      	subs	r2, r6, r3
 8004b2a:	d0ae      	beq.n	8004a8a <_malloc_r+0x22>
 8004b2c:	1b9b      	subs	r3, r3, r6
 8004b2e:	50a3      	str	r3, [r4, r2]
 8004b30:	e7ab      	b.n	8004a8a <_malloc_r+0x22>
 8004b32:	42a3      	cmp	r3, r4
 8004b34:	6862      	ldr	r2, [r4, #4]
 8004b36:	d1dd      	bne.n	8004af4 <_malloc_r+0x8c>
 8004b38:	f8c8 2000 	str.w	r2, [r8]
 8004b3c:	e7ec      	b.n	8004b18 <_malloc_r+0xb0>
 8004b3e:	4623      	mov	r3, r4
 8004b40:	6864      	ldr	r4, [r4, #4]
 8004b42:	e7ac      	b.n	8004a9e <_malloc_r+0x36>
 8004b44:	4634      	mov	r4, r6
 8004b46:	6876      	ldr	r6, [r6, #4]
 8004b48:	e7b4      	b.n	8004ab4 <_malloc_r+0x4c>
 8004b4a:	4613      	mov	r3, r2
 8004b4c:	e7cc      	b.n	8004ae8 <_malloc_r+0x80>
 8004b4e:	230c      	movs	r3, #12
 8004b50:	603b      	str	r3, [r7, #0]
 8004b52:	4638      	mov	r0, r7
 8004b54:	f000 f80e 	bl	8004b74 <__malloc_unlock>
 8004b58:	e797      	b.n	8004a8a <_malloc_r+0x22>
 8004b5a:	6025      	str	r5, [r4, #0]
 8004b5c:	e7dc      	b.n	8004b18 <_malloc_r+0xb0>
 8004b5e:	605b      	str	r3, [r3, #4]
 8004b60:	deff      	udf	#255	; 0xff
 8004b62:	bf00      	nop
 8004b64:	200001c4 	.word	0x200001c4

08004b68 <__malloc_lock>:
 8004b68:	4801      	ldr	r0, [pc, #4]	; (8004b70 <__malloc_lock+0x8>)
 8004b6a:	f000 b86b 	b.w	8004c44 <__retarget_lock_acquire_recursive>
 8004b6e:	bf00      	nop
 8004b70:	20000308 	.word	0x20000308

08004b74 <__malloc_unlock>:
 8004b74:	4801      	ldr	r0, [pc, #4]	; (8004b7c <__malloc_unlock+0x8>)
 8004b76:	f000 b866 	b.w	8004c46 <__retarget_lock_release_recursive>
 8004b7a:	bf00      	nop
 8004b7c:	20000308 	.word	0x20000308

08004b80 <siprintf>:
 8004b80:	b40e      	push	{r1, r2, r3}
 8004b82:	b500      	push	{lr}
 8004b84:	b09c      	sub	sp, #112	; 0x70
 8004b86:	ab1d      	add	r3, sp, #116	; 0x74
 8004b88:	9002      	str	r0, [sp, #8]
 8004b8a:	9006      	str	r0, [sp, #24]
 8004b8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b90:	4809      	ldr	r0, [pc, #36]	; (8004bb8 <siprintf+0x38>)
 8004b92:	9107      	str	r1, [sp, #28]
 8004b94:	9104      	str	r1, [sp, #16]
 8004b96:	4909      	ldr	r1, [pc, #36]	; (8004bbc <siprintf+0x3c>)
 8004b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b9c:	9105      	str	r1, [sp, #20]
 8004b9e:	6800      	ldr	r0, [r0, #0]
 8004ba0:	9301      	str	r3, [sp, #4]
 8004ba2:	a902      	add	r1, sp, #8
 8004ba4:	f000 f8f6 	bl	8004d94 <_svfiprintf_r>
 8004ba8:	9b02      	ldr	r3, [sp, #8]
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	b01c      	add	sp, #112	; 0x70
 8004bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bb4:	b003      	add	sp, #12
 8004bb6:	4770      	bx	lr
 8004bb8:	20000058 	.word	0x20000058
 8004bbc:	ffff0208 	.word	0xffff0208

08004bc0 <memset>:
 8004bc0:	4402      	add	r2, r0
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d100      	bne.n	8004bca <memset+0xa>
 8004bc8:	4770      	bx	lr
 8004bca:	f803 1b01 	strb.w	r1, [r3], #1
 8004bce:	e7f9      	b.n	8004bc4 <memset+0x4>

08004bd0 <_sbrk_r>:
 8004bd0:	b538      	push	{r3, r4, r5, lr}
 8004bd2:	4d06      	ldr	r5, [pc, #24]	; (8004bec <_sbrk_r+0x1c>)
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	4608      	mov	r0, r1
 8004bda:	602b      	str	r3, [r5, #0]
 8004bdc:	f7fc fc3e 	bl	800145c <_sbrk>
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	d102      	bne.n	8004bea <_sbrk_r+0x1a>
 8004be4:	682b      	ldr	r3, [r5, #0]
 8004be6:	b103      	cbz	r3, 8004bea <_sbrk_r+0x1a>
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	bd38      	pop	{r3, r4, r5, pc}
 8004bec:	20000304 	.word	0x20000304

08004bf0 <__errno>:
 8004bf0:	4b01      	ldr	r3, [pc, #4]	; (8004bf8 <__errno+0x8>)
 8004bf2:	6818      	ldr	r0, [r3, #0]
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	20000058 	.word	0x20000058

08004bfc <__libc_init_array>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	4d0d      	ldr	r5, [pc, #52]	; (8004c34 <__libc_init_array+0x38>)
 8004c00:	4c0d      	ldr	r4, [pc, #52]	; (8004c38 <__libc_init_array+0x3c>)
 8004c02:	1b64      	subs	r4, r4, r5
 8004c04:	10a4      	asrs	r4, r4, #2
 8004c06:	2600      	movs	r6, #0
 8004c08:	42a6      	cmp	r6, r4
 8004c0a:	d109      	bne.n	8004c20 <__libc_init_array+0x24>
 8004c0c:	4d0b      	ldr	r5, [pc, #44]	; (8004c3c <__libc_init_array+0x40>)
 8004c0e:	4c0c      	ldr	r4, [pc, #48]	; (8004c40 <__libc_init_array+0x44>)
 8004c10:	f000 fd24 	bl	800565c <_init>
 8004c14:	1b64      	subs	r4, r4, r5
 8004c16:	10a4      	asrs	r4, r4, #2
 8004c18:	2600      	movs	r6, #0
 8004c1a:	42a6      	cmp	r6, r4
 8004c1c:	d105      	bne.n	8004c2a <__libc_init_array+0x2e>
 8004c1e:	bd70      	pop	{r4, r5, r6, pc}
 8004c20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c24:	4798      	blx	r3
 8004c26:	3601      	adds	r6, #1
 8004c28:	e7ee      	b.n	8004c08 <__libc_init_array+0xc>
 8004c2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c2e:	4798      	blx	r3
 8004c30:	3601      	adds	r6, #1
 8004c32:	e7f2      	b.n	8004c1a <__libc_init_array+0x1e>
 8004c34:	08005770 	.word	0x08005770
 8004c38:	08005770 	.word	0x08005770
 8004c3c:	08005770 	.word	0x08005770
 8004c40:	08005774 	.word	0x08005774

08004c44 <__retarget_lock_acquire_recursive>:
 8004c44:	4770      	bx	lr

08004c46 <__retarget_lock_release_recursive>:
 8004c46:	4770      	bx	lr

08004c48 <_free_r>:
 8004c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c4a:	2900      	cmp	r1, #0
 8004c4c:	d044      	beq.n	8004cd8 <_free_r+0x90>
 8004c4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c52:	9001      	str	r0, [sp, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f1a1 0404 	sub.w	r4, r1, #4
 8004c5a:	bfb8      	it	lt
 8004c5c:	18e4      	addlt	r4, r4, r3
 8004c5e:	f7ff ff83 	bl	8004b68 <__malloc_lock>
 8004c62:	4a1e      	ldr	r2, [pc, #120]	; (8004cdc <_free_r+0x94>)
 8004c64:	9801      	ldr	r0, [sp, #4]
 8004c66:	6813      	ldr	r3, [r2, #0]
 8004c68:	b933      	cbnz	r3, 8004c78 <_free_r+0x30>
 8004c6a:	6063      	str	r3, [r4, #4]
 8004c6c:	6014      	str	r4, [r2, #0]
 8004c6e:	b003      	add	sp, #12
 8004c70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c74:	f7ff bf7e 	b.w	8004b74 <__malloc_unlock>
 8004c78:	42a3      	cmp	r3, r4
 8004c7a:	d908      	bls.n	8004c8e <_free_r+0x46>
 8004c7c:	6825      	ldr	r5, [r4, #0]
 8004c7e:	1961      	adds	r1, r4, r5
 8004c80:	428b      	cmp	r3, r1
 8004c82:	bf01      	itttt	eq
 8004c84:	6819      	ldreq	r1, [r3, #0]
 8004c86:	685b      	ldreq	r3, [r3, #4]
 8004c88:	1949      	addeq	r1, r1, r5
 8004c8a:	6021      	streq	r1, [r4, #0]
 8004c8c:	e7ed      	b.n	8004c6a <_free_r+0x22>
 8004c8e:	461a      	mov	r2, r3
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	b10b      	cbz	r3, 8004c98 <_free_r+0x50>
 8004c94:	42a3      	cmp	r3, r4
 8004c96:	d9fa      	bls.n	8004c8e <_free_r+0x46>
 8004c98:	6811      	ldr	r1, [r2, #0]
 8004c9a:	1855      	adds	r5, r2, r1
 8004c9c:	42a5      	cmp	r5, r4
 8004c9e:	d10b      	bne.n	8004cb8 <_free_r+0x70>
 8004ca0:	6824      	ldr	r4, [r4, #0]
 8004ca2:	4421      	add	r1, r4
 8004ca4:	1854      	adds	r4, r2, r1
 8004ca6:	42a3      	cmp	r3, r4
 8004ca8:	6011      	str	r1, [r2, #0]
 8004caa:	d1e0      	bne.n	8004c6e <_free_r+0x26>
 8004cac:	681c      	ldr	r4, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	6053      	str	r3, [r2, #4]
 8004cb2:	440c      	add	r4, r1
 8004cb4:	6014      	str	r4, [r2, #0]
 8004cb6:	e7da      	b.n	8004c6e <_free_r+0x26>
 8004cb8:	d902      	bls.n	8004cc0 <_free_r+0x78>
 8004cba:	230c      	movs	r3, #12
 8004cbc:	6003      	str	r3, [r0, #0]
 8004cbe:	e7d6      	b.n	8004c6e <_free_r+0x26>
 8004cc0:	6825      	ldr	r5, [r4, #0]
 8004cc2:	1961      	adds	r1, r4, r5
 8004cc4:	428b      	cmp	r3, r1
 8004cc6:	bf04      	itt	eq
 8004cc8:	6819      	ldreq	r1, [r3, #0]
 8004cca:	685b      	ldreq	r3, [r3, #4]
 8004ccc:	6063      	str	r3, [r4, #4]
 8004cce:	bf04      	itt	eq
 8004cd0:	1949      	addeq	r1, r1, r5
 8004cd2:	6021      	streq	r1, [r4, #0]
 8004cd4:	6054      	str	r4, [r2, #4]
 8004cd6:	e7ca      	b.n	8004c6e <_free_r+0x26>
 8004cd8:	b003      	add	sp, #12
 8004cda:	bd30      	pop	{r4, r5, pc}
 8004cdc:	200001c4 	.word	0x200001c4

08004ce0 <__ssputs_r>:
 8004ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ce4:	688e      	ldr	r6, [r1, #8]
 8004ce6:	461f      	mov	r7, r3
 8004ce8:	42be      	cmp	r6, r7
 8004cea:	680b      	ldr	r3, [r1, #0]
 8004cec:	4682      	mov	sl, r0
 8004cee:	460c      	mov	r4, r1
 8004cf0:	4690      	mov	r8, r2
 8004cf2:	d82c      	bhi.n	8004d4e <__ssputs_r+0x6e>
 8004cf4:	898a      	ldrh	r2, [r1, #12]
 8004cf6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cfa:	d026      	beq.n	8004d4a <__ssputs_r+0x6a>
 8004cfc:	6965      	ldr	r5, [r4, #20]
 8004cfe:	6909      	ldr	r1, [r1, #16]
 8004d00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d04:	eba3 0901 	sub.w	r9, r3, r1
 8004d08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d0c:	1c7b      	adds	r3, r7, #1
 8004d0e:	444b      	add	r3, r9
 8004d10:	106d      	asrs	r5, r5, #1
 8004d12:	429d      	cmp	r5, r3
 8004d14:	bf38      	it	cc
 8004d16:	461d      	movcc	r5, r3
 8004d18:	0553      	lsls	r3, r2, #21
 8004d1a:	d527      	bpl.n	8004d6c <__ssputs_r+0x8c>
 8004d1c:	4629      	mov	r1, r5
 8004d1e:	f7ff fea3 	bl	8004a68 <_malloc_r>
 8004d22:	4606      	mov	r6, r0
 8004d24:	b360      	cbz	r0, 8004d80 <__ssputs_r+0xa0>
 8004d26:	6921      	ldr	r1, [r4, #16]
 8004d28:	464a      	mov	r2, r9
 8004d2a:	f000 fadb 	bl	80052e4 <memcpy>
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d38:	81a3      	strh	r3, [r4, #12]
 8004d3a:	6126      	str	r6, [r4, #16]
 8004d3c:	6165      	str	r5, [r4, #20]
 8004d3e:	444e      	add	r6, r9
 8004d40:	eba5 0509 	sub.w	r5, r5, r9
 8004d44:	6026      	str	r6, [r4, #0]
 8004d46:	60a5      	str	r5, [r4, #8]
 8004d48:	463e      	mov	r6, r7
 8004d4a:	42be      	cmp	r6, r7
 8004d4c:	d900      	bls.n	8004d50 <__ssputs_r+0x70>
 8004d4e:	463e      	mov	r6, r7
 8004d50:	6820      	ldr	r0, [r4, #0]
 8004d52:	4632      	mov	r2, r6
 8004d54:	4641      	mov	r1, r8
 8004d56:	f000 faab 	bl	80052b0 <memmove>
 8004d5a:	68a3      	ldr	r3, [r4, #8]
 8004d5c:	1b9b      	subs	r3, r3, r6
 8004d5e:	60a3      	str	r3, [r4, #8]
 8004d60:	6823      	ldr	r3, [r4, #0]
 8004d62:	4433      	add	r3, r6
 8004d64:	6023      	str	r3, [r4, #0]
 8004d66:	2000      	movs	r0, #0
 8004d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d6c:	462a      	mov	r2, r5
 8004d6e:	f000 fac7 	bl	8005300 <_realloc_r>
 8004d72:	4606      	mov	r6, r0
 8004d74:	2800      	cmp	r0, #0
 8004d76:	d1e0      	bne.n	8004d3a <__ssputs_r+0x5a>
 8004d78:	6921      	ldr	r1, [r4, #16]
 8004d7a:	4650      	mov	r0, sl
 8004d7c:	f7ff ff64 	bl	8004c48 <_free_r>
 8004d80:	230c      	movs	r3, #12
 8004d82:	f8ca 3000 	str.w	r3, [sl]
 8004d86:	89a3      	ldrh	r3, [r4, #12]
 8004d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d8c:	81a3      	strh	r3, [r4, #12]
 8004d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d92:	e7e9      	b.n	8004d68 <__ssputs_r+0x88>

08004d94 <_svfiprintf_r>:
 8004d94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d98:	4698      	mov	r8, r3
 8004d9a:	898b      	ldrh	r3, [r1, #12]
 8004d9c:	061b      	lsls	r3, r3, #24
 8004d9e:	b09d      	sub	sp, #116	; 0x74
 8004da0:	4607      	mov	r7, r0
 8004da2:	460d      	mov	r5, r1
 8004da4:	4614      	mov	r4, r2
 8004da6:	d50e      	bpl.n	8004dc6 <_svfiprintf_r+0x32>
 8004da8:	690b      	ldr	r3, [r1, #16]
 8004daa:	b963      	cbnz	r3, 8004dc6 <_svfiprintf_r+0x32>
 8004dac:	2140      	movs	r1, #64	; 0x40
 8004dae:	f7ff fe5b 	bl	8004a68 <_malloc_r>
 8004db2:	6028      	str	r0, [r5, #0]
 8004db4:	6128      	str	r0, [r5, #16]
 8004db6:	b920      	cbnz	r0, 8004dc2 <_svfiprintf_r+0x2e>
 8004db8:	230c      	movs	r3, #12
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dc0:	e0d0      	b.n	8004f64 <_svfiprintf_r+0x1d0>
 8004dc2:	2340      	movs	r3, #64	; 0x40
 8004dc4:	616b      	str	r3, [r5, #20]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	9309      	str	r3, [sp, #36]	; 0x24
 8004dca:	2320      	movs	r3, #32
 8004dcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004dd4:	2330      	movs	r3, #48	; 0x30
 8004dd6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004f7c <_svfiprintf_r+0x1e8>
 8004dda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dde:	f04f 0901 	mov.w	r9, #1
 8004de2:	4623      	mov	r3, r4
 8004de4:	469a      	mov	sl, r3
 8004de6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004dea:	b10a      	cbz	r2, 8004df0 <_svfiprintf_r+0x5c>
 8004dec:	2a25      	cmp	r2, #37	; 0x25
 8004dee:	d1f9      	bne.n	8004de4 <_svfiprintf_r+0x50>
 8004df0:	ebba 0b04 	subs.w	fp, sl, r4
 8004df4:	d00b      	beq.n	8004e0e <_svfiprintf_r+0x7a>
 8004df6:	465b      	mov	r3, fp
 8004df8:	4622      	mov	r2, r4
 8004dfa:	4629      	mov	r1, r5
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	f7ff ff6f 	bl	8004ce0 <__ssputs_r>
 8004e02:	3001      	adds	r0, #1
 8004e04:	f000 80a9 	beq.w	8004f5a <_svfiprintf_r+0x1c6>
 8004e08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e0a:	445a      	add	r2, fp
 8004e0c:	9209      	str	r2, [sp, #36]	; 0x24
 8004e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80a1 	beq.w	8004f5a <_svfiprintf_r+0x1c6>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e22:	f10a 0a01 	add.w	sl, sl, #1
 8004e26:	9304      	str	r3, [sp, #16]
 8004e28:	9307      	str	r3, [sp, #28]
 8004e2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e2e:	931a      	str	r3, [sp, #104]	; 0x68
 8004e30:	4654      	mov	r4, sl
 8004e32:	2205      	movs	r2, #5
 8004e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e38:	4850      	ldr	r0, [pc, #320]	; (8004f7c <_svfiprintf_r+0x1e8>)
 8004e3a:	f7fb f9d9 	bl	80001f0 <memchr>
 8004e3e:	9a04      	ldr	r2, [sp, #16]
 8004e40:	b9d8      	cbnz	r0, 8004e7a <_svfiprintf_r+0xe6>
 8004e42:	06d0      	lsls	r0, r2, #27
 8004e44:	bf44      	itt	mi
 8004e46:	2320      	movmi	r3, #32
 8004e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e4c:	0711      	lsls	r1, r2, #28
 8004e4e:	bf44      	itt	mi
 8004e50:	232b      	movmi	r3, #43	; 0x2b
 8004e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004e56:	f89a 3000 	ldrb.w	r3, [sl]
 8004e5a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e5c:	d015      	beq.n	8004e8a <_svfiprintf_r+0xf6>
 8004e5e:	9a07      	ldr	r2, [sp, #28]
 8004e60:	4654      	mov	r4, sl
 8004e62:	2000      	movs	r0, #0
 8004e64:	f04f 0c0a 	mov.w	ip, #10
 8004e68:	4621      	mov	r1, r4
 8004e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e6e:	3b30      	subs	r3, #48	; 0x30
 8004e70:	2b09      	cmp	r3, #9
 8004e72:	d94d      	bls.n	8004f10 <_svfiprintf_r+0x17c>
 8004e74:	b1b0      	cbz	r0, 8004ea4 <_svfiprintf_r+0x110>
 8004e76:	9207      	str	r2, [sp, #28]
 8004e78:	e014      	b.n	8004ea4 <_svfiprintf_r+0x110>
 8004e7a:	eba0 0308 	sub.w	r3, r0, r8
 8004e7e:	fa09 f303 	lsl.w	r3, r9, r3
 8004e82:	4313      	orrs	r3, r2
 8004e84:	9304      	str	r3, [sp, #16]
 8004e86:	46a2      	mov	sl, r4
 8004e88:	e7d2      	b.n	8004e30 <_svfiprintf_r+0x9c>
 8004e8a:	9b03      	ldr	r3, [sp, #12]
 8004e8c:	1d19      	adds	r1, r3, #4
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	9103      	str	r1, [sp, #12]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	bfbb      	ittet	lt
 8004e96:	425b      	neglt	r3, r3
 8004e98:	f042 0202 	orrlt.w	r2, r2, #2
 8004e9c:	9307      	strge	r3, [sp, #28]
 8004e9e:	9307      	strlt	r3, [sp, #28]
 8004ea0:	bfb8      	it	lt
 8004ea2:	9204      	strlt	r2, [sp, #16]
 8004ea4:	7823      	ldrb	r3, [r4, #0]
 8004ea6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ea8:	d10c      	bne.n	8004ec4 <_svfiprintf_r+0x130>
 8004eaa:	7863      	ldrb	r3, [r4, #1]
 8004eac:	2b2a      	cmp	r3, #42	; 0x2a
 8004eae:	d134      	bne.n	8004f1a <_svfiprintf_r+0x186>
 8004eb0:	9b03      	ldr	r3, [sp, #12]
 8004eb2:	1d1a      	adds	r2, r3, #4
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	9203      	str	r2, [sp, #12]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	bfb8      	it	lt
 8004ebc:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ec0:	3402      	adds	r4, #2
 8004ec2:	9305      	str	r3, [sp, #20]
 8004ec4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004f8c <_svfiprintf_r+0x1f8>
 8004ec8:	7821      	ldrb	r1, [r4, #0]
 8004eca:	2203      	movs	r2, #3
 8004ecc:	4650      	mov	r0, sl
 8004ece:	f7fb f98f 	bl	80001f0 <memchr>
 8004ed2:	b138      	cbz	r0, 8004ee4 <_svfiprintf_r+0x150>
 8004ed4:	9b04      	ldr	r3, [sp, #16]
 8004ed6:	eba0 000a 	sub.w	r0, r0, sl
 8004eda:	2240      	movs	r2, #64	; 0x40
 8004edc:	4082      	lsls	r2, r0
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	3401      	adds	r4, #1
 8004ee2:	9304      	str	r3, [sp, #16]
 8004ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ee8:	4825      	ldr	r0, [pc, #148]	; (8004f80 <_svfiprintf_r+0x1ec>)
 8004eea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004eee:	2206      	movs	r2, #6
 8004ef0:	f7fb f97e 	bl	80001f0 <memchr>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	d038      	beq.n	8004f6a <_svfiprintf_r+0x1d6>
 8004ef8:	4b22      	ldr	r3, [pc, #136]	; (8004f84 <_svfiprintf_r+0x1f0>)
 8004efa:	bb1b      	cbnz	r3, 8004f44 <_svfiprintf_r+0x1b0>
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	3307      	adds	r3, #7
 8004f00:	f023 0307 	bic.w	r3, r3, #7
 8004f04:	3308      	adds	r3, #8
 8004f06:	9303      	str	r3, [sp, #12]
 8004f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f0a:	4433      	add	r3, r6
 8004f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f0e:	e768      	b.n	8004de2 <_svfiprintf_r+0x4e>
 8004f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f14:	460c      	mov	r4, r1
 8004f16:	2001      	movs	r0, #1
 8004f18:	e7a6      	b.n	8004e68 <_svfiprintf_r+0xd4>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	3401      	adds	r4, #1
 8004f1e:	9305      	str	r3, [sp, #20]
 8004f20:	4619      	mov	r1, r3
 8004f22:	f04f 0c0a 	mov.w	ip, #10
 8004f26:	4620      	mov	r0, r4
 8004f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f2c:	3a30      	subs	r2, #48	; 0x30
 8004f2e:	2a09      	cmp	r2, #9
 8004f30:	d903      	bls.n	8004f3a <_svfiprintf_r+0x1a6>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0c6      	beq.n	8004ec4 <_svfiprintf_r+0x130>
 8004f36:	9105      	str	r1, [sp, #20]
 8004f38:	e7c4      	b.n	8004ec4 <_svfiprintf_r+0x130>
 8004f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f3e:	4604      	mov	r4, r0
 8004f40:	2301      	movs	r3, #1
 8004f42:	e7f0      	b.n	8004f26 <_svfiprintf_r+0x192>
 8004f44:	ab03      	add	r3, sp, #12
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	462a      	mov	r2, r5
 8004f4a:	4b0f      	ldr	r3, [pc, #60]	; (8004f88 <_svfiprintf_r+0x1f4>)
 8004f4c:	a904      	add	r1, sp, #16
 8004f4e:	4638      	mov	r0, r7
 8004f50:	f3af 8000 	nop.w
 8004f54:	1c42      	adds	r2, r0, #1
 8004f56:	4606      	mov	r6, r0
 8004f58:	d1d6      	bne.n	8004f08 <_svfiprintf_r+0x174>
 8004f5a:	89ab      	ldrh	r3, [r5, #12]
 8004f5c:	065b      	lsls	r3, r3, #25
 8004f5e:	f53f af2d 	bmi.w	8004dbc <_svfiprintf_r+0x28>
 8004f62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f64:	b01d      	add	sp, #116	; 0x74
 8004f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f6a:	ab03      	add	r3, sp, #12
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	462a      	mov	r2, r5
 8004f70:	4b05      	ldr	r3, [pc, #20]	; (8004f88 <_svfiprintf_r+0x1f4>)
 8004f72:	a904      	add	r1, sp, #16
 8004f74:	4638      	mov	r0, r7
 8004f76:	f000 f879 	bl	800506c <_printf_i>
 8004f7a:	e7eb      	b.n	8004f54 <_svfiprintf_r+0x1c0>
 8004f7c:	0800571c 	.word	0x0800571c
 8004f80:	08005726 	.word	0x08005726
 8004f84:	00000000 	.word	0x00000000
 8004f88:	08004ce1 	.word	0x08004ce1
 8004f8c:	08005722 	.word	0x08005722

08004f90 <_printf_common>:
 8004f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f94:	4616      	mov	r6, r2
 8004f96:	4699      	mov	r9, r3
 8004f98:	688a      	ldr	r2, [r1, #8]
 8004f9a:	690b      	ldr	r3, [r1, #16]
 8004f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	bfb8      	it	lt
 8004fa4:	4613      	movlt	r3, r2
 8004fa6:	6033      	str	r3, [r6, #0]
 8004fa8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004fac:	4607      	mov	r7, r0
 8004fae:	460c      	mov	r4, r1
 8004fb0:	b10a      	cbz	r2, 8004fb6 <_printf_common+0x26>
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	6033      	str	r3, [r6, #0]
 8004fb6:	6823      	ldr	r3, [r4, #0]
 8004fb8:	0699      	lsls	r1, r3, #26
 8004fba:	bf42      	ittt	mi
 8004fbc:	6833      	ldrmi	r3, [r6, #0]
 8004fbe:	3302      	addmi	r3, #2
 8004fc0:	6033      	strmi	r3, [r6, #0]
 8004fc2:	6825      	ldr	r5, [r4, #0]
 8004fc4:	f015 0506 	ands.w	r5, r5, #6
 8004fc8:	d106      	bne.n	8004fd8 <_printf_common+0x48>
 8004fca:	f104 0a19 	add.w	sl, r4, #25
 8004fce:	68e3      	ldr	r3, [r4, #12]
 8004fd0:	6832      	ldr	r2, [r6, #0]
 8004fd2:	1a9b      	subs	r3, r3, r2
 8004fd4:	42ab      	cmp	r3, r5
 8004fd6:	dc26      	bgt.n	8005026 <_printf_common+0x96>
 8004fd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004fdc:	1e13      	subs	r3, r2, #0
 8004fde:	6822      	ldr	r2, [r4, #0]
 8004fe0:	bf18      	it	ne
 8004fe2:	2301      	movne	r3, #1
 8004fe4:	0692      	lsls	r2, r2, #26
 8004fe6:	d42b      	bmi.n	8005040 <_printf_common+0xb0>
 8004fe8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fec:	4649      	mov	r1, r9
 8004fee:	4638      	mov	r0, r7
 8004ff0:	47c0      	blx	r8
 8004ff2:	3001      	adds	r0, #1
 8004ff4:	d01e      	beq.n	8005034 <_printf_common+0xa4>
 8004ff6:	6823      	ldr	r3, [r4, #0]
 8004ff8:	6922      	ldr	r2, [r4, #16]
 8004ffa:	f003 0306 	and.w	r3, r3, #6
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	bf02      	ittt	eq
 8005002:	68e5      	ldreq	r5, [r4, #12]
 8005004:	6833      	ldreq	r3, [r6, #0]
 8005006:	1aed      	subeq	r5, r5, r3
 8005008:	68a3      	ldr	r3, [r4, #8]
 800500a:	bf0c      	ite	eq
 800500c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005010:	2500      	movne	r5, #0
 8005012:	4293      	cmp	r3, r2
 8005014:	bfc4      	itt	gt
 8005016:	1a9b      	subgt	r3, r3, r2
 8005018:	18ed      	addgt	r5, r5, r3
 800501a:	2600      	movs	r6, #0
 800501c:	341a      	adds	r4, #26
 800501e:	42b5      	cmp	r5, r6
 8005020:	d11a      	bne.n	8005058 <_printf_common+0xc8>
 8005022:	2000      	movs	r0, #0
 8005024:	e008      	b.n	8005038 <_printf_common+0xa8>
 8005026:	2301      	movs	r3, #1
 8005028:	4652      	mov	r2, sl
 800502a:	4649      	mov	r1, r9
 800502c:	4638      	mov	r0, r7
 800502e:	47c0      	blx	r8
 8005030:	3001      	adds	r0, #1
 8005032:	d103      	bne.n	800503c <_printf_common+0xac>
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503c:	3501      	adds	r5, #1
 800503e:	e7c6      	b.n	8004fce <_printf_common+0x3e>
 8005040:	18e1      	adds	r1, r4, r3
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	2030      	movs	r0, #48	; 0x30
 8005046:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800504a:	4422      	add	r2, r4
 800504c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005050:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005054:	3302      	adds	r3, #2
 8005056:	e7c7      	b.n	8004fe8 <_printf_common+0x58>
 8005058:	2301      	movs	r3, #1
 800505a:	4622      	mov	r2, r4
 800505c:	4649      	mov	r1, r9
 800505e:	4638      	mov	r0, r7
 8005060:	47c0      	blx	r8
 8005062:	3001      	adds	r0, #1
 8005064:	d0e6      	beq.n	8005034 <_printf_common+0xa4>
 8005066:	3601      	adds	r6, #1
 8005068:	e7d9      	b.n	800501e <_printf_common+0x8e>
	...

0800506c <_printf_i>:
 800506c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005070:	7e0f      	ldrb	r7, [r1, #24]
 8005072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005074:	2f78      	cmp	r7, #120	; 0x78
 8005076:	4691      	mov	r9, r2
 8005078:	4680      	mov	r8, r0
 800507a:	460c      	mov	r4, r1
 800507c:	469a      	mov	sl, r3
 800507e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005082:	d807      	bhi.n	8005094 <_printf_i+0x28>
 8005084:	2f62      	cmp	r7, #98	; 0x62
 8005086:	d80a      	bhi.n	800509e <_printf_i+0x32>
 8005088:	2f00      	cmp	r7, #0
 800508a:	f000 80d4 	beq.w	8005236 <_printf_i+0x1ca>
 800508e:	2f58      	cmp	r7, #88	; 0x58
 8005090:	f000 80c0 	beq.w	8005214 <_printf_i+0x1a8>
 8005094:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005098:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800509c:	e03a      	b.n	8005114 <_printf_i+0xa8>
 800509e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050a2:	2b15      	cmp	r3, #21
 80050a4:	d8f6      	bhi.n	8005094 <_printf_i+0x28>
 80050a6:	a101      	add	r1, pc, #4	; (adr r1, 80050ac <_printf_i+0x40>)
 80050a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050ac:	08005105 	.word	0x08005105
 80050b0:	08005119 	.word	0x08005119
 80050b4:	08005095 	.word	0x08005095
 80050b8:	08005095 	.word	0x08005095
 80050bc:	08005095 	.word	0x08005095
 80050c0:	08005095 	.word	0x08005095
 80050c4:	08005119 	.word	0x08005119
 80050c8:	08005095 	.word	0x08005095
 80050cc:	08005095 	.word	0x08005095
 80050d0:	08005095 	.word	0x08005095
 80050d4:	08005095 	.word	0x08005095
 80050d8:	0800521d 	.word	0x0800521d
 80050dc:	08005145 	.word	0x08005145
 80050e0:	080051d7 	.word	0x080051d7
 80050e4:	08005095 	.word	0x08005095
 80050e8:	08005095 	.word	0x08005095
 80050ec:	0800523f 	.word	0x0800523f
 80050f0:	08005095 	.word	0x08005095
 80050f4:	08005145 	.word	0x08005145
 80050f8:	08005095 	.word	0x08005095
 80050fc:	08005095 	.word	0x08005095
 8005100:	080051df 	.word	0x080051df
 8005104:	682b      	ldr	r3, [r5, #0]
 8005106:	1d1a      	adds	r2, r3, #4
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	602a      	str	r2, [r5, #0]
 800510c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005110:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005114:	2301      	movs	r3, #1
 8005116:	e09f      	b.n	8005258 <_printf_i+0x1ec>
 8005118:	6820      	ldr	r0, [r4, #0]
 800511a:	682b      	ldr	r3, [r5, #0]
 800511c:	0607      	lsls	r7, r0, #24
 800511e:	f103 0104 	add.w	r1, r3, #4
 8005122:	6029      	str	r1, [r5, #0]
 8005124:	d501      	bpl.n	800512a <_printf_i+0xbe>
 8005126:	681e      	ldr	r6, [r3, #0]
 8005128:	e003      	b.n	8005132 <_printf_i+0xc6>
 800512a:	0646      	lsls	r6, r0, #25
 800512c:	d5fb      	bpl.n	8005126 <_printf_i+0xba>
 800512e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005132:	2e00      	cmp	r6, #0
 8005134:	da03      	bge.n	800513e <_printf_i+0xd2>
 8005136:	232d      	movs	r3, #45	; 0x2d
 8005138:	4276      	negs	r6, r6
 800513a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800513e:	485a      	ldr	r0, [pc, #360]	; (80052a8 <_printf_i+0x23c>)
 8005140:	230a      	movs	r3, #10
 8005142:	e012      	b.n	800516a <_printf_i+0xfe>
 8005144:	682b      	ldr	r3, [r5, #0]
 8005146:	6820      	ldr	r0, [r4, #0]
 8005148:	1d19      	adds	r1, r3, #4
 800514a:	6029      	str	r1, [r5, #0]
 800514c:	0605      	lsls	r5, r0, #24
 800514e:	d501      	bpl.n	8005154 <_printf_i+0xe8>
 8005150:	681e      	ldr	r6, [r3, #0]
 8005152:	e002      	b.n	800515a <_printf_i+0xee>
 8005154:	0641      	lsls	r1, r0, #25
 8005156:	d5fb      	bpl.n	8005150 <_printf_i+0xe4>
 8005158:	881e      	ldrh	r6, [r3, #0]
 800515a:	4853      	ldr	r0, [pc, #332]	; (80052a8 <_printf_i+0x23c>)
 800515c:	2f6f      	cmp	r7, #111	; 0x6f
 800515e:	bf0c      	ite	eq
 8005160:	2308      	moveq	r3, #8
 8005162:	230a      	movne	r3, #10
 8005164:	2100      	movs	r1, #0
 8005166:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800516a:	6865      	ldr	r5, [r4, #4]
 800516c:	60a5      	str	r5, [r4, #8]
 800516e:	2d00      	cmp	r5, #0
 8005170:	bfa2      	ittt	ge
 8005172:	6821      	ldrge	r1, [r4, #0]
 8005174:	f021 0104 	bicge.w	r1, r1, #4
 8005178:	6021      	strge	r1, [r4, #0]
 800517a:	b90e      	cbnz	r6, 8005180 <_printf_i+0x114>
 800517c:	2d00      	cmp	r5, #0
 800517e:	d04b      	beq.n	8005218 <_printf_i+0x1ac>
 8005180:	4615      	mov	r5, r2
 8005182:	fbb6 f1f3 	udiv	r1, r6, r3
 8005186:	fb03 6711 	mls	r7, r3, r1, r6
 800518a:	5dc7      	ldrb	r7, [r0, r7]
 800518c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005190:	4637      	mov	r7, r6
 8005192:	42bb      	cmp	r3, r7
 8005194:	460e      	mov	r6, r1
 8005196:	d9f4      	bls.n	8005182 <_printf_i+0x116>
 8005198:	2b08      	cmp	r3, #8
 800519a:	d10b      	bne.n	80051b4 <_printf_i+0x148>
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	07de      	lsls	r6, r3, #31
 80051a0:	d508      	bpl.n	80051b4 <_printf_i+0x148>
 80051a2:	6923      	ldr	r3, [r4, #16]
 80051a4:	6861      	ldr	r1, [r4, #4]
 80051a6:	4299      	cmp	r1, r3
 80051a8:	bfde      	ittt	le
 80051aa:	2330      	movle	r3, #48	; 0x30
 80051ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80051b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80051b4:	1b52      	subs	r2, r2, r5
 80051b6:	6122      	str	r2, [r4, #16]
 80051b8:	f8cd a000 	str.w	sl, [sp]
 80051bc:	464b      	mov	r3, r9
 80051be:	aa03      	add	r2, sp, #12
 80051c0:	4621      	mov	r1, r4
 80051c2:	4640      	mov	r0, r8
 80051c4:	f7ff fee4 	bl	8004f90 <_printf_common>
 80051c8:	3001      	adds	r0, #1
 80051ca:	d14a      	bne.n	8005262 <_printf_i+0x1f6>
 80051cc:	f04f 30ff 	mov.w	r0, #4294967295
 80051d0:	b004      	add	sp, #16
 80051d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d6:	6823      	ldr	r3, [r4, #0]
 80051d8:	f043 0320 	orr.w	r3, r3, #32
 80051dc:	6023      	str	r3, [r4, #0]
 80051de:	4833      	ldr	r0, [pc, #204]	; (80052ac <_printf_i+0x240>)
 80051e0:	2778      	movs	r7, #120	; 0x78
 80051e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	6829      	ldr	r1, [r5, #0]
 80051ea:	061f      	lsls	r7, r3, #24
 80051ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80051f0:	d402      	bmi.n	80051f8 <_printf_i+0x18c>
 80051f2:	065f      	lsls	r7, r3, #25
 80051f4:	bf48      	it	mi
 80051f6:	b2b6      	uxthmi	r6, r6
 80051f8:	07df      	lsls	r7, r3, #31
 80051fa:	bf48      	it	mi
 80051fc:	f043 0320 	orrmi.w	r3, r3, #32
 8005200:	6029      	str	r1, [r5, #0]
 8005202:	bf48      	it	mi
 8005204:	6023      	strmi	r3, [r4, #0]
 8005206:	b91e      	cbnz	r6, 8005210 <_printf_i+0x1a4>
 8005208:	6823      	ldr	r3, [r4, #0]
 800520a:	f023 0320 	bic.w	r3, r3, #32
 800520e:	6023      	str	r3, [r4, #0]
 8005210:	2310      	movs	r3, #16
 8005212:	e7a7      	b.n	8005164 <_printf_i+0xf8>
 8005214:	4824      	ldr	r0, [pc, #144]	; (80052a8 <_printf_i+0x23c>)
 8005216:	e7e4      	b.n	80051e2 <_printf_i+0x176>
 8005218:	4615      	mov	r5, r2
 800521a:	e7bd      	b.n	8005198 <_printf_i+0x12c>
 800521c:	682b      	ldr	r3, [r5, #0]
 800521e:	6826      	ldr	r6, [r4, #0]
 8005220:	6961      	ldr	r1, [r4, #20]
 8005222:	1d18      	adds	r0, r3, #4
 8005224:	6028      	str	r0, [r5, #0]
 8005226:	0635      	lsls	r5, r6, #24
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	d501      	bpl.n	8005230 <_printf_i+0x1c4>
 800522c:	6019      	str	r1, [r3, #0]
 800522e:	e002      	b.n	8005236 <_printf_i+0x1ca>
 8005230:	0670      	lsls	r0, r6, #25
 8005232:	d5fb      	bpl.n	800522c <_printf_i+0x1c0>
 8005234:	8019      	strh	r1, [r3, #0]
 8005236:	2300      	movs	r3, #0
 8005238:	6123      	str	r3, [r4, #16]
 800523a:	4615      	mov	r5, r2
 800523c:	e7bc      	b.n	80051b8 <_printf_i+0x14c>
 800523e:	682b      	ldr	r3, [r5, #0]
 8005240:	1d1a      	adds	r2, r3, #4
 8005242:	602a      	str	r2, [r5, #0]
 8005244:	681d      	ldr	r5, [r3, #0]
 8005246:	6862      	ldr	r2, [r4, #4]
 8005248:	2100      	movs	r1, #0
 800524a:	4628      	mov	r0, r5
 800524c:	f7fa ffd0 	bl	80001f0 <memchr>
 8005250:	b108      	cbz	r0, 8005256 <_printf_i+0x1ea>
 8005252:	1b40      	subs	r0, r0, r5
 8005254:	6060      	str	r0, [r4, #4]
 8005256:	6863      	ldr	r3, [r4, #4]
 8005258:	6123      	str	r3, [r4, #16]
 800525a:	2300      	movs	r3, #0
 800525c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005260:	e7aa      	b.n	80051b8 <_printf_i+0x14c>
 8005262:	6923      	ldr	r3, [r4, #16]
 8005264:	462a      	mov	r2, r5
 8005266:	4649      	mov	r1, r9
 8005268:	4640      	mov	r0, r8
 800526a:	47d0      	blx	sl
 800526c:	3001      	adds	r0, #1
 800526e:	d0ad      	beq.n	80051cc <_printf_i+0x160>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	079b      	lsls	r3, r3, #30
 8005274:	d413      	bmi.n	800529e <_printf_i+0x232>
 8005276:	68e0      	ldr	r0, [r4, #12]
 8005278:	9b03      	ldr	r3, [sp, #12]
 800527a:	4298      	cmp	r0, r3
 800527c:	bfb8      	it	lt
 800527e:	4618      	movlt	r0, r3
 8005280:	e7a6      	b.n	80051d0 <_printf_i+0x164>
 8005282:	2301      	movs	r3, #1
 8005284:	4632      	mov	r2, r6
 8005286:	4649      	mov	r1, r9
 8005288:	4640      	mov	r0, r8
 800528a:	47d0      	blx	sl
 800528c:	3001      	adds	r0, #1
 800528e:	d09d      	beq.n	80051cc <_printf_i+0x160>
 8005290:	3501      	adds	r5, #1
 8005292:	68e3      	ldr	r3, [r4, #12]
 8005294:	9903      	ldr	r1, [sp, #12]
 8005296:	1a5b      	subs	r3, r3, r1
 8005298:	42ab      	cmp	r3, r5
 800529a:	dcf2      	bgt.n	8005282 <_printf_i+0x216>
 800529c:	e7eb      	b.n	8005276 <_printf_i+0x20a>
 800529e:	2500      	movs	r5, #0
 80052a0:	f104 0619 	add.w	r6, r4, #25
 80052a4:	e7f5      	b.n	8005292 <_printf_i+0x226>
 80052a6:	bf00      	nop
 80052a8:	0800572d 	.word	0x0800572d
 80052ac:	0800573e 	.word	0x0800573e

080052b0 <memmove>:
 80052b0:	4288      	cmp	r0, r1
 80052b2:	b510      	push	{r4, lr}
 80052b4:	eb01 0402 	add.w	r4, r1, r2
 80052b8:	d902      	bls.n	80052c0 <memmove+0x10>
 80052ba:	4284      	cmp	r4, r0
 80052bc:	4623      	mov	r3, r4
 80052be:	d807      	bhi.n	80052d0 <memmove+0x20>
 80052c0:	1e43      	subs	r3, r0, #1
 80052c2:	42a1      	cmp	r1, r4
 80052c4:	d008      	beq.n	80052d8 <memmove+0x28>
 80052c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052ca:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052ce:	e7f8      	b.n	80052c2 <memmove+0x12>
 80052d0:	4402      	add	r2, r0
 80052d2:	4601      	mov	r1, r0
 80052d4:	428a      	cmp	r2, r1
 80052d6:	d100      	bne.n	80052da <memmove+0x2a>
 80052d8:	bd10      	pop	{r4, pc}
 80052da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052de:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052e2:	e7f7      	b.n	80052d4 <memmove+0x24>

080052e4 <memcpy>:
 80052e4:	440a      	add	r2, r1
 80052e6:	4291      	cmp	r1, r2
 80052e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80052ec:	d100      	bne.n	80052f0 <memcpy+0xc>
 80052ee:	4770      	bx	lr
 80052f0:	b510      	push	{r4, lr}
 80052f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052fa:	4291      	cmp	r1, r2
 80052fc:	d1f9      	bne.n	80052f2 <memcpy+0xe>
 80052fe:	bd10      	pop	{r4, pc}

08005300 <_realloc_r>:
 8005300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005304:	4680      	mov	r8, r0
 8005306:	4614      	mov	r4, r2
 8005308:	460e      	mov	r6, r1
 800530a:	b921      	cbnz	r1, 8005316 <_realloc_r+0x16>
 800530c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005310:	4611      	mov	r1, r2
 8005312:	f7ff bba9 	b.w	8004a68 <_malloc_r>
 8005316:	b92a      	cbnz	r2, 8005324 <_realloc_r+0x24>
 8005318:	f7ff fc96 	bl	8004c48 <_free_r>
 800531c:	4625      	mov	r5, r4
 800531e:	4628      	mov	r0, r5
 8005320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005324:	f000 f81b 	bl	800535e <_malloc_usable_size_r>
 8005328:	4284      	cmp	r4, r0
 800532a:	4607      	mov	r7, r0
 800532c:	d802      	bhi.n	8005334 <_realloc_r+0x34>
 800532e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005332:	d812      	bhi.n	800535a <_realloc_r+0x5a>
 8005334:	4621      	mov	r1, r4
 8005336:	4640      	mov	r0, r8
 8005338:	f7ff fb96 	bl	8004a68 <_malloc_r>
 800533c:	4605      	mov	r5, r0
 800533e:	2800      	cmp	r0, #0
 8005340:	d0ed      	beq.n	800531e <_realloc_r+0x1e>
 8005342:	42bc      	cmp	r4, r7
 8005344:	4622      	mov	r2, r4
 8005346:	4631      	mov	r1, r6
 8005348:	bf28      	it	cs
 800534a:	463a      	movcs	r2, r7
 800534c:	f7ff ffca 	bl	80052e4 <memcpy>
 8005350:	4631      	mov	r1, r6
 8005352:	4640      	mov	r0, r8
 8005354:	f7ff fc78 	bl	8004c48 <_free_r>
 8005358:	e7e1      	b.n	800531e <_realloc_r+0x1e>
 800535a:	4635      	mov	r5, r6
 800535c:	e7df      	b.n	800531e <_realloc_r+0x1e>

0800535e <_malloc_usable_size_r>:
 800535e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005362:	1f18      	subs	r0, r3, #4
 8005364:	2b00      	cmp	r3, #0
 8005366:	bfbc      	itt	lt
 8005368:	580b      	ldrlt	r3, [r1, r0]
 800536a:	18c0      	addlt	r0, r0, r3
 800536c:	4770      	bx	lr
	...

08005370 <expf>:
 8005370:	b508      	push	{r3, lr}
 8005372:	ed2d 8b02 	vpush	{d8}
 8005376:	eef0 8a40 	vmov.f32	s17, s0
 800537a:	f000 f87f 	bl	800547c <__ieee754_expf>
 800537e:	eeb0 8a40 	vmov.f32	s16, s0
 8005382:	eeb0 0a68 	vmov.f32	s0, s17
 8005386:	f000 f829 	bl	80053dc <finitef>
 800538a:	b160      	cbz	r0, 80053a6 <expf+0x36>
 800538c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80053cc <expf+0x5c>
 8005390:	eef4 8ae7 	vcmpe.f32	s17, s15
 8005394:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005398:	dd0a      	ble.n	80053b0 <expf+0x40>
 800539a:	f7ff fc29 	bl	8004bf0 <__errno>
 800539e:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80053d0 <expf+0x60>
 80053a2:	2322      	movs	r3, #34	; 0x22
 80053a4:	6003      	str	r3, [r0, #0]
 80053a6:	eeb0 0a48 	vmov.f32	s0, s16
 80053aa:	ecbd 8b02 	vpop	{d8}
 80053ae:	bd08      	pop	{r3, pc}
 80053b0:	eddf 7a08 	vldr	s15, [pc, #32]	; 80053d4 <expf+0x64>
 80053b4:	eef4 8ae7 	vcmpe.f32	s17, s15
 80053b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053bc:	d5f3      	bpl.n	80053a6 <expf+0x36>
 80053be:	f7ff fc17 	bl	8004bf0 <__errno>
 80053c2:	2322      	movs	r3, #34	; 0x22
 80053c4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80053d8 <expf+0x68>
 80053c8:	6003      	str	r3, [r0, #0]
 80053ca:	e7ec      	b.n	80053a6 <expf+0x36>
 80053cc:	42b17217 	.word	0x42b17217
 80053d0:	7f800000 	.word	0x7f800000
 80053d4:	c2cff1b5 	.word	0xc2cff1b5
 80053d8:	00000000 	.word	0x00000000

080053dc <finitef>:
 80053dc:	b082      	sub	sp, #8
 80053de:	ed8d 0a01 	vstr	s0, [sp, #4]
 80053e2:	9801      	ldr	r0, [sp, #4]
 80053e4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80053e8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80053ec:	bfac      	ite	ge
 80053ee:	2000      	movge	r0, #0
 80053f0:	2001      	movlt	r0, #1
 80053f2:	b002      	add	sp, #8
 80053f4:	4770      	bx	lr
	...

080053f8 <ceilf>:
 80053f8:	ee10 3a10 	vmov	r3, s0
 80053fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005400:	3a7f      	subs	r2, #127	; 0x7f
 8005402:	2a16      	cmp	r2, #22
 8005404:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005408:	dc2a      	bgt.n	8005460 <ceilf+0x68>
 800540a:	2a00      	cmp	r2, #0
 800540c:	da11      	bge.n	8005432 <ceilf+0x3a>
 800540e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8005474 <ceilf+0x7c>
 8005412:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005416:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800541a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800541e:	dd05      	ble.n	800542c <ceilf+0x34>
 8005420:	2b00      	cmp	r3, #0
 8005422:	db23      	blt.n	800546c <ceilf+0x74>
 8005424:	2900      	cmp	r1, #0
 8005426:	bf18      	it	ne
 8005428:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800542c:	ee00 3a10 	vmov	s0, r3
 8005430:	4770      	bx	lr
 8005432:	4911      	ldr	r1, [pc, #68]	; (8005478 <ceilf+0x80>)
 8005434:	4111      	asrs	r1, r2
 8005436:	420b      	tst	r3, r1
 8005438:	d0fa      	beq.n	8005430 <ceilf+0x38>
 800543a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005474 <ceilf+0x7c>
 800543e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005442:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800544a:	ddef      	ble.n	800542c <ceilf+0x34>
 800544c:	2b00      	cmp	r3, #0
 800544e:	bfc2      	ittt	gt
 8005450:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8005454:	fa40 f202 	asrgt.w	r2, r0, r2
 8005458:	189b      	addgt	r3, r3, r2
 800545a:	ea23 0301 	bic.w	r3, r3, r1
 800545e:	e7e5      	b.n	800542c <ceilf+0x34>
 8005460:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005464:	d3e4      	bcc.n	8005430 <ceilf+0x38>
 8005466:	ee30 0a00 	vadd.f32	s0, s0, s0
 800546a:	4770      	bx	lr
 800546c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005470:	e7dc      	b.n	800542c <ceilf+0x34>
 8005472:	bf00      	nop
 8005474:	7149f2ca 	.word	0x7149f2ca
 8005478:	007fffff 	.word	0x007fffff

0800547c <__ieee754_expf>:
 800547c:	ee10 2a10 	vmov	r2, s0
 8005480:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8005484:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005488:	d902      	bls.n	8005490 <__ieee754_expf+0x14>
 800548a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800548e:	4770      	bx	lr
 8005490:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8005494:	d106      	bne.n	80054a4 <__ieee754_expf+0x28>
 8005496:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80055d0 <__ieee754_expf+0x154>
 800549a:	2900      	cmp	r1, #0
 800549c:	bf18      	it	ne
 800549e:	eeb0 0a67 	vmovne.f32	s0, s15
 80054a2:	4770      	bx	lr
 80054a4:	484b      	ldr	r0, [pc, #300]	; (80055d4 <__ieee754_expf+0x158>)
 80054a6:	4282      	cmp	r2, r0
 80054a8:	dd02      	ble.n	80054b0 <__ieee754_expf+0x34>
 80054aa:	2000      	movs	r0, #0
 80054ac:	f000 b8d0 	b.w	8005650 <__math_oflowf>
 80054b0:	2a00      	cmp	r2, #0
 80054b2:	da05      	bge.n	80054c0 <__ieee754_expf+0x44>
 80054b4:	4a48      	ldr	r2, [pc, #288]	; (80055d8 <__ieee754_expf+0x15c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d902      	bls.n	80054c0 <__ieee754_expf+0x44>
 80054ba:	2000      	movs	r0, #0
 80054bc:	f000 b8c2 	b.w	8005644 <__math_uflowf>
 80054c0:	4a46      	ldr	r2, [pc, #280]	; (80055dc <__ieee754_expf+0x160>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80054c8:	d952      	bls.n	8005570 <__ieee754_expf+0xf4>
 80054ca:	4a45      	ldr	r2, [pc, #276]	; (80055e0 <__ieee754_expf+0x164>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80054d2:	d834      	bhi.n	800553e <__ieee754_expf+0xc2>
 80054d4:	4b43      	ldr	r3, [pc, #268]	; (80055e4 <__ieee754_expf+0x168>)
 80054d6:	4413      	add	r3, r2
 80054d8:	ed93 7a00 	vldr	s14, [r3]
 80054dc:	4b42      	ldr	r3, [pc, #264]	; (80055e8 <__ieee754_expf+0x16c>)
 80054de:	4413      	add	r3, r2
 80054e0:	ee30 7a47 	vsub.f32	s14, s0, s14
 80054e4:	f1c1 0201 	rsb	r2, r1, #1
 80054e8:	edd3 7a00 	vldr	s15, [r3]
 80054ec:	1a52      	subs	r2, r2, r1
 80054ee:	ee37 0a67 	vsub.f32	s0, s14, s15
 80054f2:	ee20 6a00 	vmul.f32	s12, s0, s0
 80054f6:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80055ec <__ieee754_expf+0x170>
 80054fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80055f0 <__ieee754_expf+0x174>
 80054fe:	eee6 6a05 	vfma.f32	s13, s12, s10
 8005502:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80055f4 <__ieee754_expf+0x178>
 8005506:	eea6 5a86 	vfma.f32	s10, s13, s12
 800550a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80055f8 <__ieee754_expf+0x17c>
 800550e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8005512:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80055fc <__ieee754_expf+0x180>
 8005516:	eea6 5a86 	vfma.f32	s10, s13, s12
 800551a:	eef0 6a40 	vmov.f32	s13, s0
 800551e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8005522:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8005526:	ee20 5a26 	vmul.f32	s10, s0, s13
 800552a:	bb92      	cbnz	r2, 8005592 <__ieee754_expf+0x116>
 800552c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8005530:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8005534:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005538:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800553c:	4770      	bx	lr
 800553e:	4b30      	ldr	r3, [pc, #192]	; (8005600 <__ieee754_expf+0x184>)
 8005540:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005604 <__ieee754_expf+0x188>
 8005544:	eddf 6a30 	vldr	s13, [pc, #192]	; 8005608 <__ieee754_expf+0x18c>
 8005548:	4413      	add	r3, r2
 800554a:	edd3 7a00 	vldr	s15, [r3]
 800554e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005552:	eeb0 7a40 	vmov.f32	s14, s0
 8005556:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800555a:	ee17 2a90 	vmov	r2, s15
 800555e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005562:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8005566:	eddf 6a29 	vldr	s13, [pc, #164]	; 800560c <__ieee754_expf+0x190>
 800556a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800556e:	e7be      	b.n	80054ee <__ieee754_expf+0x72>
 8005570:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8005574:	d20b      	bcs.n	800558e <__ieee754_expf+0x112>
 8005576:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005610 <__ieee754_expf+0x194>
 800557a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800557e:	eef4 6ae5 	vcmpe.f32	s13, s11
 8005582:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005586:	dd02      	ble.n	800558e <__ieee754_expf+0x112>
 8005588:	ee30 0a25 	vadd.f32	s0, s0, s11
 800558c:	4770      	bx	lr
 800558e:	2200      	movs	r2, #0
 8005590:	e7af      	b.n	80054f2 <__ieee754_expf+0x76>
 8005592:	ee36 6a66 	vsub.f32	s12, s12, s13
 8005596:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800559a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800559e:	bfb8      	it	lt
 80055a0:	3264      	addlt	r2, #100	; 0x64
 80055a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80055a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80055aa:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80055ae:	ee17 3a90 	vmov	r3, s15
 80055b2:	bfab      	itete	ge
 80055b4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80055b8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80055bc:	ee00 3a10 	vmovge	s0, r3
 80055c0:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8005614 <__ieee754_expf+0x198>
 80055c4:	bfbc      	itt	lt
 80055c6:	ee00 3a10 	vmovlt	s0, r3
 80055ca:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80055ce:	4770      	bx	lr
 80055d0:	00000000 	.word	0x00000000
 80055d4:	42b17217 	.word	0x42b17217
 80055d8:	42cff1b5 	.word	0x42cff1b5
 80055dc:	3eb17218 	.word	0x3eb17218
 80055e0:	3f851591 	.word	0x3f851591
 80055e4:	08005758 	.word	0x08005758
 80055e8:	08005760 	.word	0x08005760
 80055ec:	3331bb4c 	.word	0x3331bb4c
 80055f0:	b5ddea0e 	.word	0xb5ddea0e
 80055f4:	388ab355 	.word	0x388ab355
 80055f8:	bb360b61 	.word	0xbb360b61
 80055fc:	3e2aaaab 	.word	0x3e2aaaab
 8005600:	08005750 	.word	0x08005750
 8005604:	3fb8aa3b 	.word	0x3fb8aa3b
 8005608:	3f317180 	.word	0x3f317180
 800560c:	3717f7d1 	.word	0x3717f7d1
 8005610:	7149f2ca 	.word	0x7149f2ca
 8005614:	0d800000 	.word	0x0d800000

08005618 <with_errnof>:
 8005618:	b513      	push	{r0, r1, r4, lr}
 800561a:	4604      	mov	r4, r0
 800561c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005620:	f7ff fae6 	bl	8004bf0 <__errno>
 8005624:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005628:	6004      	str	r4, [r0, #0]
 800562a:	b002      	add	sp, #8
 800562c:	bd10      	pop	{r4, pc}

0800562e <xflowf>:
 800562e:	b130      	cbz	r0, 800563e <xflowf+0x10>
 8005630:	eef1 7a40 	vneg.f32	s15, s0
 8005634:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005638:	2022      	movs	r0, #34	; 0x22
 800563a:	f7ff bfed 	b.w	8005618 <with_errnof>
 800563e:	eef0 7a40 	vmov.f32	s15, s0
 8005642:	e7f7      	b.n	8005634 <xflowf+0x6>

08005644 <__math_uflowf>:
 8005644:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800564c <__math_uflowf+0x8>
 8005648:	f7ff bff1 	b.w	800562e <xflowf>
 800564c:	10000000 	.word	0x10000000

08005650 <__math_oflowf>:
 8005650:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005658 <__math_oflowf+0x8>
 8005654:	f7ff bfeb 	b.w	800562e <xflowf>
 8005658:	70000000 	.word	0x70000000

0800565c <_init>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	bf00      	nop
 8005660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005662:	bc08      	pop	{r3}
 8005664:	469e      	mov	lr, r3
 8005666:	4770      	bx	lr

08005668 <_fini>:
 8005668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566a:	bf00      	nop
 800566c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566e:	bc08      	pop	{r3}
 8005670:	469e      	mov	lr, r3
 8005672:	4770      	bx	lr
