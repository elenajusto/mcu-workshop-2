
mcu-workshop-take2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000656c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  0800670c  0800670c  0001670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006830  08006830  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006830  08006830  00016830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006838  08006838  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006838  08006838  00016838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800683c  0800683c  0001683c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000030c  2000005c  0800689c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000368  0800689c  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000137b2  00000000  00000000  0002011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028c6  00000000  00000000  000338d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001210  00000000  00000000  00036198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e28  00000000  00000000  000373a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019610  00000000  00000000  000381d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016482  00000000  00000000  000517e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a32e6  00000000  00000000  00067c62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054dc  00000000  00000000  0010af48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00110424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080066f4 	.word	0x080066f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080066f4 	.word	0x080066f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_uldivmod>:
 800096c:	b953      	cbnz	r3, 8000984 <__aeabi_uldivmod+0x18>
 800096e:	b94a      	cbnz	r2, 8000984 <__aeabi_uldivmod+0x18>
 8000970:	2900      	cmp	r1, #0
 8000972:	bf08      	it	eq
 8000974:	2800      	cmpeq	r0, #0
 8000976:	bf1c      	itt	ne
 8000978:	f04f 31ff 	movne.w	r1, #4294967295
 800097c:	f04f 30ff 	movne.w	r0, #4294967295
 8000980:	f000 b970 	b.w	8000c64 <__aeabi_idiv0>
 8000984:	f1ad 0c08 	sub.w	ip, sp, #8
 8000988:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800098c:	f000 f806 	bl	800099c <__udivmoddi4>
 8000990:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000998:	b004      	add	sp, #16
 800099a:	4770      	bx	lr

0800099c <__udivmoddi4>:
 800099c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a0:	9e08      	ldr	r6, [sp, #32]
 80009a2:	460d      	mov	r5, r1
 80009a4:	4604      	mov	r4, r0
 80009a6:	460f      	mov	r7, r1
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d14a      	bne.n	8000a42 <__udivmoddi4+0xa6>
 80009ac:	428a      	cmp	r2, r1
 80009ae:	4694      	mov	ip, r2
 80009b0:	d965      	bls.n	8000a7e <__udivmoddi4+0xe2>
 80009b2:	fab2 f382 	clz	r3, r2
 80009b6:	b143      	cbz	r3, 80009ca <__udivmoddi4+0x2e>
 80009b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80009bc:	f1c3 0220 	rsb	r2, r3, #32
 80009c0:	409f      	lsls	r7, r3
 80009c2:	fa20 f202 	lsr.w	r2, r0, r2
 80009c6:	4317      	orrs	r7, r2
 80009c8:	409c      	lsls	r4, r3
 80009ca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009ce:	fa1f f58c 	uxth.w	r5, ip
 80009d2:	fbb7 f1fe 	udiv	r1, r7, lr
 80009d6:	0c22      	lsrs	r2, r4, #16
 80009d8:	fb0e 7711 	mls	r7, lr, r1, r7
 80009dc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009e0:	fb01 f005 	mul.w	r0, r1, r5
 80009e4:	4290      	cmp	r0, r2
 80009e6:	d90a      	bls.n	80009fe <__udivmoddi4+0x62>
 80009e8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ec:	f101 37ff 	add.w	r7, r1, #4294967295
 80009f0:	f080 811c 	bcs.w	8000c2c <__udivmoddi4+0x290>
 80009f4:	4290      	cmp	r0, r2
 80009f6:	f240 8119 	bls.w	8000c2c <__udivmoddi4+0x290>
 80009fa:	3902      	subs	r1, #2
 80009fc:	4462      	add	r2, ip
 80009fe:	1a12      	subs	r2, r2, r0
 8000a00:	b2a4      	uxth	r4, r4
 8000a02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a0e:	fb00 f505 	mul.w	r5, r0, r5
 8000a12:	42a5      	cmp	r5, r4
 8000a14:	d90a      	bls.n	8000a2c <__udivmoddi4+0x90>
 8000a16:	eb1c 0404 	adds.w	r4, ip, r4
 8000a1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a1e:	f080 8107 	bcs.w	8000c30 <__udivmoddi4+0x294>
 8000a22:	42a5      	cmp	r5, r4
 8000a24:	f240 8104 	bls.w	8000c30 <__udivmoddi4+0x294>
 8000a28:	4464      	add	r4, ip
 8000a2a:	3802      	subs	r0, #2
 8000a2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a30:	1b64      	subs	r4, r4, r5
 8000a32:	2100      	movs	r1, #0
 8000a34:	b11e      	cbz	r6, 8000a3e <__udivmoddi4+0xa2>
 8000a36:	40dc      	lsrs	r4, r3
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0xbc>
 8000a46:	2e00      	cmp	r6, #0
 8000a48:	f000 80ed 	beq.w	8000c26 <__udivmoddi4+0x28a>
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a52:	4608      	mov	r0, r1
 8000a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a58:	fab3 f183 	clz	r1, r3
 8000a5c:	2900      	cmp	r1, #0
 8000a5e:	d149      	bne.n	8000af4 <__udivmoddi4+0x158>
 8000a60:	42ab      	cmp	r3, r5
 8000a62:	d302      	bcc.n	8000a6a <__udivmoddi4+0xce>
 8000a64:	4282      	cmp	r2, r0
 8000a66:	f200 80f8 	bhi.w	8000c5a <__udivmoddi4+0x2be>
 8000a6a:	1a84      	subs	r4, r0, r2
 8000a6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a70:	2001      	movs	r0, #1
 8000a72:	4617      	mov	r7, r2
 8000a74:	2e00      	cmp	r6, #0
 8000a76:	d0e2      	beq.n	8000a3e <__udivmoddi4+0xa2>
 8000a78:	e9c6 4700 	strd	r4, r7, [r6]
 8000a7c:	e7df      	b.n	8000a3e <__udivmoddi4+0xa2>
 8000a7e:	b902      	cbnz	r2, 8000a82 <__udivmoddi4+0xe6>
 8000a80:	deff      	udf	#255	; 0xff
 8000a82:	fab2 f382 	clz	r3, r2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f040 8090 	bne.w	8000bac <__udivmoddi4+0x210>
 8000a8c:	1a8a      	subs	r2, r1, r2
 8000a8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a92:	fa1f fe8c 	uxth.w	lr, ip
 8000a96:	2101      	movs	r1, #1
 8000a98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000aa0:	0c22      	lsrs	r2, r4, #16
 8000aa2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000aa6:	fb0e f005 	mul.w	r0, lr, r5
 8000aaa:	4290      	cmp	r0, r2
 8000aac:	d908      	bls.n	8000ac0 <__udivmoddi4+0x124>
 8000aae:	eb1c 0202 	adds.w	r2, ip, r2
 8000ab2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0x122>
 8000ab8:	4290      	cmp	r0, r2
 8000aba:	f200 80cb 	bhi.w	8000c54 <__udivmoddi4+0x2b8>
 8000abe:	4645      	mov	r5, r8
 8000ac0:	1a12      	subs	r2, r2, r0
 8000ac2:	b2a4      	uxth	r4, r4
 8000ac4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ac8:	fb07 2210 	mls	r2, r7, r0, r2
 8000acc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ad0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ad4:	45a6      	cmp	lr, r4
 8000ad6:	d908      	bls.n	8000aea <__udivmoddi4+0x14e>
 8000ad8:	eb1c 0404 	adds.w	r4, ip, r4
 8000adc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ae0:	d202      	bcs.n	8000ae8 <__udivmoddi4+0x14c>
 8000ae2:	45a6      	cmp	lr, r4
 8000ae4:	f200 80bb 	bhi.w	8000c5e <__udivmoddi4+0x2c2>
 8000ae8:	4610      	mov	r0, r2
 8000aea:	eba4 040e 	sub.w	r4, r4, lr
 8000aee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000af2:	e79f      	b.n	8000a34 <__udivmoddi4+0x98>
 8000af4:	f1c1 0720 	rsb	r7, r1, #32
 8000af8:	408b      	lsls	r3, r1
 8000afa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000afe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b02:	fa05 f401 	lsl.w	r4, r5, r1
 8000b06:	fa20 f307 	lsr.w	r3, r0, r7
 8000b0a:	40fd      	lsrs	r5, r7
 8000b0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b10:	4323      	orrs	r3, r4
 8000b12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b16:	fa1f fe8c 	uxth.w	lr, ip
 8000b1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b1e:	0c1c      	lsrs	r4, r3, #16
 8000b20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b24:	fb08 f50e 	mul.w	r5, r8, lr
 8000b28:	42a5      	cmp	r5, r4
 8000b2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b32:	d90b      	bls.n	8000b4c <__udivmoddi4+0x1b0>
 8000b34:	eb1c 0404 	adds.w	r4, ip, r4
 8000b38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b3c:	f080 8088 	bcs.w	8000c50 <__udivmoddi4+0x2b4>
 8000b40:	42a5      	cmp	r5, r4
 8000b42:	f240 8085 	bls.w	8000c50 <__udivmoddi4+0x2b4>
 8000b46:	f1a8 0802 	sub.w	r8, r8, #2
 8000b4a:	4464      	add	r4, ip
 8000b4c:	1b64      	subs	r4, r4, r5
 8000b4e:	b29d      	uxth	r5, r3
 8000b50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b54:	fb09 4413 	mls	r4, r9, r3, r4
 8000b58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d908      	bls.n	8000b76 <__udivmoddi4+0x1da>
 8000b64:	eb1c 0404 	adds.w	r4, ip, r4
 8000b68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b6c:	d26c      	bcs.n	8000c48 <__udivmoddi4+0x2ac>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	d96a      	bls.n	8000c48 <__udivmoddi4+0x2ac>
 8000b72:	3b02      	subs	r3, #2
 8000b74:	4464      	add	r4, ip
 8000b76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b7e:	eba4 040e 	sub.w	r4, r4, lr
 8000b82:	42ac      	cmp	r4, r5
 8000b84:	46c8      	mov	r8, r9
 8000b86:	46ae      	mov	lr, r5
 8000b88:	d356      	bcc.n	8000c38 <__udivmoddi4+0x29c>
 8000b8a:	d053      	beq.n	8000c34 <__udivmoddi4+0x298>
 8000b8c:	b156      	cbz	r6, 8000ba4 <__udivmoddi4+0x208>
 8000b8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b92:	eb64 040e 	sbc.w	r4, r4, lr
 8000b96:	fa04 f707 	lsl.w	r7, r4, r7
 8000b9a:	40ca      	lsrs	r2, r1
 8000b9c:	40cc      	lsrs	r4, r1
 8000b9e:	4317      	orrs	r7, r2
 8000ba0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bac:	f1c3 0120 	rsb	r1, r3, #32
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000bb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000bbc:	409d      	lsls	r5, r3
 8000bbe:	432a      	orrs	r2, r5
 8000bc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bcc:	fb07 1510 	mls	r5, r7, r0, r1
 8000bd0:	0c11      	lsrs	r1, r2, #16
 8000bd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000bda:	428d      	cmp	r5, r1
 8000bdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x258>
 8000be2:	eb1c 0101 	adds.w	r1, ip, r1
 8000be6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bea:	d22f      	bcs.n	8000c4c <__udivmoddi4+0x2b0>
 8000bec:	428d      	cmp	r5, r1
 8000bee:	d92d      	bls.n	8000c4c <__udivmoddi4+0x2b0>
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1b49      	subs	r1, r1, r5
 8000bf6:	b292      	uxth	r2, r2
 8000bf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000c00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c04:	fb05 f10e 	mul.w	r1, r5, lr
 8000c08:	4291      	cmp	r1, r2
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x282>
 8000c0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c14:	d216      	bcs.n	8000c44 <__udivmoddi4+0x2a8>
 8000c16:	4291      	cmp	r1, r2
 8000c18:	d914      	bls.n	8000c44 <__udivmoddi4+0x2a8>
 8000c1a:	3d02      	subs	r5, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a52      	subs	r2, r2, r1
 8000c20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c24:	e738      	b.n	8000a98 <__udivmoddi4+0xfc>
 8000c26:	4631      	mov	r1, r6
 8000c28:	4630      	mov	r0, r6
 8000c2a:	e708      	b.n	8000a3e <__udivmoddi4+0xa2>
 8000c2c:	4639      	mov	r1, r7
 8000c2e:	e6e6      	b.n	80009fe <__udivmoddi4+0x62>
 8000c30:	4610      	mov	r0, r2
 8000c32:	e6fb      	b.n	8000a2c <__udivmoddi4+0x90>
 8000c34:	4548      	cmp	r0, r9
 8000c36:	d2a9      	bcs.n	8000b8c <__udivmoddi4+0x1f0>
 8000c38:	ebb9 0802 	subs.w	r8, r9, r2
 8000c3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c40:	3b01      	subs	r3, #1
 8000c42:	e7a3      	b.n	8000b8c <__udivmoddi4+0x1f0>
 8000c44:	4645      	mov	r5, r8
 8000c46:	e7ea      	b.n	8000c1e <__udivmoddi4+0x282>
 8000c48:	462b      	mov	r3, r5
 8000c4a:	e794      	b.n	8000b76 <__udivmoddi4+0x1da>
 8000c4c:	4640      	mov	r0, r8
 8000c4e:	e7d1      	b.n	8000bf4 <__udivmoddi4+0x258>
 8000c50:	46d0      	mov	r8, sl
 8000c52:	e77b      	b.n	8000b4c <__udivmoddi4+0x1b0>
 8000c54:	3d02      	subs	r5, #2
 8000c56:	4462      	add	r2, ip
 8000c58:	e732      	b.n	8000ac0 <__udivmoddi4+0x124>
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e70a      	b.n	8000a74 <__udivmoddi4+0xd8>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	e742      	b.n	8000aea <__udivmoddi4+0x14e>

08000c64 <__aeabi_idiv0>:
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f000 fd40 	bl	80016f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f870 	bl	8000d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f000 fa0e 	bl	8001094 <MX_GPIO_Init>
  MX_CRC_Init();
 8000c78:	f000 f92c 	bl	8000ed4 <MX_CRC_Init>
  MX_RTC_Init();
 8000c7c:	f000 f96c 	bl	8000f58 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000c80:	f000 f9de 	bl	8001040 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000c84:	f000 f98e 	bl	8000fa4 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000c88:	f000 f8d2 	bl	8000e30 <MX_ADC1_Init>
  MX_I2C3_Init();
 8000c8c:	f000 f936 	bl	8000efc <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */

  // Debug
  sprintf(msg, "Timer Starting.\r\n");
 8000c90:	4926      	ldr	r1, [pc, #152]	; (8000d2c <main+0xc4>)
 8000c92:	4827      	ldr	r0, [pc, #156]	; (8000d30 <main+0xc8>)
 8000c94:	f004 ffc0 	bl	8005c18 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000c98:	4825      	ldr	r0, [pc, #148]	; (8000d30 <main+0xc8>)
 8000c9a:	f7ff faa1 	bl	80001e0 <strlen>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	4922      	ldr	r1, [pc, #136]	; (8000d30 <main+0xc8>)
 8000ca8:	4822      	ldr	r0, [pc, #136]	; (8000d34 <main+0xcc>)
 8000caa:	f003 fb0d 	bl	80042c8 <HAL_UART_Transmit>

  // Start Timer
  // Enable the TIM4 peripheral
  //__HAL_RCC_TIM4_CLK_ENABLE();
  HAL_NVIC_SetPriority(TIM4_IRQn, 1, 1);
 8000cae:	2201      	movs	r2, #1
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	201e      	movs	r0, #30
 8000cb4:	f001 f963 	bl	8001f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cb8:	201e      	movs	r0, #30
 8000cba:	f001 f97c 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim4);
 8000cbe:	481e      	ldr	r0, [pc, #120]	; (8000d38 <main+0xd0>)
 8000cc0:	f002 fec8 	bl	8003a54 <HAL_TIM_Base_Start_IT>

  // Initialise infraredPD instance
  InfraredPD_Initialize(mcu);
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <main+0xd4>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f004 f8f7 	bl	8004ebc <InfraredPD_Initialize>
  IPD_Instance = InfraredPD_CreateInstance(&algo_conf);
 8000cce:	481c      	ldr	r0, [pc, #112]	; (8000d40 <main+0xd8>)
 8000cd0:	f004 f990 	bl	8004ff4 <InfraredPD_CreateInstance>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	4a1b      	ldr	r2, [pc, #108]	; (8000d44 <main+0xdc>)
 8000cd8:	6013      	str	r3, [r2, #0]

  device_conf.odr = 30;
 8000cda:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <main+0xe0>)
 8000cdc:	221e      	movs	r2, #30
 8000cde:	701a      	strb	r2, [r3, #0]
  device_conf.avg_tmos = 32;
 8000ce0:	4b19      	ldr	r3, [pc, #100]	; (8000d48 <main+0xe0>)
 8000ce2:	2220      	movs	r2, #32
 8000ce4:	805a      	strh	r2, [r3, #2]
  device_conf.avg_t = 8;
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <main+0xe0>)
 8000ce8:	2208      	movs	r2, #8
 8000cea:	711a      	strb	r2, [r3, #4]

  status = InfraredPD_Start(IPD_Instance, &device_conf, &algo_conf);
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <main+0xdc>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <main+0xd8>)
 8000cf2:	4915      	ldr	r1, [pc, #84]	; (8000d48 <main+0xe0>)
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f004 f997 	bl	8005028 <InfraredPD_Start>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <main+0xe4>)
 8000d00:	701a      	strb	r2, [r3, #0]

  // Debug
  sprintf(msg, "Program Starting.");
 8000d02:	4913      	ldr	r1, [pc, #76]	; (8000d50 <main+0xe8>)
 8000d04:	480a      	ldr	r0, [pc, #40]	; (8000d30 <main+0xc8>)
 8000d06:	f004 ff87 	bl	8005c18 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000d0a:	4809      	ldr	r0, [pc, #36]	; (8000d30 <main+0xc8>)
 8000d0c:	f7ff fa68 	bl	80001e0 <strlen>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	4905      	ldr	r1, [pc, #20]	; (8000d30 <main+0xc8>)
 8000d1a:	4806      	ldr	r0, [pc, #24]	; (8000d34 <main+0xcc>)
 8000d1c:	f003 fad4 	bl	80042c8 <HAL_UART_Transmit>

  stateClear();
 8000d20:	f000 fa92 	bl	8001248 <stateClear>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	getPotValue();
 8000d24:	f000 fa7e 	bl	8001224 <getPotValue>
 8000d28:	e7fc      	b.n	8000d24 <main+0xbc>
 8000d2a:	bf00      	nop
 8000d2c:	0800670c 	.word	0x0800670c
 8000d30:	2000007c 	.word	0x2000007c
 8000d34:	200001a0 	.word	0x200001a0
 8000d38:	20000158 	.word	0x20000158
 8000d3c:	200001f4 	.word	0x200001f4
 8000d40:	200001f8 	.word	0x200001f8
 8000d44:	200001f0 	.word	0x200001f0
 8000d48:	20000200 	.word	0x20000200
 8000d4c:	2000020c 	.word	0x2000020c
 8000d50:	08006720 	.word	0x08006720

08000d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b094      	sub	sp, #80	; 0x50
 8000d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5a:	f107 0320 	add.w	r3, r7, #32
 8000d5e:	2230      	movs	r2, #48	; 0x30
 8000d60:	2100      	movs	r1, #0
 8000d62:	4618      	mov	r0, r3
 8000d64:	f004 ff78 	bl	8005c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <SystemClock_Config+0xd4>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a29      	ldr	r2, [pc, #164]	; (8000e28 <SystemClock_Config+0xd4>)
 8000d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <SystemClock_Config+0xd4>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	4b24      	ldr	r3, [pc, #144]	; (8000e2c <SystemClock_Config+0xd8>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000da0:	4a22      	ldr	r2, [pc, #136]	; (8000e2c <SystemClock_Config+0xd8>)
 8000da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da6:	6013      	str	r3, [r2, #0]
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <SystemClock_Config+0xd8>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000db4:	230a      	movs	r3, #10
 8000db6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dbc:	2310      	movs	r3, #16
 8000dbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dd4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dd6:	2304      	movs	r3, #4
 8000dd8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dda:	2307      	movs	r3, #7
 8000ddc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dde:	f107 0320 	add.w	r3, r7, #32
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 ff5a 	bl	8002c9c <HAL_RCC_OscConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000dee:	f000 fa41 	bl	8001274 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df2:	230f      	movs	r3, #15
 8000df4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df6:	2302      	movs	r3, #2
 8000df8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e04:	2300      	movs	r3, #0
 8000e06:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f002 f9bc 	bl	800318c <HAL_RCC_ClockConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e1a:	f000 fa2b 	bl	8001274 <Error_Handler>
  }
}
 8000e1e:	bf00      	nop
 8000e20:	3750      	adds	r7, #80	; 0x50
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000

08000e30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e36:	463b      	mov	r3, r7
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <MX_ADC1_Init+0x98>)
 8000e44:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <MX_ADC1_Init+0x9c>)
 8000e46:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <MX_ADC1_Init+0x98>)
 8000e4a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e4e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e50:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <MX_ADC1_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <MX_ADC1_Init+0x98>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <MX_ADC1_Init+0x98>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <MX_ADC1_Init+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_ADC1_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e70:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <MX_ADC1_Init+0x98>)
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <MX_ADC1_Init+0xa0>)
 8000e74:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_ADC1_Init+0x98>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <MX_ADC1_Init+0x98>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e82:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <MX_ADC1_Init+0x98>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ec8 <MX_ADC1_Init+0x98>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e90:	480d      	ldr	r0, [pc, #52]	; (8000ec8 <MX_ADC1_Init+0x98>)
 8000e92:	f000 fc9f 	bl	80017d4 <HAL_ADC_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e9c:	f000 f9ea 	bl	8001274 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eac:	463b      	mov	r3, r7
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4805      	ldr	r0, [pc, #20]	; (8000ec8 <MX_ADC1_Init+0x98>)
 8000eb2:	f000 fd6b 	bl	800198c <HAL_ADC_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ebc:	f000 f9da 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000094 	.word	0x20000094
 8000ecc:	40012000 	.word	0x40012000
 8000ed0:	0f000001 	.word	0x0f000001

08000ed4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <MX_CRC_Init+0x20>)
 8000eda:	4a07      	ldr	r2, [pc, #28]	; (8000ef8 <MX_CRC_Init+0x24>)
 8000edc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ede:	4805      	ldr	r0, [pc, #20]	; (8000ef4 <MX_CRC_Init+0x20>)
 8000ee0:	f001 f883 	bl	8001fea <HAL_CRC_Init>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000eea:	f000 f9c3 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200000dc 	.word	0x200000dc
 8000ef8:	40023000 	.word	0x40023000

08000efc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000f00:	4b12      	ldr	r3, [pc, #72]	; (8000f4c <MX_I2C3_Init+0x50>)
 8000f02:	4a13      	ldr	r2, [pc, #76]	; (8000f50 <MX_I2C3_Init+0x54>)
 8000f04:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <MX_I2C3_Init+0x50>)
 8000f08:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <MX_I2C3_Init+0x58>)
 8000f0a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f0c:	4b0f      	ldr	r3, [pc, #60]	; (8000f4c <MX_I2C3_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <MX_I2C3_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <MX_I2C3_Init+0x50>)
 8000f1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f1e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <MX_I2C3_Init+0x50>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000f26:	4b09      	ldr	r3, [pc, #36]	; (8000f4c <MX_I2C3_Init+0x50>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <MX_I2C3_Init+0x50>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <MX_I2C3_Init+0x50>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_I2C3_Init+0x50>)
 8000f3a:	f001 fa11 	bl	8002360 <HAL_I2C_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000f44:	f000 f996 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	200000e4 	.word	0x200000e4
 8000f50:	40005c00 	.word	0x40005c00
 8000f54:	000186a0 	.word	0x000186a0

08000f58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_RTC_Init+0x44>)
 8000f5e:	4a10      	ldr	r2, [pc, #64]	; (8000fa0 <MX_RTC_Init+0x48>)
 8000f60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_RTC_Init+0x44>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_RTC_Init+0x44>)
 8000f6a:	227f      	movs	r2, #127	; 0x7f
 8000f6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <MX_RTC_Init+0x44>)
 8000f70:	22ff      	movs	r2, #255	; 0xff
 8000f72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_RTC_Init+0x44>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <MX_RTC_Init+0x44>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_RTC_Init+0x44>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_RTC_Init+0x44>)
 8000f88:	f002 fc0e 	bl	80037a8 <HAL_RTC_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f92:	f000 f96f 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000138 	.word	0x20000138
 8000fa0:	40002800 	.word	0x40002800

08000fa4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <MX_TIM4_Init+0x94>)
 8000fc2:	4a1e      	ldr	r2, [pc, #120]	; (800103c <MX_TIM4_Init+0x98>)
 8000fc4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 319;
 8000fc6:	4b1c      	ldr	r3, [pc, #112]	; (8001038 <MX_TIM4_Init+0x94>)
 8000fc8:	f240 123f 	movw	r2, #319	; 0x13f
 8000fcc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <MX_TIM4_Init+0x94>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <MX_TIM4_Init+0x94>)
 8000fd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	; (8001038 <MX_TIM4_Init+0x94>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <MX_TIM4_Init+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fe8:	4813      	ldr	r0, [pc, #76]	; (8001038 <MX_TIM4_Init+0x94>)
 8000fea:	f002 fce3 	bl	80039b4 <HAL_TIM_Base_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000ff4:	f000 f93e 	bl	8001274 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ffe:	f107 0308 	add.w	r3, r7, #8
 8001002:	4619      	mov	r1, r3
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <MX_TIM4_Init+0x94>)
 8001006:	f002 fe77 	bl	8003cf8 <HAL_TIM_ConfigClockSource>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001010:	f000 f930 	bl	8001274 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001014:	2300      	movs	r3, #0
 8001016:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <MX_TIM4_Init+0x94>)
 8001022:	f003 f87f 	bl	8004124 <HAL_TIMEx_MasterConfigSynchronization>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800102c:	f000 f922 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001030:	bf00      	nop
 8001032:	3718      	adds	r7, #24
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	20000158 	.word	0x20000158
 800103c:	40000800 	.word	0x40000800

08001040 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <MX_USART2_UART_Init+0x4c>)
 8001046:	4a12      	ldr	r2, [pc, #72]	; (8001090 <MX_USART2_UART_Init+0x50>)
 8001048:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800104a:	4b10      	ldr	r3, [pc, #64]	; (800108c <MX_USART2_UART_Init+0x4c>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <MX_USART2_UART_Init+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b0c      	ldr	r3, [pc, #48]	; (800108c <MX_USART2_UART_Init+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105e:	4b0b      	ldr	r3, [pc, #44]	; (800108c <MX_USART2_UART_Init+0x4c>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_USART2_UART_Init+0x4c>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b08      	ldr	r3, [pc, #32]	; (800108c <MX_USART2_UART_Init+0x4c>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <MX_USART2_UART_Init+0x4c>)
 8001072:	2200      	movs	r2, #0
 8001074:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001076:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_USART2_UART_Init+0x4c>)
 8001078:	f003 f8d6 	bl	8004228 <HAL_UART_Init>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001082:	f000 f8f7 	bl	8001274 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200001a0 	.word	0x200001a0
 8001090:	40004400 	.word	0x40004400

08001094 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	2200      	movs	r2, #0
 80010a0:	601a      	str	r2, [r3, #0]
 80010a2:	605a      	str	r2, [r3, #4]
 80010a4:	609a      	str	r2, [r3, #8]
 80010a6:	60da      	str	r2, [r3, #12]
 80010a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
 80010ae:	4b26      	ldr	r3, [pc, #152]	; (8001148 <MX_GPIO_Init+0xb4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a25      	ldr	r2, [pc, #148]	; (8001148 <MX_GPIO_Init+0xb4>)
 80010b4:	f043 0304 	orr.w	r3, r3, #4
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b23      	ldr	r3, [pc, #140]	; (8001148 <MX_GPIO_Init+0xb4>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0304 	and.w	r3, r3, #4
 80010c2:	613b      	str	r3, [r7, #16]
 80010c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_GPIO_Init+0xb4>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a1e      	ldr	r2, [pc, #120]	; (8001148 <MX_GPIO_Init+0xb4>)
 80010d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_GPIO_Init+0xb4>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b18      	ldr	r3, [pc, #96]	; (8001148 <MX_GPIO_Init+0xb4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a17      	ldr	r2, [pc, #92]	; (8001148 <MX_GPIO_Init+0xb4>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_GPIO_Init+0xb4>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_GPIO_Init+0xb4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a10      	ldr	r2, [pc, #64]	; (8001148 <MX_GPIO_Init+0xb4>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <MX_GPIO_Init+0xb4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	2120      	movs	r1, #32
 800111e:	480b      	ldr	r0, [pc, #44]	; (800114c <MX_GPIO_Init+0xb8>)
 8001120:	f001 f904 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001124:	2320      	movs	r3, #32
 8001126:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 0314 	add.w	r3, r7, #20
 8001138:	4619      	mov	r1, r3
 800113a:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_GPIO_Init+0xb8>)
 800113c:	f000 ff72 	bl	8002024 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	; 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000

08001150 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a25      	ldr	r2, [pc, #148]	; (80011f4 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d144      	bne.n	80011ec <HAL_TIM_PeriodElapsedCallback+0x9c>
		// InfraredPD functions
		IPD_input_t data_in;
		IPD_output_t data_out;

		// Debug
		sprintf(msg, "Running.\r\n");
 8001162:	4925      	ldr	r1, [pc, #148]	; (80011f8 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001164:	4825      	ldr	r0, [pc, #148]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001166:	f004 fd57 	bl	8005c18 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 800116a:	4824      	ldr	r0, [pc, #144]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 800116c:	f7ff f838 	bl	80001e0 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f04f 33ff 	mov.w	r3, #4294967295
 8001178:	4920      	ldr	r1, [pc, #128]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 800117a:	4821      	ldr	r0, [pc, #132]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800117c:	f003 f8a4 	bl	80042c8 <HAL_UART_Transmit>

		//ReadSensor(data_in.t_amb, data_in.t_obj);

		InfraredPD_Update(&IPD_Instance, &data_in, &data_out);
 8001180:	f107 020c 	add.w	r2, r7, #12
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4619      	mov	r1, r3
 800118a:	481e      	ldr	r0, [pc, #120]	; (8001204 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800118c:	f004 f940 	bl	8005410 <InfraredPD_Update>

		ObjectTempComp = data_out.t_obj_comp;
 8001190:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001194:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001196:	801a      	strh	r2, [r3, #0]
		ObjectTempCompChange = data_out.t_obj_change;
 8001198:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800119e:	801a      	strh	r2, [r3, #0]
		MotionDetected = data_out.mot_flag;
 80011a0:	7c3a      	ldrb	r2, [r7, #16]
 80011a2:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80011a4:	701a      	strb	r2, [r3, #0]
		PresenceDetected = data_out.pres_flag;
 80011a6:	7c7a      	ldrb	r2, [r7, #17]
 80011a8:	4b1a      	ldr	r3, [pc, #104]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80011aa:	701a      	strb	r2, [r3, #0]

		// Print IR sensor value
		sprintf(msg, "ObjectTemp: %u\n\r", &PresenceDetected);
 80011ac:	4a19      	ldr	r2, [pc, #100]	; (8001214 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80011ae:	491a      	ldr	r1, [pc, #104]	; (8001218 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80011b0:	4812      	ldr	r0, [pc, #72]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011b2:	f004 fd31 	bl	8005c18 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80011b6:	4811      	ldr	r0, [pc, #68]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011b8:	f7ff f812 	bl	80001e0 <strlen>
 80011bc:	4603      	mov	r3, r0
 80011be:	b29a      	uxth	r2, r3
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
 80011c4:	490d      	ldr	r1, [pc, #52]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011c6:	480e      	ldr	r0, [pc, #56]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80011c8:	f003 f87e 	bl	80042c8 <HAL_UART_Transmit>

		// Print Potentiometer value
		sprintf(msg, "ADC Reading: %hu\r\n", &potValue);
 80011cc:	4a13      	ldr	r2, [pc, #76]	; (800121c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80011ce:	4914      	ldr	r1, [pc, #80]	; (8001220 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80011d0:	480a      	ldr	r0, [pc, #40]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011d2:	f004 fd21 	bl	8005c18 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80011d6:	4809      	ldr	r0, [pc, #36]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011d8:	f7ff f802 	bl	80001e0 <strlen>
 80011dc:	4603      	mov	r3, r0
 80011de:	b29a      	uxth	r2, r3
 80011e0:	f04f 33ff 	mov.w	r3, #4294967295
 80011e4:	4905      	ldr	r1, [pc, #20]	; (80011fc <HAL_TIM_PeriodElapsedCallback+0xac>)
 80011e6:	4806      	ldr	r0, [pc, #24]	; (8001200 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80011e8:	f003 f86e 	bl	80042c8 <HAL_UART_Transmit>
	}
}
 80011ec:	bf00      	nop
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40000800 	.word	0x40000800
 80011f8:	08006734 	.word	0x08006734
 80011fc:	2000007c 	.word	0x2000007c
 8001200:	200001a0 	.word	0x200001a0
 8001204:	200001f0 	.word	0x200001f0
 8001208:	200001e8 	.word	0x200001e8
 800120c:	200001ea 	.word	0x200001ea
 8001210:	200001ec 	.word	0x200001ec
 8001214:	200001ed 	.word	0x200001ed
 8001218:	08006740 	.word	0x08006740
 800121c:	20000210 	.word	0x20000210
 8001220:	08006754 	.word	0x08006754

08001224 <getPotValue>:

// Read sensor value


// ADC read
void getPotValue(){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
	/* Get pot value */
	uint16_t potValue;
	HAL_ADC_PollForConversion(&hadc1, 5);
 800122a:	2105      	movs	r1, #5
 800122c:	4805      	ldr	r0, [pc, #20]	; (8001244 <getPotValue+0x20>)
 800122e:	f000 fb14 	bl	800185a <HAL_ADC_PollForConversion>
	potValue = HAL_ADC_GetValue(&hadc1);
 8001232:	4804      	ldr	r0, [pc, #16]	; (8001244 <getPotValue+0x20>)
 8001234:	f000 fb9c 	bl	8001970 <HAL_ADC_GetValue>
 8001238:	4603      	mov	r3, r0
 800123a:	80fb      	strh	r3, [r7, #6]
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20000094 	.word	0x20000094

08001248 <stateClear>:

// LCD control - No intruder
void stateClear(){
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	I2C_LCD_Init(MyI2C_LCD);
 800124c:	2000      	movs	r0, #0
 800124e:	f003 fceb 	bl	8004c28 <I2C_LCD_Init>
	I2C_LCD_Init(MyI2C_LCD);
 8001252:	2000      	movs	r0, #0
 8001254:	f003 fce8 	bl	8004c28 <I2C_LCD_Init>
	I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	2000      	movs	r0, #0
 800125e:	f003 fdd1 	bl	8004e04 <I2C_LCD_SetCursor>
	I2C_LCD_WriteString(MyI2C_LCD, "All Clear");
 8001262:	4903      	ldr	r1, [pc, #12]	; (8001270 <stateClear+0x28>)
 8001264:	2000      	movs	r0, #0
 8001266:	f003 fe0f 	bl	8004e88 <I2C_LCD_WriteString>
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	08006768 	.word	0x08006768

08001274 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
}
 800127a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127c:	e7fe      	b.n	800127c <Error_Handler+0x8>
	...

08001280 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	607b      	str	r3, [r7, #4]
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_MspInit+0x4c>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	4a0f      	ldr	r2, [pc, #60]	; (80012cc <HAL_MspInit+0x4c>)
 8001290:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001294:	6453      	str	r3, [r2, #68]	; 0x44
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_MspInit+0x4c>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800129a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800129e:	607b      	str	r3, [r7, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	603b      	str	r3, [r7, #0]
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_MspInit+0x4c>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_MspInit+0x4c>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_MspInit+0x4c>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80012be:	2007      	movs	r0, #7
 80012c0:	f000 fe52 	bl	8001f68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c4:	bf00      	nop
 80012c6:	3708      	adds	r7, #8
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	40023800 	.word	0x40023800

080012d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b08a      	sub	sp, #40	; 0x28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a17      	ldr	r2, [pc, #92]	; (800134c <HAL_ADC_MspInit+0x7c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d127      	bne.n	8001342 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <HAL_ADC_MspInit+0x80>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fa:	4a15      	ldr	r2, [pc, #84]	; (8001350 <HAL_ADC_MspInit+0x80>)
 80012fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001300:	6453      	str	r3, [r2, #68]	; 0x44
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_ADC_MspInit+0x80>)
 8001304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130a:	613b      	str	r3, [r7, #16]
 800130c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
 8001312:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <HAL_ADC_MspInit+0x80>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_ADC_MspInit+0x80>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <HAL_ADC_MspInit+0x80>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800132a:	2301      	movs	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800132e:	2303      	movs	r3, #3
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <HAL_ADC_MspInit+0x84>)
 800133e:	f000 fe71 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	; 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40012000 	.word	0x40012000
 8001350:	40023800 	.word	0x40023800
 8001354:	40020000 	.word	0x40020000

08001358 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0b      	ldr	r2, [pc, #44]	; (8001394 <HAL_CRC_MspInit+0x3c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d10d      	bne.n	8001386 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_CRC_MspInit+0x40>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <HAL_CRC_MspInit+0x40>)
 8001374:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <HAL_CRC_MspInit+0x40>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40023000 	.word	0x40023000
 8001398:	40023800 	.word	0x40023800

0800139c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a28      	ldr	r2, [pc, #160]	; (800145c <HAL_I2C_MspInit+0xc0>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d14a      	bne.n	8001454 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b27      	ldr	r3, [pc, #156]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a26      	ldr	r2, [pc, #152]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b24      	ldr	r3, [pc, #144]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b20      	ldr	r3, [pc, #128]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a1f      	ldr	r2, [pc, #124]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013fc:	2312      	movs	r3, #18
 80013fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001408:	2304      	movs	r3, #4
 800140a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	4619      	mov	r1, r3
 8001412:	4814      	ldr	r0, [pc, #80]	; (8001464 <HAL_I2C_MspInit+0xc8>)
 8001414:	f000 fe06 	bl	8002024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001418:	2310      	movs	r3, #16
 800141a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800141c:	2312      	movs	r3, #18
 800141e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001424:	2303      	movs	r3, #3
 8001426:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001428:	2309      	movs	r3, #9
 800142a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	480d      	ldr	r0, [pc, #52]	; (8001468 <HAL_I2C_MspInit+0xcc>)
 8001434:	f000 fdf6 	bl	8002024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	4a07      	ldr	r2, [pc, #28]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 8001442:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001446:	6413      	str	r3, [r2, #64]	; 0x40
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_I2C_MspInit+0xc4>)
 800144a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001454:	bf00      	nop
 8001456:	3728      	adds	r7, #40	; 0x28
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	40005c00 	.word	0x40005c00
 8001460:	40023800 	.word	0x40023800
 8001464:	40020000 	.word	0x40020000
 8001468:	40020400 	.word	0x40020400

0800146c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b088      	sub	sp, #32
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a0c      	ldr	r2, [pc, #48]	; (80014bc <HAL_RTC_MspInit+0x50>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d111      	bne.n	80014b2 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800148e:	2302      	movs	r3, #2
 8001490:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001492:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001496:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	4618      	mov	r0, r3
 800149e:	f002 f895 	bl	80035cc <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80014a8:	f7ff fee4 	bl	8001274 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_RTC_MspInit+0x54>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014b2:	bf00      	nop
 80014b4:	3720      	adds	r7, #32
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40002800 	.word	0x40002800
 80014c0:	42470e3c 	.word	0x42470e3c

080014c4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a0e      	ldr	r2, [pc, #56]	; (800150c <HAL_TIM_Base_MspInit+0x48>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d115      	bne.n	8001502 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
 80014da:	4b0d      	ldr	r3, [pc, #52]	; (8001510 <HAL_TIM_Base_MspInit+0x4c>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	4a0c      	ldr	r2, [pc, #48]	; (8001510 <HAL_TIM_Base_MspInit+0x4c>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6413      	str	r3, [r2, #64]	; 0x40
 80014e6:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <HAL_TIM_Base_MspInit+0x4c>)
 80014e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	201e      	movs	r0, #30
 80014f8:	f000 fd41 	bl	8001f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80014fc:	201e      	movs	r0, #30
 80014fe:	f000 fd5a 	bl	8001fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001502:	bf00      	nop
 8001504:	3710      	adds	r7, #16
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40000800 	.word	0x40000800
 8001510:	40023800 	.word	0x40023800

08001514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b08a      	sub	sp, #40	; 0x28
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a19      	ldr	r2, [pc, #100]	; (8001598 <HAL_UART_MspInit+0x84>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d12b      	bne.n	800158e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <HAL_UART_MspInit+0x88>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	4a17      	ldr	r2, [pc, #92]	; (800159c <HAL_UART_MspInit+0x88>)
 8001540:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001544:	6413      	str	r3, [r2, #64]	; 0x40
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <HAL_UART_MspInit+0x88>)
 8001548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_UART_MspInit+0x88>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a10      	ldr	r2, [pc, #64]	; (800159c <HAL_UART_MspInit+0x88>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_UART_MspInit+0x88>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800156e:	230c      	movs	r3, #12
 8001570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001572:	2302      	movs	r3, #2
 8001574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800157e:	2307      	movs	r3, #7
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001582:	f107 0314 	add.w	r3, r7, #20
 8001586:	4619      	mov	r1, r3
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <HAL_UART_MspInit+0x8c>)
 800158a:	f000 fd4b 	bl	8002024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800158e:	bf00      	nop
 8001590:	3728      	adds	r7, #40	; 0x28
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40004400 	.word	0x40004400
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020000 	.word	0x40020000

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015a8:	e7fe      	b.n	80015a8 <NMI_Handler+0x4>

080015aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <MemManage_Handler+0x4>

080015b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f0:	f000 f8d0 	bl	8001794 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80015fc:	4802      	ldr	r0, [pc, #8]	; (8001608 <TIM4_IRQHandler+0x10>)
 80015fe:	f002 fa8b 	bl	8003b18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001602:	bf00      	nop
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000158 	.word	0x20000158

0800160c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <_sbrk+0x5c>)
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <_sbrk+0x60>)
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <_sbrk+0x64>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d102      	bne.n	800162e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001628:	4b11      	ldr	r3, [pc, #68]	; (8001670 <_sbrk+0x64>)
 800162a:	4a12      	ldr	r2, [pc, #72]	; (8001674 <_sbrk+0x68>)
 800162c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <_sbrk+0x64>)
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4413      	add	r3, r2
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	429a      	cmp	r2, r3
 800163a:	d207      	bcs.n	800164c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800163c:	f004 fb24 	bl	8005c88 <__errno>
 8001640:	4603      	mov	r3, r0
 8001642:	220c      	movs	r2, #12
 8001644:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001646:	f04f 33ff 	mov.w	r3, #4294967295
 800164a:	e009      	b.n	8001660 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800164c:	4b08      	ldr	r3, [pc, #32]	; (8001670 <_sbrk+0x64>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <_sbrk+0x64>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	4a05      	ldr	r2, [pc, #20]	; (8001670 <_sbrk+0x64>)
 800165c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3718      	adds	r7, #24
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	20018000 	.word	0x20018000
 800166c:	00000400 	.word	0x00000400
 8001670:	20000214 	.word	0x20000214
 8001674:	20000368 	.word	0x20000368

08001678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016a0:	f7ff ffea 	bl	8001678 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a4:	480c      	ldr	r0, [pc, #48]	; (80016d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016a6:	490d      	ldr	r1, [pc, #52]	; (80016dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016a8:	4a0d      	ldr	r2, [pc, #52]	; (80016e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016ac:	e002      	b.n	80016b4 <LoopCopyDataInit>

080016ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016b2:	3304      	adds	r3, #4

080016b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b8:	d3f9      	bcc.n	80016ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016bc:	4c0a      	ldr	r4, [pc, #40]	; (80016e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016c0:	e001      	b.n	80016c6 <LoopFillZerobss>

080016c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c4:	3204      	adds	r2, #4

080016c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c8:	d3fb      	bcc.n	80016c2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80016ca:	f004 fae3 	bl	8005c94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7ff facb 	bl	8000c68 <main>
  bx  lr    
 80016d2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80016e0:	08006840 	.word	0x08006840
  ldr r2, =_sbss
 80016e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80016e8:	20000368 	.word	0x20000368

080016ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC_IRQHandler>
	...

080016f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f4:	4b0e      	ldr	r3, [pc, #56]	; (8001730 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <HAL_Init+0x40>)
 80016fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <HAL_Init+0x40>)
 8001706:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	; (8001730 <HAL_Init+0x40>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a07      	ldr	r2, [pc, #28]	; (8001730 <HAL_Init+0x40>)
 8001712:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001718:	2003      	movs	r0, #3
 800171a:	f000 fc25 	bl	8001f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171e:	2000      	movs	r0, #0
 8001720:	f000 f808 	bl	8001734 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001724:	f7ff fdac 	bl	8001280 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023c00 	.word	0x40023c00

08001734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_InitTick+0x54>)
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_InitTick+0x58>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800174a:	fbb3 f3f1 	udiv	r3, r3, r1
 800174e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001752:	4618      	mov	r0, r3
 8001754:	f000 fc3d 	bl	8001fd2 <HAL_SYSTICK_Config>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e00e      	b.n	8001780 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2b0f      	cmp	r3, #15
 8001766:	d80a      	bhi.n	800177e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001768:	2200      	movs	r2, #0
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	f04f 30ff 	mov.w	r0, #4294967295
 8001770:	f000 fc05 	bl	8001f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <HAL_InitTick+0x5c>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	e000      	b.n	8001780 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
}
 8001780:	4618      	mov	r0, r3
 8001782:	3708      	adds	r7, #8
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000000 	.word	0x20000000
 800178c:	20000008 	.word	0x20000008
 8001790:	20000004 	.word	0x20000004

08001794 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001798:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_IncTick+0x20>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	461a      	mov	r2, r3
 800179e:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <HAL_IncTick+0x24>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4413      	add	r3, r2
 80017a4:	4a04      	ldr	r2, [pc, #16]	; (80017b8 <HAL_IncTick+0x24>)
 80017a6:	6013      	str	r3, [r2, #0]
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000008 	.word	0x20000008
 80017b8:	20000218 	.word	0x20000218

080017bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  return uwTick;
 80017c0:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <HAL_GetTick+0x14>)
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000218 	.word	0x20000218

080017d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e033      	b.n	8001852 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fd6c 	bl	80012d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	d118      	bne.n	8001844 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001816:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800181a:	f023 0302 	bic.w	r3, r3, #2
 800181e:	f043 0202 	orr.w	r2, r3, #2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 f9d2 	bl	8001bd0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	; 0x40
 8001842:	e001      	b.n	8001848 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b084      	sub	sp, #16
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001876:	d113      	bne.n	80018a0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001886:	d10b      	bne.n	80018a0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f043 0220 	orr.w	r2, r3, #32
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2200      	movs	r2, #0
 8001898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e063      	b.n	8001968 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80018a0:	f7ff ff8c 	bl	80017bc <HAL_GetTick>
 80018a4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018a6:	e021      	b.n	80018ec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018ae:	d01d      	beq.n	80018ec <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d007      	beq.n	80018c6 <HAL_ADC_PollForConversion+0x6c>
 80018b6:	f7ff ff81 	bl	80017bc <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	683a      	ldr	r2, [r7, #0]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d212      	bcs.n	80018ec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d00b      	beq.n	80018ec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d8:	f043 0204 	orr.w	r2, r3, #4
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e03d      	b.n	8001968 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d1d6      	bne.n	80018a8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f06f 0212 	mvn.w	r2, #18
 8001902:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d123      	bne.n	8001966 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d11f      	bne.n	8001966 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800193e:	2b00      	cmp	r3, #0
 8001940:	d111      	bne.n	8001966 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d105      	bne.n	8001966 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f043 0201 	orr.w	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001966:	2300      	movs	r3, #0
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_ADC_ConfigChannel+0x1c>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e105      	b.n	8001bb4 <HAL_ADC_ConfigChannel+0x228>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b09      	cmp	r3, #9
 80019b6:	d925      	bls.n	8001a04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68d9      	ldr	r1, [r3, #12]
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	461a      	mov	r2, r3
 80019c6:	4613      	mov	r3, r2
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	4413      	add	r3, r2
 80019cc:	3b1e      	subs	r3, #30
 80019ce:	2207      	movs	r2, #7
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43da      	mvns	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	400a      	ands	r2, r1
 80019dc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68d9      	ldr	r1, [r3, #12]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	b29b      	uxth	r3, r3
 80019ee:	4618      	mov	r0, r3
 80019f0:	4603      	mov	r3, r0
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4403      	add	r3, r0
 80019f6:	3b1e      	subs	r3, #30
 80019f8:	409a      	lsls	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	430a      	orrs	r2, r1
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	e022      	b.n	8001a4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	6919      	ldr	r1, [r3, #16]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	461a      	mov	r2, r3
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	2207      	movs	r2, #7
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43da      	mvns	r2, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	400a      	ands	r2, r1
 8001a26:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6919      	ldr	r1, [r3, #16]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	689a      	ldr	r2, [r3, #8]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	4618      	mov	r0, r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4403      	add	r3, r0
 8001a40:	409a      	lsls	r2, r3
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	430a      	orrs	r2, r1
 8001a48:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d824      	bhi.n	8001a9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	4413      	add	r3, r2
 8001a62:	3b05      	subs	r3, #5
 8001a64:	221f      	movs	r2, #31
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	400a      	ands	r2, r1
 8001a72:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	b29b      	uxth	r3, r3
 8001a80:	4618      	mov	r0, r3
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	4613      	mov	r3, r2
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	3b05      	subs	r3, #5
 8001a8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	635a      	str	r2, [r3, #52]	; 0x34
 8001a9a:	e04c      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b0c      	cmp	r3, #12
 8001aa2:	d824      	bhi.n	8001aee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	685a      	ldr	r2, [r3, #4]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	4413      	add	r3, r2
 8001ab4:	3b23      	subs	r3, #35	; 0x23
 8001ab6:	221f      	movs	r2, #31
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43da      	mvns	r2, r3
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	400a      	ands	r2, r1
 8001ac4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	3b23      	subs	r3, #35	; 0x23
 8001ae0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	631a      	str	r2, [r3, #48]	; 0x30
 8001aec:	e023      	b.n	8001b36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	3b41      	subs	r3, #65	; 0x41
 8001b00:	221f      	movs	r2, #31
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43da      	mvns	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	400a      	ands	r2, r1
 8001b0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685a      	ldr	r2, [r3, #4]
 8001b22:	4613      	mov	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	3b41      	subs	r3, #65	; 0x41
 8001b2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	430a      	orrs	r2, r1
 8001b34:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b36:	4b22      	ldr	r3, [pc, #136]	; (8001bc0 <HAL_ADC_ConfigChannel+0x234>)
 8001b38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a21      	ldr	r2, [pc, #132]	; (8001bc4 <HAL_ADC_ConfigChannel+0x238>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d109      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x1cc>
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b12      	cmp	r3, #18
 8001b4a:	d105      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <HAL_ADC_ConfigChannel+0x238>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d123      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x21e>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	d003      	beq.n	8001b72 <HAL_ADC_ConfigChannel+0x1e6>
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b11      	cmp	r3, #17
 8001b70:	d11b      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2b10      	cmp	r3, #16
 8001b84:	d111      	bne.n	8001baa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b86:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <HAL_ADC_ConfigChannel+0x23c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a10      	ldr	r2, [pc, #64]	; (8001bcc <HAL_ADC_ConfigChannel+0x240>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	0c9a      	lsrs	r2, r3, #18
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b9c:	e002      	b.n	8001ba4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f9      	bne.n	8001b9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	40012300 	.word	0x40012300
 8001bc4:	40012000 	.word	0x40012000
 8001bc8:	20000000 	.word	0x20000000
 8001bcc:	431bde83 	.word	0x431bde83

08001bd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bd8:	4b79      	ldr	r3, [pc, #484]	; (8001dc0 <ADC_Init+0x1f0>)
 8001bda:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	685a      	ldr	r2, [r3, #4]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6859      	ldr	r1, [r3, #4]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	021a      	lsls	r2, r3, #8
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001c28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	6859      	ldr	r1, [r3, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6899      	ldr	r1, [r3, #8]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68da      	ldr	r2, [r3, #12]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	430a      	orrs	r2, r1
 8001c5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c62:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <ADC_Init+0x1f4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d022      	beq.n	8001cae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689a      	ldr	r2, [r3, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6899      	ldr	r1, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	430a      	orrs	r2, r1
 8001c88:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	6899      	ldr	r1, [r3, #8]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	430a      	orrs	r2, r1
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	e00f      	b.n	8001cce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	689a      	ldr	r2, [r3, #8]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001cbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689a      	ldr	r2, [r3, #8]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ccc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0202 	bic.w	r2, r2, #2
 8001cdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6899      	ldr	r1, [r3, #8]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	7e1b      	ldrb	r3, [r3, #24]
 8001ce8:	005a      	lsls	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d01b      	beq.n	8001d34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	685a      	ldr	r2, [r3, #4]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d0a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001d1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6859      	ldr	r1, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d26:	3b01      	subs	r3, #1
 8001d28:	035a      	lsls	r2, r3, #13
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	e007      	b.n	8001d44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d42:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001d52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	051a      	lsls	r2, r3, #20
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6899      	ldr	r1, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d86:	025a      	lsls	r2, r3, #9
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6899      	ldr	r1, [r3, #8]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	029a      	lsls	r2, r3, #10
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	609a      	str	r2, [r3, #8]
}
 8001db4:	bf00      	nop
 8001db6:	3714      	adds	r7, #20
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40012300 	.word	0x40012300
 8001dc4:	0f000001 	.word	0x0f000001

08001dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de4:	4013      	ands	r3, r2
 8001de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfa:	4a04      	ldr	r2, [pc, #16]	; (8001e0c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	60d3      	str	r3, [r2, #12]
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e14:	4b04      	ldr	r3, [pc, #16]	; (8001e28 <__NVIC_GetPriorityGrouping+0x18>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	0a1b      	lsrs	r3, r3, #8
 8001e1a:	f003 0307 	and.w	r3, r3, #7
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	e000ed00 	.word	0xe000ed00

08001e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	db0b      	blt.n	8001e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	f003 021f 	and.w	r2, r3, #31
 8001e44:	4907      	ldr	r1, [pc, #28]	; (8001e64 <__NVIC_EnableIRQ+0x38>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	095b      	lsrs	r3, r3, #5
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
 8001e62:	bf00      	nop
 8001e64:	e000e100 	.word	0xe000e100

08001e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	6039      	str	r1, [r7, #0]
 8001e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	db0a      	blt.n	8001e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	490c      	ldr	r1, [pc, #48]	; (8001eb4 <__NVIC_SetPriority+0x4c>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	0112      	lsls	r2, r2, #4
 8001e88:	b2d2      	uxtb	r2, r2
 8001e8a:	440b      	add	r3, r1
 8001e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e90:	e00a      	b.n	8001ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4908      	ldr	r1, [pc, #32]	; (8001eb8 <__NVIC_SetPriority+0x50>)
 8001e98:	79fb      	ldrb	r3, [r7, #7]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	3b04      	subs	r3, #4
 8001ea0:	0112      	lsls	r2, r2, #4
 8001ea2:	b2d2      	uxtb	r2, r2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	761a      	strb	r2, [r3, #24]
}
 8001ea8:	bf00      	nop
 8001eaa:	370c      	adds	r7, #12
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	e000e100 	.word	0xe000e100
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b089      	sub	sp, #36	; 0x24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	f1c3 0307 	rsb	r3, r3, #7
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	bf28      	it	cs
 8001eda:	2304      	movcs	r3, #4
 8001edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	2b06      	cmp	r3, #6
 8001ee4:	d902      	bls.n	8001eec <NVIC_EncodePriority+0x30>
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3b03      	subs	r3, #3
 8001eea:	e000      	b.n	8001eee <NVIC_EncodePriority+0x32>
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43da      	mvns	r2, r3
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	401a      	ands	r2, r3
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f04:	f04f 31ff 	mov.w	r1, #4294967295
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0e:	43d9      	mvns	r1, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f14:	4313      	orrs	r3, r2
         );
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3724      	adds	r7, #36	; 0x24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b082      	sub	sp, #8
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f34:	d301      	bcc.n	8001f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f36:	2301      	movs	r3, #1
 8001f38:	e00f      	b.n	8001f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3a:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <SysTick_Config+0x40>)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f42:	210f      	movs	r1, #15
 8001f44:	f04f 30ff 	mov.w	r0, #4294967295
 8001f48:	f7ff ff8e 	bl	8001e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f4c:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <SysTick_Config+0x40>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f52:	4b04      	ldr	r3, [pc, #16]	; (8001f64 <SysTick_Config+0x40>)
 8001f54:	2207      	movs	r2, #7
 8001f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	e000e010 	.word	0xe000e010

08001f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff ff29 	bl	8001dc8 <__NVIC_SetPriorityGrouping>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b086      	sub	sp, #24
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
 8001f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f90:	f7ff ff3e 	bl	8001e10 <__NVIC_GetPriorityGrouping>
 8001f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	68b9      	ldr	r1, [r7, #8]
 8001f9a:	6978      	ldr	r0, [r7, #20]
 8001f9c:	f7ff ff8e 	bl	8001ebc <NVIC_EncodePriority>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa6:	4611      	mov	r1, r2
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff ff5d 	bl	8001e68 <__NVIC_SetPriority>
}
 8001fae:	bf00      	nop
 8001fb0:	3718      	adds	r7, #24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b082      	sub	sp, #8
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff ff31 	bl	8001e2c <__NVIC_EnableIRQ>
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff ffa2 	bl	8001f24 <SysTick_Config>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b082      	sub	sp, #8
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e00e      	b.n	800201a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	795b      	ldrb	r3, [r3, #5]
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	d105      	bne.n	8002012 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f7ff f9a3 	bl	8001358 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2201      	movs	r2, #1
 8002016:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002018:	2300      	movs	r3, #0
}
 800201a:	4618      	mov	r0, r3
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
	...

08002024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	e159      	b.n	80022f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002040:	2201      	movs	r2, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	f040 8148 	bne.w	80022ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d005      	beq.n	8002076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	2b02      	cmp	r3, #2
 8002074:	d130      	bne.n	80020d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 0201 	and.w	r2, r3, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d017      	beq.n	8002114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d123      	bne.n	8002168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	08da      	lsrs	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3208      	adds	r2, #8
 8002128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	220f      	movs	r2, #15
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3208      	adds	r2, #8
 8002162:	69b9      	ldr	r1, [r7, #24]
 8002164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0203 	and.w	r2, r3, #3
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80a2 	beq.w	80022ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b57      	ldr	r3, [pc, #348]	; (800230c <HAL_GPIO_Init+0x2e8>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a56      	ldr	r2, [pc, #344]	; (800230c <HAL_GPIO_Init+0x2e8>)
 80021b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b54      	ldr	r3, [pc, #336]	; (800230c <HAL_GPIO_Init+0x2e8>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021c6:	4a52      	ldr	r2, [pc, #328]	; (8002310 <HAL_GPIO_Init+0x2ec>)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	220f      	movs	r2, #15
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a49      	ldr	r2, [pc, #292]	; (8002314 <HAL_GPIO_Init+0x2f0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d019      	beq.n	8002226 <HAL_GPIO_Init+0x202>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a48      	ldr	r2, [pc, #288]	; (8002318 <HAL_GPIO_Init+0x2f4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0x1fe>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a47      	ldr	r2, [pc, #284]	; (800231c <HAL_GPIO_Init+0x2f8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00d      	beq.n	800221e <HAL_GPIO_Init+0x1fa>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a46      	ldr	r2, [pc, #280]	; (8002320 <HAL_GPIO_Init+0x2fc>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <HAL_GPIO_Init+0x1f6>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a45      	ldr	r2, [pc, #276]	; (8002324 <HAL_GPIO_Init+0x300>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d101      	bne.n	8002216 <HAL_GPIO_Init+0x1f2>
 8002212:	2304      	movs	r3, #4
 8002214:	e008      	b.n	8002228 <HAL_GPIO_Init+0x204>
 8002216:	2307      	movs	r3, #7
 8002218:	e006      	b.n	8002228 <HAL_GPIO_Init+0x204>
 800221a:	2303      	movs	r3, #3
 800221c:	e004      	b.n	8002228 <HAL_GPIO_Init+0x204>
 800221e:	2302      	movs	r3, #2
 8002220:	e002      	b.n	8002228 <HAL_GPIO_Init+0x204>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x204>
 8002226:	2300      	movs	r3, #0
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	f002 0203 	and.w	r2, r2, #3
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	4093      	lsls	r3, r2
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002238:	4935      	ldr	r1, [pc, #212]	; (8002310 <HAL_GPIO_Init+0x2ec>)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	3302      	adds	r3, #2
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002246:	4b38      	ldr	r3, [pc, #224]	; (8002328 <HAL_GPIO_Init+0x304>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800226a:	4a2f      	ldr	r2, [pc, #188]	; (8002328 <HAL_GPIO_Init+0x304>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002270:	4b2d      	ldr	r3, [pc, #180]	; (8002328 <HAL_GPIO_Init+0x304>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002294:	4a24      	ldr	r2, [pc, #144]	; (8002328 <HAL_GPIO_Init+0x304>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800229a:	4b23      	ldr	r3, [pc, #140]	; (8002328 <HAL_GPIO_Init+0x304>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022be:	4a1a      	ldr	r2, [pc, #104]	; (8002328 <HAL_GPIO_Init+0x304>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c4:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_GPIO_Init+0x304>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e8:	4a0f      	ldr	r2, [pc, #60]	; (8002328 <HAL_GPIO_Init+0x304>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3301      	adds	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b0f      	cmp	r3, #15
 80022f8:	f67f aea2 	bls.w	8002040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3724      	adds	r7, #36	; 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40013800 	.word	0x40013800
 8002314:	40020000 	.word	0x40020000
 8002318:	40020400 	.word	0x40020400
 800231c:	40020800 	.word	0x40020800
 8002320:	40020c00 	.word	0x40020c00
 8002324:	40021000 	.word	0x40021000
 8002328:	40013c00 	.word	0x40013c00

0800232c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
 8002338:	4613      	mov	r3, r2
 800233a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800233c:	787b      	ldrb	r3, [r7, #1]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002348:	e003      	b.n	8002352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800234a:	887b      	ldrh	r3, [r7, #2]
 800234c:	041a      	lsls	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	619a      	str	r2, [r3, #24]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d101      	bne.n	8002372 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e12b      	b.n	80025ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b00      	cmp	r3, #0
 800237c:	d106      	bne.n	800238c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff f808 	bl	800139c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2224      	movs	r2, #36	; 0x24
 8002390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023c4:	f001 f8da 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 80023c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	4a81      	ldr	r2, [pc, #516]	; (80025d4 <HAL_I2C_Init+0x274>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d807      	bhi.n	80023e4 <HAL_I2C_Init+0x84>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4a80      	ldr	r2, [pc, #512]	; (80025d8 <HAL_I2C_Init+0x278>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	bf94      	ite	ls
 80023dc:	2301      	movls	r3, #1
 80023de:	2300      	movhi	r3, #0
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	e006      	b.n	80023f2 <HAL_I2C_Init+0x92>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	4a7d      	ldr	r2, [pc, #500]	; (80025dc <HAL_I2C_Init+0x27c>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	bf94      	ite	ls
 80023ec:	2301      	movls	r3, #1
 80023ee:	2300      	movhi	r3, #0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e0e7      	b.n	80025ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4a78      	ldr	r2, [pc, #480]	; (80025e0 <HAL_I2C_Init+0x280>)
 80023fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002402:	0c9b      	lsrs	r3, r3, #18
 8002404:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68ba      	ldr	r2, [r7, #8]
 8002416:	430a      	orrs	r2, r1
 8002418:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4a6a      	ldr	r2, [pc, #424]	; (80025d4 <HAL_I2C_Init+0x274>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d802      	bhi.n	8002434 <HAL_I2C_Init+0xd4>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	3301      	adds	r3, #1
 8002432:	e009      	b.n	8002448 <HAL_I2C_Init+0xe8>
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	4a69      	ldr	r2, [pc, #420]	; (80025e4 <HAL_I2C_Init+0x284>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	099b      	lsrs	r3, r3, #6
 8002446:	3301      	adds	r3, #1
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	430b      	orrs	r3, r1
 800244e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800245a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	495c      	ldr	r1, [pc, #368]	; (80025d4 <HAL_I2C_Init+0x274>)
 8002464:	428b      	cmp	r3, r1
 8002466:	d819      	bhi.n	800249c <HAL_I2C_Init+0x13c>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	1e59      	subs	r1, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fbb1 f3f3 	udiv	r3, r1, r3
 8002476:	1c59      	adds	r1, r3, #1
 8002478:	f640 73fc 	movw	r3, #4092	; 0xffc
 800247c:	400b      	ands	r3, r1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_I2C_Init+0x138>
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	1e59      	subs	r1, r3, #1
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002490:	3301      	adds	r3, #1
 8002492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002496:	e051      	b.n	800253c <HAL_I2C_Init+0x1dc>
 8002498:	2304      	movs	r3, #4
 800249a:	e04f      	b.n	800253c <HAL_I2C_Init+0x1dc>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d111      	bne.n	80024c8 <HAL_I2C_Init+0x168>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1e58      	subs	r0, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6859      	ldr	r1, [r3, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	440b      	add	r3, r1
 80024b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b6:	3301      	adds	r3, #1
 80024b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024bc:	2b00      	cmp	r3, #0
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	e012      	b.n	80024ee <HAL_I2C_Init+0x18e>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1e58      	subs	r0, r3, #1
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	0099      	lsls	r1, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	fbb0 f3f3 	udiv	r3, r0, r3
 80024de:	3301      	adds	r3, #1
 80024e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <HAL_I2C_Init+0x196>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e022      	b.n	800253c <HAL_I2C_Init+0x1dc>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10e      	bne.n	800251c <HAL_I2C_Init+0x1bc>
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	1e58      	subs	r0, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6859      	ldr	r1, [r3, #4]
 8002506:	460b      	mov	r3, r1
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	440b      	add	r3, r1
 800250c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002510:	3301      	adds	r3, #1
 8002512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002516:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800251a:	e00f      	b.n	800253c <HAL_I2C_Init+0x1dc>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	1e58      	subs	r0, r3, #1
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	460b      	mov	r3, r1
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	0099      	lsls	r1, r3, #2
 800252c:	440b      	add	r3, r1
 800252e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002532:	3301      	adds	r3, #1
 8002534:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002538:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	6809      	ldr	r1, [r1, #0]
 8002540:	4313      	orrs	r3, r2
 8002542:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	431a      	orrs	r2, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800256a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6911      	ldr	r1, [r2, #16]
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	68d2      	ldr	r2, [r2, #12]
 8002576:	4311      	orrs	r1, r2
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	430b      	orrs	r3, r1
 800257e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695a      	ldr	r2, [r3, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	431a      	orrs	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0201 	orr.w	r2, r2, #1
 80025aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2220      	movs	r2, #32
 80025b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	000186a0 	.word	0x000186a0
 80025d8:	001e847f 	.word	0x001e847f
 80025dc:	003d08ff 	.word	0x003d08ff
 80025e0:	431bde83 	.word	0x431bde83
 80025e4:	10624dd3 	.word	0x10624dd3

080025e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af02      	add	r7, sp, #8
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	461a      	mov	r2, r3
 80025f4:	460b      	mov	r3, r1
 80025f6:	817b      	strh	r3, [r7, #10]
 80025f8:	4613      	mov	r3, r2
 80025fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff f8de 	bl	80017bc <HAL_GetTick>
 8002600:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b20      	cmp	r3, #32
 800260c:	f040 80e0 	bne.w	80027d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	2319      	movs	r3, #25
 8002616:	2201      	movs	r2, #1
 8002618:	4970      	ldr	r1, [pc, #448]	; (80027dc <HAL_I2C_Master_Transmit+0x1f4>)
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f964 	bl	80028e8 <I2C_WaitOnFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002626:	2302      	movs	r3, #2
 8002628:	e0d3      	b.n	80027d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002630:	2b01      	cmp	r3, #1
 8002632:	d101      	bne.n	8002638 <HAL_I2C_Master_Transmit+0x50>
 8002634:	2302      	movs	r3, #2
 8002636:	e0cc      	b.n	80027d2 <HAL_I2C_Master_Transmit+0x1ea>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2201      	movs	r2, #1
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b01      	cmp	r3, #1
 800264c:	d007      	beq.n	800265e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0201 	orr.w	r2, r2, #1
 800265c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800266c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2221      	movs	r2, #33	; 0x21
 8002672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2210      	movs	r2, #16
 800267a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2200      	movs	r2, #0
 8002682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	893a      	ldrh	r2, [r7, #8]
 800268e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4a50      	ldr	r2, [pc, #320]	; (80027e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026a0:	8979      	ldrh	r1, [r7, #10]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	6a3a      	ldr	r2, [r7, #32]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 f89c 	bl	80027e4 <I2C_MasterRequestWrite>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e08d      	b.n	80027d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	699b      	ldr	r3, [r3, #24]
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026cc:	e066      	b.n	800279c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ce:	697a      	ldr	r2, [r7, #20]
 80026d0:	6a39      	ldr	r1, [r7, #32]
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 fa22 	bl	8002b1c <I2C_WaitOnTXEFlagUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00d      	beq.n	80026fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d107      	bne.n	80026f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e06b      	b.n	80027d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	781a      	ldrb	r2, [r3, #0]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29a      	uxth	r2, r3
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002722:	3b01      	subs	r3, #1
 8002724:	b29a      	uxth	r2, r3
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b04      	cmp	r3, #4
 8002736:	d11b      	bne.n	8002770 <HAL_I2C_Master_Transmit+0x188>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273c:	2b00      	cmp	r3, #0
 800273e:	d017      	beq.n	8002770 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002750:	1c5a      	adds	r2, r3, #1
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800275a:	b29b      	uxth	r3, r3
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002770:	697a      	ldr	r2, [r7, #20]
 8002772:	6a39      	ldr	r1, [r7, #32]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 fa19 	bl	8002bac <I2C_WaitOnBTFFlagUntilTimeout>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00d      	beq.n	800279c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002784:	2b04      	cmp	r3, #4
 8002786:	d107      	bne.n	8002798 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002796:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e01a      	b.n	80027d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d194      	bne.n	80026ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2220      	movs	r2, #32
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027cc:	2300      	movs	r3, #0
 80027ce:	e000      	b.n	80027d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027d0:	2302      	movs	r3, #2
  }
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	00100002 	.word	0x00100002
 80027e0:	ffff0000 	.word	0xffff0000

080027e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b088      	sub	sp, #32
 80027e8:	af02      	add	r7, sp, #8
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	460b      	mov	r3, r1
 80027f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d006      	beq.n	800280e <I2C_MasterRequestWrite+0x2a>
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d003      	beq.n	800280e <I2C_MasterRequestWrite+0x2a>
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800280c:	d108      	bne.n	8002820 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800281c:	601a      	str	r2, [r3, #0]
 800281e:	e00b      	b.n	8002838 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	2b12      	cmp	r3, #18
 8002826:	d107      	bne.n	8002838 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002836:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	9300      	str	r3, [sp, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f84f 	bl	80028e8 <I2C_WaitOnFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00d      	beq.n	800286c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800285a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285e:	d103      	bne.n	8002868 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e035      	b.n	80028d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002874:	d108      	bne.n	8002888 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002876:	897b      	ldrh	r3, [r7, #10]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	461a      	mov	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002884:	611a      	str	r2, [r3, #16]
 8002886:	e01b      	b.n	80028c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002888:	897b      	ldrh	r3, [r7, #10]
 800288a:	11db      	asrs	r3, r3, #7
 800288c:	b2db      	uxtb	r3, r3
 800288e:	f003 0306 	and.w	r3, r3, #6
 8002892:	b2db      	uxtb	r3, r3
 8002894:	f063 030f 	orn	r3, r3, #15
 8002898:	b2da      	uxtb	r2, r3
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	490e      	ldr	r1, [pc, #56]	; (80028e0 <I2C_MasterRequestWrite+0xfc>)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f898 	bl	80029dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e010      	b.n	80028d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028b6:	897b      	ldrh	r3, [r7, #10]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	4907      	ldr	r1, [pc, #28]	; (80028e4 <I2C_MasterRequestWrite+0x100>)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 f888 	bl	80029dc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d001      	beq.n	80028d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	00010008 	.word	0x00010008
 80028e4:	00010002 	.word	0x00010002

080028e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	603b      	str	r3, [r7, #0]
 80028f4:	4613      	mov	r3, r2
 80028f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f8:	e048      	b.n	800298c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d044      	beq.n	800298c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002902:	f7fe ff5b 	bl	80017bc <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	69bb      	ldr	r3, [r7, #24]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	429a      	cmp	r2, r3
 8002910:	d302      	bcc.n	8002918 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d139      	bne.n	800298c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	0c1b      	lsrs	r3, r3, #16
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b01      	cmp	r3, #1
 8002920:	d10d      	bne.n	800293e <I2C_WaitOnFlagUntilTimeout+0x56>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695b      	ldr	r3, [r3, #20]
 8002928:	43da      	mvns	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	4013      	ands	r3, r2
 800292e:	b29b      	uxth	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2db      	uxtb	r3, r3
 800293a:	461a      	mov	r2, r3
 800293c:	e00c      	b.n	8002958 <I2C_WaitOnFlagUntilTimeout+0x70>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	43da      	mvns	r2, r3
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	4013      	ands	r3, r2
 800294a:	b29b      	uxth	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	bf0c      	ite	eq
 8002950:	2301      	moveq	r3, #1
 8002952:	2300      	movne	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	461a      	mov	r2, r3
 8002958:	79fb      	ldrb	r3, [r7, #7]
 800295a:	429a      	cmp	r2, r3
 800295c:	d116      	bne.n	800298c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2200      	movs	r2, #0
 8002962:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	f043 0220 	orr.w	r2, r3, #32
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e023      	b.n	80029d4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	0c1b      	lsrs	r3, r3, #16
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d10d      	bne.n	80029b2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	43da      	mvns	r2, r3
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	4013      	ands	r3, r2
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf0c      	ite	eq
 80029a8:	2301      	moveq	r3, #1
 80029aa:	2300      	movne	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	461a      	mov	r2, r3
 80029b0:	e00c      	b.n	80029cc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	43da      	mvns	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	4013      	ands	r3, r2
 80029be:	b29b      	uxth	r3, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bf0c      	ite	eq
 80029c4:	2301      	moveq	r3, #1
 80029c6:	2300      	movne	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d093      	beq.n	80028fa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029ea:	e071      	b.n	8002ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029fa:	d123      	bne.n	8002a44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	f043 0204 	orr.w	r2, r3, #4
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e067      	b.n	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4a:	d041      	beq.n	8002ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a4c:	f7fe feb6 	bl	80017bc <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d302      	bcc.n	8002a62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d136      	bne.n	8002ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	0c1b      	lsrs	r3, r3, #16
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d10c      	bne.n	8002a86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	4013      	ands	r3, r2
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	e00b      	b.n	8002a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	43da      	mvns	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	4013      	ands	r3, r2
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d016      	beq.n	8002ad0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2220      	movs	r2, #32
 8002aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	f043 0220 	orr.w	r2, r3, #32
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e021      	b.n	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	0c1b      	lsrs	r3, r3, #16
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d10c      	bne.n	8002af4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	43da      	mvns	r2, r3
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	bf14      	ite	ne
 8002aec:	2301      	movne	r3, #1
 8002aee:	2300      	moveq	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	e00b      	b.n	8002b0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	43da      	mvns	r2, r3
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	4013      	ands	r3, r2
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	bf14      	ite	ne
 8002b06:	2301      	movne	r3, #1
 8002b08:	2300      	moveq	r3, #0
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f47f af6d 	bne.w	80029ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3710      	adds	r7, #16
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b28:	e034      	b.n	8002b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f886 	bl	8002c3c <I2C_IsAcknowledgeFailed>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e034      	b.n	8002ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d028      	beq.n	8002b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b42:	f7fe fe3b 	bl	80017bc <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d302      	bcc.n	8002b58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d11d      	bne.n	8002b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b62:	2b80      	cmp	r3, #128	; 0x80
 8002b64:	d016      	beq.n	8002b94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	f043 0220 	orr.w	r2, r3, #32
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e007      	b.n	8002ba4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	2b80      	cmp	r3, #128	; 0x80
 8002ba0:	d1c3      	bne.n	8002b2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bb8:	e034      	b.n	8002c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f83e 	bl	8002c3c <I2C_IsAcknowledgeFailed>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e034      	b.n	8002c34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd0:	d028      	beq.n	8002c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd2:	f7fe fdf3 	bl	80017bc <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d302      	bcc.n	8002be8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d11d      	bne.n	8002c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	f003 0304 	and.w	r3, r3, #4
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d016      	beq.n	8002c24 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2220      	movs	r2, #32
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c10:	f043 0220 	orr.w	r2, r3, #32
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e007      	b.n	8002c34 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	f003 0304 	and.w	r3, r3, #4
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d1c3      	bne.n	8002bba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c52:	d11b      	bne.n	8002c8c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c5c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	f043 0204 	orr.w	r2, r3, #4
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e267      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d075      	beq.n	8002da6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cba:	4b88      	ldr	r3, [pc, #544]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc6:	4b85      	ldr	r3, [pc, #532]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cce:	2b08      	cmp	r3, #8
 8002cd0:	d112      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cd2:	4b82      	ldr	r3, [pc, #520]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cde:	d10b      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ce0:	4b7e      	ldr	r3, [pc, #504]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d05b      	beq.n	8002da4 <HAL_RCC_OscConfig+0x108>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d157      	bne.n	8002da4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e242      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d00:	d106      	bne.n	8002d10 <HAL_RCC_OscConfig+0x74>
 8002d02:	4b76      	ldr	r3, [pc, #472]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a75      	ldr	r2, [pc, #468]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e01d      	b.n	8002d4c <HAL_RCC_OscConfig+0xb0>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d18:	d10c      	bne.n	8002d34 <HAL_RCC_OscConfig+0x98>
 8002d1a:	4b70      	ldr	r3, [pc, #448]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a6f      	ldr	r2, [pc, #444]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	4b6d      	ldr	r3, [pc, #436]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a6c      	ldr	r2, [pc, #432]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e00b      	b.n	8002d4c <HAL_RCC_OscConfig+0xb0>
 8002d34:	4b69      	ldr	r3, [pc, #420]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a68      	ldr	r2, [pc, #416]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b66      	ldr	r3, [pc, #408]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a65      	ldr	r2, [pc, #404]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d013      	beq.n	8002d7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fd32 	bl	80017bc <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d5c:	f7fe fd2e 	bl	80017bc <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b64      	cmp	r3, #100	; 0x64
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e207      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6e:	4b5b      	ldr	r3, [pc, #364]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0xc0>
 8002d7a:	e014      	b.n	8002da6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7c:	f7fe fd1e 	bl	80017bc <HAL_GetTick>
 8002d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	e008      	b.n	8002d96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d84:	f7fe fd1a 	bl	80017bc <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b64      	cmp	r3, #100	; 0x64
 8002d90:	d901      	bls.n	8002d96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e1f3      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d96:	4b51      	ldr	r3, [pc, #324]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1f0      	bne.n	8002d84 <HAL_RCC_OscConfig+0xe8>
 8002da2:	e000      	b.n	8002da6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d063      	beq.n	8002e7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db2:	4b4a      	ldr	r3, [pc, #296]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f003 030c 	and.w	r3, r3, #12
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dbe:	4b47      	ldr	r3, [pc, #284]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dc6:	2b08      	cmp	r3, #8
 8002dc8:	d11c      	bne.n	8002e04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dca:	4b44      	ldr	r3, [pc, #272]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d116      	bne.n	8002e04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dd6:	4b41      	ldr	r3, [pc, #260]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0302 	and.w	r3, r3, #2
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_RCC_OscConfig+0x152>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e1c7      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dee:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	00db      	lsls	r3, r3, #3
 8002dfc:	4937      	ldr	r1, [pc, #220]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e02:	e03a      	b.n	8002e7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d020      	beq.n	8002e4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e0c:	4b34      	ldr	r3, [pc, #208]	; (8002ee0 <HAL_RCC_OscConfig+0x244>)
 8002e0e:	2201      	movs	r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e12:	f7fe fcd3 	bl	80017bc <HAL_GetTick>
 8002e16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	e008      	b.n	8002e2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1a:	f7fe fccf 	bl	80017bc <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	1ad3      	subs	r3, r2, r3
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d901      	bls.n	8002e2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	e1a8      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	4b2b      	ldr	r3, [pc, #172]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0302 	and.w	r3, r3, #2
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f0      	beq.n	8002e1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e38:	4b28      	ldr	r3, [pc, #160]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4925      	ldr	r1, [pc, #148]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	600b      	str	r3, [r1, #0]
 8002e4c:	e015      	b.n	8002e7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e4e:	4b24      	ldr	r3, [pc, #144]	; (8002ee0 <HAL_RCC_OscConfig+0x244>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e54:	f7fe fcb2 	bl	80017bc <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e5c:	f7fe fcae 	bl	80017bc <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e187      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	4b1b      	ldr	r3, [pc, #108]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d1f0      	bne.n	8002e5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0308 	and.w	r3, r3, #8
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d036      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d016      	beq.n	8002ebc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <HAL_RCC_OscConfig+0x248>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e94:	f7fe fc92 	bl	80017bc <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e9c:	f7fe fc8e 	bl	80017bc <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e167      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <HAL_RCC_OscConfig+0x240>)
 8002eb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0x200>
 8002eba:	e01b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ebc:	4b09      	ldr	r3, [pc, #36]	; (8002ee4 <HAL_RCC_OscConfig+0x248>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ec2:	f7fe fc7b 	bl	80017bc <HAL_GetTick>
 8002ec6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ec8:	e00e      	b.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eca:	f7fe fc77 	bl	80017bc <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	2b02      	cmp	r3, #2
 8002ed6:	d907      	bls.n	8002ee8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e150      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	42470000 	.word	0x42470000
 8002ee4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	4b88      	ldr	r3, [pc, #544]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1ea      	bne.n	8002eca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8097 	beq.w	8003030 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f02:	2300      	movs	r3, #0
 8002f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f06:	4b81      	ldr	r3, [pc, #516]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10f      	bne.n	8002f32 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	4b7d      	ldr	r3, [pc, #500]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	4a7c      	ldr	r2, [pc, #496]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f20:	6413      	str	r3, [r2, #64]	; 0x40
 8002f22:	4b7a      	ldr	r3, [pc, #488]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	60bb      	str	r3, [r7, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f32:	4b77      	ldr	r3, [pc, #476]	; (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d118      	bne.n	8002f70 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f3e:	4b74      	ldr	r3, [pc, #464]	; (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a73      	ldr	r2, [pc, #460]	; (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f4a:	f7fe fc37 	bl	80017bc <HAL_GetTick>
 8002f4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	e008      	b.n	8002f64 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f52:	f7fe fc33 	bl	80017bc <HAL_GetTick>
 8002f56:	4602      	mov	r2, r0
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	1ad3      	subs	r3, r2, r3
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e10c      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	4b6a      	ldr	r3, [pc, #424]	; (8003110 <HAL_RCC_OscConfig+0x474>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d0f0      	beq.n	8002f52 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d106      	bne.n	8002f86 <HAL_RCC_OscConfig+0x2ea>
 8002f78:	4b64      	ldr	r3, [pc, #400]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7c:	4a63      	ldr	r2, [pc, #396]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f7e:	f043 0301 	orr.w	r3, r3, #1
 8002f82:	6713      	str	r3, [r2, #112]	; 0x70
 8002f84:	e01c      	b.n	8002fc0 <HAL_RCC_OscConfig+0x324>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2b05      	cmp	r3, #5
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x30c>
 8002f8e:	4b5f      	ldr	r3, [pc, #380]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f92:	4a5e      	ldr	r2, [pc, #376]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	6713      	str	r3, [r2, #112]	; 0x70
 8002f9a:	4b5c      	ldr	r3, [pc, #368]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	4a5b      	ldr	r2, [pc, #364]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fa0:	f043 0301 	orr.w	r3, r3, #1
 8002fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0x324>
 8002fa8:	4b58      	ldr	r3, [pc, #352]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fac:	4a57      	ldr	r2, [pc, #348]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fae:	f023 0301 	bic.w	r3, r3, #1
 8002fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb4:	4b55      	ldr	r3, [pc, #340]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb8:	4a54      	ldr	r2, [pc, #336]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fba:	f023 0304 	bic.w	r3, r3, #4
 8002fbe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d015      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe fbf8 	bl	80017bc <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fce:	e00a      	b.n	8002fe6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd0:	f7fe fbf4 	bl	80017bc <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e0cb      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe6:	4b49      	ldr	r3, [pc, #292]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0ee      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x334>
 8002ff2:	e014      	b.n	800301e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff4:	f7fe fbe2 	bl	80017bc <HAL_GetTick>
 8002ff8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffa:	e00a      	b.n	8003012 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ffc:	f7fe fbde 	bl	80017bc <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	f241 3288 	movw	r2, #5000	; 0x1388
 800300a:	4293      	cmp	r3, r2
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0b5      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003012:	4b3e      	ldr	r3, [pc, #248]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1ee      	bne.n	8002ffc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800301e:	7dfb      	ldrb	r3, [r7, #23]
 8003020:	2b01      	cmp	r3, #1
 8003022:	d105      	bne.n	8003030 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003024:	4b39      	ldr	r3, [pc, #228]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8003026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003028:	4a38      	ldr	r2, [pc, #224]	; (800310c <HAL_RCC_OscConfig+0x470>)
 800302a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 80a1 	beq.w	800317c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800303a:	4b34      	ldr	r3, [pc, #208]	; (800310c <HAL_RCC_OscConfig+0x470>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
 8003042:	2b08      	cmp	r3, #8
 8003044:	d05c      	beq.n	8003100 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d141      	bne.n	80030d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800304e:	4b31      	ldr	r3, [pc, #196]	; (8003114 <HAL_RCC_OscConfig+0x478>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe fbb2 	bl	80017bc <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305c:	f7fe fbae 	bl	80017bc <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e087      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	4b27      	ldr	r3, [pc, #156]	; (800310c <HAL_RCC_OscConfig+0x470>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69da      	ldr	r2, [r3, #28]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	019b      	lsls	r3, r3, #6
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003090:	085b      	lsrs	r3, r3, #1
 8003092:	3b01      	subs	r3, #1
 8003094:	041b      	lsls	r3, r3, #16
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800309c:	061b      	lsls	r3, r3, #24
 800309e:	491b      	ldr	r1, [pc, #108]	; (800310c <HAL_RCC_OscConfig+0x470>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030a4:	4b1b      	ldr	r3, [pc, #108]	; (8003114 <HAL_RCC_OscConfig+0x478>)
 80030a6:	2201      	movs	r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fe fb87 	bl	80017bc <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b2:	f7fe fb83 	bl	80017bc <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e05c      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c4:	4b11      	ldr	r3, [pc, #68]	; (800310c <HAL_RCC_OscConfig+0x470>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d0f0      	beq.n	80030b2 <HAL_RCC_OscConfig+0x416>
 80030d0:	e054      	b.n	800317c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_RCC_OscConfig+0x478>)
 80030d4:	2200      	movs	r2, #0
 80030d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d8:	f7fe fb70 	bl	80017bc <HAL_GetTick>
 80030dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030e0:	f7fe fb6c 	bl	80017bc <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e045      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	4b06      	ldr	r3, [pc, #24]	; (800310c <HAL_RCC_OscConfig+0x470>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1f0      	bne.n	80030e0 <HAL_RCC_OscConfig+0x444>
 80030fe:	e03d      	b.n	800317c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d107      	bne.n	8003118 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e038      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
 800310c:	40023800 	.word	0x40023800
 8003110:	40007000 	.word	0x40007000
 8003114:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003118:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <HAL_RCC_OscConfig+0x4ec>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d028      	beq.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003130:	429a      	cmp	r2, r3
 8003132:	d121      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d11a      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003148:	4013      	ands	r3, r2
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800314e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003150:	4293      	cmp	r3, r2
 8003152:	d111      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315e:	085b      	lsrs	r3, r3, #1
 8003160:	3b01      	subs	r3, #1
 8003162:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d107      	bne.n	8003178 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003174:	429a      	cmp	r2, r3
 8003176:	d001      	beq.n	800317c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e000      	b.n	800317e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	40023800 	.word	0x40023800

0800318c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d101      	bne.n	80031a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0cc      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031a0:	4b68      	ldr	r3, [pc, #416]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0307 	and.w	r3, r3, #7
 80031a8:	683a      	ldr	r2, [r7, #0]
 80031aa:	429a      	cmp	r2, r3
 80031ac:	d90c      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ae:	4b65      	ldr	r3, [pc, #404]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031b0:	683a      	ldr	r2, [r7, #0]
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b63      	ldr	r3, [pc, #396]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 0307 	and.w	r3, r3, #7
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0b8      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d020      	beq.n	8003216 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d005      	beq.n	80031ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031e0:	4b59      	ldr	r3, [pc, #356]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4a58      	ldr	r2, [pc, #352]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031f8:	4b53      	ldr	r3, [pc, #332]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	4a52      	ldr	r2, [pc, #328]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003202:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003204:	4b50      	ldr	r3, [pc, #320]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	494d      	ldr	r1, [pc, #308]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003212:	4313      	orrs	r3, r2
 8003214:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d044      	beq.n	80032ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b01      	cmp	r3, #1
 8003228:	d107      	bne.n	800323a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b47      	ldr	r3, [pc, #284]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d119      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e07f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b02      	cmp	r3, #2
 8003240:	d003      	beq.n	800324a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003246:	2b03      	cmp	r3, #3
 8003248:	d107      	bne.n	800325a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324a:	4b3f      	ldr	r3, [pc, #252]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d109      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e06f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e067      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800326a:	4b37      	ldr	r3, [pc, #220]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	f023 0203 	bic.w	r2, r3, #3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	4934      	ldr	r1, [pc, #208]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003278:	4313      	orrs	r3, r2
 800327a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800327c:	f7fe fa9e 	bl	80017bc <HAL_GetTick>
 8003280:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003282:	e00a      	b.n	800329a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003284:	f7fe fa9a 	bl	80017bc <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	1ad3      	subs	r3, r2, r3
 800328e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003292:	4293      	cmp	r3, r2
 8003294:	d901      	bls.n	800329a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e04f      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800329a:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 020c 	and.w	r2, r3, #12
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d1eb      	bne.n	8003284 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032ac:	4b25      	ldr	r3, [pc, #148]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0307 	and.w	r3, r3, #7
 80032b4:	683a      	ldr	r2, [r7, #0]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	d20c      	bcs.n	80032d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ba:	4b22      	ldr	r3, [pc, #136]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032bc:	683a      	ldr	r2, [r7, #0]
 80032be:	b2d2      	uxtb	r2, r2
 80032c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b20      	ldr	r3, [pc, #128]	; (8003344 <HAL_RCC_ClockConfig+0x1b8>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e032      	b.n	800333a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d008      	beq.n	80032f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032e0:	4b19      	ldr	r3, [pc, #100]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4916      	ldr	r1, [pc, #88]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	4313      	orrs	r3, r2
 80032f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0308 	and.w	r3, r3, #8
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032fe:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	691b      	ldr	r3, [r3, #16]
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	490e      	ldr	r1, [pc, #56]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800330e:	4313      	orrs	r3, r2
 8003310:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003312:	f000 f821 	bl	8003358 <HAL_RCC_GetSysClockFreq>
 8003316:	4602      	mov	r2, r0
 8003318:	4b0b      	ldr	r3, [pc, #44]	; (8003348 <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	091b      	lsrs	r3, r3, #4
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	490a      	ldr	r1, [pc, #40]	; (800334c <HAL_RCC_ClockConfig+0x1c0>)
 8003324:	5ccb      	ldrb	r3, [r1, r3]
 8003326:	fa22 f303 	lsr.w	r3, r2, r3
 800332a:	4a09      	ldr	r2, [pc, #36]	; (8003350 <HAL_RCC_ClockConfig+0x1c4>)
 800332c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800332e:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_ClockConfig+0x1c8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7fe f9fe 	bl	8001734 <HAL_InitTick>

  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40023c00 	.word	0x40023c00
 8003348:	40023800 	.word	0x40023800
 800334c:	080067c0 	.word	0x080067c0
 8003350:	20000000 	.word	0x20000000
 8003354:	20000004 	.word	0x20000004

08003358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003358:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800335c:	b094      	sub	sp, #80	; 0x50
 800335e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	647b      	str	r3, [r7, #68]	; 0x44
 8003364:	2300      	movs	r3, #0
 8003366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003368:	2300      	movs	r3, #0
 800336a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003370:	4b79      	ldr	r3, [pc, #484]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f003 030c 	and.w	r3, r3, #12
 8003378:	2b08      	cmp	r3, #8
 800337a:	d00d      	beq.n	8003398 <HAL_RCC_GetSysClockFreq+0x40>
 800337c:	2b08      	cmp	r3, #8
 800337e:	f200 80e1 	bhi.w	8003544 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_RCC_GetSysClockFreq+0x34>
 8003386:	2b04      	cmp	r3, #4
 8003388:	d003      	beq.n	8003392 <HAL_RCC_GetSysClockFreq+0x3a>
 800338a:	e0db      	b.n	8003544 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800338c:	4b73      	ldr	r3, [pc, #460]	; (800355c <HAL_RCC_GetSysClockFreq+0x204>)
 800338e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003390:	e0db      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003392:	4b73      	ldr	r3, [pc, #460]	; (8003560 <HAL_RCC_GetSysClockFreq+0x208>)
 8003394:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003396:	e0d8      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003398:	4b6f      	ldr	r3, [pc, #444]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033a2:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d063      	beq.n	8003476 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ae:	4b6a      	ldr	r3, [pc, #424]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	099b      	lsrs	r3, r3, #6
 80033b4:	2200      	movs	r2, #0
 80033b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80033b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80033ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
 80033c2:	2300      	movs	r3, #0
 80033c4:	637b      	str	r3, [r7, #52]	; 0x34
 80033c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80033ca:	4622      	mov	r2, r4
 80033cc:	462b      	mov	r3, r5
 80033ce:	f04f 0000 	mov.w	r0, #0
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	0159      	lsls	r1, r3, #5
 80033d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033dc:	0150      	lsls	r0, r2, #5
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	4621      	mov	r1, r4
 80033e4:	1a51      	subs	r1, r2, r1
 80033e6:	6139      	str	r1, [r7, #16]
 80033e8:	4629      	mov	r1, r5
 80033ea:	eb63 0301 	sbc.w	r3, r3, r1
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033fc:	4659      	mov	r1, fp
 80033fe:	018b      	lsls	r3, r1, #6
 8003400:	4651      	mov	r1, sl
 8003402:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003406:	4651      	mov	r1, sl
 8003408:	018a      	lsls	r2, r1, #6
 800340a:	4651      	mov	r1, sl
 800340c:	ebb2 0801 	subs.w	r8, r2, r1
 8003410:	4659      	mov	r1, fp
 8003412:	eb63 0901 	sbc.w	r9, r3, r1
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	f04f 0300 	mov.w	r3, #0
 800341e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003422:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003426:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800342a:	4690      	mov	r8, r2
 800342c:	4699      	mov	r9, r3
 800342e:	4623      	mov	r3, r4
 8003430:	eb18 0303 	adds.w	r3, r8, r3
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	462b      	mov	r3, r5
 8003438:	eb49 0303 	adc.w	r3, r9, r3
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800344a:	4629      	mov	r1, r5
 800344c:	024b      	lsls	r3, r1, #9
 800344e:	4621      	mov	r1, r4
 8003450:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003454:	4621      	mov	r1, r4
 8003456:	024a      	lsls	r2, r1, #9
 8003458:	4610      	mov	r0, r2
 800345a:	4619      	mov	r1, r3
 800345c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800345e:	2200      	movs	r2, #0
 8003460:	62bb      	str	r3, [r7, #40]	; 0x28
 8003462:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003464:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003468:	f7fd fa80 	bl	800096c <__aeabi_uldivmod>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4613      	mov	r3, r2
 8003472:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003474:	e058      	b.n	8003528 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003476:	4b38      	ldr	r3, [pc, #224]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	099b      	lsrs	r3, r3, #6
 800347c:	2200      	movs	r2, #0
 800347e:	4618      	mov	r0, r3
 8003480:	4611      	mov	r1, r2
 8003482:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003486:	623b      	str	r3, [r7, #32]
 8003488:	2300      	movs	r3, #0
 800348a:	627b      	str	r3, [r7, #36]	; 0x24
 800348c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003490:	4642      	mov	r2, r8
 8003492:	464b      	mov	r3, r9
 8003494:	f04f 0000 	mov.w	r0, #0
 8003498:	f04f 0100 	mov.w	r1, #0
 800349c:	0159      	lsls	r1, r3, #5
 800349e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a2:	0150      	lsls	r0, r2, #5
 80034a4:	4602      	mov	r2, r0
 80034a6:	460b      	mov	r3, r1
 80034a8:	4641      	mov	r1, r8
 80034aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80034ae:	4649      	mov	r1, r9
 80034b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034c8:	ebb2 040a 	subs.w	r4, r2, sl
 80034cc:	eb63 050b 	sbc.w	r5, r3, fp
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	00eb      	lsls	r3, r5, #3
 80034da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034de:	00e2      	lsls	r2, r4, #3
 80034e0:	4614      	mov	r4, r2
 80034e2:	461d      	mov	r5, r3
 80034e4:	4643      	mov	r3, r8
 80034e6:	18e3      	adds	r3, r4, r3
 80034e8:	603b      	str	r3, [r7, #0]
 80034ea:	464b      	mov	r3, r9
 80034ec:	eb45 0303 	adc.w	r3, r5, r3
 80034f0:	607b      	str	r3, [r7, #4]
 80034f2:	f04f 0200 	mov.w	r2, #0
 80034f6:	f04f 0300 	mov.w	r3, #0
 80034fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034fe:	4629      	mov	r1, r5
 8003500:	028b      	lsls	r3, r1, #10
 8003502:	4621      	mov	r1, r4
 8003504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003508:	4621      	mov	r1, r4
 800350a:	028a      	lsls	r2, r1, #10
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003512:	2200      	movs	r2, #0
 8003514:	61bb      	str	r3, [r7, #24]
 8003516:	61fa      	str	r2, [r7, #28]
 8003518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800351c:	f7fd fa26 	bl	800096c <__aeabi_uldivmod>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4613      	mov	r3, r2
 8003526:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_GetSysClockFreq+0x200>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	0c1b      	lsrs	r3, r3, #16
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	3301      	adds	r3, #1
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003538:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800353a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800353c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003540:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003542:	e002      	b.n	800354a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003544:	4b05      	ldr	r3, [pc, #20]	; (800355c <HAL_RCC_GetSysClockFreq+0x204>)
 8003546:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800354a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800354c:	4618      	mov	r0, r3
 800354e:	3750      	adds	r7, #80	; 0x50
 8003550:	46bd      	mov	sp, r7
 8003552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003556:	bf00      	nop
 8003558:	40023800 	.word	0x40023800
 800355c:	00f42400 	.word	0x00f42400
 8003560:	007a1200 	.word	0x007a1200

08003564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003568:	4b03      	ldr	r3, [pc, #12]	; (8003578 <HAL_RCC_GetHCLKFreq+0x14>)
 800356a:	681b      	ldr	r3, [r3, #0]
}
 800356c:	4618      	mov	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr
 8003576:	bf00      	nop
 8003578:	20000000 	.word	0x20000000

0800357c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003580:	f7ff fff0 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	0a9b      	lsrs	r3, r3, #10
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4903      	ldr	r1, [pc, #12]	; (80035a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40023800 	.word	0x40023800
 80035a0:	080067d0 	.word	0x080067d0

080035a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035a8:	f7ff ffdc 	bl	8003564 <HAL_RCC_GetHCLKFreq>
 80035ac:	4602      	mov	r2, r0
 80035ae:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	0b5b      	lsrs	r3, r3, #13
 80035b4:	f003 0307 	and.w	r3, r3, #7
 80035b8:	4903      	ldr	r1, [pc, #12]	; (80035c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ba:	5ccb      	ldrb	r3, [r1, r3]
 80035bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40023800 	.word	0x40023800
 80035c8:	080067d0 	.word	0x080067d0

080035cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0301 	and.w	r3, r3, #1
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d105      	bne.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d035      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80035f4:	4b67      	ldr	r3, [pc, #412]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80035fa:	f7fe f8df 	bl	80017bc <HAL_GetTick>
 80035fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003600:	e008      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003602:	f7fe f8db 	bl	80017bc <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d901      	bls.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003610:	2303      	movs	r3, #3
 8003612:	e0ba      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003614:	4b60      	ldr	r3, [pc, #384]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1f0      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	019a      	lsls	r2, r3, #6
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	071b      	lsls	r3, r3, #28
 800362c:	495a      	ldr	r1, [pc, #360]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800362e:	4313      	orrs	r3, r2
 8003630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003634:	4b57      	ldr	r3, [pc, #348]	; (8003794 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800363a:	f7fe f8bf 	bl	80017bc <HAL_GetTick>
 800363e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003640:	e008      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003642:	f7fe f8bb 	bl	80017bc <HAL_GetTick>
 8003646:	4602      	mov	r2, r0
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b02      	cmp	r3, #2
 800364e:	d901      	bls.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e09a      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003654:	4b50      	ldr	r3, [pc, #320]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0f0      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 8083 	beq.w	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	4b49      	ldr	r3, [pc, #292]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	4a48      	ldr	r2, [pc, #288]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367c:	6413      	str	r3, [r2, #64]	; 0x40
 800367e:	4b46      	ldr	r3, [pc, #280]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800368a:	4b44      	ldr	r3, [pc, #272]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a43      	ldr	r2, [pc, #268]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003694:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003696:	f7fe f891 	bl	80017bc <HAL_GetTick>
 800369a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800369c:	e008      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800369e:	f7fe f88d 	bl	80017bc <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d901      	bls.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e06c      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036b0:	4b3a      	ldr	r3, [pc, #232]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0f0      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036bc:	4b36      	ldr	r3, [pc, #216]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d02f      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d028      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036da:	4b2f      	ldr	r3, [pc, #188]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036e4:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036ea:	4b2d      	ldr	r3, [pc, #180]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80036f0:	4a29      	ldr	r2, [pc, #164]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80036f6:	4b28      	ldr	r3, [pc, #160]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d114      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003702:	f7fe f85b 	bl	80017bc <HAL_GetTick>
 8003706:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003708:	e00a      	b.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fe f857 	bl	80017bc <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	; 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e034      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003720:	4b1d      	ldr	r3, [pc, #116]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ee      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003738:	d10d      	bne.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800373a:	4b17      	ldr	r3, [pc, #92]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800374a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800374e:	4912      	ldr	r1, [pc, #72]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003750:	4313      	orrs	r3, r2
 8003752:	608b      	str	r3, [r1, #8]
 8003754:	e005      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003756:	4b10      	ldr	r3, [pc, #64]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	4a0f      	ldr	r2, [pc, #60]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800375c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003760:	6093      	str	r3, [r2, #8]
 8003762:	4b0d      	ldr	r3, [pc, #52]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376e:	490a      	ldr	r1, [pc, #40]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003770:	4313      	orrs	r3, r2
 8003772:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	7c1a      	ldrb	r2, [r3, #16]
 8003784:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003786:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	42470068 	.word	0x42470068
 8003798:	40023800 	.word	0x40023800
 800379c:	40007000 	.word	0x40007000
 80037a0:	42470e40 	.word	0x42470e40
 80037a4:	424711e0 	.word	0x424711e0

080037a8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e073      	b.n	80038a6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	7f5b      	ldrb	r3, [r3, #29]
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d105      	bne.n	80037d4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7fd fe4c 	bl	800146c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b10      	cmp	r3, #16
 80037e6:	d055      	beq.n	8003894 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	22ca      	movs	r2, #202	; 0xca
 80037ee:	625a      	str	r2, [r3, #36]	; 0x24
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2253      	movs	r2, #83	; 0x53
 80037f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f87f 	bl	80038fc <RTC_EnterInitMode>
 80037fe:	4603      	mov	r3, r0
 8003800:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003802:	7bfb      	ldrb	r3, [r7, #15]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d12c      	bne.n	8003862 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003816:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6899      	ldr	r1, [r3, #8]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68d2      	ldr	r2, [r2, #12]
 8003842:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6919      	ldr	r1, [r3, #16]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	041a      	lsls	r2, r3, #16
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f000 f886 	bl	800396a <RTC_ExitInitMode>
 800385e:	4603      	mov	r3, r0
 8003860:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003862:	7bfb      	ldrb	r3, [r7, #15]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d110      	bne.n	800388a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003876:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	699a      	ldr	r2, [r3, #24]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	22ff      	movs	r2, #255	; 0xff
 8003890:	625a      	str	r2, [r3, #36]	; 0x24
 8003892:	e001      	b.n	8003898 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003898:	7bfb      	ldrb	r3, [r7, #15]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
	...

080038b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a0d      	ldr	r2, [pc, #52]	; (80038f8 <HAL_RTC_WaitForSynchro+0x48>)
 80038c2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038c4:	f7fd ff7a 	bl	80017bc <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038ca:	e009      	b.n	80038e0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038cc:	f7fd ff76 	bl	80017bc <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038da:	d901      	bls.n	80038e0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e007      	b.n	80038f0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f003 0320 	and.w	r3, r3, #32
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0ee      	beq.n	80038cc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80038ee:	2300      	movs	r3, #0
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3710      	adds	r7, #16
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	00013f5f 	.word	0x00013f5f

080038fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003908:	2300      	movs	r3, #0
 800390a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003916:	2b00      	cmp	r3, #0
 8003918:	d122      	bne.n	8003960 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003928:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800392a:	f7fd ff47 	bl	80017bc <HAL_GetTick>
 800392e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003930:	e00c      	b.n	800394c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003932:	f7fd ff43 	bl	80017bc <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003940:	d904      	bls.n	800394c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2204      	movs	r2, #4
 8003946:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <RTC_EnterInitMode+0x64>
 800395a:	7bfb      	ldrb	r3, [r7, #15]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d1e8      	bne.n	8003932 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003960:	7bfb      	ldrb	r3, [r7, #15]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003984:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d10a      	bne.n	80039aa <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ff8b 	bl	80038b0 <HAL_RTC_WaitForSynchro>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d004      	beq.n	80039aa <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2204      	movs	r2, #4
 80039a4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e041      	b.n	8003a4a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d106      	bne.n	80039e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fd fd72 	bl	80014c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2202      	movs	r2, #2
 80039e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3304      	adds	r3, #4
 80039f0:	4619      	mov	r1, r3
 80039f2:	4610      	mov	r0, r2
 80039f4:	f000 fa70 	bl	8003ed8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
	...

08003a54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d001      	beq.n	8003a6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e044      	b.n	8003af6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68da      	ldr	r2, [r3, #12]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a1e      	ldr	r2, [pc, #120]	; (8003b04 <HAL_TIM_Base_Start_IT+0xb0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d018      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a96:	d013      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a1a      	ldr	r2, [pc, #104]	; (8003b08 <HAL_TIM_Base_Start_IT+0xb4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d00e      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a19      	ldr	r2, [pc, #100]	; (8003b0c <HAL_TIM_Base_Start_IT+0xb8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d009      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <HAL_TIM_Base_Start_IT+0xbc>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d004      	beq.n	8003ac0 <HAL_TIM_Base_Start_IT+0x6c>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <HAL_TIM_Base_Start_IT+0xc0>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d111      	bne.n	8003ae4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 0307 	and.w	r3, r3, #7
 8003aca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2b06      	cmp	r3, #6
 8003ad0:	d010      	beq.n	8003af4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f042 0201 	orr.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae2:	e007      	b.n	8003af4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0201 	orr.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	40010000 	.word	0x40010000
 8003b08:	40000400 	.word	0x40000400
 8003b0c:	40000800 	.word	0x40000800
 8003b10:	40000c00 	.word	0x40000c00
 8003b14:	40014000 	.word	0x40014000

08003b18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d020      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f003 0302 	and.w	r3, r3, #2
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d01b      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f06f 0202 	mvn.w	r2, #2
 8003b4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2201      	movs	r2, #1
 8003b52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	f003 0303 	and.w	r3, r3, #3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f999 	bl	8003e9a <HAL_TIM_IC_CaptureCallback>
 8003b68:	e005      	b.n	8003b76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f98b 	bl	8003e86 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f99c 	bl	8003eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 0304 	and.w	r3, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d020      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f003 0304 	and.w	r3, r3, #4
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d01b      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f06f 0204 	mvn.w	r2, #4
 8003b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2202      	movs	r2, #2
 8003b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f973 	bl	8003e9a <HAL_TIM_IC_CaptureCallback>
 8003bb4:	e005      	b.n	8003bc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f000 f965 	bl	8003e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f976 	bl	8003eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d020      	beq.n	8003c14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d01b      	beq.n	8003c14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0208 	mvn.w	r2, #8
 8003be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2204      	movs	r2, #4
 8003bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	69db      	ldr	r3, [r3, #28]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 f94d 	bl	8003e9a <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f93f 	bl	8003e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f950 	bl	8003eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d020      	beq.n	8003c60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f003 0310 	and.w	r3, r3, #16
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d01b      	beq.n	8003c60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f06f 0210 	mvn.w	r2, #16
 8003c30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2208      	movs	r2, #8
 8003c36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f927 	bl	8003e9a <HAL_TIM_IC_CaptureCallback>
 8003c4c:	e005      	b.n	8003c5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 f919 	bl	8003e86 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 f92a 	bl	8003eae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00c      	beq.n	8003c84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f003 0301 	and.w	r3, r3, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d007      	beq.n	8003c84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0201 	mvn.w	r2, #1
 8003c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f7fd fa66 	bl	8001150 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00c      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d007      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fab6 	bl	8004214 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00c      	beq.n	8003ccc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 f8fb 	bl	8003ec2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00c      	beq.n	8003cf0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f003 0320 	and.w	r3, r3, #32
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d007      	beq.n	8003cf0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f06f 0220 	mvn.w	r2, #32
 8003ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 fa88 	bl	8004200 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cf0:	bf00      	nop
 8003cf2:	3710      	adds	r7, #16
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}

08003cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d02:	2300      	movs	r3, #0
 8003d04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d101      	bne.n	8003d14 <HAL_TIM_ConfigClockSource+0x1c>
 8003d10:	2302      	movs	r3, #2
 8003d12:	e0b4      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x186>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d4c:	d03e      	beq.n	8003dcc <HAL_TIM_ConfigClockSource+0xd4>
 8003d4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d52:	f200 8087 	bhi.w	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d5a:	f000 8086 	beq.w	8003e6a <HAL_TIM_ConfigClockSource+0x172>
 8003d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d62:	d87f      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d64:	2b70      	cmp	r3, #112	; 0x70
 8003d66:	d01a      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0xa6>
 8003d68:	2b70      	cmp	r3, #112	; 0x70
 8003d6a:	d87b      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d6c:	2b60      	cmp	r3, #96	; 0x60
 8003d6e:	d050      	beq.n	8003e12 <HAL_TIM_ConfigClockSource+0x11a>
 8003d70:	2b60      	cmp	r3, #96	; 0x60
 8003d72:	d877      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d74:	2b50      	cmp	r3, #80	; 0x50
 8003d76:	d03c      	beq.n	8003df2 <HAL_TIM_ConfigClockSource+0xfa>
 8003d78:	2b50      	cmp	r3, #80	; 0x50
 8003d7a:	d873      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d7c:	2b40      	cmp	r3, #64	; 0x40
 8003d7e:	d058      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0x13a>
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d86f      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d84:	2b30      	cmp	r3, #48	; 0x30
 8003d86:	d064      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x15a>
 8003d88:	2b30      	cmp	r3, #48	; 0x30
 8003d8a:	d86b      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d060      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x15a>
 8003d90:	2b20      	cmp	r3, #32
 8003d92:	d867      	bhi.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d05c      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x15a>
 8003d98:	2b10      	cmp	r3, #16
 8003d9a:	d05a      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x15a>
 8003d9c:	e062      	b.n	8003e64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dae:	f000 f999 	bl	80040e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dc0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68ba      	ldr	r2, [r7, #8]
 8003dc8:	609a      	str	r2, [r3, #8]
      break;
 8003dca:	e04f      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ddc:	f000 f982 	bl	80040e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003dee:	609a      	str	r2, [r3, #8]
      break;
 8003df0:	e03c      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfe:	461a      	mov	r2, r3
 8003e00:	f000 f8f6 	bl	8003ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2150      	movs	r1, #80	; 0x50
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f94f 	bl	80040ae <TIM_ITRx_SetConfig>
      break;
 8003e10:	e02c      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f000 f915 	bl	800404e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2160      	movs	r1, #96	; 0x60
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 f93f 	bl	80040ae <TIM_ITRx_SetConfig>
      break;
 8003e30:	e01c      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f000 f8d6 	bl	8003ff0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2140      	movs	r1, #64	; 0x40
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f92f 	bl	80040ae <TIM_ITRx_SetConfig>
      break;
 8003e50:	e00c      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4610      	mov	r0, r2
 8003e5e:	f000 f926 	bl	80040ae <TIM_ITRx_SetConfig>
      break;
 8003e62:	e003      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
      break;
 8003e68:	e000      	b.n	8003e6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003e6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003eb6:	bf00      	nop
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
	...

08003ed8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a3a      	ldr	r2, [pc, #232]	; (8003fd4 <TIM_Base_SetConfig+0xfc>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d00f      	beq.n	8003f10 <TIM_Base_SetConfig+0x38>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef6:	d00b      	beq.n	8003f10 <TIM_Base_SetConfig+0x38>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a37      	ldr	r2, [pc, #220]	; (8003fd8 <TIM_Base_SetConfig+0x100>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d007      	beq.n	8003f10 <TIM_Base_SetConfig+0x38>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a36      	ldr	r2, [pc, #216]	; (8003fdc <TIM_Base_SetConfig+0x104>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d003      	beq.n	8003f10 <TIM_Base_SetConfig+0x38>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a35      	ldr	r2, [pc, #212]	; (8003fe0 <TIM_Base_SetConfig+0x108>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d108      	bne.n	8003f22 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a2b      	ldr	r2, [pc, #172]	; (8003fd4 <TIM_Base_SetConfig+0xfc>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01b      	beq.n	8003f62 <TIM_Base_SetConfig+0x8a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f30:	d017      	beq.n	8003f62 <TIM_Base_SetConfig+0x8a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a28      	ldr	r2, [pc, #160]	; (8003fd8 <TIM_Base_SetConfig+0x100>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d013      	beq.n	8003f62 <TIM_Base_SetConfig+0x8a>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a27      	ldr	r2, [pc, #156]	; (8003fdc <TIM_Base_SetConfig+0x104>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d00f      	beq.n	8003f62 <TIM_Base_SetConfig+0x8a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a26      	ldr	r2, [pc, #152]	; (8003fe0 <TIM_Base_SetConfig+0x108>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <TIM_Base_SetConfig+0x8a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a25      	ldr	r2, [pc, #148]	; (8003fe4 <TIM_Base_SetConfig+0x10c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d007      	beq.n	8003f62 <TIM_Base_SetConfig+0x8a>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a24      	ldr	r2, [pc, #144]	; (8003fe8 <TIM_Base_SetConfig+0x110>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d003      	beq.n	8003f62 <TIM_Base_SetConfig+0x8a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a23      	ldr	r2, [pc, #140]	; (8003fec <TIM_Base_SetConfig+0x114>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d108      	bne.n	8003f74 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a0e      	ldr	r2, [pc, #56]	; (8003fd4 <TIM_Base_SetConfig+0xfc>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d103      	bne.n	8003fa8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	691b      	ldr	r3, [r3, #16]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d105      	bne.n	8003fc6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f023 0201 	bic.w	r2, r3, #1
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	611a      	str	r2, [r3, #16]
  }
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00
 8003fe4:	40014000 	.word	0x40014000
 8003fe8:	40014400 	.word	0x40014400
 8003fec:	40014800 	.word	0x40014800

08003ff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b087      	sub	sp, #28
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a1b      	ldr	r3, [r3, #32]
 8004000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	f023 0201 	bic.w	r2, r3, #1
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	699b      	ldr	r3, [r3, #24]
 8004012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800401a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f023 030a 	bic.w	r3, r3, #10
 800402c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800402e:	697a      	ldr	r2, [r7, #20]
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800404e:	b480      	push	{r7}
 8004050:	b087      	sub	sp, #28
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f023 0210 	bic.w	r2, r3, #16
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	031b      	lsls	r3, r3, #12
 800407e:	693a      	ldr	r2, [r7, #16]
 8004080:	4313      	orrs	r3, r2
 8004082:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800408a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	697a      	ldr	r2, [r7, #20]
 8004092:	4313      	orrs	r3, r2
 8004094:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	621a      	str	r2, [r3, #32]
}
 80040a2:	bf00      	nop
 80040a4:	371c      	adds	r7, #28
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
 80040b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f043 0307 	orr.w	r3, r3, #7
 80040d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	609a      	str	r2, [r3, #8]
}
 80040d8:	bf00      	nop
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
 80040f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	021a      	lsls	r2, r3, #8
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	431a      	orrs	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4313      	orrs	r3, r2
 800410c:	697a      	ldr	r2, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	697a      	ldr	r2, [r7, #20]
 8004116:	609a      	str	r2, [r3, #8]
}
 8004118:	bf00      	nop
 800411a:	371c      	adds	r7, #28
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004138:	2302      	movs	r3, #2
 800413a:	e050      	b.n	80041de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4313      	orrs	r3, r2
 800416c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a1c      	ldr	r2, [pc, #112]	; (80041ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d018      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004188:	d013      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a18      	ldr	r2, [pc, #96]	; (80041f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00e      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a16      	ldr	r2, [pc, #88]	; (80041f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d009      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a15      	ldr	r2, [pc, #84]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d004      	beq.n	80041b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a13      	ldr	r2, [pc, #76]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d10c      	bne.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	40010000 	.word	0x40010000
 80041f0:	40000400 	.word	0x40000400
 80041f4:	40000800 	.word	0x40000800
 80041f8:	40000c00 	.word	0x40000c00
 80041fc:	40014000 	.word	0x40014000

08004200 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004208:	bf00      	nop
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e042      	b.n	80042c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004240:	b2db      	uxtb	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d106      	bne.n	8004254 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7fd f960 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2224      	movs	r2, #36	; 0x24
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68da      	ldr	r2, [r3, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800426a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f973 	bl	8004558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	691a      	ldr	r2, [r3, #16]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004280:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695a      	ldr	r2, [r3, #20]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004290:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68da      	ldr	r2, [r3, #12]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3708      	adds	r7, #8
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b08a      	sub	sp, #40	; 0x28
 80042cc:	af02      	add	r7, sp, #8
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	603b      	str	r3, [r7, #0]
 80042d4:	4613      	mov	r3, r2
 80042d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d175      	bne.n	80043d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d002      	beq.n	80042f4 <HAL_UART_Transmit+0x2c>
 80042ee:	88fb      	ldrh	r3, [r7, #6]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d101      	bne.n	80042f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e06e      	b.n	80043d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2221      	movs	r2, #33	; 0x21
 8004302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004306:	f7fd fa59 	bl	80017bc <HAL_GetTick>
 800430a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	88fa      	ldrh	r2, [r7, #6]
 8004310:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	88fa      	ldrh	r2, [r7, #6]
 8004316:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004320:	d108      	bne.n	8004334 <HAL_UART_Transmit+0x6c>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d104      	bne.n	8004334 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	61bb      	str	r3, [r7, #24]
 8004332:	e003      	b.n	800433c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004338:	2300      	movs	r3, #0
 800433a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800433c:	e02e      	b.n	800439c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	2200      	movs	r2, #0
 8004346:	2180      	movs	r1, #128	; 0x80
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f000 f848 	bl	80043de <UART_WaitOnFlagUntilTimeout>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e03a      	b.n	80043d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10b      	bne.n	800437e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	881b      	ldrh	r3, [r3, #0]
 800436a:	461a      	mov	r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004374:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	3302      	adds	r3, #2
 800437a:	61bb      	str	r3, [r7, #24]
 800437c:	e007      	b.n	800438e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	781a      	ldrb	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	3301      	adds	r3, #1
 800438c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1cb      	bne.n	800433e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	9300      	str	r3, [sp, #0]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2200      	movs	r2, #0
 80043ae:	2140      	movs	r1, #64	; 0x40
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f000 f814 	bl	80043de <UART_WaitOnFlagUntilTimeout>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e006      	b.n	80043d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80043d0:	2300      	movs	r3, #0
 80043d2:	e000      	b.n	80043d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80043d4:	2302      	movs	r3, #2
  }
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b086      	sub	sp, #24
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	60f8      	str	r0, [r7, #12]
 80043e6:	60b9      	str	r1, [r7, #8]
 80043e8:	603b      	str	r3, [r7, #0]
 80043ea:	4613      	mov	r3, r2
 80043ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ee:	e03b      	b.n	8004468 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043f6:	d037      	beq.n	8004468 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043f8:	f7fd f9e0 	bl	80017bc <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	6a3a      	ldr	r2, [r7, #32]
 8004404:	429a      	cmp	r2, r3
 8004406:	d302      	bcc.n	800440e <UART_WaitOnFlagUntilTimeout+0x30>
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e03a      	b.n	8004488 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f003 0304 	and.w	r3, r3, #4
 800441c:	2b00      	cmp	r3, #0
 800441e:	d023      	beq.n	8004468 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b80      	cmp	r3, #128	; 0x80
 8004424:	d020      	beq.n	8004468 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	2b40      	cmp	r3, #64	; 0x40
 800442a:	d01d      	beq.n	8004468 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0308 	and.w	r3, r3, #8
 8004436:	2b08      	cmp	r3, #8
 8004438:	d116      	bne.n	8004468 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800443a:	2300      	movs	r3, #0
 800443c:	617b      	str	r3, [r7, #20]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f000 f81d 	bl	8004490 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2208      	movs	r2, #8
 800445a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e00f      	b.n	8004488 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	4013      	ands	r3, r2
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	429a      	cmp	r2, r3
 8004476:	bf0c      	ite	eq
 8004478:	2301      	moveq	r3, #1
 800447a:	2300      	movne	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	461a      	mov	r2, r3
 8004480:	79fb      	ldrb	r3, [r7, #7]
 8004482:	429a      	cmp	r2, r3
 8004484:	d0b4      	beq.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004490:	b480      	push	{r7}
 8004492:	b095      	sub	sp, #84	; 0x54
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	330c      	adds	r3, #12
 800449e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044a2:	e853 3f00 	ldrex	r3, [r3]
 80044a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	330c      	adds	r3, #12
 80044b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044b8:	643a      	str	r2, [r7, #64]	; 0x40
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044c0:	e841 2300 	strex	r3, r2, [r1]
 80044c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1e5      	bne.n	8004498 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	3314      	adds	r3, #20
 80044d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6a3b      	ldr	r3, [r7, #32]
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	61fb      	str	r3, [r7, #28]
   return(result);
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f023 0301 	bic.w	r3, r3, #1
 80044e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3314      	adds	r3, #20
 80044ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e5      	bne.n	80044cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	2b01      	cmp	r3, #1
 8004506:	d119      	bne.n	800453c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	330c      	adds	r3, #12
 800450e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	60bb      	str	r3, [r7, #8]
   return(result);
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	f023 0310 	bic.w	r3, r3, #16
 800451e:	647b      	str	r3, [r7, #68]	; 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	330c      	adds	r3, #12
 8004526:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004528:	61ba      	str	r2, [r7, #24]
 800452a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452c:	6979      	ldr	r1, [r7, #20]
 800452e:	69ba      	ldr	r2, [r7, #24]
 8004530:	e841 2300 	strex	r3, r2, [r1]
 8004534:	613b      	str	r3, [r7, #16]
   return(result);
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d1e5      	bne.n	8004508 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2200      	movs	r2, #0
 8004548:	631a      	str	r2, [r3, #48]	; 0x30
}
 800454a:	bf00      	nop
 800454c:	3754      	adds	r7, #84	; 0x54
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
	...

08004558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800455c:	b0c0      	sub	sp, #256	; 0x100
 800455e:	af00      	add	r7, sp, #0
 8004560:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004574:	68d9      	ldr	r1, [r3, #12]
 8004576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	ea40 0301 	orr.w	r3, r0, r1
 8004580:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	431a      	orrs	r2, r3
 8004590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	431a      	orrs	r2, r3
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	4313      	orrs	r3, r2
 80045a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045b0:	f021 010c 	bic.w	r1, r1, #12
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045be:	430b      	orrs	r3, r1
 80045c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80045c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d2:	6999      	ldr	r1, [r3, #24]
 80045d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	ea40 0301 	orr.w	r3, r0, r1
 80045de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b8f      	ldr	r3, [pc, #572]	; (8004824 <UART_SetConfig+0x2cc>)
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d005      	beq.n	80045f8 <UART_SetConfig+0xa0>
 80045ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	4b8d      	ldr	r3, [pc, #564]	; (8004828 <UART_SetConfig+0x2d0>)
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d104      	bne.n	8004602 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045f8:	f7fe ffd4 	bl	80035a4 <HAL_RCC_GetPCLK2Freq>
 80045fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004600:	e003      	b.n	800460a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004602:	f7fe ffbb 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8004606:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004614:	f040 810c 	bne.w	8004830 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800461c:	2200      	movs	r2, #0
 800461e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004622:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004626:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800462a:	4622      	mov	r2, r4
 800462c:	462b      	mov	r3, r5
 800462e:	1891      	adds	r1, r2, r2
 8004630:	65b9      	str	r1, [r7, #88]	; 0x58
 8004632:	415b      	adcs	r3, r3
 8004634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004636:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800463a:	4621      	mov	r1, r4
 800463c:	eb12 0801 	adds.w	r8, r2, r1
 8004640:	4629      	mov	r1, r5
 8004642:	eb43 0901 	adc.w	r9, r3, r1
 8004646:	f04f 0200 	mov.w	r2, #0
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004652:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004656:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800465a:	4690      	mov	r8, r2
 800465c:	4699      	mov	r9, r3
 800465e:	4623      	mov	r3, r4
 8004660:	eb18 0303 	adds.w	r3, r8, r3
 8004664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004668:	462b      	mov	r3, r5
 800466a:	eb49 0303 	adc.w	r3, r9, r3
 800466e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800467e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004682:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004686:	460b      	mov	r3, r1
 8004688:	18db      	adds	r3, r3, r3
 800468a:	653b      	str	r3, [r7, #80]	; 0x50
 800468c:	4613      	mov	r3, r2
 800468e:	eb42 0303 	adc.w	r3, r2, r3
 8004692:	657b      	str	r3, [r7, #84]	; 0x54
 8004694:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004698:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800469c:	f7fc f966 	bl	800096c <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4b61      	ldr	r3, [pc, #388]	; (800482c <UART_SetConfig+0x2d4>)
 80046a6:	fba3 2302 	umull	r2, r3, r3, r2
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	011c      	lsls	r4, r3, #4
 80046ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80046bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80046c0:	4642      	mov	r2, r8
 80046c2:	464b      	mov	r3, r9
 80046c4:	1891      	adds	r1, r2, r2
 80046c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80046c8:	415b      	adcs	r3, r3
 80046ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046d0:	4641      	mov	r1, r8
 80046d2:	eb12 0a01 	adds.w	sl, r2, r1
 80046d6:	4649      	mov	r1, r9
 80046d8:	eb43 0b01 	adc.w	fp, r3, r1
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046f0:	4692      	mov	sl, r2
 80046f2:	469b      	mov	fp, r3
 80046f4:	4643      	mov	r3, r8
 80046f6:	eb1a 0303 	adds.w	r3, sl, r3
 80046fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046fe:	464b      	mov	r3, r9
 8004700:	eb4b 0303 	adc.w	r3, fp, r3
 8004704:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004714:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004718:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800471c:	460b      	mov	r3, r1
 800471e:	18db      	adds	r3, r3, r3
 8004720:	643b      	str	r3, [r7, #64]	; 0x40
 8004722:	4613      	mov	r3, r2
 8004724:	eb42 0303 	adc.w	r3, r2, r3
 8004728:	647b      	str	r3, [r7, #68]	; 0x44
 800472a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800472e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004732:	f7fc f91b 	bl	800096c <__aeabi_uldivmod>
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	4611      	mov	r1, r2
 800473c:	4b3b      	ldr	r3, [pc, #236]	; (800482c <UART_SetConfig+0x2d4>)
 800473e:	fba3 2301 	umull	r2, r3, r3, r1
 8004742:	095b      	lsrs	r3, r3, #5
 8004744:	2264      	movs	r2, #100	; 0x64
 8004746:	fb02 f303 	mul.w	r3, r2, r3
 800474a:	1acb      	subs	r3, r1, r3
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004752:	4b36      	ldr	r3, [pc, #216]	; (800482c <UART_SetConfig+0x2d4>)
 8004754:	fba3 2302 	umull	r2, r3, r3, r2
 8004758:	095b      	lsrs	r3, r3, #5
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004760:	441c      	add	r4, r3
 8004762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004766:	2200      	movs	r2, #0
 8004768:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800476c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004770:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004774:	4642      	mov	r2, r8
 8004776:	464b      	mov	r3, r9
 8004778:	1891      	adds	r1, r2, r2
 800477a:	63b9      	str	r1, [r7, #56]	; 0x38
 800477c:	415b      	adcs	r3, r3
 800477e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004780:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004784:	4641      	mov	r1, r8
 8004786:	1851      	adds	r1, r2, r1
 8004788:	6339      	str	r1, [r7, #48]	; 0x30
 800478a:	4649      	mov	r1, r9
 800478c:	414b      	adcs	r3, r1
 800478e:	637b      	str	r3, [r7, #52]	; 0x34
 8004790:	f04f 0200 	mov.w	r2, #0
 8004794:	f04f 0300 	mov.w	r3, #0
 8004798:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800479c:	4659      	mov	r1, fp
 800479e:	00cb      	lsls	r3, r1, #3
 80047a0:	4651      	mov	r1, sl
 80047a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a6:	4651      	mov	r1, sl
 80047a8:	00ca      	lsls	r2, r1, #3
 80047aa:	4610      	mov	r0, r2
 80047ac:	4619      	mov	r1, r3
 80047ae:	4603      	mov	r3, r0
 80047b0:	4642      	mov	r2, r8
 80047b2:	189b      	adds	r3, r3, r2
 80047b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047b8:	464b      	mov	r3, r9
 80047ba:	460a      	mov	r2, r1
 80047bc:	eb42 0303 	adc.w	r3, r2, r3
 80047c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047d8:	460b      	mov	r3, r1
 80047da:	18db      	adds	r3, r3, r3
 80047dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80047de:	4613      	mov	r3, r2
 80047e0:	eb42 0303 	adc.w	r3, r2, r3
 80047e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047ee:	f7fc f8bd 	bl	800096c <__aeabi_uldivmod>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	4b0d      	ldr	r3, [pc, #52]	; (800482c <UART_SetConfig+0x2d4>)
 80047f8:	fba3 1302 	umull	r1, r3, r3, r2
 80047fc:	095b      	lsrs	r3, r3, #5
 80047fe:	2164      	movs	r1, #100	; 0x64
 8004800:	fb01 f303 	mul.w	r3, r1, r3
 8004804:	1ad3      	subs	r3, r2, r3
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	3332      	adds	r3, #50	; 0x32
 800480a:	4a08      	ldr	r2, [pc, #32]	; (800482c <UART_SetConfig+0x2d4>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	095b      	lsrs	r3, r3, #5
 8004812:	f003 0207 	and.w	r2, r3, #7
 8004816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4422      	add	r2, r4
 800481e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004820:	e106      	b.n	8004a30 <UART_SetConfig+0x4d8>
 8004822:	bf00      	nop
 8004824:	40011000 	.word	0x40011000
 8004828:	40011400 	.word	0x40011400
 800482c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004834:	2200      	movs	r2, #0
 8004836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800483a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800483e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004842:	4642      	mov	r2, r8
 8004844:	464b      	mov	r3, r9
 8004846:	1891      	adds	r1, r2, r2
 8004848:	6239      	str	r1, [r7, #32]
 800484a:	415b      	adcs	r3, r3
 800484c:	627b      	str	r3, [r7, #36]	; 0x24
 800484e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004852:	4641      	mov	r1, r8
 8004854:	1854      	adds	r4, r2, r1
 8004856:	4649      	mov	r1, r9
 8004858:	eb43 0501 	adc.w	r5, r3, r1
 800485c:	f04f 0200 	mov.w	r2, #0
 8004860:	f04f 0300 	mov.w	r3, #0
 8004864:	00eb      	lsls	r3, r5, #3
 8004866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800486a:	00e2      	lsls	r2, r4, #3
 800486c:	4614      	mov	r4, r2
 800486e:	461d      	mov	r5, r3
 8004870:	4643      	mov	r3, r8
 8004872:	18e3      	adds	r3, r4, r3
 8004874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004878:	464b      	mov	r3, r9
 800487a:	eb45 0303 	adc.w	r3, r5, r3
 800487e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800488e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004892:	f04f 0200 	mov.w	r2, #0
 8004896:	f04f 0300 	mov.w	r3, #0
 800489a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800489e:	4629      	mov	r1, r5
 80048a0:	008b      	lsls	r3, r1, #2
 80048a2:	4621      	mov	r1, r4
 80048a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a8:	4621      	mov	r1, r4
 80048aa:	008a      	lsls	r2, r1, #2
 80048ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80048b0:	f7fc f85c 	bl	800096c <__aeabi_uldivmod>
 80048b4:	4602      	mov	r2, r0
 80048b6:	460b      	mov	r3, r1
 80048b8:	4b60      	ldr	r3, [pc, #384]	; (8004a3c <UART_SetConfig+0x4e4>)
 80048ba:	fba3 2302 	umull	r2, r3, r3, r2
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	011c      	lsls	r4, r3, #4
 80048c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048d4:	4642      	mov	r2, r8
 80048d6:	464b      	mov	r3, r9
 80048d8:	1891      	adds	r1, r2, r2
 80048da:	61b9      	str	r1, [r7, #24]
 80048dc:	415b      	adcs	r3, r3
 80048de:	61fb      	str	r3, [r7, #28]
 80048e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048e4:	4641      	mov	r1, r8
 80048e6:	1851      	adds	r1, r2, r1
 80048e8:	6139      	str	r1, [r7, #16]
 80048ea:	4649      	mov	r1, r9
 80048ec:	414b      	adcs	r3, r1
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	f04f 0200 	mov.w	r2, #0
 80048f4:	f04f 0300 	mov.w	r3, #0
 80048f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048fc:	4659      	mov	r1, fp
 80048fe:	00cb      	lsls	r3, r1, #3
 8004900:	4651      	mov	r1, sl
 8004902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004906:	4651      	mov	r1, sl
 8004908:	00ca      	lsls	r2, r1, #3
 800490a:	4610      	mov	r0, r2
 800490c:	4619      	mov	r1, r3
 800490e:	4603      	mov	r3, r0
 8004910:	4642      	mov	r2, r8
 8004912:	189b      	adds	r3, r3, r2
 8004914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004918:	464b      	mov	r3, r9
 800491a:	460a      	mov	r2, r1
 800491c:	eb42 0303 	adc.w	r3, r2, r3
 8004920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	67bb      	str	r3, [r7, #120]	; 0x78
 800492e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800493c:	4649      	mov	r1, r9
 800493e:	008b      	lsls	r3, r1, #2
 8004940:	4641      	mov	r1, r8
 8004942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004946:	4641      	mov	r1, r8
 8004948:	008a      	lsls	r2, r1, #2
 800494a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800494e:	f7fc f80d 	bl	800096c <__aeabi_uldivmod>
 8004952:	4602      	mov	r2, r0
 8004954:	460b      	mov	r3, r1
 8004956:	4611      	mov	r1, r2
 8004958:	4b38      	ldr	r3, [pc, #224]	; (8004a3c <UART_SetConfig+0x4e4>)
 800495a:	fba3 2301 	umull	r2, r3, r3, r1
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	2264      	movs	r2, #100	; 0x64
 8004962:	fb02 f303 	mul.w	r3, r2, r3
 8004966:	1acb      	subs	r3, r1, r3
 8004968:	011b      	lsls	r3, r3, #4
 800496a:	3332      	adds	r3, #50	; 0x32
 800496c:	4a33      	ldr	r2, [pc, #204]	; (8004a3c <UART_SetConfig+0x4e4>)
 800496e:	fba2 2303 	umull	r2, r3, r2, r3
 8004972:	095b      	lsrs	r3, r3, #5
 8004974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004978:	441c      	add	r4, r3
 800497a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800497e:	2200      	movs	r2, #0
 8004980:	673b      	str	r3, [r7, #112]	; 0x70
 8004982:	677a      	str	r2, [r7, #116]	; 0x74
 8004984:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004988:	4642      	mov	r2, r8
 800498a:	464b      	mov	r3, r9
 800498c:	1891      	adds	r1, r2, r2
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	415b      	adcs	r3, r3
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004998:	4641      	mov	r1, r8
 800499a:	1851      	adds	r1, r2, r1
 800499c:	6039      	str	r1, [r7, #0]
 800499e:	4649      	mov	r1, r9
 80049a0:	414b      	adcs	r3, r1
 80049a2:	607b      	str	r3, [r7, #4]
 80049a4:	f04f 0200 	mov.w	r2, #0
 80049a8:	f04f 0300 	mov.w	r3, #0
 80049ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80049b0:	4659      	mov	r1, fp
 80049b2:	00cb      	lsls	r3, r1, #3
 80049b4:	4651      	mov	r1, sl
 80049b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049ba:	4651      	mov	r1, sl
 80049bc:	00ca      	lsls	r2, r1, #3
 80049be:	4610      	mov	r0, r2
 80049c0:	4619      	mov	r1, r3
 80049c2:	4603      	mov	r3, r0
 80049c4:	4642      	mov	r2, r8
 80049c6:	189b      	adds	r3, r3, r2
 80049c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80049ca:	464b      	mov	r3, r9
 80049cc:	460a      	mov	r2, r1
 80049ce:	eb42 0303 	adc.w	r3, r2, r3
 80049d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	663b      	str	r3, [r7, #96]	; 0x60
 80049de:	667a      	str	r2, [r7, #100]	; 0x64
 80049e0:	f04f 0200 	mov.w	r2, #0
 80049e4:	f04f 0300 	mov.w	r3, #0
 80049e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049ec:	4649      	mov	r1, r9
 80049ee:	008b      	lsls	r3, r1, #2
 80049f0:	4641      	mov	r1, r8
 80049f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049f6:	4641      	mov	r1, r8
 80049f8:	008a      	lsls	r2, r1, #2
 80049fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049fe:	f7fb ffb5 	bl	800096c <__aeabi_uldivmod>
 8004a02:	4602      	mov	r2, r0
 8004a04:	460b      	mov	r3, r1
 8004a06:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <UART_SetConfig+0x4e4>)
 8004a08:	fba3 1302 	umull	r1, r3, r3, r2
 8004a0c:	095b      	lsrs	r3, r3, #5
 8004a0e:	2164      	movs	r1, #100	; 0x64
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	3332      	adds	r3, #50	; 0x32
 8004a1a:	4a08      	ldr	r2, [pc, #32]	; (8004a3c <UART_SetConfig+0x4e4>)
 8004a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a20:	095b      	lsrs	r3, r3, #5
 8004a22:	f003 020f 	and.w	r2, r3, #15
 8004a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4422      	add	r2, r4
 8004a2e:	609a      	str	r2, [r3, #8]
}
 8004a30:	bf00      	nop
 8004a32:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a36:	46bd      	mov	sp, r7
 8004a38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a3c:	51eb851f 	.word	0x51eb851f

08004a40 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af02      	add	r7, sp, #8
 8004a46:	4603      	mov	r3, r0
 8004a48:	460a      	mov	r2, r1
 8004a4a:	71fb      	strb	r3, [r7, #7]
 8004a4c:	4613      	mov	r3, r2
 8004a4e:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8004a50:	79fb      	ldrb	r3, [r7, #7]
 8004a52:	4a14      	ldr	r2, [pc, #80]	; (8004aa4 <I2C_LCD_ExpanderWrite+0x64>)
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	4413      	add	r3, r2
 8004a58:	785a      	ldrb	r2, [r3, #1]
 8004a5a:	79bb      	ldrb	r3, [r7, #6]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 8004a62:	79fa      	ldrb	r2, [r7, #7]
 8004a64:	4910      	ldr	r1, [pc, #64]	; (8004aa8 <I2C_LCD_ExpanderWrite+0x68>)
 8004a66:	4613      	mov	r3, r2
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	3304      	adds	r3, #4
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	79fa      	ldrb	r2, [r7, #7]
 8004a76:	490c      	ldr	r1, [pc, #48]	; (8004aa8 <I2C_LCD_ExpanderWrite+0x68>)
 8004a78:	4613      	mov	r3, r2
 8004a7a:	005b      	lsls	r3, r3, #1
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	3308      	adds	r3, #8
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	b299      	uxth	r1, r3
 8004a8c:	f107 020f 	add.w	r2, r7, #15
 8004a90:	2364      	movs	r3, #100	; 0x64
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	2301      	movs	r3, #1
 8004a96:	f7fd fda7 	bl	80025e8 <HAL_I2C_Master_Transmit>
}
 8004a9a:	bf00      	nop
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	2000021c 	.word	0x2000021c
 8004aa8:	080067d8 	.word	0x080067d8

08004aac <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	460a      	mov	r2, r1
 8004ab6:	71fb      	strb	r3, [r7, #7]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8004abc:	79bb      	ldrb	r3, [r7, #6]
 8004abe:	f043 0304 	orr.w	r3, r3, #4
 8004ac2:	b2da      	uxtb	r2, r3
 8004ac4:	79fb      	ldrb	r3, [r7, #7]
 8004ac6:	4611      	mov	r1, r2
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff ffb9 	bl	8004a40 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8004ace:	4b22      	ldr	r3, [pc, #136]	; (8004b58 <I2C_LCD_EnPulse+0xac>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	4b21      	ldr	r3, [pc, #132]	; (8004b5c <I2C_LCD_EnPulse+0xb0>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a21      	ldr	r2, [pc, #132]	; (8004b60 <I2C_LCD_EnPulse+0xb4>)
 8004ada:	fba2 2303 	umull	r2, r3, r2, r3
 8004ade:	0c9b      	lsrs	r3, r3, #18
 8004ae0:	005a      	lsls	r2, r3, #1
 8004ae2:	4b1e      	ldr	r3, [pc, #120]	; (8004b5c <I2C_LCD_EnPulse+0xb0>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	491e      	ldr	r1, [pc, #120]	; (8004b60 <I2C_LCD_EnPulse+0xb4>)
 8004ae8:	fba1 1303 	umull	r1, r3, r1, r3
 8004aec:	0c9b      	lsrs	r3, r3, #18
 8004aee:	085b      	lsrs	r3, r3, #1
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	613b      	str	r3, [r7, #16]
 8004af4:	4b18      	ldr	r3, [pc, #96]	; (8004b58 <I2C_LCD_EnPulse+0xac>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d8f8      	bhi.n	8004af4 <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 8004b02:	79bb      	ldrb	r3, [r7, #6]
 8004b04:	f023 0304 	bic.w	r3, r3, #4
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	79fb      	ldrb	r3, [r7, #7]
 8004b0c:	4611      	mov	r1, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff ff96 	bl	8004a40 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 8004b14:	4b10      	ldr	r3, [pc, #64]	; (8004b58 <I2C_LCD_EnPulse+0xac>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	4b10      	ldr	r3, [pc, #64]	; (8004b5c <I2C_LCD_EnPulse+0xb0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a10      	ldr	r2, [pc, #64]	; (8004b60 <I2C_LCD_EnPulse+0xb4>)
 8004b20:	fba2 2303 	umull	r2, r3, r2, r3
 8004b24:	0c9b      	lsrs	r3, r3, #18
 8004b26:	2232      	movs	r2, #50	; 0x32
 8004b28:	fb03 f202 	mul.w	r2, r3, r2
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	; (8004b5c <I2C_LCD_EnPulse+0xb0>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	490b      	ldr	r1, [pc, #44]	; (8004b60 <I2C_LCD_EnPulse+0xb4>)
 8004b32:	fba1 1303 	umull	r1, r3, r1, r3
 8004b36:	0c9b      	lsrs	r3, r3, #18
 8004b38:	085b      	lsrs	r3, r3, #1
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	4b06      	ldr	r3, [pc, #24]	; (8004b58 <I2C_LCD_EnPulse+0xac>)
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d8f8      	bhi.n	8004b3e <I2C_LCD_EnPulse+0x92>
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	e000e010 	.word	0xe000e010
 8004b5c:	20000000 	.word	0x20000000
 8004b60:	431bde83 	.word	0x431bde83

08004b64 <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	460a      	mov	r2, r1
 8004b6e:	71fb      	strb	r3, [r7, #7]
 8004b70:	4613      	mov	r3, r2
 8004b72:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 8004b74:	79ba      	ldrb	r2, [r7, #6]
 8004b76:	79fb      	ldrb	r3, [r7, #7]
 8004b78:	4611      	mov	r1, r2
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ff60 	bl	8004a40 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8004b80:	79ba      	ldrb	r2, [r7, #6]
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	4611      	mov	r1, r2
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7ff ff90 	bl	8004aac <I2C_LCD_EnPulse>
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	71fb      	strb	r3, [r7, #7]
 8004b9e:	460b      	mov	r3, r1
 8004ba0:	71bb      	strb	r3, [r7, #6]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 8004ba6:	79bb      	ldrb	r3, [r7, #6]
 8004ba8:	f023 030f 	bic.w	r3, r3, #15
 8004bac:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8004bae:	79bb      	ldrb	r3, [r7, #6]
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 8004bb4:	7bfa      	ldrb	r2, [r7, #15]
 8004bb6:	797b      	ldrb	r3, [r7, #5]
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7ff ffcf 	bl	8004b64 <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 8004bc6:	7bba      	ldrb	r2, [r7, #14]
 8004bc8:	797b      	ldrb	r3, [r7, #5]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	4611      	mov	r1, r2
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7ff ffc6 	bl	8004b64 <I2C_LCD_Write4Bits>
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	4603      	mov	r3, r0
 8004be8:	460a      	mov	r2, r1
 8004bea:	71fb      	strb	r3, [r7, #7]
 8004bec:	4613      	mov	r3, r2
 8004bee:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 8004bf0:	79b9      	ldrb	r1, [r7, #6]
 8004bf2:	79fb      	ldrb	r3, [r7, #7]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f7ff ffcc 	bl	8004b94 <I2C_LCD_Send>
}
 8004bfc:	bf00      	nop
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	460a      	mov	r2, r1
 8004c0e:	71fb      	strb	r3, [r7, #7]
 8004c10:	4613      	mov	r3, r2
 8004c12:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 8004c14:	79b9      	ldrb	r1, [r7, #6]
 8004c16:	79fb      	ldrb	r3, [r7, #7]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff ffba 	bl	8004b94 <I2C_LCD_Send>
}
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	4603      	mov	r3, r0
 8004c30:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 8004c32:	bf00      	nop
 8004c34:	f7fc fdc2 	bl	80017bc <HAL_GetTick>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b31      	cmp	r3, #49	; 0x31
 8004c3c:	d9fa      	bls.n	8004c34 <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	2130      	movs	r1, #48	; 0x30
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7ff ffcc 	bl	8004be0 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8004c48:	2300      	movs	r3, #0
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4c:	e01f      	b.n	8004c8e <I2C_LCD_Init+0x66>
 8004c4e:	4b4b      	ldr	r3, [pc, #300]	; (8004d7c <I2C_LCD_Init+0x154>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	4b4a      	ldr	r3, [pc, #296]	; (8004d80 <I2C_LCD_Init+0x158>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a4a      	ldr	r2, [pc, #296]	; (8004d84 <I2C_LCD_Init+0x15c>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	0c9b      	lsrs	r3, r3, #18
 8004c60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004c64:	fb03 f202 	mul.w	r2, r3, r2
 8004c68:	4b45      	ldr	r3, [pc, #276]	; (8004d80 <I2C_LCD_Init+0x158>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4945      	ldr	r1, [pc, #276]	; (8004d84 <I2C_LCD_Init+0x15c>)
 8004c6e:	fba1 1303 	umull	r1, r3, r1, r3
 8004c72:	0c9b      	lsrs	r3, r3, #18
 8004c74:	085b      	lsrs	r3, r3, #1
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	4b40      	ldr	r3, [pc, #256]	; (8004d7c <I2C_LCD_Init+0x154>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d8f8      	bhi.n	8004c7a <I2C_LCD_Init+0x52>
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c90:	2b04      	cmp	r3, #4
 8004c92:	d9dc      	bls.n	8004c4e <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8004c94:	79fb      	ldrb	r3, [r7, #7]
 8004c96:	2130      	movs	r1, #48	; 0x30
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7ff ffa1 	bl	8004be0 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	623b      	str	r3, [r7, #32]
 8004ca2:	e01f      	b.n	8004ce4 <I2C_LCD_Init+0xbc>
 8004ca4:	4b35      	ldr	r3, [pc, #212]	; (8004d7c <I2C_LCD_Init+0x154>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	617b      	str	r3, [r7, #20]
 8004caa:	4b35      	ldr	r3, [pc, #212]	; (8004d80 <I2C_LCD_Init+0x158>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a35      	ldr	r2, [pc, #212]	; (8004d84 <I2C_LCD_Init+0x15c>)
 8004cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb4:	0c9b      	lsrs	r3, r3, #18
 8004cb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cba:	fb03 f202 	mul.w	r2, r3, r2
 8004cbe:	4b30      	ldr	r3, [pc, #192]	; (8004d80 <I2C_LCD_Init+0x158>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4930      	ldr	r1, [pc, #192]	; (8004d84 <I2C_LCD_Init+0x15c>)
 8004cc4:	fba1 1303 	umull	r1, r3, r1, r3
 8004cc8:	0c9b      	lsrs	r3, r3, #18
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	4b2a      	ldr	r3, [pc, #168]	; (8004d7c <I2C_LCD_Init+0x154>)
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d8f8      	bhi.n	8004cd0 <I2C_LCD_Init+0xa8>
 8004cde:	6a3b      	ldr	r3, [r7, #32]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	623b      	str	r3, [r7, #32]
 8004ce4:	6a3b      	ldr	r3, [r7, #32]
 8004ce6:	2b04      	cmp	r3, #4
 8004ce8:	d9dc      	bls.n	8004ca4 <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8004cea:	79fb      	ldrb	r3, [r7, #7]
 8004cec:	2130      	movs	r1, #48	; 0x30
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7ff ff76 	bl	8004be0 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 8004cf4:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <I2C_LCD_Init+0x154>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	4b21      	ldr	r3, [pc, #132]	; (8004d80 <I2C_LCD_Init+0x158>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a21      	ldr	r2, [pc, #132]	; (8004d84 <I2C_LCD_Init+0x15c>)
 8004d00:	fba2 2303 	umull	r2, r3, r2, r3
 8004d04:	0c9b      	lsrs	r3, r3, #18
 8004d06:	2296      	movs	r2, #150	; 0x96
 8004d08:	fb03 f202 	mul.w	r2, r3, r2
 8004d0c:	4b1c      	ldr	r3, [pc, #112]	; (8004d80 <I2C_LCD_Init+0x158>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	491c      	ldr	r1, [pc, #112]	; (8004d84 <I2C_LCD_Init+0x15c>)
 8004d12:	fba1 1303 	umull	r1, r3, r1, r3
 8004d16:	0c9b      	lsrs	r3, r3, #18
 8004d18:	085b      	lsrs	r3, r3, #1
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <I2C_LCD_Init+0x154>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d8f8      	bhi.n	8004d1e <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	2102      	movs	r1, #2
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7ff ff55 	bl	8004be0 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	2128      	movs	r1, #40	; 0x28
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff ff50 	bl	8004be0 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8004d40:	79fb      	ldrb	r3, [r7, #7]
 8004d42:	210c      	movs	r1, #12
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff ff4b 	bl	8004be0 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8004d4a:	79fb      	ldrb	r3, [r7, #7]
 8004d4c:	2106      	movs	r1, #6
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7ff ff46 	bl	8004be0 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8004d54:	79fb      	ldrb	r3, [r7, #7]
 8004d56:	4a0c      	ldr	r2, [pc, #48]	; (8004d88 <I2C_LCD_Init+0x160>)
 8004d58:	2104      	movs	r1, #4
 8004d5a:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	4a09      	ldr	r2, [pc, #36]	; (8004d88 <I2C_LCD_Init+0x160>)
 8004d62:	005b      	lsls	r3, r3, #1
 8004d64:	4413      	add	r3, r2
 8004d66:	2208      	movs	r2, #8
 8004d68:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f000 f80d 	bl	8004d8c <I2C_LCD_Clear>
}
 8004d72:	bf00      	nop
 8004d74:	3728      	adds	r7, #40	; 0x28
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	e000e010 	.word	0xe000e010
 8004d80:	20000000 	.word	0x20000000
 8004d84:	431bde83 	.word	0x431bde83
 8004d88:	2000021c 	.word	0x2000021c

08004d8c <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	4603      	mov	r3, r0
 8004d94:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 8004d96:	79fb      	ldrb	r3, [r7, #7]
 8004d98:	2101      	movs	r1, #1
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff ff20 	bl	8004be0 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8004da0:	2300      	movs	r3, #0
 8004da2:	617b      	str	r3, [r7, #20]
 8004da4:	e01f      	b.n	8004de6 <I2C_LCD_Clear+0x5a>
 8004da6:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <I2C_LCD_Clear+0x6c>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	4b13      	ldr	r3, [pc, #76]	; (8004dfc <I2C_LCD_Clear+0x70>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a13      	ldr	r2, [pc, #76]	; (8004e00 <I2C_LCD_Clear+0x74>)
 8004db2:	fba2 2303 	umull	r2, r3, r2, r3
 8004db6:	0c9b      	lsrs	r3, r3, #18
 8004db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dbc:	fb03 f202 	mul.w	r2, r3, r2
 8004dc0:	4b0e      	ldr	r3, [pc, #56]	; (8004dfc <I2C_LCD_Clear+0x70>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	490e      	ldr	r1, [pc, #56]	; (8004e00 <I2C_LCD_Clear+0x74>)
 8004dc6:	fba1 1303 	umull	r1, r3, r1, r3
 8004dca:	0c9b      	lsrs	r3, r3, #18
 8004dcc:	085b      	lsrs	r3, r3, #1
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	4b09      	ldr	r3, [pc, #36]	; (8004df8 <I2C_LCD_Clear+0x6c>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	693a      	ldr	r2, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d8f8      	bhi.n	8004dd2 <I2C_LCD_Clear+0x46>
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	3301      	adds	r3, #1
 8004de4:	617b      	str	r3, [r7, #20]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	d9dc      	bls.n	8004da6 <I2C_LCD_Clear+0x1a>
}
 8004dec:	bf00      	nop
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	e000e010 	.word	0xe000e010
 8004dfc:	20000000 	.word	0x20000000
 8004e00:	431bde83 	.word	0x431bde83

08004e04 <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 8004e04:	b590      	push	{r4, r7, lr}
 8004e06:	b087      	sub	sp, #28
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	71fb      	strb	r3, [r7, #7]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	71bb      	strb	r3, [r7, #6]
 8004e12:	4613      	mov	r3, r2
 8004e14:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 8004e16:	4b1a      	ldr	r3, [pc, #104]	; (8004e80 <I2C_LCD_SetCursor+0x7c>)
 8004e18:	f107 0408 	add.w	r4, r7, #8
 8004e1c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004e1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 8004e22:	79fa      	ldrb	r2, [r7, #7]
 8004e24:	4917      	ldr	r1, [pc, #92]	; (8004e84 <I2C_LCD_SetCursor+0x80>)
 8004e26:	4613      	mov	r3, r2
 8004e28:	005b      	lsls	r3, r3, #1
 8004e2a:	4413      	add	r3, r2
 8004e2c:	009b      	lsls	r3, r3, #2
 8004e2e:	440b      	add	r3, r1
 8004e30:	330a      	adds	r3, #10
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	797a      	ldrb	r2, [r7, #5]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d90a      	bls.n	8004e50 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8004e3a:	79fa      	ldrb	r2, [r7, #7]
 8004e3c:	4911      	ldr	r1, [pc, #68]	; (8004e84 <I2C_LCD_SetCursor+0x80>)
 8004e3e:	4613      	mov	r3, r2
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	4413      	add	r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	330a      	adds	r3, #10
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8004e50:	797b      	ldrb	r3, [r7, #5]
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	3318      	adds	r3, #24
 8004e56:	443b      	add	r3, r7
 8004e58:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8004e5c:	b2da      	uxtb	r2, r3
 8004e5e:	79bb      	ldrb	r3, [r7, #6]
 8004e60:	4413      	add	r3, r2
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	b25b      	sxtb	r3, r3
 8004e66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e6a:	b25b      	sxtb	r3, r3
 8004e6c:	b2da      	uxtb	r2, r3
 8004e6e:	79fb      	ldrb	r3, [r7, #7]
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff feb4 	bl	8004be0 <I2C_LCD_Cmd>
}
 8004e78:	bf00      	nop
 8004e7a:	371c      	adds	r7, #28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd90      	pop	{r4, r7, pc}
 8004e80:	08006784 	.word	0x08006784
 8004e84:	080067d8 	.word	0x080067d8

08004e88 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4603      	mov	r3, r0
 8004e90:	6039      	str	r1, [r7, #0]
 8004e92:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 8004e94:	e008      	b.n	8004ea8 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	603a      	str	r2, [r7, #0]
 8004e9c:	781a      	ldrb	r2, [r3, #0]
 8004e9e:	79fb      	ldrb	r3, [r7, #7]
 8004ea0:	4611      	mov	r1, r2
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff feae 	bl	8004c04 <I2C_LCD_Data>
    while (*Str)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d1f2      	bne.n	8004e96 <I2C_LCD_WriteString+0xe>
    }
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <InfraredPD_Initialize>:
 8004ebc:	2802      	cmp	r0, #2
 8004ebe:	d825      	bhi.n	8004f0c <InfraredPD_Initialize+0x50>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	d130      	bne.n	8004f26 <InfraredPD_Initialize+0x6a>
 8004ec4:	4a3e      	ldr	r2, [pc, #248]	; (8004fc0 <InfraredPD_Initialize+0x104>)
 8004ec6:	6813      	ldr	r3, [r2, #0]
 8004ec8:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8004ecc:	f023 0301 	bic.w	r3, r3, #1
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 8004ed6:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8004eda:	f24c 2240 	movw	r2, #49728	; 0xc240
 8004ede:	400b      	ands	r3, r1
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d02e      	beq.n	8004f42 <InfraredPD_Initialize+0x86>
 8004ee4:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 8004ee8:	f24c 2270 	movw	r2, #49776	; 0xc270
 8004eec:	400b      	ands	r3, r1
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d027      	beq.n	8004f42 <InfraredPD_Initialize+0x86>
 8004ef2:	4a34      	ldr	r2, [pc, #208]	; (8004fc4 <InfraredPD_Initialize+0x108>)
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	6093      	str	r3, [r2, #8]
 8004ef8:	6893      	ldr	r3, [r2, #8]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1fc      	bne.n	8004ef8 <InfraredPD_Initialize+0x3c>
 8004efe:	4b32      	ldr	r3, [pc, #200]	; (8004fc8 <InfraredPD_Initialize+0x10c>)
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	4b31      	ldr	r3, [pc, #196]	; (8004fcc <InfraredPD_Initialize+0x110>)
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d016      	beq.n	8004f38 <InfraredPD_Initialize+0x7c>
 8004f0a:	e7fe      	b.n	8004f0a <InfraredPD_Initialize+0x4e>
 8004f0c:	2803      	cmp	r0, #3
 8004f0e:	d1d9      	bne.n	8004ec4 <InfraredPD_Initialize+0x8>
 8004f10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f14:	4a2e      	ldr	r2, [pc, #184]	; (8004fd0 <InfraredPD_Initialize+0x114>)
 8004f16:	6859      	ldr	r1, [r3, #4]
 8004f18:	4291      	cmp	r1, r2
 8004f1a:	d00d      	beq.n	8004f38 <InfraredPD_Initialize+0x7c>
 8004f1c:	685a      	ldr	r2, [r3, #4]
 8004f1e:	4b2d      	ldr	r3, [pc, #180]	; (8004fd4 <InfraredPD_Initialize+0x118>)
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d009      	beq.n	8004f38 <InfraredPD_Initialize+0x7c>
 8004f24:	e7fe      	b.n	8004f24 <InfraredPD_Initialize+0x68>
 8004f26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004f2a:	4a2b      	ldr	r2, [pc, #172]	; (8004fd8 <InfraredPD_Initialize+0x11c>)
 8004f2c:	f8d3 37f8 	ldr.w	r3, [r3, #2040]	; 0x7f8
 8004f30:	0c1b      	lsrs	r3, r3, #16
 8004f32:	041b      	lsls	r3, r3, #16
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d103      	bne.n	8004f40 <InfraredPD_Initialize+0x84>
 8004f38:	4b28      	ldr	r3, [pc, #160]	; (8004fdc <InfraredPD_Initialize+0x120>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	4770      	bx	lr
 8004f40:	e7fe      	b.n	8004f40 <InfraredPD_Initialize+0x84>
 8004f42:	4b27      	ldr	r3, [pc, #156]	; (8004fe0 <InfraredPD_Initialize+0x124>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d1d3      	bne.n	8004ef2 <InfraredPD_Initialize+0x36>
 8004f4a:	4a26      	ldr	r2, [pc, #152]	; (8004fe4 <InfraredPD_Initialize+0x128>)
 8004f4c:	6813      	ldr	r3, [r2, #0]
 8004f4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f52:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004f56:	d021      	beq.n	8004f9c <InfraredPD_Initialize+0xe0>
 8004f58:	6813      	ldr	r3, [r2, #0]
 8004f5a:	f240 4183 	movw	r1, #1155	; 0x483
 8004f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f62:	428b      	cmp	r3, r1
 8004f64:	d01a      	beq.n	8004f9c <InfraredPD_Initialize+0xe0>
 8004f66:	6813      	ldr	r3, [r2, #0]
 8004f68:	f240 4285 	movw	r2, #1157	; 0x485
 8004f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d013      	beq.n	8004f9c <InfraredPD_Initialize+0xe0>
 8004f74:	4b1c      	ldr	r3, [pc, #112]	; (8004fe8 <InfraredPD_Initialize+0x12c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f7c:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004f80:	d1b7      	bne.n	8004ef2 <InfraredPD_Initialize+0x36>
 8004f82:	4a1a      	ldr	r2, [pc, #104]	; (8004fec <InfraredPD_Initialize+0x130>)
 8004f84:	2301      	movs	r3, #1
 8004f86:	6093      	str	r3, [r2, #8]
 8004f88:	6893      	ldr	r3, [r2, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1fc      	bne.n	8004f88 <InfraredPD_Initialize+0xcc>
 8004f8e:	4b0e      	ldr	r3, [pc, #56]	; (8004fc8 <InfraredPD_Initialize+0x10c>)
 8004f90:	6013      	str	r3, [r2, #0]
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	4b0d      	ldr	r3, [pc, #52]	; (8004fcc <InfraredPD_Initialize+0x110>)
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d0ce      	beq.n	8004f38 <InfraredPD_Initialize+0x7c>
 8004f9a:	e7b6      	b.n	8004f0a <InfraredPD_Initialize+0x4e>
 8004f9c:	4a14      	ldr	r2, [pc, #80]	; (8004ff0 <InfraredPD_Initialize+0x134>)
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004fa4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1fb      	bne.n	8004fa4 <InfraredPD_Initialize+0xe8>
 8004fac:	4b06      	ldr	r3, [pc, #24]	; (8004fc8 <InfraredPD_Initialize+0x10c>)
 8004fae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004fb2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004fb6:	4b05      	ldr	r3, [pc, #20]	; (8004fcc <InfraredPD_Initialize+0x110>)
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d0bd      	beq.n	8004f38 <InfraredPD_Initialize+0x7c>
 8004fbc:	e7a5      	b.n	8004f0a <InfraredPD_Initialize+0x4e>
 8004fbe:	bf00      	nop
 8004fc0:	e0002000 	.word	0xe0002000
 8004fc4:	40023000 	.word	0x40023000
 8004fc8:	f407a5c2 	.word	0xf407a5c2
 8004fcc:	b5e8b5cd 	.word	0xb5e8b5cd
 8004fd0:	0201e041 	.word	0x0201e041
 8004fd4:	02028041 	.word	0x02028041
 8004fd8:	aa550000 	.word	0xaa550000
 8004fdc:	20000078 	.word	0x20000078
 8004fe0:	e0042000 	.word	0xe0042000
 8004fe4:	5c001000 	.word	0x5c001000
 8004fe8:	50081000 	.word	0x50081000
 8004fec:	4c004000 	.word	0x4c004000
 8004ff0:	58024000 	.word	0x58024000

08004ff4 <InfraredPD_CreateInstance>:
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <InfraredPD_CreateInstance+0x2c>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	b183      	cbz	r3, 800501c <InfraredPD_CreateInstance+0x28>
 8004ffa:	b510      	push	{r4, lr}
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	20c0      	movs	r0, #192	; 0xc0
 8005000:	f000 fd4e 	bl	8005aa0 <malloc>
 8005004:	4603      	mov	r3, r0
 8005006:	b138      	cbz	r0, 8005018 <InfraredPD_CreateInstance+0x24>
 8005008:	4a06      	ldr	r2, [pc, #24]	; (8005024 <InfraredPD_CreateInstance+0x30>)
 800500a:	ca03      	ldmia	r2!, {r0, r1}
 800500c:	f04f 0c00 	mov.w	ip, #0
 8005010:	f883 c0a8 	strb.w	ip, [r3, #168]	; 0xa8
 8005014:	6020      	str	r0, [r4, #0]
 8005016:	6061      	str	r1, [r4, #4]
 8005018:	4618      	mov	r0, r3
 800501a:	bd10      	pop	{r4, pc}
 800501c:	4618      	mov	r0, r3
 800501e:	4770      	bx	lr
 8005020:	20000078 	.word	0x20000078
 8005024:	08006794 	.word	0x08006794

08005028 <InfraredPD_Start>:
 8005028:	4bbc      	ldr	r3, [pc, #752]	; (800531c <InfraredPD_Start+0x2f4>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b90b      	cbnz	r3, 8005032 <InfraredPD_Start+0xa>
 800502e:	4618      	mov	r0, r3
 8005030:	4770      	bx	lr
 8005032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005036:	ed2d 8b04 	vpush	{d8-d9}
 800503a:	4616      	mov	r6, r2
 800503c:	780a      	ldrb	r2, [r1, #0]
 800503e:	1e53      	subs	r3, r2, #1
 8005040:	2b01      	cmp	r3, #1
 8005042:	4604      	mov	r4, r0
 8005044:	460d      	mov	r5, r1
 8005046:	d917      	bls.n	8005078 <InfraredPD_Start+0x50>
 8005048:	2a0f      	cmp	r2, #15
 800504a:	d846      	bhi.n	80050da <InfraredPD_Start+0xb2>
 800504c:	f248 1310 	movw	r3, #33040	; 0x8110
 8005050:	40d3      	lsrs	r3, r2
 8005052:	07db      	lsls	r3, r3, #31
 8005054:	f140 81aa 	bpl.w	80053ac <InfraredPD_Start+0x384>
 8005058:	884b      	ldrh	r3, [r1, #2]
 800505a:	2b80      	cmp	r3, #128	; 0x80
 800505c:	f000 81ae 	beq.w	80053bc <InfraredPD_Start+0x394>
 8005060:	d90f      	bls.n	8005082 <InfraredPD_Start+0x5a>
 8005062:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005066:	f000 81ae 	beq.w	80053c6 <InfraredPD_Start+0x39e>
 800506a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506e:	f040 817b 	bne.w	8005368 <InfraredPD_Start+0x340>
 8005072:	4bab      	ldr	r3, [pc, #684]	; (8005320 <InfraredPD_Start+0x2f8>)
 8005074:	60a3      	str	r3, [r4, #8]
 8005076:	e020      	b.n	80050ba <InfraredPD_Start+0x92>
 8005078:	884b      	ldrh	r3, [r1, #2]
 800507a:	2b80      	cmp	r3, #128	; 0x80
 800507c:	f000 8187 	beq.w	800538e <InfraredPD_Start+0x366>
 8005080:	d810      	bhi.n	80050a4 <InfraredPD_Start+0x7c>
 8005082:	2b08      	cmp	r3, #8
 8005084:	f000 817d 	beq.w	8005382 <InfraredPD_Start+0x35a>
 8005088:	2b20      	cmp	r3, #32
 800508a:	d120      	bne.n	80050ce <InfraredPD_Start+0xa6>
 800508c:	4ba5      	ldr	r3, [pc, #660]	; (8005324 <InfraredPD_Start+0x2fc>)
 800508e:	60a3      	str	r3, [r4, #8]
 8005090:	792b      	ldrb	r3, [r5, #4]
 8005092:	3b01      	subs	r3, #1
 8005094:	2b07      	cmp	r3, #7
 8005096:	d838      	bhi.n	800510a <InfraredPD_Start+0xe2>
 8005098:	e8df f003 	tbb	[pc, r3]
 800509c:	ac37b13d 	.word	0xac37b13d
 80050a0:	a7373737 	.word	0xa7373737
 80050a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050a8:	f000 816e 	beq.w	8005388 <InfraredPD_Start+0x360>
 80050ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050b0:	d106      	bne.n	80050c0 <InfraredPD_Start+0x98>
 80050b2:	4b9b      	ldr	r3, [pc, #620]	; (8005320 <InfraredPD_Start+0x2f8>)
 80050b4:	6083      	str	r3, [r0, #8]
 80050b6:	2a02      	cmp	r2, #2
 80050b8:	d1ea      	bne.n	8005090 <InfraredPD_Start+0x68>
 80050ba:	2301      	movs	r3, #1
 80050bc:	702b      	strb	r3, [r5, #0]
 80050be:	e7e7      	b.n	8005090 <InfraredPD_Start+0x68>
 80050c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050c4:	f040 814a 	bne.w	800535c <InfraredPD_Start+0x334>
 80050c8:	4b97      	ldr	r3, [pc, #604]	; (8005328 <InfraredPD_Start+0x300>)
 80050ca:	6083      	str	r3, [r0, #8]
 80050cc:	e7e0      	b.n	8005090 <InfraredPD_Start+0x68>
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	f040 8144 	bne.w	800535c <InfraredPD_Start+0x334>
 80050d4:	4b95      	ldr	r3, [pc, #596]	; (800532c <InfraredPD_Start+0x304>)
 80050d6:	60a3      	str	r3, [r4, #8]
 80050d8:	e7da      	b.n	8005090 <InfraredPD_Start+0x68>
 80050da:	2a1e      	cmp	r2, #30
 80050dc:	f040 8166 	bne.w	80053ac <InfraredPD_Start+0x384>
 80050e0:	884b      	ldrh	r3, [r1, #2]
 80050e2:	2b80      	cmp	r3, #128	; 0x80
 80050e4:	f000 815d 	beq.w	80053a2 <InfraredPD_Start+0x37a>
 80050e8:	d9cb      	bls.n	8005082 <InfraredPD_Start+0x5a>
 80050ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050ee:	f000 8172 	beq.w	80053d6 <InfraredPD_Start+0x3ae>
 80050f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f6:	d0bc      	beq.n	8005072 <InfraredPD_Start+0x4a>
 80050f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050fc:	f040 812e 	bne.w	800535c <InfraredPD_Start+0x334>
 8005100:	4b89      	ldr	r3, [pc, #548]	; (8005328 <InfraredPD_Start+0x300>)
 8005102:	6083      	str	r3, [r0, #8]
 8005104:	2304      	movs	r3, #4
 8005106:	702b      	strb	r3, [r5, #0]
 8005108:	e7c2      	b.n	8005090 <InfraredPD_Start+0x68>
 800510a:	2303      	movs	r3, #3
 800510c:	ecbd 8b04 	vpop	{d8-d9}
 8005110:	4618      	mov	r0, r3
 8005112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005116:	4b86      	ldr	r3, [pc, #536]	; (8005330 <InfraredPD_Start+0x308>)
 8005118:	eddf 7a86 	vldr	s15, [pc, #536]	; 8005334 <InfraredPD_Start+0x30c>
 800511c:	60e3      	str	r3, [r4, #12]
 800511e:	796b      	ldrb	r3, [r5, #5]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d002      	beq.n	800512a <InfraredPD_Start+0x102>
 8005124:	2b08      	cmp	r3, #8
 8005126:	f040 812a 	bne.w	800537e <InfraredPD_Start+0x356>
 800512a:	ed95 7a02 	vldr	s14, [r5, #8]
 800512e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8005132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005136:	f100 8120 	bmi.w	800537a <InfraredPD_Start+0x352>
 800513a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800513e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005146:	f300 8118 	bgt.w	800537a <InfraredPD_Start+0x352>
 800514a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800514e:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8005338 <InfraredPD_Start+0x310>
 8005152:	2b00      	cmp	r3, #0
 8005154:	bfbc      	itt	lt
 8005156:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 800515a:	8073      	strhlt	r3, [r6, #2]
 800515c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	bfbc      	itt	lt
 8005164:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 8005168:	80b3      	strhlt	r3, [r6, #4]
 800516a:	88eb      	ldrh	r3, [r5, #6]
 800516c:	ee08 3a10 	vmov	s16, r3
 8005170:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005174:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8005178:	edd4 6a02 	vldr	s13, [r4, #8]
 800517c:	ee28 8a07 	vmul.f32	s16, s16, s14
 8005180:	ee68 7a27 	vmul.f32	s15, s16, s15
 8005184:	ed84 8a05 	vstr	s16, [r4, #20]
 8005188:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800518c:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8005190:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8005194:	ee87 0a26 	vdiv.f32	s0, s14, s13
 8005198:	ed84 7a04 	vstr	s14, [r4, #16]
 800519c:	ee20 0a00 	vmul.f32	s0, s0, s0
 80051a0:	ed84 0a06 	vstr	s0, [r4, #24]
 80051a4:	f001 f974 	bl	8006490 <ceilf>
 80051a8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80051ac:	2301      	movs	r3, #1
 80051ae:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80051b2:	ee10 3a10 	vmov	r3, s0
 80051b6:	b298      	uxth	r0, r3
 80051b8:	2300      	movs	r3, #0
 80051ba:	83a0      	strh	r0, [r4, #28]
 80051bc:	6223      	str	r3, [r4, #32]
 80051be:	7833      	ldrb	r3, [r6, #0]
 80051c0:	b313      	cbz	r3, 8005208 <InfraredPD_Start+0x1e0>
 80051c2:	2b02      	cmp	r3, #2
 80051c4:	f000 80e6 	beq.w	8005394 <InfraredPD_Start+0x36c>
 80051c8:	7873      	ldrb	r3, [r6, #1]
 80051ca:	b1eb      	cbz	r3, 8005208 <InfraredPD_Start+0x1e0>
 80051cc:	2300      	movs	r3, #0
 80051ce:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80051d2:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	f000 8100 	beq.w	80053dc <InfraredPD_Start+0x3b4>
 80051dc:	0080      	lsls	r0, r0, #2
 80051de:	f000 fc5f 	bl	8005aa0 <malloc>
 80051e2:	6460      	str	r0, [r4, #68]	; 0x44
 80051e4:	b980      	cbnz	r0, 8005208 <InfraredPD_Start+0x1e0>
 80051e6:	2306      	movs	r3, #6
 80051e8:	e790      	b.n	800510c <InfraredPD_Start+0xe4>
 80051ea:	4b54      	ldr	r3, [pc, #336]	; (800533c <InfraredPD_Start+0x314>)
 80051ec:	eddf 7a54 	vldr	s15, [pc, #336]	; 8005340 <InfraredPD_Start+0x318>
 80051f0:	60e3      	str	r3, [r4, #12]
 80051f2:	e794      	b.n	800511e <InfraredPD_Start+0xf6>
 80051f4:	4b53      	ldr	r3, [pc, #332]	; (8005344 <InfraredPD_Start+0x31c>)
 80051f6:	eddf 7a54 	vldr	s15, [pc, #336]	; 8005348 <InfraredPD_Start+0x320>
 80051fa:	60e3      	str	r3, [r4, #12]
 80051fc:	e78f      	b.n	800511e <InfraredPD_Start+0xf6>
 80051fe:	4b53      	ldr	r3, [pc, #332]	; (800534c <InfraredPD_Start+0x324>)
 8005200:	eddf 7a53 	vldr	s15, [pc, #332]	; 8005350 <InfraredPD_Start+0x328>
 8005204:	60e3      	str	r3, [r4, #12]
 8005206:	e78a      	b.n	800511e <InfraredPD_Start+0xf6>
 8005208:	2300      	movs	r3, #0
 800520a:	7828      	ldrb	r0, [r5, #0]
 800520c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8005210:	2301      	movs	r3, #1
 8005212:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8005216:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800521a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800521e:	0040      	lsls	r0, r0, #1
 8005220:	2b01      	cmp	r3, #1
 8005222:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
 8005226:	f000 80c3 	beq.w	80053b0 <InfraredPD_Start+0x388>
 800522a:	0080      	lsls	r0, r0, #2
 800522c:	f000 fc38 	bl	8005aa0 <malloc>
 8005230:	6520      	str	r0, [r4, #80]	; 0x50
 8005232:	2800      	cmp	r0, #0
 8005234:	f000 80d7 	beq.w	80053e6 <InfraredPD_Start+0x3be>
 8005238:	f04f 0800 	mov.w	r8, #0
 800523c:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 8005240:	2300      	movs	r3, #0
 8005242:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005244:	88b3      	ldrh	r3, [r6, #4]
 8005246:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8005354 <InfraredPD_Start+0x32c>
 800524a:	ee07 3a90 	vmov	s15, r3
 800524e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005252:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8005256:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 800525a:	ee67 6aa8 	vmul.f32	s13, s15, s17
 800525e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005262:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
 8005266:	edc4 6a1a 	vstr	s13, [r4, #104]	; 0x68
 800526a:	ed84 7a1b 	vstr	s14, [r4, #108]	; 0x6c
 800526e:	782f      	ldrb	r7, [r5, #0]
 8005270:	ee07 7a90 	vmov	s15, r7
 8005274:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005278:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800527c:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005280:	ee27 0ac0 	vnmul.f32	s0, s15, s0
 8005284:	eeb1 9a67 	vneg.f32	s18, s15
 8005288:	f001 f8be 	bl	8006408 <expf>
 800528c:	eddf 7a32 	vldr	s15, [pc, #200]	; 8005358 <InfraredPD_Start+0x330>
 8005290:	ee38 0a40 	vsub.f32	s0, s16, s0
 8005294:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 8005298:	ee29 0a27 	vmul.f32	s0, s18, s15
 800529c:	f001 f8b4 	bl	8006408 <expf>
 80052a0:	8873      	ldrh	r3, [r6, #2]
 80052a2:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
 80052a6:	ee07 3a90 	vmov	s15, r3
 80052aa:	2201      	movs	r2, #1
 80052ac:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
 80052b0:	ebc7 1107 	rsb	r1, r7, r7, lsl #4
 80052b4:	b2ba      	uxth	r2, r7
 80052b6:	e9c4 8828 	strd	r8, r8, [r4, #160]	; 0xa0
 80052ba:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
 80052be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80052c2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80052c6:	0049      	lsls	r1, r1, #1
 80052c8:	f8a4 1098 	strh.w	r1, [r4, #152]	; 0x98
 80052cc:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 80052d0:	ee67 8aa8 	vmul.f32	s17, s15, s17
 80052d4:	00c9      	lsls	r1, r1, #3
 80052d6:	0092      	lsls	r2, r2, #2
 80052d8:	f8a4 109c 	strh.w	r1, [r4, #156]	; 0x9c
 80052dc:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 80052e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80052e4:	edc4 8a22 	vstr	s17, [r4, #136]	; 0x88
 80052e8:	ee38 0a40 	vsub.f32	s0, s16, s0
 80052ec:	ecbd 8b04 	vpop	{d8-d9}
 80052f0:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80052f4:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 80052f8:	f104 07ac 	add.w	r7, r4, #172	; 0xac
 80052fc:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
 8005300:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
 8005304:	f8a4 808e 	strh.w	r8, [r4, #142]	; 0x8e
 8005308:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 800530c:	6830      	ldr	r0, [r6, #0]
 800530e:	6871      	ldr	r1, [r6, #4]
 8005310:	4643      	mov	r3, r8
 8005312:	34b8      	adds	r4, #184	; 0xb8
 8005314:	c403      	stmia	r4!, {r0, r1}
 8005316:	4618      	mov	r0, r3
 8005318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800531c:	20000078 	.word	0x20000078
 8005320:	41680000 	.word	0x41680000
 8005324:	42006666 	.word	0x42006666
 8005328:	419b3333 	.word	0x419b3333
 800532c:	42c6999a 	.word	0x42c6999a
 8005330:	43168000 	.word	0x43168000
 8005334:	3e1a1cad 	.word	0x3e1a1cad
 8005338:	3f933333 	.word	0x3f933333
 800533c:	4254cccd 	.word	0x4254cccd
 8005340:	3d59e83f 	.word	0x3d59e83f
 8005344:	42966666 	.word	0x42966666
 8005348:	3d9a0275 	.word	0x3d9a0275
 800534c:	42d4cccd 	.word	0x42d4cccd
 8005350:	3dd9e83f 	.word	0x3dd9e83f
 8005354:	4048e093 	.word	0x4048e093
 8005358:	3ea0da75 	.word	0x3ea0da75
 800535c:	ecbd 8b04 	vpop	{d8-d9}
 8005360:	2302      	movs	r3, #2
 8005362:	4618      	mov	r0, r3
 8005364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800536c:	d1f6      	bne.n	800535c <InfraredPD_Start+0x334>
 800536e:	4b22      	ldr	r3, [pc, #136]	; (80053f8 <InfraredPD_Start+0x3d0>)
 8005370:	60a3      	str	r3, [r4, #8]
 8005372:	2a04      	cmp	r2, #4
 8005374:	f63f aec6 	bhi.w	8005104 <InfraredPD_Start+0xdc>
 8005378:	e68a      	b.n	8005090 <InfraredPD_Start+0x68>
 800537a:	2305      	movs	r3, #5
 800537c:	e6c6      	b.n	800510c <InfraredPD_Start+0xe4>
 800537e:	2304      	movs	r3, #4
 8005380:	e6c4      	b.n	800510c <InfraredPD_Start+0xe4>
 8005382:	4b1e      	ldr	r3, [pc, #120]	; (80053fc <InfraredPD_Start+0x3d4>)
 8005384:	60a3      	str	r3, [r4, #8]
 8005386:	e683      	b.n	8005090 <InfraredPD_Start+0x68>
 8005388:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <InfraredPD_Start+0x3d8>)
 800538a:	6083      	str	r3, [r0, #8]
 800538c:	e680      	b.n	8005090 <InfraredPD_Start+0x68>
 800538e:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <InfraredPD_Start+0x3dc>)
 8005390:	6083      	str	r3, [r0, #8]
 8005392:	e67d      	b.n	8005090 <InfraredPD_Start+0x68>
 8005394:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8005408 <InfraredPD_Start+0x3e0>
 8005398:	ee28 7a07 	vmul.f32	s14, s16, s14
 800539c:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
 80053a0:	e712      	b.n	80051c8 <InfraredPD_Start+0x1a0>
 80053a2:	4b18      	ldr	r3, [pc, #96]	; (8005404 <InfraredPD_Start+0x3dc>)
 80053a4:	60a3      	str	r3, [r4, #8]
 80053a6:	2308      	movs	r3, #8
 80053a8:	702b      	strb	r3, [r5, #0]
 80053aa:	e671      	b.n	8005090 <InfraredPD_Start+0x68>
 80053ac:	2301      	movs	r3, #1
 80053ae:	e6ad      	b.n	800510c <InfraredPD_Start+0xe4>
 80053b0:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80053b2:	f000 fb7d 	bl	8005ab0 <free>
 80053b6:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 80053ba:	e736      	b.n	800522a <InfraredPD_Start+0x202>
 80053bc:	4b11      	ldr	r3, [pc, #68]	; (8005404 <InfraredPD_Start+0x3dc>)
 80053be:	60a3      	str	r3, [r4, #8]
 80053c0:	2a08      	cmp	r2, #8
 80053c2:	d8f0      	bhi.n	80053a6 <InfraredPD_Start+0x37e>
 80053c4:	e664      	b.n	8005090 <InfraredPD_Start+0x68>
 80053c6:	4b0e      	ldr	r3, [pc, #56]	; (8005400 <InfraredPD_Start+0x3d8>)
 80053c8:	60a3      	str	r3, [r4, #8]
 80053ca:	2a02      	cmp	r2, #2
 80053cc:	f67f ae60 	bls.w	8005090 <InfraredPD_Start+0x68>
 80053d0:	2302      	movs	r3, #2
 80053d2:	702b      	strb	r3, [r5, #0]
 80053d4:	e65c      	b.n	8005090 <InfraredPD_Start+0x68>
 80053d6:	4b0a      	ldr	r3, [pc, #40]	; (8005400 <InfraredPD_Start+0x3d8>)
 80053d8:	6083      	str	r3, [r0, #8]
 80053da:	e7f9      	b.n	80053d0 <InfraredPD_Start+0x3a8>
 80053dc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80053de:	f000 fb67 	bl	8005ab0 <free>
 80053e2:	8ba0      	ldrh	r0, [r4, #28]
 80053e4:	e6fa      	b.n	80051dc <InfraredPD_Start+0x1b4>
 80053e6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80053e8:	b118      	cbz	r0, 80053f2 <InfraredPD_Start+0x3ca>
 80053ea:	f000 fb61 	bl	8005ab0 <free>
 80053ee:	2307      	movs	r3, #7
 80053f0:	e68c      	b.n	800510c <InfraredPD_Start+0xe4>
 80053f2:	2307      	movs	r3, #7
 80053f4:	e68a      	b.n	800510c <InfraredPD_Start+0xe4>
 80053f6:	bf00      	nop
 80053f8:	419b3333 	.word	0x419b3333
 80053fc:	42560000 	.word	0x42560000
 8005400:	41873333 	.word	0x41873333
 8005404:	41b00000 	.word	0x41b00000
 8005408:	3223b1a8 	.word	0x3223b1a8
 800540c:	00000000 	.word	0x00000000

08005410 <InfraredPD_Update>:
 8005410:	4bba      	ldr	r3, [pc, #744]	; (80056fc <InfraredPD_Update+0x2ec>)
 8005412:	781b      	ldrb	r3, [r3, #0]
 8005414:	b903      	cbnz	r3, 8005418 <InfraredPD_Update+0x8>
 8005416:	4770      	bx	lr
 8005418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800541c:	ed2d 8b02 	vpush	{d8}
 8005420:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8005424:	f890 60b1 	ldrb.w	r6, [r0, #177]	; 0xb1
 8005428:	4615      	mov	r5, r2
 800542a:	f9b1 2000 	ldrsh.w	r2, [r1]
 800542e:	fb16 f303 	smulbb	r3, r6, r3
 8005432:	ee07 2a10 	vmov	s14, r2
 8005436:	ee07 3a90 	vmov	s15, r3
 800543a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800543e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005442:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 8005446:	ed80 7a00 	vstr	s14, [r0]
 800544a:	b083      	sub	sp, #12
 800544c:	4604      	mov	r4, r0
 800544e:	edc0 7a01 	vstr	s15, [r0, #4]
 8005452:	2a00      	cmp	r2, #0
 8005454:	d067      	beq.n	8005526 <InfraredPD_Update+0x116>
 8005456:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 800545a:	2b00      	cmp	r3, #0
 800545c:	d168      	bne.n	8005530 <InfraredPD_Update+0x120>
 800545e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8005462:	2b00      	cmp	r3, #0
 8005464:	f040 8303 	bne.w	8005a6e <InfraredPD_Update+0x65e>
 8005468:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 800546c:	6a07      	ldr	r7, [r0, #32]
 800546e:	3301      	adds	r3, #1
 8005470:	b29b      	uxth	r3, r3
 8005472:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8005476:	3a01      	subs	r2, #1
 8005478:	0090      	lsls	r0, r2, #2
 800547a:	2f01      	cmp	r7, #1
 800547c:	d068      	beq.n	8005550 <InfraredPD_Update+0x140>
 800547e:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8005700 <InfraredPD_Update+0x2f0>
 8005482:	eeb0 6ae7 	vabs.f32	s12, s15
 8005486:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800548a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800548e:	d57b      	bpl.n	8005588 <InfraredPD_Update+0x178>
 8005490:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8005494:	2a00      	cmp	r2, #0
 8005496:	f000 81a8 	beq.w	80057ea <InfraredPD_Update+0x3da>
 800549a:	2a01      	cmp	r2, #1
 800549c:	f000 8265 	beq.w	800596a <InfraredPD_Update+0x55a>
 80054a0:	2a02      	cmp	r2, #2
 80054a2:	f000 8246 	beq.w	8005932 <InfraredPD_Update+0x522>
 80054a6:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80054aa:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 80054ae:	2a00      	cmp	r2, #0
 80054b0:	f000 80a6 	beq.w	8005600 <InfraredPD_Update+0x1f0>
 80054b4:	e070      	b.n	8005598 <InfraredPD_Update+0x188>
 80054b6:	2f01      	cmp	r7, #1
 80054b8:	f000 82c2 	beq.w	8005a40 <InfraredPD_Update+0x630>
 80054bc:	2300      	movs	r3, #0
 80054be:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80054c2:	2f00      	cmp	r7, #0
 80054c4:	f040 82d0 	bne.w	8005a68 <InfraredPD_Update+0x658>
 80054c8:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 80054cc:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
 80054d0:	3301      	adds	r3, #1
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	429a      	cmp	r2, r3
 80054d6:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80054da:	d10b      	bne.n	80054f4 <InfraredPD_Update+0xe4>
 80054dc:	2300      	movs	r3, #0
 80054de:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80054e2:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80054e6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 80054ea:	b91b      	cbnz	r3, 80054f4 <InfraredPD_Update+0xe4>
 80054ec:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80054f0:	2300      	movs	r3, #0
 80054f2:	65e3      	str	r3, [r4, #92]	; 0x5c
 80054f4:	ee07 6a90 	vmov	s15, r6
 80054f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fc:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8005500:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8005504:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800550c:	ee17 3a10 	vmov	r3, s14
 8005510:	802b      	strh	r3, [r5, #0]
 8005512:	ee17 3a90 	vmov	r3, s15
 8005516:	806b      	strh	r3, [r5, #2]
 8005518:	2300      	movs	r3, #0
 800551a:	716b      	strb	r3, [r5, #5]
 800551c:	712f      	strb	r7, [r5, #4]
 800551e:	2f01      	cmp	r7, #1
 8005520:	d101      	bne.n	8005526 <InfraredPD_Update+0x116>
 8005522:	2301      	movs	r3, #1
 8005524:	716b      	strb	r3, [r5, #5]
 8005526:	b003      	add	sp, #12
 8005528:	ecbd 8b02 	vpop	{d8}
 800552c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005530:	2200      	movs	r2, #0
 8005532:	2301      	movs	r3, #1
 8005534:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8005538:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 800553c:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 8005540:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 8005544:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
 8005548:	f880 20a7 	strb.w	r2, [r0, #167]	; 0xa7
 800554c:	6203      	str	r3, [r0, #32]
 800554e:	4610      	mov	r0, r2
 8005550:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8005554:	b182      	cbz	r2, 8005578 <InfraredPD_Update+0x168>
 8005556:	2a01      	cmp	r2, #1
 8005558:	f000 81e8 	beq.w	800592c <InfraredPD_Update+0x51c>
 800555c:	2a02      	cmp	r2, #2
 800555e:	d10b      	bne.n	8005578 <InfraredPD_Update+0x168>
 8005560:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8005704 <InfraredPD_Update+0x2f4>
 8005564:	eddf 6a68 	vldr	s13, [pc, #416]	; 8005708 <InfraredPD_Update+0x2f8>
 8005568:	eee7 6a06 	vfma.f32	s13, s14, s12
 800556c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8005570:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8005574:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
 8005578:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 800557c:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
 8005580:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 8005584:	2701      	movs	r7, #1
 8005586:	e77a      	b.n	800547e <InfraredPD_Update+0x6e>
 8005588:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 800558c:	b3b2      	cbz	r2, 80055fc <InfraredPD_Update+0x1ec>
 800558e:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8005592:	b39a      	cbz	r2, 80055fc <InfraredPD_Update+0x1ec>
 8005594:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8005598:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800559c:	8ba1      	ldrh	r1, [r4, #28]
 800559e:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 80055a2:	3201      	adds	r2, #1
 80055a4:	b2d2      	uxtb	r2, r2
 80055a6:	428a      	cmp	r2, r1
 80055a8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 80055ac:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 80055b0:	bf08      	it	eq
 80055b2:	2200      	moveq	r2, #0
 80055b4:	ed4e 7a01 	vstr	s15, [lr, #-4]
 80055b8:	bf08      	it	eq
 80055ba:	f884 2040 	strbeq.w	r2, [r4, #64]	; 0x40
 80055be:	2901      	cmp	r1, #1
 80055c0:	f240 81ce 	bls.w	8005960 <InfraredPD_Update+0x550>
 80055c4:	42b9      	cmp	r1, r7
 80055c6:	f240 81df 	bls.w	8005988 <InfraredPD_Update+0x578>
 80055ca:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800570c <InfraredPD_Update+0x2fc>
 80055ce:	b167      	cbz	r7, 80055ea <InfraredPD_Update+0x1da>
 80055d0:	2200      	movs	r2, #0
 80055d2:	4611      	mov	r1, r2
 80055d4:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 80055d8:	3201      	adds	r2, #1
 80055da:	edd1 7a00 	vldr	s15, [r1]
 80055de:	b292      	uxth	r2, r2
 80055e0:	42ba      	cmp	r2, r7
 80055e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80055e6:	4611      	mov	r1, r2
 80055e8:	d3f4      	bcc.n	80055d4 <InfraredPD_Update+0x1c4>
 80055ea:	ee07 7a90 	vmov	s15, r7
 80055ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80055f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80055f6:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 80055fa:	e003      	b.n	8005604 <InfraredPD_Update+0x1f4>
 80055fc:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8005600:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8005604:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005606:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 800560a:	180a      	adds	r2, r1, r0
 800560c:	edc2 7a00 	vstr	s15, [r2]
 8005610:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8005614:	f894 c04c 	ldrb.w	ip, [r4, #76]	; 0x4c
 8005618:	429a      	cmp	r2, r3
 800561a:	d07b      	beq.n	8005714 <InfraredPD_Update+0x304>
 800561c:	ed94 6a1c 	vldr	s12, [r4, #112]	; 0x70
 8005620:	edd4 6a1d 	vldr	s13, [r4, #116]	; 0x74
 8005624:	ed94 5a1e 	vldr	s10, [r4, #120]	; 0x78
 8005628:	edd4 5a1f 	vldr	s11, [r4, #124]	; 0x7c
 800562c:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 8005630:	f894 7090 	ldrb.w	r7, [r4, #144]	; 0x90
 8005634:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005638:	ee37 8a46 	vsub.f32	s16, s14, s12
 800563c:	ee77 7a66 	vsub.f32	s15, s14, s13
 8005640:	ee28 8a05 	vmul.f32	s16, s16, s10
 8005644:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005648:	eea6 8a28 	vfma.f32	s16, s12, s17
 800564c:	eee8 7aa6 	vfma.f32	s15, s17, s13
 8005650:	ed84 8a1e 	vstr	s16, [r4, #120]	; 0x78
 8005654:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005658:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 800565c:	ed84 8a20 	vstr	s16, [r4, #128]	; 0x80
 8005660:	2f00      	cmp	r7, #0
 8005662:	f000 80b4 	beq.w	80057ce <InfraredPD_Update+0x3be>
 8005666:	2f01      	cmp	r7, #1
 8005668:	d114      	bne.n	8005694 <InfraredPD_Update+0x284>
 800566a:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
 800566e:	eef0 6ac8 	vabs.f32	s13, s16
 8005672:	eef4 6ac7 	vcmpe.f32	s13, s14
 8005676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800567a:	f140 80c0 	bpl.w	80057fe <InfraredPD_Update+0x3ee>
 800567e:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 8005682:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
 8005686:	3301      	adds	r3, #1
 8005688:	b29b      	uxth	r3, r3
 800568a:	429a      	cmp	r2, r3
 800568c:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 8005690:	f240 8146 	bls.w	8005920 <InfraredPD_Update+0x510>
 8005694:	f894 80a6 	ldrb.w	r8, [r4, #166]	; 0xa6
 8005698:	f1bc 0f00 	cmp.w	ip, #0
 800569c:	d108      	bne.n	80056b0 <InfraredPD_Update+0x2a0>
 800569e:	f1b8 0f03 	cmp.w	r8, #3
 80056a2:	d809      	bhi.n	80056b8 <InfraredPD_Update+0x2a8>
 80056a4:	e8df f018 	tbh	[pc, r8, lsl #1]
 80056a8:	010d011c 	.word	0x010d011c
 80056ac:	00af00fd 	.word	0x00af00fd
 80056b0:	f1b8 0f00 	cmp.w	r8, #0
 80056b4:	f43f af17 	beq.w	80054e6 <InfraredPD_Update+0xd6>
 80056b8:	ee07 6a90 	vmov	s15, r6
 80056bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056c0:	f1b8 0f02 	cmp.w	r8, #2
 80056c4:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 80056c8:	eec8 7a26 	vdiv.f32	s15, s16, s13
 80056cc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80056d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80056d4:	ee17 3a10 	vmov	r3, s14
 80056d8:	802b      	strh	r3, [r5, #0]
 80056da:	ee17 3a90 	vmov	r3, s15
 80056de:	806b      	strh	r3, [r5, #2]
 80056e0:	f43f af1a 	beq.w	8005518 <InfraredPD_Update+0x108>
 80056e4:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
 80056e8:	f1b8 0f01 	cmp.w	r8, #1
 80056ec:	f000 8080 	beq.w	80057f0 <InfraredPD_Update+0x3e0>
 80056f0:	796b      	ldrb	r3, [r5, #5]
 80056f2:	712f      	strb	r7, [r5, #4]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	f47f af12 	bne.w	800551e <InfraredPD_Update+0x10e>
 80056fa:	e712      	b.n	8005522 <InfraredPD_Update+0x112>
 80056fc:	20000078 	.word	0x20000078
 8005700:	46f05e00 	.word	0x46f05e00
 8005704:	3c23d70a 	.word	0x3c23d70a
 8005708:	43889333 	.word	0x43889333
 800570c:	00000000 	.word	0x00000000
 8005710:	7fc00000 	.word	0x7fc00000
 8005714:	2200      	movs	r2, #0
 8005716:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
 800571a:	f1bc 0f00 	cmp.w	ip, #0
 800571e:	d169      	bne.n	80057f4 <InfraredPD_Update+0x3e4>
 8005720:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005722:	65a2      	str	r2, [r4, #88]	; 0x58
 8005724:	b1d3      	cbz	r3, 800575c <InfraredPD_Update+0x34c>
 8005726:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 800570c <InfraredPD_Update+0x2fc>
 800572a:	2200      	movs	r2, #0
 800572c:	3201      	adds	r2, #1
 800572e:	ecb1 7a01 	vldmia	r1!, {s14}
 8005732:	b290      	uxth	r0, r2
 8005734:	4283      	cmp	r3, r0
 8005736:	ee77 7a87 	vadd.f32	s15, s15, s14
 800573a:	d8f7      	bhi.n	800572c <InfraredPD_Update+0x31c>
 800573c:	ee07 3a10 	vmov	s14, r3
 8005740:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8005744:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005748:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 800574c:	f1bc 0f00 	cmp.w	ip, #0
 8005750:	d00a      	beq.n	8005768 <InfraredPD_Update+0x358>
 8005752:	f04f 0c00 	mov.w	ip, #0
 8005756:	f884 c04c 	strb.w	ip, [r4, #76]	; 0x4c
 800575a:	e75f      	b.n	800561c <InfraredPD_Update+0x20c>
 800575c:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 8005710 <InfraredPD_Update+0x300>
 8005760:	eeb0 7a67 	vmov.f32	s14, s15
 8005764:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
 8005768:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800576c:	2b00      	cmp	r3, #0
 800576e:	f040 80c8 	bne.w	8005902 <InfraredPD_Update+0x4f2>
 8005772:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8005776:	b17a      	cbz	r2, 8005798 <InfraredPD_Update+0x388>
 8005778:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 800577c:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 8005780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005784:	eef1 6a66 	vneg.f32	s13, s13
 8005788:	eef4 7ae6 	vcmpe.f32	s15, s13
 800578c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005790:	f340 8115 	ble.w	80059be <InfraredPD_Update+0x5ae>
 8005794:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8005798:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 800579c:	2b00      	cmp	r3, #0
 800579e:	f47f af3d 	bne.w	800561c <InfraredPD_Update+0x20c>
 80057a2:	edd4 6a16 	vldr	s13, [r4, #88]	; 0x58
 80057a6:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 80057aa:	ee37 7a66 	vsub.f32	s14, s14, s13
 80057ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80057b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057b6:	f340 8127 	ble.w	8005a08 <InfraredPD_Update+0x5f8>
 80057ba:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 80057be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057c2:	2301      	movs	r3, #1
 80057c4:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80057c8:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 80057cc:	e726      	b.n	800561c <InfraredPD_Update+0x20c>
 80057ce:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 80057d2:	eef0 6ac8 	vabs.f32	s13, s16
 80057d6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80057da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057de:	f77f af59 	ble.w	8005694 <InfraredPD_Update+0x284>
 80057e2:	2701      	movs	r7, #1
 80057e4:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 80057e8:	e754      	b.n	8005694 <InfraredPD_Update+0x284>
 80057ea:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 80057ee:	e707      	b.n	8005600 <InfraredPD_Update+0x1f0>
 80057f0:	712f      	strb	r7, [r5, #4]
 80057f2:	e696      	b.n	8005522 <InfraredPD_Update+0x112>
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d196      	bne.n	8005726 <InfraredPD_Update+0x316>
 80057f8:	4ba5      	ldr	r3, [pc, #660]	; (8005a90 <InfraredPD_Update+0x680>)
 80057fa:	6563      	str	r3, [r4, #84]	; 0x54
 80057fc:	e7a9      	b.n	8005752 <InfraredPD_Update+0x342>
 80057fe:	2300      	movs	r3, #0
 8005800:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 8005804:	e746      	b.n	8005694 <InfraredPD_Update+0x284>
 8005806:	f8b4 90a4 	ldrh.w	r9, [r4, #164]	; 0xa4
 800580a:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
 800580e:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8005812:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8005816:	f109 0901 	add.w	r9, r9, #1
 800581a:	fa1f f989 	uxth.w	r9, r9
 800581e:	ee17 0a90 	vmov	r0, s15
 8005822:	f8a4 90a4 	strh.w	r9, [r4, #164]	; 0xa4
 8005826:	ed8d 7a01 	vstr	s14, [sp, #4]
 800582a:	f7fa ffbf 	bl	80007ac <__aeabi_f2d>
 800582e:	4682      	mov	sl, r0
 8005830:	9801      	ldr	r0, [sp, #4]
 8005832:	468b      	mov	fp, r1
 8005834:	f7fa ffba 	bl	80007ac <__aeabi_f2d>
 8005838:	a393      	add	r3, pc, #588	; (adr r3, 8005a88 <InfraredPD_Update+0x678>)
 800583a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800583e:	f7fa fd27 	bl	8000290 <__aeabi_dmul>
 8005842:	4602      	mov	r2, r0
 8005844:	460b      	mov	r3, r1
 8005846:	4650      	mov	r0, sl
 8005848:	4659      	mov	r1, fp
 800584a:	f7fb f867 	bl	800091c <__aeabi_dcmplt>
 800584e:	2800      	cmp	r0, #0
 8005850:	f47f ae44 	bne.w	80054dc <InfraredPD_Update+0xcc>
 8005854:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 8005858:	454b      	cmp	r3, r9
 800585a:	f43f ae3f 	beq.w	80054dc <InfraredPD_Update+0xcc>
 800585e:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8005862:	ed9d 7a01 	vldr	s14, [sp, #4]
 8005866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800586a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586e:	d505      	bpl.n	800587c <InfraredPD_Update+0x46c>
 8005870:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
 8005874:	f04f 0801 	mov.w	r8, #1
 8005878:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 800587c:	ee07 6a90 	vmov	s15, r6
 8005880:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005884:	eec8 6aa7 	vdiv.f32	s13, s17, s15
 8005888:	ee88 7a27 	vdiv.f32	s14, s16, s15
 800588c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8005890:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005894:	ee16 3a90 	vmov	r3, s13
 8005898:	802b      	strh	r3, [r5, #0]
 800589a:	ee17 3a10 	vmov	r3, s14
 800589e:	806b      	strh	r3, [r5, #2]
 80058a0:	e720      	b.n	80056e4 <InfraredPD_Update+0x2d4>
 80058a2:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 80058a6:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 80058aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058b2:	f57f ae00 	bpl.w	80054b6 <InfraredPD_Update+0xa6>
 80058b6:	2300      	movs	r3, #0
 80058b8:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80058bc:	f8c4 30a2 	str.w	r3, [r4, #162]	; 0xa2
 80058c0:	e611      	b.n	80054e6 <InfraredPD_Update+0xd6>
 80058c2:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 80058c6:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 80058ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058d2:	d57b      	bpl.n	80059cc <InfraredPD_Update+0x5bc>
 80058d4:	2300      	movs	r3, #0
 80058d6:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80058da:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 80058de:	e602      	b.n	80054e6 <InfraredPD_Update+0xd6>
 80058e0:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 80058e4:	ee78 6ae7 	vsub.f32	s13, s17, s15
 80058e8:	eef4 6ac7 	vcmpe.f32	s13, s14
 80058ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f0:	f340 8081 	ble.w	80059f6 <InfraredPD_Update+0x5e6>
 80058f4:	f04f 0803 	mov.w	r8, #3
 80058f8:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 80058fc:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
 8005900:	e7bc      	b.n	800587c <InfraredPD_Update+0x46c>
 8005902:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8005906:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 800590a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800590e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005916:	d552      	bpl.n	80059be <InfraredPD_Update+0x5ae>
 8005918:	2300      	movs	r3, #0
 800591a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 800591e:	e73b      	b.n	8005798 <InfraredPD_Update+0x388>
 8005920:	2700      	movs	r7, #0
 8005922:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 8005926:	f8a4 708e 	strh.w	r7, [r4, #142]	; 0x8e
 800592a:	e6b3      	b.n	8005694 <InfraredPD_Update+0x284>
 800592c:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 8005930:	e622      	b.n	8005578 <InfraredPD_Update+0x168>
 8005932:	eddf 5a58 	vldr	s11, [pc, #352]	; 8005a94 <InfraredPD_Update+0x684>
 8005936:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005a98 <InfraredPD_Update+0x688>
 800593a:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 800593e:	ed94 5a0e 	vldr	s10, [r4, #56]	; 0x38
 8005942:	eee7 6a25 	vfma.f32	s13, s14, s11
 8005946:	eeb0 7a46 	vmov.f32	s14, s12
 800594a:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800594e:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
 8005952:	ee95 7aa5 	vfnms.f32	s14, s11, s11
 8005956:	eee5 7a07 	vfma.f32	s15, s10, s14
 800595a:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 800595e:	e5a4      	b.n	80054aa <InfraredPD_Update+0x9a>
 8005960:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8005964:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8005968:	e64c      	b.n	8005604 <InfraredPD_Update+0x1f4>
 800596a:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 800596e:	edd4 6a05 	vldr	s13, [r4, #20]
 8005972:	ed9f 6a48 	vldr	s12, [pc, #288]	; 8005a94 <InfraredPD_Update+0x684>
 8005976:	ee37 7a65 	vsub.f32	s14, s14, s11
 800597a:	ee66 6a86 	vmul.f32	s13, s13, s12
 800597e:	eee7 7a26 	vfma.f32	s15, s14, s13
 8005982:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8005986:	e590      	b.n	80054aa <InfraredPD_Update+0x9a>
 8005988:	1e4f      	subs	r7, r1, #1
 800598a:	4662      	mov	r2, ip
 800598c:	fa1f fc87 	uxth.w	ip, r7
 8005990:	2700      	movs	r7, #0
 8005992:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 8005996:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005a9c <InfraredPD_Update+0x68c>
 800599a:	1d17      	adds	r7, r2, #4
 800599c:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 80059a0:	ecf2 7a01 	vldmia	r2!, {s15}
 80059a4:	4297      	cmp	r7, r2
 80059a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059aa:	d1f9      	bne.n	80059a0 <InfraredPD_Update+0x590>
 80059ac:	ee07 1a90 	vmov	s15, r1
 80059b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059b8:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 80059bc:	e622      	b.n	8005604 <InfraredPD_Update+0x1f4>
 80059be:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
 80059c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c6:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 80059ca:	e6e5      	b.n	8005798 <InfraredPD_Update+0x388>
 80059cc:	bba7      	cbnz	r7, 8005a38 <InfraredPD_Update+0x628>
 80059ce:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 80059d2:	b38b      	cbz	r3, 8005a38 <InfraredPD_Update+0x628>
 80059d4:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 80059d8:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
 80059dc:	3301      	adds	r3, #1
 80059de:	b29b      	uxth	r3, r3
 80059e0:	429a      	cmp	r2, r3
 80059e2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 80059e6:	f47f af49 	bne.w	800587c <InfraredPD_Update+0x46c>
 80059ea:	2302      	movs	r3, #2
 80059ec:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80059f0:	f8a4 70a0 	strh.w	r7, [r4, #160]	; 0xa0
 80059f4:	e57e      	b.n	80054f4 <InfraredPD_Update+0xe4>
 80059f6:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 80059fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80059fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a02:	f57f ad70 	bpl.w	80054e6 <InfraredPD_Update+0xd6>
 8005a06:	e735      	b.n	8005874 <InfraredPD_Update+0x464>
 8005a08:	eef1 7a67 	vneg.f32	s15, s15
 8005a0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a14:	f57f ae02 	bpl.w	800561c <InfraredPD_Update+0x20c>
 8005a18:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8005a1c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a24:	f77f adfa 	ble.w	800561c <InfraredPD_Update+0x20c>
 8005a28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8005a32:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 8005a36:	e5f1      	b.n	800561c <InfraredPD_Update+0x20c>
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8005a3e:	e71d      	b.n	800587c <InfraredPD_Update+0x46c>
 8005a40:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 8005a44:	f8b4 109a 	ldrh.w	r1, [r4, #154]	; 0x9a
 8005a48:	3301      	adds	r3, #1
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	4299      	cmp	r1, r3
 8005a50:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
 8005a54:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8005a58:	f47f ad4c 	bne.w	80054f4 <InfraredPD_Update+0xe4>
 8005a5c:	f884 70a6 	strb.w	r7, [r4, #166]	; 0xa6
 8005a60:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
 8005a64:	46b8      	mov	r8, r7
 8005a66:	e709      	b.n	800587c <InfraredPD_Update+0x46c>
 8005a68:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8005a6c:	e542      	b.n	80054f4 <InfraredPD_Update+0xe4>
 8005a6e:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 8005a72:	6a07      	ldr	r7, [r0, #32]
 8005a74:	3301      	adds	r3, #1
 8005a76:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8005a7a:	fa12 f283 	uxtah	r2, r2, r3
 8005a7e:	3701      	adds	r7, #1
 8005a80:	6207      	str	r7, [r0, #32]
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	0090      	lsls	r0, r2, #2
 8005a86:	e4f8      	b.n	800547a <InfraredPD_Update+0x6a>
 8005a88:	cccccccd 	.word	0xcccccccd
 8005a8c:	3feccccc 	.word	0x3feccccc
 8005a90:	7fc00000 	.word	0x7fc00000
 8005a94:	3c23d70a 	.word	0x3c23d70a
 8005a98:	43889333 	.word	0x43889333
 8005a9c:	00000000 	.word	0x00000000

08005aa0 <malloc>:
 8005aa0:	4b02      	ldr	r3, [pc, #8]	; (8005aac <malloc+0xc>)
 8005aa2:	4601      	mov	r1, r0
 8005aa4:	6818      	ldr	r0, [r3, #0]
 8005aa6:	f000 b82b 	b.w	8005b00 <_malloc_r>
 8005aaa:	bf00      	nop
 8005aac:	20000058 	.word	0x20000058

08005ab0 <free>:
 8005ab0:	4b02      	ldr	r3, [pc, #8]	; (8005abc <free+0xc>)
 8005ab2:	4601      	mov	r1, r0
 8005ab4:	6818      	ldr	r0, [r3, #0]
 8005ab6:	f000 b913 	b.w	8005ce0 <_free_r>
 8005aba:	bf00      	nop
 8005abc:	20000058 	.word	0x20000058

08005ac0 <sbrk_aligned>:
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	4e0e      	ldr	r6, [pc, #56]	; (8005afc <sbrk_aligned+0x3c>)
 8005ac4:	460c      	mov	r4, r1
 8005ac6:	6831      	ldr	r1, [r6, #0]
 8005ac8:	4605      	mov	r5, r0
 8005aca:	b911      	cbnz	r1, 8005ad2 <sbrk_aligned+0x12>
 8005acc:	f000 f8cc 	bl	8005c68 <_sbrk_r>
 8005ad0:	6030      	str	r0, [r6, #0]
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	4628      	mov	r0, r5
 8005ad6:	f000 f8c7 	bl	8005c68 <_sbrk_r>
 8005ada:	1c43      	adds	r3, r0, #1
 8005adc:	d00a      	beq.n	8005af4 <sbrk_aligned+0x34>
 8005ade:	1cc4      	adds	r4, r0, #3
 8005ae0:	f024 0403 	bic.w	r4, r4, #3
 8005ae4:	42a0      	cmp	r0, r4
 8005ae6:	d007      	beq.n	8005af8 <sbrk_aligned+0x38>
 8005ae8:	1a21      	subs	r1, r4, r0
 8005aea:	4628      	mov	r0, r5
 8005aec:	f000 f8bc 	bl	8005c68 <_sbrk_r>
 8005af0:	3001      	adds	r0, #1
 8005af2:	d101      	bne.n	8005af8 <sbrk_aligned+0x38>
 8005af4:	f04f 34ff 	mov.w	r4, #4294967295
 8005af8:	4620      	mov	r0, r4
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
 8005afc:	20000224 	.word	0x20000224

08005b00 <_malloc_r>:
 8005b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b04:	1ccd      	adds	r5, r1, #3
 8005b06:	f025 0503 	bic.w	r5, r5, #3
 8005b0a:	3508      	adds	r5, #8
 8005b0c:	2d0c      	cmp	r5, #12
 8005b0e:	bf38      	it	cc
 8005b10:	250c      	movcc	r5, #12
 8005b12:	2d00      	cmp	r5, #0
 8005b14:	4607      	mov	r7, r0
 8005b16:	db01      	blt.n	8005b1c <_malloc_r+0x1c>
 8005b18:	42a9      	cmp	r1, r5
 8005b1a:	d905      	bls.n	8005b28 <_malloc_r+0x28>
 8005b1c:	230c      	movs	r3, #12
 8005b1e:	603b      	str	r3, [r7, #0]
 8005b20:	2600      	movs	r6, #0
 8005b22:	4630      	mov	r0, r6
 8005b24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b28:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005bfc <_malloc_r+0xfc>
 8005b2c:	f000 f868 	bl	8005c00 <__malloc_lock>
 8005b30:	f8d8 3000 	ldr.w	r3, [r8]
 8005b34:	461c      	mov	r4, r3
 8005b36:	bb5c      	cbnz	r4, 8005b90 <_malloc_r+0x90>
 8005b38:	4629      	mov	r1, r5
 8005b3a:	4638      	mov	r0, r7
 8005b3c:	f7ff ffc0 	bl	8005ac0 <sbrk_aligned>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	4604      	mov	r4, r0
 8005b44:	d155      	bne.n	8005bf2 <_malloc_r+0xf2>
 8005b46:	f8d8 4000 	ldr.w	r4, [r8]
 8005b4a:	4626      	mov	r6, r4
 8005b4c:	2e00      	cmp	r6, #0
 8005b4e:	d145      	bne.n	8005bdc <_malloc_r+0xdc>
 8005b50:	2c00      	cmp	r4, #0
 8005b52:	d048      	beq.n	8005be6 <_malloc_r+0xe6>
 8005b54:	6823      	ldr	r3, [r4, #0]
 8005b56:	4631      	mov	r1, r6
 8005b58:	4638      	mov	r0, r7
 8005b5a:	eb04 0903 	add.w	r9, r4, r3
 8005b5e:	f000 f883 	bl	8005c68 <_sbrk_r>
 8005b62:	4581      	cmp	r9, r0
 8005b64:	d13f      	bne.n	8005be6 <_malloc_r+0xe6>
 8005b66:	6821      	ldr	r1, [r4, #0]
 8005b68:	1a6d      	subs	r5, r5, r1
 8005b6a:	4629      	mov	r1, r5
 8005b6c:	4638      	mov	r0, r7
 8005b6e:	f7ff ffa7 	bl	8005ac0 <sbrk_aligned>
 8005b72:	3001      	adds	r0, #1
 8005b74:	d037      	beq.n	8005be6 <_malloc_r+0xe6>
 8005b76:	6823      	ldr	r3, [r4, #0]
 8005b78:	442b      	add	r3, r5
 8005b7a:	6023      	str	r3, [r4, #0]
 8005b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d038      	beq.n	8005bf6 <_malloc_r+0xf6>
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	42a2      	cmp	r2, r4
 8005b88:	d12b      	bne.n	8005be2 <_malloc_r+0xe2>
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	605a      	str	r2, [r3, #4]
 8005b8e:	e00f      	b.n	8005bb0 <_malloc_r+0xb0>
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	1b52      	subs	r2, r2, r5
 8005b94:	d41f      	bmi.n	8005bd6 <_malloc_r+0xd6>
 8005b96:	2a0b      	cmp	r2, #11
 8005b98:	d917      	bls.n	8005bca <_malloc_r+0xca>
 8005b9a:	1961      	adds	r1, r4, r5
 8005b9c:	42a3      	cmp	r3, r4
 8005b9e:	6025      	str	r5, [r4, #0]
 8005ba0:	bf18      	it	ne
 8005ba2:	6059      	strne	r1, [r3, #4]
 8005ba4:	6863      	ldr	r3, [r4, #4]
 8005ba6:	bf08      	it	eq
 8005ba8:	f8c8 1000 	streq.w	r1, [r8]
 8005bac:	5162      	str	r2, [r4, r5]
 8005bae:	604b      	str	r3, [r1, #4]
 8005bb0:	4638      	mov	r0, r7
 8005bb2:	f104 060b 	add.w	r6, r4, #11
 8005bb6:	f000 f829 	bl	8005c0c <__malloc_unlock>
 8005bba:	f026 0607 	bic.w	r6, r6, #7
 8005bbe:	1d23      	adds	r3, r4, #4
 8005bc0:	1af2      	subs	r2, r6, r3
 8005bc2:	d0ae      	beq.n	8005b22 <_malloc_r+0x22>
 8005bc4:	1b9b      	subs	r3, r3, r6
 8005bc6:	50a3      	str	r3, [r4, r2]
 8005bc8:	e7ab      	b.n	8005b22 <_malloc_r+0x22>
 8005bca:	42a3      	cmp	r3, r4
 8005bcc:	6862      	ldr	r2, [r4, #4]
 8005bce:	d1dd      	bne.n	8005b8c <_malloc_r+0x8c>
 8005bd0:	f8c8 2000 	str.w	r2, [r8]
 8005bd4:	e7ec      	b.n	8005bb0 <_malloc_r+0xb0>
 8005bd6:	4623      	mov	r3, r4
 8005bd8:	6864      	ldr	r4, [r4, #4]
 8005bda:	e7ac      	b.n	8005b36 <_malloc_r+0x36>
 8005bdc:	4634      	mov	r4, r6
 8005bde:	6876      	ldr	r6, [r6, #4]
 8005be0:	e7b4      	b.n	8005b4c <_malloc_r+0x4c>
 8005be2:	4613      	mov	r3, r2
 8005be4:	e7cc      	b.n	8005b80 <_malloc_r+0x80>
 8005be6:	230c      	movs	r3, #12
 8005be8:	603b      	str	r3, [r7, #0]
 8005bea:	4638      	mov	r0, r7
 8005bec:	f000 f80e 	bl	8005c0c <__malloc_unlock>
 8005bf0:	e797      	b.n	8005b22 <_malloc_r+0x22>
 8005bf2:	6025      	str	r5, [r4, #0]
 8005bf4:	e7dc      	b.n	8005bb0 <_malloc_r+0xb0>
 8005bf6:	605b      	str	r3, [r3, #4]
 8005bf8:	deff      	udf	#255	; 0xff
 8005bfa:	bf00      	nop
 8005bfc:	20000220 	.word	0x20000220

08005c00 <__malloc_lock>:
 8005c00:	4801      	ldr	r0, [pc, #4]	; (8005c08 <__malloc_lock+0x8>)
 8005c02:	f000 b86b 	b.w	8005cdc <__retarget_lock_acquire_recursive>
 8005c06:	bf00      	nop
 8005c08:	20000364 	.word	0x20000364

08005c0c <__malloc_unlock>:
 8005c0c:	4801      	ldr	r0, [pc, #4]	; (8005c14 <__malloc_unlock+0x8>)
 8005c0e:	f000 b866 	b.w	8005cde <__retarget_lock_release_recursive>
 8005c12:	bf00      	nop
 8005c14:	20000364 	.word	0x20000364

08005c18 <siprintf>:
 8005c18:	b40e      	push	{r1, r2, r3}
 8005c1a:	b500      	push	{lr}
 8005c1c:	b09c      	sub	sp, #112	; 0x70
 8005c1e:	ab1d      	add	r3, sp, #116	; 0x74
 8005c20:	9002      	str	r0, [sp, #8]
 8005c22:	9006      	str	r0, [sp, #24]
 8005c24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c28:	4809      	ldr	r0, [pc, #36]	; (8005c50 <siprintf+0x38>)
 8005c2a:	9107      	str	r1, [sp, #28]
 8005c2c:	9104      	str	r1, [sp, #16]
 8005c2e:	4909      	ldr	r1, [pc, #36]	; (8005c54 <siprintf+0x3c>)
 8005c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c34:	9105      	str	r1, [sp, #20]
 8005c36:	6800      	ldr	r0, [r0, #0]
 8005c38:	9301      	str	r3, [sp, #4]
 8005c3a:	a902      	add	r1, sp, #8
 8005c3c:	f000 f8f6 	bl	8005e2c <_svfiprintf_r>
 8005c40:	9b02      	ldr	r3, [sp, #8]
 8005c42:	2200      	movs	r2, #0
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	b01c      	add	sp, #112	; 0x70
 8005c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c4c:	b003      	add	sp, #12
 8005c4e:	4770      	bx	lr
 8005c50:	20000058 	.word	0x20000058
 8005c54:	ffff0208 	.word	0xffff0208

08005c58 <memset>:
 8005c58:	4402      	add	r2, r0
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d100      	bne.n	8005c62 <memset+0xa>
 8005c60:	4770      	bx	lr
 8005c62:	f803 1b01 	strb.w	r1, [r3], #1
 8005c66:	e7f9      	b.n	8005c5c <memset+0x4>

08005c68 <_sbrk_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4d06      	ldr	r5, [pc, #24]	; (8005c84 <_sbrk_r+0x1c>)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	4604      	mov	r4, r0
 8005c70:	4608      	mov	r0, r1
 8005c72:	602b      	str	r3, [r5, #0]
 8005c74:	f7fb fcca 	bl	800160c <_sbrk>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d102      	bne.n	8005c82 <_sbrk_r+0x1a>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	b103      	cbz	r3, 8005c82 <_sbrk_r+0x1a>
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	20000360 	.word	0x20000360

08005c88 <__errno>:
 8005c88:	4b01      	ldr	r3, [pc, #4]	; (8005c90 <__errno+0x8>)
 8005c8a:	6818      	ldr	r0, [r3, #0]
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	20000058 	.word	0x20000058

08005c94 <__libc_init_array>:
 8005c94:	b570      	push	{r4, r5, r6, lr}
 8005c96:	4d0d      	ldr	r5, [pc, #52]	; (8005ccc <__libc_init_array+0x38>)
 8005c98:	4c0d      	ldr	r4, [pc, #52]	; (8005cd0 <__libc_init_array+0x3c>)
 8005c9a:	1b64      	subs	r4, r4, r5
 8005c9c:	10a4      	asrs	r4, r4, #2
 8005c9e:	2600      	movs	r6, #0
 8005ca0:	42a6      	cmp	r6, r4
 8005ca2:	d109      	bne.n	8005cb8 <__libc_init_array+0x24>
 8005ca4:	4d0b      	ldr	r5, [pc, #44]	; (8005cd4 <__libc_init_array+0x40>)
 8005ca6:	4c0c      	ldr	r4, [pc, #48]	; (8005cd8 <__libc_init_array+0x44>)
 8005ca8:	f000 fd24 	bl	80066f4 <_init>
 8005cac:	1b64      	subs	r4, r4, r5
 8005cae:	10a4      	asrs	r4, r4, #2
 8005cb0:	2600      	movs	r6, #0
 8005cb2:	42a6      	cmp	r6, r4
 8005cb4:	d105      	bne.n	8005cc2 <__libc_init_array+0x2e>
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cbc:	4798      	blx	r3
 8005cbe:	3601      	adds	r6, #1
 8005cc0:	e7ee      	b.n	8005ca0 <__libc_init_array+0xc>
 8005cc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cc6:	4798      	blx	r3
 8005cc8:	3601      	adds	r6, #1
 8005cca:	e7f2      	b.n	8005cb2 <__libc_init_array+0x1e>
 8005ccc:	08006838 	.word	0x08006838
 8005cd0:	08006838 	.word	0x08006838
 8005cd4:	08006838 	.word	0x08006838
 8005cd8:	0800683c 	.word	0x0800683c

08005cdc <__retarget_lock_acquire_recursive>:
 8005cdc:	4770      	bx	lr

08005cde <__retarget_lock_release_recursive>:
 8005cde:	4770      	bx	lr

08005ce0 <_free_r>:
 8005ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005ce2:	2900      	cmp	r1, #0
 8005ce4:	d044      	beq.n	8005d70 <_free_r+0x90>
 8005ce6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cea:	9001      	str	r0, [sp, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f1a1 0404 	sub.w	r4, r1, #4
 8005cf2:	bfb8      	it	lt
 8005cf4:	18e4      	addlt	r4, r4, r3
 8005cf6:	f7ff ff83 	bl	8005c00 <__malloc_lock>
 8005cfa:	4a1e      	ldr	r2, [pc, #120]	; (8005d74 <_free_r+0x94>)
 8005cfc:	9801      	ldr	r0, [sp, #4]
 8005cfe:	6813      	ldr	r3, [r2, #0]
 8005d00:	b933      	cbnz	r3, 8005d10 <_free_r+0x30>
 8005d02:	6063      	str	r3, [r4, #4]
 8005d04:	6014      	str	r4, [r2, #0]
 8005d06:	b003      	add	sp, #12
 8005d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d0c:	f7ff bf7e 	b.w	8005c0c <__malloc_unlock>
 8005d10:	42a3      	cmp	r3, r4
 8005d12:	d908      	bls.n	8005d26 <_free_r+0x46>
 8005d14:	6825      	ldr	r5, [r4, #0]
 8005d16:	1961      	adds	r1, r4, r5
 8005d18:	428b      	cmp	r3, r1
 8005d1a:	bf01      	itttt	eq
 8005d1c:	6819      	ldreq	r1, [r3, #0]
 8005d1e:	685b      	ldreq	r3, [r3, #4]
 8005d20:	1949      	addeq	r1, r1, r5
 8005d22:	6021      	streq	r1, [r4, #0]
 8005d24:	e7ed      	b.n	8005d02 <_free_r+0x22>
 8005d26:	461a      	mov	r2, r3
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	b10b      	cbz	r3, 8005d30 <_free_r+0x50>
 8005d2c:	42a3      	cmp	r3, r4
 8005d2e:	d9fa      	bls.n	8005d26 <_free_r+0x46>
 8005d30:	6811      	ldr	r1, [r2, #0]
 8005d32:	1855      	adds	r5, r2, r1
 8005d34:	42a5      	cmp	r5, r4
 8005d36:	d10b      	bne.n	8005d50 <_free_r+0x70>
 8005d38:	6824      	ldr	r4, [r4, #0]
 8005d3a:	4421      	add	r1, r4
 8005d3c:	1854      	adds	r4, r2, r1
 8005d3e:	42a3      	cmp	r3, r4
 8005d40:	6011      	str	r1, [r2, #0]
 8005d42:	d1e0      	bne.n	8005d06 <_free_r+0x26>
 8005d44:	681c      	ldr	r4, [r3, #0]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	6053      	str	r3, [r2, #4]
 8005d4a:	440c      	add	r4, r1
 8005d4c:	6014      	str	r4, [r2, #0]
 8005d4e:	e7da      	b.n	8005d06 <_free_r+0x26>
 8005d50:	d902      	bls.n	8005d58 <_free_r+0x78>
 8005d52:	230c      	movs	r3, #12
 8005d54:	6003      	str	r3, [r0, #0]
 8005d56:	e7d6      	b.n	8005d06 <_free_r+0x26>
 8005d58:	6825      	ldr	r5, [r4, #0]
 8005d5a:	1961      	adds	r1, r4, r5
 8005d5c:	428b      	cmp	r3, r1
 8005d5e:	bf04      	itt	eq
 8005d60:	6819      	ldreq	r1, [r3, #0]
 8005d62:	685b      	ldreq	r3, [r3, #4]
 8005d64:	6063      	str	r3, [r4, #4]
 8005d66:	bf04      	itt	eq
 8005d68:	1949      	addeq	r1, r1, r5
 8005d6a:	6021      	streq	r1, [r4, #0]
 8005d6c:	6054      	str	r4, [r2, #4]
 8005d6e:	e7ca      	b.n	8005d06 <_free_r+0x26>
 8005d70:	b003      	add	sp, #12
 8005d72:	bd30      	pop	{r4, r5, pc}
 8005d74:	20000220 	.word	0x20000220

08005d78 <__ssputs_r>:
 8005d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d7c:	688e      	ldr	r6, [r1, #8]
 8005d7e:	461f      	mov	r7, r3
 8005d80:	42be      	cmp	r6, r7
 8005d82:	680b      	ldr	r3, [r1, #0]
 8005d84:	4682      	mov	sl, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	4690      	mov	r8, r2
 8005d8a:	d82c      	bhi.n	8005de6 <__ssputs_r+0x6e>
 8005d8c:	898a      	ldrh	r2, [r1, #12]
 8005d8e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d92:	d026      	beq.n	8005de2 <__ssputs_r+0x6a>
 8005d94:	6965      	ldr	r5, [r4, #20]
 8005d96:	6909      	ldr	r1, [r1, #16]
 8005d98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d9c:	eba3 0901 	sub.w	r9, r3, r1
 8005da0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005da4:	1c7b      	adds	r3, r7, #1
 8005da6:	444b      	add	r3, r9
 8005da8:	106d      	asrs	r5, r5, #1
 8005daa:	429d      	cmp	r5, r3
 8005dac:	bf38      	it	cc
 8005dae:	461d      	movcc	r5, r3
 8005db0:	0553      	lsls	r3, r2, #21
 8005db2:	d527      	bpl.n	8005e04 <__ssputs_r+0x8c>
 8005db4:	4629      	mov	r1, r5
 8005db6:	f7ff fea3 	bl	8005b00 <_malloc_r>
 8005dba:	4606      	mov	r6, r0
 8005dbc:	b360      	cbz	r0, 8005e18 <__ssputs_r+0xa0>
 8005dbe:	6921      	ldr	r1, [r4, #16]
 8005dc0:	464a      	mov	r2, r9
 8005dc2:	f000 fadb 	bl	800637c <memcpy>
 8005dc6:	89a3      	ldrh	r3, [r4, #12]
 8005dc8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dd0:	81a3      	strh	r3, [r4, #12]
 8005dd2:	6126      	str	r6, [r4, #16]
 8005dd4:	6165      	str	r5, [r4, #20]
 8005dd6:	444e      	add	r6, r9
 8005dd8:	eba5 0509 	sub.w	r5, r5, r9
 8005ddc:	6026      	str	r6, [r4, #0]
 8005dde:	60a5      	str	r5, [r4, #8]
 8005de0:	463e      	mov	r6, r7
 8005de2:	42be      	cmp	r6, r7
 8005de4:	d900      	bls.n	8005de8 <__ssputs_r+0x70>
 8005de6:	463e      	mov	r6, r7
 8005de8:	6820      	ldr	r0, [r4, #0]
 8005dea:	4632      	mov	r2, r6
 8005dec:	4641      	mov	r1, r8
 8005dee:	f000 faab 	bl	8006348 <memmove>
 8005df2:	68a3      	ldr	r3, [r4, #8]
 8005df4:	1b9b      	subs	r3, r3, r6
 8005df6:	60a3      	str	r3, [r4, #8]
 8005df8:	6823      	ldr	r3, [r4, #0]
 8005dfa:	4433      	add	r3, r6
 8005dfc:	6023      	str	r3, [r4, #0]
 8005dfe:	2000      	movs	r0, #0
 8005e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e04:	462a      	mov	r2, r5
 8005e06:	f000 fac7 	bl	8006398 <_realloc_r>
 8005e0a:	4606      	mov	r6, r0
 8005e0c:	2800      	cmp	r0, #0
 8005e0e:	d1e0      	bne.n	8005dd2 <__ssputs_r+0x5a>
 8005e10:	6921      	ldr	r1, [r4, #16]
 8005e12:	4650      	mov	r0, sl
 8005e14:	f7ff ff64 	bl	8005ce0 <_free_r>
 8005e18:	230c      	movs	r3, #12
 8005e1a:	f8ca 3000 	str.w	r3, [sl]
 8005e1e:	89a3      	ldrh	r3, [r4, #12]
 8005e20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e24:	81a3      	strh	r3, [r4, #12]
 8005e26:	f04f 30ff 	mov.w	r0, #4294967295
 8005e2a:	e7e9      	b.n	8005e00 <__ssputs_r+0x88>

08005e2c <_svfiprintf_r>:
 8005e2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e30:	4698      	mov	r8, r3
 8005e32:	898b      	ldrh	r3, [r1, #12]
 8005e34:	061b      	lsls	r3, r3, #24
 8005e36:	b09d      	sub	sp, #116	; 0x74
 8005e38:	4607      	mov	r7, r0
 8005e3a:	460d      	mov	r5, r1
 8005e3c:	4614      	mov	r4, r2
 8005e3e:	d50e      	bpl.n	8005e5e <_svfiprintf_r+0x32>
 8005e40:	690b      	ldr	r3, [r1, #16]
 8005e42:	b963      	cbnz	r3, 8005e5e <_svfiprintf_r+0x32>
 8005e44:	2140      	movs	r1, #64	; 0x40
 8005e46:	f7ff fe5b 	bl	8005b00 <_malloc_r>
 8005e4a:	6028      	str	r0, [r5, #0]
 8005e4c:	6128      	str	r0, [r5, #16]
 8005e4e:	b920      	cbnz	r0, 8005e5a <_svfiprintf_r+0x2e>
 8005e50:	230c      	movs	r3, #12
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295
 8005e58:	e0d0      	b.n	8005ffc <_svfiprintf_r+0x1d0>
 8005e5a:	2340      	movs	r3, #64	; 0x40
 8005e5c:	616b      	str	r3, [r5, #20]
 8005e5e:	2300      	movs	r3, #0
 8005e60:	9309      	str	r3, [sp, #36]	; 0x24
 8005e62:	2320      	movs	r3, #32
 8005e64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005e68:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e6c:	2330      	movs	r3, #48	; 0x30
 8005e6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006014 <_svfiprintf_r+0x1e8>
 8005e72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005e76:	f04f 0901 	mov.w	r9, #1
 8005e7a:	4623      	mov	r3, r4
 8005e7c:	469a      	mov	sl, r3
 8005e7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e82:	b10a      	cbz	r2, 8005e88 <_svfiprintf_r+0x5c>
 8005e84:	2a25      	cmp	r2, #37	; 0x25
 8005e86:	d1f9      	bne.n	8005e7c <_svfiprintf_r+0x50>
 8005e88:	ebba 0b04 	subs.w	fp, sl, r4
 8005e8c:	d00b      	beq.n	8005ea6 <_svfiprintf_r+0x7a>
 8005e8e:	465b      	mov	r3, fp
 8005e90:	4622      	mov	r2, r4
 8005e92:	4629      	mov	r1, r5
 8005e94:	4638      	mov	r0, r7
 8005e96:	f7ff ff6f 	bl	8005d78 <__ssputs_r>
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	f000 80a9 	beq.w	8005ff2 <_svfiprintf_r+0x1c6>
 8005ea0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ea2:	445a      	add	r2, fp
 8005ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ea6:	f89a 3000 	ldrb.w	r3, [sl]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	f000 80a1 	beq.w	8005ff2 <_svfiprintf_r+0x1c6>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8005eb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005eba:	f10a 0a01 	add.w	sl, sl, #1
 8005ebe:	9304      	str	r3, [sp, #16]
 8005ec0:	9307      	str	r3, [sp, #28]
 8005ec2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005ec6:	931a      	str	r3, [sp, #104]	; 0x68
 8005ec8:	4654      	mov	r4, sl
 8005eca:	2205      	movs	r2, #5
 8005ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ed0:	4850      	ldr	r0, [pc, #320]	; (8006014 <_svfiprintf_r+0x1e8>)
 8005ed2:	f7fa f98d 	bl	80001f0 <memchr>
 8005ed6:	9a04      	ldr	r2, [sp, #16]
 8005ed8:	b9d8      	cbnz	r0, 8005f12 <_svfiprintf_r+0xe6>
 8005eda:	06d0      	lsls	r0, r2, #27
 8005edc:	bf44      	itt	mi
 8005ede:	2320      	movmi	r3, #32
 8005ee0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ee4:	0711      	lsls	r1, r2, #28
 8005ee6:	bf44      	itt	mi
 8005ee8:	232b      	movmi	r3, #43	; 0x2b
 8005eea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005eee:	f89a 3000 	ldrb.w	r3, [sl]
 8005ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8005ef4:	d015      	beq.n	8005f22 <_svfiprintf_r+0xf6>
 8005ef6:	9a07      	ldr	r2, [sp, #28]
 8005ef8:	4654      	mov	r4, sl
 8005efa:	2000      	movs	r0, #0
 8005efc:	f04f 0c0a 	mov.w	ip, #10
 8005f00:	4621      	mov	r1, r4
 8005f02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f06:	3b30      	subs	r3, #48	; 0x30
 8005f08:	2b09      	cmp	r3, #9
 8005f0a:	d94d      	bls.n	8005fa8 <_svfiprintf_r+0x17c>
 8005f0c:	b1b0      	cbz	r0, 8005f3c <_svfiprintf_r+0x110>
 8005f0e:	9207      	str	r2, [sp, #28]
 8005f10:	e014      	b.n	8005f3c <_svfiprintf_r+0x110>
 8005f12:	eba0 0308 	sub.w	r3, r0, r8
 8005f16:	fa09 f303 	lsl.w	r3, r9, r3
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	9304      	str	r3, [sp, #16]
 8005f1e:	46a2      	mov	sl, r4
 8005f20:	e7d2      	b.n	8005ec8 <_svfiprintf_r+0x9c>
 8005f22:	9b03      	ldr	r3, [sp, #12]
 8005f24:	1d19      	adds	r1, r3, #4
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	9103      	str	r1, [sp, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	bfbb      	ittet	lt
 8005f2e:	425b      	neglt	r3, r3
 8005f30:	f042 0202 	orrlt.w	r2, r2, #2
 8005f34:	9307      	strge	r3, [sp, #28]
 8005f36:	9307      	strlt	r3, [sp, #28]
 8005f38:	bfb8      	it	lt
 8005f3a:	9204      	strlt	r2, [sp, #16]
 8005f3c:	7823      	ldrb	r3, [r4, #0]
 8005f3e:	2b2e      	cmp	r3, #46	; 0x2e
 8005f40:	d10c      	bne.n	8005f5c <_svfiprintf_r+0x130>
 8005f42:	7863      	ldrb	r3, [r4, #1]
 8005f44:	2b2a      	cmp	r3, #42	; 0x2a
 8005f46:	d134      	bne.n	8005fb2 <_svfiprintf_r+0x186>
 8005f48:	9b03      	ldr	r3, [sp, #12]
 8005f4a:	1d1a      	adds	r2, r3, #4
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	9203      	str	r2, [sp, #12]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	bfb8      	it	lt
 8005f54:	f04f 33ff 	movlt.w	r3, #4294967295
 8005f58:	3402      	adds	r4, #2
 8005f5a:	9305      	str	r3, [sp, #20]
 8005f5c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006024 <_svfiprintf_r+0x1f8>
 8005f60:	7821      	ldrb	r1, [r4, #0]
 8005f62:	2203      	movs	r2, #3
 8005f64:	4650      	mov	r0, sl
 8005f66:	f7fa f943 	bl	80001f0 <memchr>
 8005f6a:	b138      	cbz	r0, 8005f7c <_svfiprintf_r+0x150>
 8005f6c:	9b04      	ldr	r3, [sp, #16]
 8005f6e:	eba0 000a 	sub.w	r0, r0, sl
 8005f72:	2240      	movs	r2, #64	; 0x40
 8005f74:	4082      	lsls	r2, r0
 8005f76:	4313      	orrs	r3, r2
 8005f78:	3401      	adds	r4, #1
 8005f7a:	9304      	str	r3, [sp, #16]
 8005f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f80:	4825      	ldr	r0, [pc, #148]	; (8006018 <_svfiprintf_r+0x1ec>)
 8005f82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f86:	2206      	movs	r2, #6
 8005f88:	f7fa f932 	bl	80001f0 <memchr>
 8005f8c:	2800      	cmp	r0, #0
 8005f8e:	d038      	beq.n	8006002 <_svfiprintf_r+0x1d6>
 8005f90:	4b22      	ldr	r3, [pc, #136]	; (800601c <_svfiprintf_r+0x1f0>)
 8005f92:	bb1b      	cbnz	r3, 8005fdc <_svfiprintf_r+0x1b0>
 8005f94:	9b03      	ldr	r3, [sp, #12]
 8005f96:	3307      	adds	r3, #7
 8005f98:	f023 0307 	bic.w	r3, r3, #7
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	9303      	str	r3, [sp, #12]
 8005fa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fa2:	4433      	add	r3, r6
 8005fa4:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa6:	e768      	b.n	8005e7a <_svfiprintf_r+0x4e>
 8005fa8:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fac:	460c      	mov	r4, r1
 8005fae:	2001      	movs	r0, #1
 8005fb0:	e7a6      	b.n	8005f00 <_svfiprintf_r+0xd4>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	3401      	adds	r4, #1
 8005fb6:	9305      	str	r3, [sp, #20]
 8005fb8:	4619      	mov	r1, r3
 8005fba:	f04f 0c0a 	mov.w	ip, #10
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fc4:	3a30      	subs	r2, #48	; 0x30
 8005fc6:	2a09      	cmp	r2, #9
 8005fc8:	d903      	bls.n	8005fd2 <_svfiprintf_r+0x1a6>
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d0c6      	beq.n	8005f5c <_svfiprintf_r+0x130>
 8005fce:	9105      	str	r1, [sp, #20]
 8005fd0:	e7c4      	b.n	8005f5c <_svfiprintf_r+0x130>
 8005fd2:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fd6:	4604      	mov	r4, r0
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e7f0      	b.n	8005fbe <_svfiprintf_r+0x192>
 8005fdc:	ab03      	add	r3, sp, #12
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	462a      	mov	r2, r5
 8005fe2:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <_svfiprintf_r+0x1f4>)
 8005fe4:	a904      	add	r1, sp, #16
 8005fe6:	4638      	mov	r0, r7
 8005fe8:	f3af 8000 	nop.w
 8005fec:	1c42      	adds	r2, r0, #1
 8005fee:	4606      	mov	r6, r0
 8005ff0:	d1d6      	bne.n	8005fa0 <_svfiprintf_r+0x174>
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	065b      	lsls	r3, r3, #25
 8005ff6:	f53f af2d 	bmi.w	8005e54 <_svfiprintf_r+0x28>
 8005ffa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ffc:	b01d      	add	sp, #116	; 0x74
 8005ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006002:	ab03      	add	r3, sp, #12
 8006004:	9300      	str	r3, [sp, #0]
 8006006:	462a      	mov	r2, r5
 8006008:	4b05      	ldr	r3, [pc, #20]	; (8006020 <_svfiprintf_r+0x1f4>)
 800600a:	a904      	add	r1, sp, #16
 800600c:	4638      	mov	r0, r7
 800600e:	f000 f879 	bl	8006104 <_printf_i>
 8006012:	e7eb      	b.n	8005fec <_svfiprintf_r+0x1c0>
 8006014:	080067e4 	.word	0x080067e4
 8006018:	080067ee 	.word	0x080067ee
 800601c:	00000000 	.word	0x00000000
 8006020:	08005d79 	.word	0x08005d79
 8006024:	080067ea 	.word	0x080067ea

08006028 <_printf_common>:
 8006028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800602c:	4616      	mov	r6, r2
 800602e:	4699      	mov	r9, r3
 8006030:	688a      	ldr	r2, [r1, #8]
 8006032:	690b      	ldr	r3, [r1, #16]
 8006034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006038:	4293      	cmp	r3, r2
 800603a:	bfb8      	it	lt
 800603c:	4613      	movlt	r3, r2
 800603e:	6033      	str	r3, [r6, #0]
 8006040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006044:	4607      	mov	r7, r0
 8006046:	460c      	mov	r4, r1
 8006048:	b10a      	cbz	r2, 800604e <_printf_common+0x26>
 800604a:	3301      	adds	r3, #1
 800604c:	6033      	str	r3, [r6, #0]
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	0699      	lsls	r1, r3, #26
 8006052:	bf42      	ittt	mi
 8006054:	6833      	ldrmi	r3, [r6, #0]
 8006056:	3302      	addmi	r3, #2
 8006058:	6033      	strmi	r3, [r6, #0]
 800605a:	6825      	ldr	r5, [r4, #0]
 800605c:	f015 0506 	ands.w	r5, r5, #6
 8006060:	d106      	bne.n	8006070 <_printf_common+0x48>
 8006062:	f104 0a19 	add.w	sl, r4, #25
 8006066:	68e3      	ldr	r3, [r4, #12]
 8006068:	6832      	ldr	r2, [r6, #0]
 800606a:	1a9b      	subs	r3, r3, r2
 800606c:	42ab      	cmp	r3, r5
 800606e:	dc26      	bgt.n	80060be <_printf_common+0x96>
 8006070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006074:	1e13      	subs	r3, r2, #0
 8006076:	6822      	ldr	r2, [r4, #0]
 8006078:	bf18      	it	ne
 800607a:	2301      	movne	r3, #1
 800607c:	0692      	lsls	r2, r2, #26
 800607e:	d42b      	bmi.n	80060d8 <_printf_common+0xb0>
 8006080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006084:	4649      	mov	r1, r9
 8006086:	4638      	mov	r0, r7
 8006088:	47c0      	blx	r8
 800608a:	3001      	adds	r0, #1
 800608c:	d01e      	beq.n	80060cc <_printf_common+0xa4>
 800608e:	6823      	ldr	r3, [r4, #0]
 8006090:	6922      	ldr	r2, [r4, #16]
 8006092:	f003 0306 	and.w	r3, r3, #6
 8006096:	2b04      	cmp	r3, #4
 8006098:	bf02      	ittt	eq
 800609a:	68e5      	ldreq	r5, [r4, #12]
 800609c:	6833      	ldreq	r3, [r6, #0]
 800609e:	1aed      	subeq	r5, r5, r3
 80060a0:	68a3      	ldr	r3, [r4, #8]
 80060a2:	bf0c      	ite	eq
 80060a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060a8:	2500      	movne	r5, #0
 80060aa:	4293      	cmp	r3, r2
 80060ac:	bfc4      	itt	gt
 80060ae:	1a9b      	subgt	r3, r3, r2
 80060b0:	18ed      	addgt	r5, r5, r3
 80060b2:	2600      	movs	r6, #0
 80060b4:	341a      	adds	r4, #26
 80060b6:	42b5      	cmp	r5, r6
 80060b8:	d11a      	bne.n	80060f0 <_printf_common+0xc8>
 80060ba:	2000      	movs	r0, #0
 80060bc:	e008      	b.n	80060d0 <_printf_common+0xa8>
 80060be:	2301      	movs	r3, #1
 80060c0:	4652      	mov	r2, sl
 80060c2:	4649      	mov	r1, r9
 80060c4:	4638      	mov	r0, r7
 80060c6:	47c0      	blx	r8
 80060c8:	3001      	adds	r0, #1
 80060ca:	d103      	bne.n	80060d4 <_printf_common+0xac>
 80060cc:	f04f 30ff 	mov.w	r0, #4294967295
 80060d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d4:	3501      	adds	r5, #1
 80060d6:	e7c6      	b.n	8006066 <_printf_common+0x3e>
 80060d8:	18e1      	adds	r1, r4, r3
 80060da:	1c5a      	adds	r2, r3, #1
 80060dc:	2030      	movs	r0, #48	; 0x30
 80060de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80060e2:	4422      	add	r2, r4
 80060e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80060e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80060ec:	3302      	adds	r3, #2
 80060ee:	e7c7      	b.n	8006080 <_printf_common+0x58>
 80060f0:	2301      	movs	r3, #1
 80060f2:	4622      	mov	r2, r4
 80060f4:	4649      	mov	r1, r9
 80060f6:	4638      	mov	r0, r7
 80060f8:	47c0      	blx	r8
 80060fa:	3001      	adds	r0, #1
 80060fc:	d0e6      	beq.n	80060cc <_printf_common+0xa4>
 80060fe:	3601      	adds	r6, #1
 8006100:	e7d9      	b.n	80060b6 <_printf_common+0x8e>
	...

08006104 <_printf_i>:
 8006104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006108:	7e0f      	ldrb	r7, [r1, #24]
 800610a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800610c:	2f78      	cmp	r7, #120	; 0x78
 800610e:	4691      	mov	r9, r2
 8006110:	4680      	mov	r8, r0
 8006112:	460c      	mov	r4, r1
 8006114:	469a      	mov	sl, r3
 8006116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800611a:	d807      	bhi.n	800612c <_printf_i+0x28>
 800611c:	2f62      	cmp	r7, #98	; 0x62
 800611e:	d80a      	bhi.n	8006136 <_printf_i+0x32>
 8006120:	2f00      	cmp	r7, #0
 8006122:	f000 80d4 	beq.w	80062ce <_printf_i+0x1ca>
 8006126:	2f58      	cmp	r7, #88	; 0x58
 8006128:	f000 80c0 	beq.w	80062ac <_printf_i+0x1a8>
 800612c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006134:	e03a      	b.n	80061ac <_printf_i+0xa8>
 8006136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800613a:	2b15      	cmp	r3, #21
 800613c:	d8f6      	bhi.n	800612c <_printf_i+0x28>
 800613e:	a101      	add	r1, pc, #4	; (adr r1, 8006144 <_printf_i+0x40>)
 8006140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006144:	0800619d 	.word	0x0800619d
 8006148:	080061b1 	.word	0x080061b1
 800614c:	0800612d 	.word	0x0800612d
 8006150:	0800612d 	.word	0x0800612d
 8006154:	0800612d 	.word	0x0800612d
 8006158:	0800612d 	.word	0x0800612d
 800615c:	080061b1 	.word	0x080061b1
 8006160:	0800612d 	.word	0x0800612d
 8006164:	0800612d 	.word	0x0800612d
 8006168:	0800612d 	.word	0x0800612d
 800616c:	0800612d 	.word	0x0800612d
 8006170:	080062b5 	.word	0x080062b5
 8006174:	080061dd 	.word	0x080061dd
 8006178:	0800626f 	.word	0x0800626f
 800617c:	0800612d 	.word	0x0800612d
 8006180:	0800612d 	.word	0x0800612d
 8006184:	080062d7 	.word	0x080062d7
 8006188:	0800612d 	.word	0x0800612d
 800618c:	080061dd 	.word	0x080061dd
 8006190:	0800612d 	.word	0x0800612d
 8006194:	0800612d 	.word	0x0800612d
 8006198:	08006277 	.word	0x08006277
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	1d1a      	adds	r2, r3, #4
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	602a      	str	r2, [r5, #0]
 80061a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061ac:	2301      	movs	r3, #1
 80061ae:	e09f      	b.n	80062f0 <_printf_i+0x1ec>
 80061b0:	6820      	ldr	r0, [r4, #0]
 80061b2:	682b      	ldr	r3, [r5, #0]
 80061b4:	0607      	lsls	r7, r0, #24
 80061b6:	f103 0104 	add.w	r1, r3, #4
 80061ba:	6029      	str	r1, [r5, #0]
 80061bc:	d501      	bpl.n	80061c2 <_printf_i+0xbe>
 80061be:	681e      	ldr	r6, [r3, #0]
 80061c0:	e003      	b.n	80061ca <_printf_i+0xc6>
 80061c2:	0646      	lsls	r6, r0, #25
 80061c4:	d5fb      	bpl.n	80061be <_printf_i+0xba>
 80061c6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80061ca:	2e00      	cmp	r6, #0
 80061cc:	da03      	bge.n	80061d6 <_printf_i+0xd2>
 80061ce:	232d      	movs	r3, #45	; 0x2d
 80061d0:	4276      	negs	r6, r6
 80061d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061d6:	485a      	ldr	r0, [pc, #360]	; (8006340 <_printf_i+0x23c>)
 80061d8:	230a      	movs	r3, #10
 80061da:	e012      	b.n	8006202 <_printf_i+0xfe>
 80061dc:	682b      	ldr	r3, [r5, #0]
 80061de:	6820      	ldr	r0, [r4, #0]
 80061e0:	1d19      	adds	r1, r3, #4
 80061e2:	6029      	str	r1, [r5, #0]
 80061e4:	0605      	lsls	r5, r0, #24
 80061e6:	d501      	bpl.n	80061ec <_printf_i+0xe8>
 80061e8:	681e      	ldr	r6, [r3, #0]
 80061ea:	e002      	b.n	80061f2 <_printf_i+0xee>
 80061ec:	0641      	lsls	r1, r0, #25
 80061ee:	d5fb      	bpl.n	80061e8 <_printf_i+0xe4>
 80061f0:	881e      	ldrh	r6, [r3, #0]
 80061f2:	4853      	ldr	r0, [pc, #332]	; (8006340 <_printf_i+0x23c>)
 80061f4:	2f6f      	cmp	r7, #111	; 0x6f
 80061f6:	bf0c      	ite	eq
 80061f8:	2308      	moveq	r3, #8
 80061fa:	230a      	movne	r3, #10
 80061fc:	2100      	movs	r1, #0
 80061fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006202:	6865      	ldr	r5, [r4, #4]
 8006204:	60a5      	str	r5, [r4, #8]
 8006206:	2d00      	cmp	r5, #0
 8006208:	bfa2      	ittt	ge
 800620a:	6821      	ldrge	r1, [r4, #0]
 800620c:	f021 0104 	bicge.w	r1, r1, #4
 8006210:	6021      	strge	r1, [r4, #0]
 8006212:	b90e      	cbnz	r6, 8006218 <_printf_i+0x114>
 8006214:	2d00      	cmp	r5, #0
 8006216:	d04b      	beq.n	80062b0 <_printf_i+0x1ac>
 8006218:	4615      	mov	r5, r2
 800621a:	fbb6 f1f3 	udiv	r1, r6, r3
 800621e:	fb03 6711 	mls	r7, r3, r1, r6
 8006222:	5dc7      	ldrb	r7, [r0, r7]
 8006224:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006228:	4637      	mov	r7, r6
 800622a:	42bb      	cmp	r3, r7
 800622c:	460e      	mov	r6, r1
 800622e:	d9f4      	bls.n	800621a <_printf_i+0x116>
 8006230:	2b08      	cmp	r3, #8
 8006232:	d10b      	bne.n	800624c <_printf_i+0x148>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	07de      	lsls	r6, r3, #31
 8006238:	d508      	bpl.n	800624c <_printf_i+0x148>
 800623a:	6923      	ldr	r3, [r4, #16]
 800623c:	6861      	ldr	r1, [r4, #4]
 800623e:	4299      	cmp	r1, r3
 8006240:	bfde      	ittt	le
 8006242:	2330      	movle	r3, #48	; 0x30
 8006244:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006248:	f105 35ff 	addle.w	r5, r5, #4294967295
 800624c:	1b52      	subs	r2, r2, r5
 800624e:	6122      	str	r2, [r4, #16]
 8006250:	f8cd a000 	str.w	sl, [sp]
 8006254:	464b      	mov	r3, r9
 8006256:	aa03      	add	r2, sp, #12
 8006258:	4621      	mov	r1, r4
 800625a:	4640      	mov	r0, r8
 800625c:	f7ff fee4 	bl	8006028 <_printf_common>
 8006260:	3001      	adds	r0, #1
 8006262:	d14a      	bne.n	80062fa <_printf_i+0x1f6>
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	b004      	add	sp, #16
 800626a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	f043 0320 	orr.w	r3, r3, #32
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	4833      	ldr	r0, [pc, #204]	; (8006344 <_printf_i+0x240>)
 8006278:	2778      	movs	r7, #120	; 0x78
 800627a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	6829      	ldr	r1, [r5, #0]
 8006282:	061f      	lsls	r7, r3, #24
 8006284:	f851 6b04 	ldr.w	r6, [r1], #4
 8006288:	d402      	bmi.n	8006290 <_printf_i+0x18c>
 800628a:	065f      	lsls	r7, r3, #25
 800628c:	bf48      	it	mi
 800628e:	b2b6      	uxthmi	r6, r6
 8006290:	07df      	lsls	r7, r3, #31
 8006292:	bf48      	it	mi
 8006294:	f043 0320 	orrmi.w	r3, r3, #32
 8006298:	6029      	str	r1, [r5, #0]
 800629a:	bf48      	it	mi
 800629c:	6023      	strmi	r3, [r4, #0]
 800629e:	b91e      	cbnz	r6, 80062a8 <_printf_i+0x1a4>
 80062a0:	6823      	ldr	r3, [r4, #0]
 80062a2:	f023 0320 	bic.w	r3, r3, #32
 80062a6:	6023      	str	r3, [r4, #0]
 80062a8:	2310      	movs	r3, #16
 80062aa:	e7a7      	b.n	80061fc <_printf_i+0xf8>
 80062ac:	4824      	ldr	r0, [pc, #144]	; (8006340 <_printf_i+0x23c>)
 80062ae:	e7e4      	b.n	800627a <_printf_i+0x176>
 80062b0:	4615      	mov	r5, r2
 80062b2:	e7bd      	b.n	8006230 <_printf_i+0x12c>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	6826      	ldr	r6, [r4, #0]
 80062b8:	6961      	ldr	r1, [r4, #20]
 80062ba:	1d18      	adds	r0, r3, #4
 80062bc:	6028      	str	r0, [r5, #0]
 80062be:	0635      	lsls	r5, r6, #24
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	d501      	bpl.n	80062c8 <_printf_i+0x1c4>
 80062c4:	6019      	str	r1, [r3, #0]
 80062c6:	e002      	b.n	80062ce <_printf_i+0x1ca>
 80062c8:	0670      	lsls	r0, r6, #25
 80062ca:	d5fb      	bpl.n	80062c4 <_printf_i+0x1c0>
 80062cc:	8019      	strh	r1, [r3, #0]
 80062ce:	2300      	movs	r3, #0
 80062d0:	6123      	str	r3, [r4, #16]
 80062d2:	4615      	mov	r5, r2
 80062d4:	e7bc      	b.n	8006250 <_printf_i+0x14c>
 80062d6:	682b      	ldr	r3, [r5, #0]
 80062d8:	1d1a      	adds	r2, r3, #4
 80062da:	602a      	str	r2, [r5, #0]
 80062dc:	681d      	ldr	r5, [r3, #0]
 80062de:	6862      	ldr	r2, [r4, #4]
 80062e0:	2100      	movs	r1, #0
 80062e2:	4628      	mov	r0, r5
 80062e4:	f7f9 ff84 	bl	80001f0 <memchr>
 80062e8:	b108      	cbz	r0, 80062ee <_printf_i+0x1ea>
 80062ea:	1b40      	subs	r0, r0, r5
 80062ec:	6060      	str	r0, [r4, #4]
 80062ee:	6863      	ldr	r3, [r4, #4]
 80062f0:	6123      	str	r3, [r4, #16]
 80062f2:	2300      	movs	r3, #0
 80062f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062f8:	e7aa      	b.n	8006250 <_printf_i+0x14c>
 80062fa:	6923      	ldr	r3, [r4, #16]
 80062fc:	462a      	mov	r2, r5
 80062fe:	4649      	mov	r1, r9
 8006300:	4640      	mov	r0, r8
 8006302:	47d0      	blx	sl
 8006304:	3001      	adds	r0, #1
 8006306:	d0ad      	beq.n	8006264 <_printf_i+0x160>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	079b      	lsls	r3, r3, #30
 800630c:	d413      	bmi.n	8006336 <_printf_i+0x232>
 800630e:	68e0      	ldr	r0, [r4, #12]
 8006310:	9b03      	ldr	r3, [sp, #12]
 8006312:	4298      	cmp	r0, r3
 8006314:	bfb8      	it	lt
 8006316:	4618      	movlt	r0, r3
 8006318:	e7a6      	b.n	8006268 <_printf_i+0x164>
 800631a:	2301      	movs	r3, #1
 800631c:	4632      	mov	r2, r6
 800631e:	4649      	mov	r1, r9
 8006320:	4640      	mov	r0, r8
 8006322:	47d0      	blx	sl
 8006324:	3001      	adds	r0, #1
 8006326:	d09d      	beq.n	8006264 <_printf_i+0x160>
 8006328:	3501      	adds	r5, #1
 800632a:	68e3      	ldr	r3, [r4, #12]
 800632c:	9903      	ldr	r1, [sp, #12]
 800632e:	1a5b      	subs	r3, r3, r1
 8006330:	42ab      	cmp	r3, r5
 8006332:	dcf2      	bgt.n	800631a <_printf_i+0x216>
 8006334:	e7eb      	b.n	800630e <_printf_i+0x20a>
 8006336:	2500      	movs	r5, #0
 8006338:	f104 0619 	add.w	r6, r4, #25
 800633c:	e7f5      	b.n	800632a <_printf_i+0x226>
 800633e:	bf00      	nop
 8006340:	080067f5 	.word	0x080067f5
 8006344:	08006806 	.word	0x08006806

08006348 <memmove>:
 8006348:	4288      	cmp	r0, r1
 800634a:	b510      	push	{r4, lr}
 800634c:	eb01 0402 	add.w	r4, r1, r2
 8006350:	d902      	bls.n	8006358 <memmove+0x10>
 8006352:	4284      	cmp	r4, r0
 8006354:	4623      	mov	r3, r4
 8006356:	d807      	bhi.n	8006368 <memmove+0x20>
 8006358:	1e43      	subs	r3, r0, #1
 800635a:	42a1      	cmp	r1, r4
 800635c:	d008      	beq.n	8006370 <memmove+0x28>
 800635e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006366:	e7f8      	b.n	800635a <memmove+0x12>
 8006368:	4402      	add	r2, r0
 800636a:	4601      	mov	r1, r0
 800636c:	428a      	cmp	r2, r1
 800636e:	d100      	bne.n	8006372 <memmove+0x2a>
 8006370:	bd10      	pop	{r4, pc}
 8006372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800637a:	e7f7      	b.n	800636c <memmove+0x24>

0800637c <memcpy>:
 800637c:	440a      	add	r2, r1
 800637e:	4291      	cmp	r1, r2
 8006380:	f100 33ff 	add.w	r3, r0, #4294967295
 8006384:	d100      	bne.n	8006388 <memcpy+0xc>
 8006386:	4770      	bx	lr
 8006388:	b510      	push	{r4, lr}
 800638a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800638e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006392:	4291      	cmp	r1, r2
 8006394:	d1f9      	bne.n	800638a <memcpy+0xe>
 8006396:	bd10      	pop	{r4, pc}

08006398 <_realloc_r>:
 8006398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800639c:	4680      	mov	r8, r0
 800639e:	4614      	mov	r4, r2
 80063a0:	460e      	mov	r6, r1
 80063a2:	b921      	cbnz	r1, 80063ae <_realloc_r+0x16>
 80063a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063a8:	4611      	mov	r1, r2
 80063aa:	f7ff bba9 	b.w	8005b00 <_malloc_r>
 80063ae:	b92a      	cbnz	r2, 80063bc <_realloc_r+0x24>
 80063b0:	f7ff fc96 	bl	8005ce0 <_free_r>
 80063b4:	4625      	mov	r5, r4
 80063b6:	4628      	mov	r0, r5
 80063b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063bc:	f000 f81b 	bl	80063f6 <_malloc_usable_size_r>
 80063c0:	4284      	cmp	r4, r0
 80063c2:	4607      	mov	r7, r0
 80063c4:	d802      	bhi.n	80063cc <_realloc_r+0x34>
 80063c6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063ca:	d812      	bhi.n	80063f2 <_realloc_r+0x5a>
 80063cc:	4621      	mov	r1, r4
 80063ce:	4640      	mov	r0, r8
 80063d0:	f7ff fb96 	bl	8005b00 <_malloc_r>
 80063d4:	4605      	mov	r5, r0
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d0ed      	beq.n	80063b6 <_realloc_r+0x1e>
 80063da:	42bc      	cmp	r4, r7
 80063dc:	4622      	mov	r2, r4
 80063de:	4631      	mov	r1, r6
 80063e0:	bf28      	it	cs
 80063e2:	463a      	movcs	r2, r7
 80063e4:	f7ff ffca 	bl	800637c <memcpy>
 80063e8:	4631      	mov	r1, r6
 80063ea:	4640      	mov	r0, r8
 80063ec:	f7ff fc78 	bl	8005ce0 <_free_r>
 80063f0:	e7e1      	b.n	80063b6 <_realloc_r+0x1e>
 80063f2:	4635      	mov	r5, r6
 80063f4:	e7df      	b.n	80063b6 <_realloc_r+0x1e>

080063f6 <_malloc_usable_size_r>:
 80063f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063fa:	1f18      	subs	r0, r3, #4
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	bfbc      	itt	lt
 8006400:	580b      	ldrlt	r3, [r1, r0]
 8006402:	18c0      	addlt	r0, r0, r3
 8006404:	4770      	bx	lr
	...

08006408 <expf>:
 8006408:	b508      	push	{r3, lr}
 800640a:	ed2d 8b02 	vpush	{d8}
 800640e:	eef0 8a40 	vmov.f32	s17, s0
 8006412:	f000 f87f 	bl	8006514 <__ieee754_expf>
 8006416:	eeb0 8a40 	vmov.f32	s16, s0
 800641a:	eeb0 0a68 	vmov.f32	s0, s17
 800641e:	f000 f829 	bl	8006474 <finitef>
 8006422:	b160      	cbz	r0, 800643e <expf+0x36>
 8006424:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8006464 <expf+0x5c>
 8006428:	eef4 8ae7 	vcmpe.f32	s17, s15
 800642c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006430:	dd0a      	ble.n	8006448 <expf+0x40>
 8006432:	f7ff fc29 	bl	8005c88 <__errno>
 8006436:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8006468 <expf+0x60>
 800643a:	2322      	movs	r3, #34	; 0x22
 800643c:	6003      	str	r3, [r0, #0]
 800643e:	eeb0 0a48 	vmov.f32	s0, s16
 8006442:	ecbd 8b02 	vpop	{d8}
 8006446:	bd08      	pop	{r3, pc}
 8006448:	eddf 7a08 	vldr	s15, [pc, #32]	; 800646c <expf+0x64>
 800644c:	eef4 8ae7 	vcmpe.f32	s17, s15
 8006450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006454:	d5f3      	bpl.n	800643e <expf+0x36>
 8006456:	f7ff fc17 	bl	8005c88 <__errno>
 800645a:	2322      	movs	r3, #34	; 0x22
 800645c:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8006470 <expf+0x68>
 8006460:	6003      	str	r3, [r0, #0]
 8006462:	e7ec      	b.n	800643e <expf+0x36>
 8006464:	42b17217 	.word	0x42b17217
 8006468:	7f800000 	.word	0x7f800000
 800646c:	c2cff1b5 	.word	0xc2cff1b5
 8006470:	00000000 	.word	0x00000000

08006474 <finitef>:
 8006474:	b082      	sub	sp, #8
 8006476:	ed8d 0a01 	vstr	s0, [sp, #4]
 800647a:	9801      	ldr	r0, [sp, #4]
 800647c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006480:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006484:	bfac      	ite	ge
 8006486:	2000      	movge	r0, #0
 8006488:	2001      	movlt	r0, #1
 800648a:	b002      	add	sp, #8
 800648c:	4770      	bx	lr
	...

08006490 <ceilf>:
 8006490:	ee10 3a10 	vmov	r3, s0
 8006494:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006498:	3a7f      	subs	r2, #127	; 0x7f
 800649a:	2a16      	cmp	r2, #22
 800649c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80064a0:	dc2a      	bgt.n	80064f8 <ceilf+0x68>
 80064a2:	2a00      	cmp	r2, #0
 80064a4:	da11      	bge.n	80064ca <ceilf+0x3a>
 80064a6:	eddf 7a19 	vldr	s15, [pc, #100]	; 800650c <ceilf+0x7c>
 80064aa:	ee30 0a27 	vadd.f32	s0, s0, s15
 80064ae:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80064b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064b6:	dd05      	ble.n	80064c4 <ceilf+0x34>
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	db23      	blt.n	8006504 <ceilf+0x74>
 80064bc:	2900      	cmp	r1, #0
 80064be:	bf18      	it	ne
 80064c0:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 80064c4:	ee00 3a10 	vmov	s0, r3
 80064c8:	4770      	bx	lr
 80064ca:	4911      	ldr	r1, [pc, #68]	; (8006510 <ceilf+0x80>)
 80064cc:	4111      	asrs	r1, r2
 80064ce:	420b      	tst	r3, r1
 80064d0:	d0fa      	beq.n	80064c8 <ceilf+0x38>
 80064d2:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800650c <ceilf+0x7c>
 80064d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80064da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80064de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e2:	ddef      	ble.n	80064c4 <ceilf+0x34>
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	bfc2      	ittt	gt
 80064e8:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80064ec:	fa40 f202 	asrgt.w	r2, r0, r2
 80064f0:	189b      	addgt	r3, r3, r2
 80064f2:	ea23 0301 	bic.w	r3, r3, r1
 80064f6:	e7e5      	b.n	80064c4 <ceilf+0x34>
 80064f8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80064fc:	d3e4      	bcc.n	80064c8 <ceilf+0x38>
 80064fe:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006502:	4770      	bx	lr
 8006504:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006508:	e7dc      	b.n	80064c4 <ceilf+0x34>
 800650a:	bf00      	nop
 800650c:	7149f2ca 	.word	0x7149f2ca
 8006510:	007fffff 	.word	0x007fffff

08006514 <__ieee754_expf>:
 8006514:	ee10 2a10 	vmov	r2, s0
 8006518:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800651c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006520:	d902      	bls.n	8006528 <__ieee754_expf+0x14>
 8006522:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006526:	4770      	bx	lr
 8006528:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800652c:	d106      	bne.n	800653c <__ieee754_expf+0x28>
 800652e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8006668 <__ieee754_expf+0x154>
 8006532:	2900      	cmp	r1, #0
 8006534:	bf18      	it	ne
 8006536:	eeb0 0a67 	vmovne.f32	s0, s15
 800653a:	4770      	bx	lr
 800653c:	484b      	ldr	r0, [pc, #300]	; (800666c <__ieee754_expf+0x158>)
 800653e:	4282      	cmp	r2, r0
 8006540:	dd02      	ble.n	8006548 <__ieee754_expf+0x34>
 8006542:	2000      	movs	r0, #0
 8006544:	f000 b8d0 	b.w	80066e8 <__math_oflowf>
 8006548:	2a00      	cmp	r2, #0
 800654a:	da05      	bge.n	8006558 <__ieee754_expf+0x44>
 800654c:	4a48      	ldr	r2, [pc, #288]	; (8006670 <__ieee754_expf+0x15c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d902      	bls.n	8006558 <__ieee754_expf+0x44>
 8006552:	2000      	movs	r0, #0
 8006554:	f000 b8c2 	b.w	80066dc <__math_uflowf>
 8006558:	4a46      	ldr	r2, [pc, #280]	; (8006674 <__ieee754_expf+0x160>)
 800655a:	4293      	cmp	r3, r2
 800655c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006560:	d952      	bls.n	8006608 <__ieee754_expf+0xf4>
 8006562:	4a45      	ldr	r2, [pc, #276]	; (8006678 <__ieee754_expf+0x164>)
 8006564:	4293      	cmp	r3, r2
 8006566:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800656a:	d834      	bhi.n	80065d6 <__ieee754_expf+0xc2>
 800656c:	4b43      	ldr	r3, [pc, #268]	; (800667c <__ieee754_expf+0x168>)
 800656e:	4413      	add	r3, r2
 8006570:	ed93 7a00 	vldr	s14, [r3]
 8006574:	4b42      	ldr	r3, [pc, #264]	; (8006680 <__ieee754_expf+0x16c>)
 8006576:	4413      	add	r3, r2
 8006578:	ee30 7a47 	vsub.f32	s14, s0, s14
 800657c:	f1c1 0201 	rsb	r2, r1, #1
 8006580:	edd3 7a00 	vldr	s15, [r3]
 8006584:	1a52      	subs	r2, r2, r1
 8006586:	ee37 0a67 	vsub.f32	s0, s14, s15
 800658a:	ee20 6a00 	vmul.f32	s12, s0, s0
 800658e:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8006684 <__ieee754_expf+0x170>
 8006592:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006688 <__ieee754_expf+0x174>
 8006596:	eee6 6a05 	vfma.f32	s13, s12, s10
 800659a:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800668c <__ieee754_expf+0x178>
 800659e:	eea6 5a86 	vfma.f32	s10, s13, s12
 80065a2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006690 <__ieee754_expf+0x17c>
 80065a6:	eee5 6a06 	vfma.f32	s13, s10, s12
 80065aa:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8006694 <__ieee754_expf+0x180>
 80065ae:	eea6 5a86 	vfma.f32	s10, s13, s12
 80065b2:	eef0 6a40 	vmov.f32	s13, s0
 80065b6:	eee5 6a46 	vfms.f32	s13, s10, s12
 80065ba:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80065be:	ee20 5a26 	vmul.f32	s10, s0, s13
 80065c2:	bb92      	cbnz	r2, 800662a <__ieee754_expf+0x116>
 80065c4:	ee76 6ac6 	vsub.f32	s13, s13, s12
 80065c8:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80065cc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80065d0:	ee35 0ac0 	vsub.f32	s0, s11, s0
 80065d4:	4770      	bx	lr
 80065d6:	4b30      	ldr	r3, [pc, #192]	; (8006698 <__ieee754_expf+0x184>)
 80065d8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800669c <__ieee754_expf+0x188>
 80065dc:	eddf 6a30 	vldr	s13, [pc, #192]	; 80066a0 <__ieee754_expf+0x18c>
 80065e0:	4413      	add	r3, r2
 80065e2:	edd3 7a00 	vldr	s15, [r3]
 80065e6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80065ea:	eeb0 7a40 	vmov.f32	s14, s0
 80065ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80065f2:	ee17 2a90 	vmov	r2, s15
 80065f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065fa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80065fe:	eddf 6a29 	vldr	s13, [pc, #164]	; 80066a4 <__ieee754_expf+0x190>
 8006602:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006606:	e7be      	b.n	8006586 <__ieee754_expf+0x72>
 8006608:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800660c:	d20b      	bcs.n	8006626 <__ieee754_expf+0x112>
 800660e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80066a8 <__ieee754_expf+0x194>
 8006612:	ee70 6a26 	vadd.f32	s13, s0, s13
 8006616:	eef4 6ae5 	vcmpe.f32	s13, s11
 800661a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800661e:	dd02      	ble.n	8006626 <__ieee754_expf+0x112>
 8006620:	ee30 0a25 	vadd.f32	s0, s0, s11
 8006624:	4770      	bx	lr
 8006626:	2200      	movs	r2, #0
 8006628:	e7af      	b.n	800658a <__ieee754_expf+0x76>
 800662a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800662e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8006632:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8006636:	bfb8      	it	lt
 8006638:	3264      	addlt	r2, #100	; 0x64
 800663a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800663e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006642:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8006646:	ee17 3a90 	vmov	r3, s15
 800664a:	bfab      	itete	ge
 800664c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8006650:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8006654:	ee00 3a10 	vmovge	s0, r3
 8006658:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80066ac <__ieee754_expf+0x198>
 800665c:	bfbc      	itt	lt
 800665e:	ee00 3a10 	vmovlt	s0, r3
 8006662:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8006666:	4770      	bx	lr
 8006668:	00000000 	.word	0x00000000
 800666c:	42b17217 	.word	0x42b17217
 8006670:	42cff1b5 	.word	0x42cff1b5
 8006674:	3eb17218 	.word	0x3eb17218
 8006678:	3f851591 	.word	0x3f851591
 800667c:	08006820 	.word	0x08006820
 8006680:	08006828 	.word	0x08006828
 8006684:	3331bb4c 	.word	0x3331bb4c
 8006688:	b5ddea0e 	.word	0xb5ddea0e
 800668c:	388ab355 	.word	0x388ab355
 8006690:	bb360b61 	.word	0xbb360b61
 8006694:	3e2aaaab 	.word	0x3e2aaaab
 8006698:	08006818 	.word	0x08006818
 800669c:	3fb8aa3b 	.word	0x3fb8aa3b
 80066a0:	3f317180 	.word	0x3f317180
 80066a4:	3717f7d1 	.word	0x3717f7d1
 80066a8:	7149f2ca 	.word	0x7149f2ca
 80066ac:	0d800000 	.word	0x0d800000

080066b0 <with_errnof>:
 80066b0:	b513      	push	{r0, r1, r4, lr}
 80066b2:	4604      	mov	r4, r0
 80066b4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80066b8:	f7ff fae6 	bl	8005c88 <__errno>
 80066bc:	ed9d 0a01 	vldr	s0, [sp, #4]
 80066c0:	6004      	str	r4, [r0, #0]
 80066c2:	b002      	add	sp, #8
 80066c4:	bd10      	pop	{r4, pc}

080066c6 <xflowf>:
 80066c6:	b130      	cbz	r0, 80066d6 <xflowf+0x10>
 80066c8:	eef1 7a40 	vneg.f32	s15, s0
 80066cc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80066d0:	2022      	movs	r0, #34	; 0x22
 80066d2:	f7ff bfed 	b.w	80066b0 <with_errnof>
 80066d6:	eef0 7a40 	vmov.f32	s15, s0
 80066da:	e7f7      	b.n	80066cc <xflowf+0x6>

080066dc <__math_uflowf>:
 80066dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80066e4 <__math_uflowf+0x8>
 80066e0:	f7ff bff1 	b.w	80066c6 <xflowf>
 80066e4:	10000000 	.word	0x10000000

080066e8 <__math_oflowf>:
 80066e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80066f0 <__math_oflowf+0x8>
 80066ec:	f7ff bfeb 	b.w	80066c6 <xflowf>
 80066f0:	70000000 	.word	0x70000000

080066f4 <_init>:
 80066f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f6:	bf00      	nop
 80066f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066fa:	bc08      	pop	{r3}
 80066fc:	469e      	mov	lr, r3
 80066fe:	4770      	bx	lr

08006700 <_fini>:
 8006700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006702:	bf00      	nop
 8006704:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006706:	bc08      	pop	{r3}
 8006708:	469e      	mov	lr, r3
 800670a:	4770      	bx	lr
