
mcu-workshop-take2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d34  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005ed4  08005ed4  00015ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fac  08005fac  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fac  08005fac  00015fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb4  08005fb4  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb4  08005fb4  00015fb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005fbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000005c  08006018  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08006018  00020318  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011011  00000000  00000000  0002011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002315  00000000  00000000  00031130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001010  00000000  00000000  00033448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cb3  00000000  00000000  00034458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017897  00000000  00000000  0003510b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000138bd  00000000  00000000  0004c9a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009617e  00000000  00000000  0006025f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004cc8  00000000  00000000  000f63e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  000fb0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005ebc 	.word	0x08005ebc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08005ebc 	.word	0x08005ebc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_uldivmod>:
 800096c:	b953      	cbnz	r3, 8000984 <__aeabi_uldivmod+0x18>
 800096e:	b94a      	cbnz	r2, 8000984 <__aeabi_uldivmod+0x18>
 8000970:	2900      	cmp	r1, #0
 8000972:	bf08      	it	eq
 8000974:	2800      	cmpeq	r0, #0
 8000976:	bf1c      	itt	ne
 8000978:	f04f 31ff 	movne.w	r1, #4294967295
 800097c:	f04f 30ff 	movne.w	r0, #4294967295
 8000980:	f000 b970 	b.w	8000c64 <__aeabi_idiv0>
 8000984:	f1ad 0c08 	sub.w	ip, sp, #8
 8000988:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800098c:	f000 f806 	bl	800099c <__udivmoddi4>
 8000990:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000998:	b004      	add	sp, #16
 800099a:	4770      	bx	lr

0800099c <__udivmoddi4>:
 800099c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a0:	9e08      	ldr	r6, [sp, #32]
 80009a2:	460d      	mov	r5, r1
 80009a4:	4604      	mov	r4, r0
 80009a6:	460f      	mov	r7, r1
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d14a      	bne.n	8000a42 <__udivmoddi4+0xa6>
 80009ac:	428a      	cmp	r2, r1
 80009ae:	4694      	mov	ip, r2
 80009b0:	d965      	bls.n	8000a7e <__udivmoddi4+0xe2>
 80009b2:	fab2 f382 	clz	r3, r2
 80009b6:	b143      	cbz	r3, 80009ca <__udivmoddi4+0x2e>
 80009b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80009bc:	f1c3 0220 	rsb	r2, r3, #32
 80009c0:	409f      	lsls	r7, r3
 80009c2:	fa20 f202 	lsr.w	r2, r0, r2
 80009c6:	4317      	orrs	r7, r2
 80009c8:	409c      	lsls	r4, r3
 80009ca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009ce:	fa1f f58c 	uxth.w	r5, ip
 80009d2:	fbb7 f1fe 	udiv	r1, r7, lr
 80009d6:	0c22      	lsrs	r2, r4, #16
 80009d8:	fb0e 7711 	mls	r7, lr, r1, r7
 80009dc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009e0:	fb01 f005 	mul.w	r0, r1, r5
 80009e4:	4290      	cmp	r0, r2
 80009e6:	d90a      	bls.n	80009fe <__udivmoddi4+0x62>
 80009e8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ec:	f101 37ff 	add.w	r7, r1, #4294967295
 80009f0:	f080 811c 	bcs.w	8000c2c <__udivmoddi4+0x290>
 80009f4:	4290      	cmp	r0, r2
 80009f6:	f240 8119 	bls.w	8000c2c <__udivmoddi4+0x290>
 80009fa:	3902      	subs	r1, #2
 80009fc:	4462      	add	r2, ip
 80009fe:	1a12      	subs	r2, r2, r0
 8000a00:	b2a4      	uxth	r4, r4
 8000a02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a0e:	fb00 f505 	mul.w	r5, r0, r5
 8000a12:	42a5      	cmp	r5, r4
 8000a14:	d90a      	bls.n	8000a2c <__udivmoddi4+0x90>
 8000a16:	eb1c 0404 	adds.w	r4, ip, r4
 8000a1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a1e:	f080 8107 	bcs.w	8000c30 <__udivmoddi4+0x294>
 8000a22:	42a5      	cmp	r5, r4
 8000a24:	f240 8104 	bls.w	8000c30 <__udivmoddi4+0x294>
 8000a28:	4464      	add	r4, ip
 8000a2a:	3802      	subs	r0, #2
 8000a2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a30:	1b64      	subs	r4, r4, r5
 8000a32:	2100      	movs	r1, #0
 8000a34:	b11e      	cbz	r6, 8000a3e <__udivmoddi4+0xa2>
 8000a36:	40dc      	lsrs	r4, r3
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0xbc>
 8000a46:	2e00      	cmp	r6, #0
 8000a48:	f000 80ed 	beq.w	8000c26 <__udivmoddi4+0x28a>
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a52:	4608      	mov	r0, r1
 8000a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a58:	fab3 f183 	clz	r1, r3
 8000a5c:	2900      	cmp	r1, #0
 8000a5e:	d149      	bne.n	8000af4 <__udivmoddi4+0x158>
 8000a60:	42ab      	cmp	r3, r5
 8000a62:	d302      	bcc.n	8000a6a <__udivmoddi4+0xce>
 8000a64:	4282      	cmp	r2, r0
 8000a66:	f200 80f8 	bhi.w	8000c5a <__udivmoddi4+0x2be>
 8000a6a:	1a84      	subs	r4, r0, r2
 8000a6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a70:	2001      	movs	r0, #1
 8000a72:	4617      	mov	r7, r2
 8000a74:	2e00      	cmp	r6, #0
 8000a76:	d0e2      	beq.n	8000a3e <__udivmoddi4+0xa2>
 8000a78:	e9c6 4700 	strd	r4, r7, [r6]
 8000a7c:	e7df      	b.n	8000a3e <__udivmoddi4+0xa2>
 8000a7e:	b902      	cbnz	r2, 8000a82 <__udivmoddi4+0xe6>
 8000a80:	deff      	udf	#255	; 0xff
 8000a82:	fab2 f382 	clz	r3, r2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f040 8090 	bne.w	8000bac <__udivmoddi4+0x210>
 8000a8c:	1a8a      	subs	r2, r1, r2
 8000a8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a92:	fa1f fe8c 	uxth.w	lr, ip
 8000a96:	2101      	movs	r1, #1
 8000a98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000aa0:	0c22      	lsrs	r2, r4, #16
 8000aa2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000aa6:	fb0e f005 	mul.w	r0, lr, r5
 8000aaa:	4290      	cmp	r0, r2
 8000aac:	d908      	bls.n	8000ac0 <__udivmoddi4+0x124>
 8000aae:	eb1c 0202 	adds.w	r2, ip, r2
 8000ab2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0x122>
 8000ab8:	4290      	cmp	r0, r2
 8000aba:	f200 80cb 	bhi.w	8000c54 <__udivmoddi4+0x2b8>
 8000abe:	4645      	mov	r5, r8
 8000ac0:	1a12      	subs	r2, r2, r0
 8000ac2:	b2a4      	uxth	r4, r4
 8000ac4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ac8:	fb07 2210 	mls	r2, r7, r0, r2
 8000acc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ad0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ad4:	45a6      	cmp	lr, r4
 8000ad6:	d908      	bls.n	8000aea <__udivmoddi4+0x14e>
 8000ad8:	eb1c 0404 	adds.w	r4, ip, r4
 8000adc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ae0:	d202      	bcs.n	8000ae8 <__udivmoddi4+0x14c>
 8000ae2:	45a6      	cmp	lr, r4
 8000ae4:	f200 80bb 	bhi.w	8000c5e <__udivmoddi4+0x2c2>
 8000ae8:	4610      	mov	r0, r2
 8000aea:	eba4 040e 	sub.w	r4, r4, lr
 8000aee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000af2:	e79f      	b.n	8000a34 <__udivmoddi4+0x98>
 8000af4:	f1c1 0720 	rsb	r7, r1, #32
 8000af8:	408b      	lsls	r3, r1
 8000afa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000afe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b02:	fa05 f401 	lsl.w	r4, r5, r1
 8000b06:	fa20 f307 	lsr.w	r3, r0, r7
 8000b0a:	40fd      	lsrs	r5, r7
 8000b0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b10:	4323      	orrs	r3, r4
 8000b12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b16:	fa1f fe8c 	uxth.w	lr, ip
 8000b1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b1e:	0c1c      	lsrs	r4, r3, #16
 8000b20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b24:	fb08 f50e 	mul.w	r5, r8, lr
 8000b28:	42a5      	cmp	r5, r4
 8000b2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b32:	d90b      	bls.n	8000b4c <__udivmoddi4+0x1b0>
 8000b34:	eb1c 0404 	adds.w	r4, ip, r4
 8000b38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b3c:	f080 8088 	bcs.w	8000c50 <__udivmoddi4+0x2b4>
 8000b40:	42a5      	cmp	r5, r4
 8000b42:	f240 8085 	bls.w	8000c50 <__udivmoddi4+0x2b4>
 8000b46:	f1a8 0802 	sub.w	r8, r8, #2
 8000b4a:	4464      	add	r4, ip
 8000b4c:	1b64      	subs	r4, r4, r5
 8000b4e:	b29d      	uxth	r5, r3
 8000b50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b54:	fb09 4413 	mls	r4, r9, r3, r4
 8000b58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d908      	bls.n	8000b76 <__udivmoddi4+0x1da>
 8000b64:	eb1c 0404 	adds.w	r4, ip, r4
 8000b68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b6c:	d26c      	bcs.n	8000c48 <__udivmoddi4+0x2ac>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	d96a      	bls.n	8000c48 <__udivmoddi4+0x2ac>
 8000b72:	3b02      	subs	r3, #2
 8000b74:	4464      	add	r4, ip
 8000b76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b7e:	eba4 040e 	sub.w	r4, r4, lr
 8000b82:	42ac      	cmp	r4, r5
 8000b84:	46c8      	mov	r8, r9
 8000b86:	46ae      	mov	lr, r5
 8000b88:	d356      	bcc.n	8000c38 <__udivmoddi4+0x29c>
 8000b8a:	d053      	beq.n	8000c34 <__udivmoddi4+0x298>
 8000b8c:	b156      	cbz	r6, 8000ba4 <__udivmoddi4+0x208>
 8000b8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b92:	eb64 040e 	sbc.w	r4, r4, lr
 8000b96:	fa04 f707 	lsl.w	r7, r4, r7
 8000b9a:	40ca      	lsrs	r2, r1
 8000b9c:	40cc      	lsrs	r4, r1
 8000b9e:	4317      	orrs	r7, r2
 8000ba0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bac:	f1c3 0120 	rsb	r1, r3, #32
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000bb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000bbc:	409d      	lsls	r5, r3
 8000bbe:	432a      	orrs	r2, r5
 8000bc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bcc:	fb07 1510 	mls	r5, r7, r0, r1
 8000bd0:	0c11      	lsrs	r1, r2, #16
 8000bd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000bda:	428d      	cmp	r5, r1
 8000bdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x258>
 8000be2:	eb1c 0101 	adds.w	r1, ip, r1
 8000be6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bea:	d22f      	bcs.n	8000c4c <__udivmoddi4+0x2b0>
 8000bec:	428d      	cmp	r5, r1
 8000bee:	d92d      	bls.n	8000c4c <__udivmoddi4+0x2b0>
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1b49      	subs	r1, r1, r5
 8000bf6:	b292      	uxth	r2, r2
 8000bf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000c00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c04:	fb05 f10e 	mul.w	r1, r5, lr
 8000c08:	4291      	cmp	r1, r2
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x282>
 8000c0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c14:	d216      	bcs.n	8000c44 <__udivmoddi4+0x2a8>
 8000c16:	4291      	cmp	r1, r2
 8000c18:	d914      	bls.n	8000c44 <__udivmoddi4+0x2a8>
 8000c1a:	3d02      	subs	r5, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a52      	subs	r2, r2, r1
 8000c20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c24:	e738      	b.n	8000a98 <__udivmoddi4+0xfc>
 8000c26:	4631      	mov	r1, r6
 8000c28:	4630      	mov	r0, r6
 8000c2a:	e708      	b.n	8000a3e <__udivmoddi4+0xa2>
 8000c2c:	4639      	mov	r1, r7
 8000c2e:	e6e6      	b.n	80009fe <__udivmoddi4+0x62>
 8000c30:	4610      	mov	r0, r2
 8000c32:	e6fb      	b.n	8000a2c <__udivmoddi4+0x90>
 8000c34:	4548      	cmp	r0, r9
 8000c36:	d2a9      	bcs.n	8000b8c <__udivmoddi4+0x1f0>
 8000c38:	ebb9 0802 	subs.w	r8, r9, r2
 8000c3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c40:	3b01      	subs	r3, #1
 8000c42:	e7a3      	b.n	8000b8c <__udivmoddi4+0x1f0>
 8000c44:	4645      	mov	r5, r8
 8000c46:	e7ea      	b.n	8000c1e <__udivmoddi4+0x282>
 8000c48:	462b      	mov	r3, r5
 8000c4a:	e794      	b.n	8000b76 <__udivmoddi4+0x1da>
 8000c4c:	4640      	mov	r0, r8
 8000c4e:	e7d1      	b.n	8000bf4 <__udivmoddi4+0x258>
 8000c50:	46d0      	mov	r8, sl
 8000c52:	e77b      	b.n	8000b4c <__udivmoddi4+0x1b0>
 8000c54:	3d02      	subs	r5, #2
 8000c56:	4462      	add	r2, ip
 8000c58:	e732      	b.n	8000ac0 <__udivmoddi4+0x124>
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e70a      	b.n	8000a74 <__udivmoddi4+0xd8>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	e742      	b.n	8000aea <__udivmoddi4+0x14e>

08000c64 <__aeabi_idiv0>:
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f000 fcae 	bl	80015cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f86a 	bl	8000d48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f000 f9b6 	bl	8000fe4 <MX_GPIO_Init>
  MX_CRC_Init();
 8000c78:	f000 f8d4 	bl	8000e24 <MX_CRC_Init>
  MX_I2C3_Init();
 8000c7c:	f000 f8e6 	bl	8000e4c <MX_I2C3_Init>
  MX_RTC_Init();
 8000c80:	f000 f912 	bl	8000ea8 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000c84:	f000 f984 	bl	8000f90 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000c88:	f000 f934 	bl	8000ef4 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  // Debug
  sprintf(msg, "Timer Starting.\r\n");
 8000c8c:	4924      	ldr	r1, [pc, #144]	; (8000d20 <main+0xb8>)
 8000c8e:	4825      	ldr	r0, [pc, #148]	; (8000d24 <main+0xbc>)
 8000c90:	f004 fba6 	bl	80053e0 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000c94:	4823      	ldr	r0, [pc, #140]	; (8000d24 <main+0xbc>)
 8000c96:	f7ff faa3 	bl	80001e0 <strlen>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	4920      	ldr	r1, [pc, #128]	; (8000d24 <main+0xbc>)
 8000ca4:	4820      	ldr	r0, [pc, #128]	; (8000d28 <main+0xc0>)
 8000ca6:	f003 f931 	bl	8003f0c <HAL_UART_Transmit>

  // Start Timer
  // Enable the TIM4 peripheral
  //__HAL_RCC_TIM4_CLK_ENABLE();
  HAL_NVIC_SetPriority(TIM4_IRQn, 1, 1);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2101      	movs	r1, #1
 8000cae:	201e      	movs	r0, #30
 8000cb0:	f000 fdd9 	bl	8001866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cb4:	201e      	movs	r0, #30
 8000cb6:	f000 fdf2 	bl	800189e <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim4);
 8000cba:	481c      	ldr	r0, [pc, #112]	; (8000d2c <main+0xc4>)
 8000cbc:	f002 fcec 	bl	8003698 <HAL_TIM_Base_Start_IT>

  // Initialise infraredPD instance
  InfraredPD_Initialize(mcu);
 8000cc0:	4b1b      	ldr	r3, [pc, #108]	; (8000d30 <main+0xc8>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 fcdd 	bl	8004684 <InfraredPD_Initialize>
  IPD_Instance = InfraredPD_CreateInstance(&algo_conf);
 8000cca:	481a      	ldr	r0, [pc, #104]	; (8000d34 <main+0xcc>)
 8000ccc:	f003 fd76 	bl	80047bc <InfraredPD_CreateInstance>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <main+0xd0>)
 8000cd4:	6013      	str	r3, [r2, #0]

  device_conf.odr = 30;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <main+0xd4>)
 8000cd8:	221e      	movs	r2, #30
 8000cda:	701a      	strb	r2, [r3, #0]
  device_conf.avg_tmos = 32;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <main+0xd4>)
 8000cde:	2220      	movs	r2, #32
 8000ce0:	805a      	strh	r2, [r3, #2]
  device_conf.avg_t = 8;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <main+0xd4>)
 8000ce4:	2208      	movs	r2, #8
 8000ce6:	711a      	strb	r2, [r3, #4]

  status = InfraredPD_Start(IPD_Instance, &device_conf, &algo_conf);
 8000ce8:	4b13      	ldr	r3, [pc, #76]	; (8000d38 <main+0xd0>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <main+0xcc>)
 8000cee:	4913      	ldr	r1, [pc, #76]	; (8000d3c <main+0xd4>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fd7d 	bl	80047f0 <InfraredPD_Start>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <main+0xd8>)
 8000cfc:	701a      	strb	r2, [r3, #0]

  // Debug
  sprintf(msg, "Program Starting.");
 8000cfe:	4911      	ldr	r1, [pc, #68]	; (8000d44 <main+0xdc>)
 8000d00:	4808      	ldr	r0, [pc, #32]	; (8000d24 <main+0xbc>)
 8000d02:	f004 fb6d 	bl	80053e0 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000d06:	4807      	ldr	r0, [pc, #28]	; (8000d24 <main+0xbc>)
 8000d08:	f7ff fa6a 	bl	80001e0 <strlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
 8000d14:	4903      	ldr	r1, [pc, #12]	; (8000d24 <main+0xbc>)
 8000d16:	4804      	ldr	r0, [pc, #16]	; (8000d28 <main+0xc0>)
 8000d18:	f003 f8f8 	bl	8003f0c <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <main+0xb4>
 8000d1e:	bf00      	nop
 8000d20:	08005ed4 	.word	0x08005ed4
 8000d24:	2000007c 	.word	0x2000007c
 8000d28:	20000158 	.word	0x20000158
 8000d2c:	20000110 	.word	0x20000110
 8000d30:	200001ac 	.word	0x200001ac
 8000d34:	200001b0 	.word	0x200001b0
 8000d38:	200001a8 	.word	0x200001a8
 8000d3c:	200001b8 	.word	0x200001b8
 8000d40:	200001c4 	.word	0x200001c4
 8000d44:	08005ee8 	.word	0x08005ee8

08000d48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b094      	sub	sp, #80	; 0x50
 8000d4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d4e:	f107 0320 	add.w	r3, r7, #32
 8000d52:	2230      	movs	r2, #48	; 0x30
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f004 fb62 	bl	8005420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	4b2a      	ldr	r3, [pc, #168]	; (8000e1c <SystemClock_Config+0xd4>)
 8000d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d74:	4a29      	ldr	r2, [pc, #164]	; (8000e1c <SystemClock_Config+0xd4>)
 8000d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d7c:	4b27      	ldr	r3, [pc, #156]	; (8000e1c <SystemClock_Config+0xd4>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	4b24      	ldr	r3, [pc, #144]	; (8000e20 <SystemClock_Config+0xd8>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d94:	4a22      	ldr	r2, [pc, #136]	; (8000e20 <SystemClock_Config+0xd8>)
 8000d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d9a:	6013      	str	r3, [r2, #0]
 8000d9c:	4b20      	ldr	r3, [pc, #128]	; (8000e20 <SystemClock_Config+0xd8>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000da8:	230a      	movs	r3, #10
 8000daa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dac:	2301      	movs	r3, #1
 8000dae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db0:	2310      	movs	r3, #16
 8000db2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000db4:	2301      	movs	r3, #1
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db8:	2302      	movs	r3, #2
 8000dba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dc0:	2310      	movs	r3, #16
 8000dc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dc4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dca:	2304      	movs	r3, #4
 8000dcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dce:	2307      	movs	r3, #7
 8000dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	f107 0320 	add.w	r3, r7, #32
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f001 fd82 	bl	80028e0 <HAL_RCC_OscConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000de2:	f000 f9f9 	bl	80011d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	230f      	movs	r3, #15
 8000de8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dea:	2302      	movs	r3, #2
 8000dec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2102      	movs	r1, #2
 8000e02:	4618      	mov	r0, r3
 8000e04:	f001 ffe4 	bl	8002dd0 <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e0e:	f000 f9e3 	bl	80011d8 <Error_Handler>
  }
}
 8000e12:	bf00      	nop
 8000e14:	3750      	adds	r7, #80	; 0x50
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40007000 	.word	0x40007000

08000e24 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <MX_CRC_Init+0x20>)
 8000e2a:	4a07      	ldr	r2, [pc, #28]	; (8000e48 <MX_CRC_Init+0x24>)
 8000e2c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e2e:	4805      	ldr	r0, [pc, #20]	; (8000e44 <MX_CRC_Init+0x20>)
 8000e30:	f000 fd4f 	bl	80018d2 <HAL_CRC_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e3a:	f000 f9cd 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e3e:	bf00      	nop
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	20000094 	.word	0x20000094
 8000e48:	40023000 	.word	0x40023000

08000e4c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e52:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <MX_I2C3_Init+0x54>)
 8000e54:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e56:	4b11      	ldr	r3, [pc, #68]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e58:	4a12      	ldr	r2, [pc, #72]	; (8000ea4 <MX_I2C3_Init+0x58>)
 8000e5a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e5c:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e68:	4b0c      	ldr	r3, [pc, #48]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e6e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e70:	4b0a      	ldr	r3, [pc, #40]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e76:	4b09      	ldr	r3, [pc, #36]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e7c:	4b07      	ldr	r3, [pc, #28]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e82:	4b06      	ldr	r3, [pc, #24]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e88:	4804      	ldr	r0, [pc, #16]	; (8000e9c <MX_I2C3_Init+0x50>)
 8000e8a:	f000 fedd 	bl	8001c48 <HAL_I2C_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e94:	f000 f9a0 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	2000009c 	.word	0x2000009c
 8000ea0:	40005c00 	.word	0x40005c00
 8000ea4:	000186a0 	.word	0x000186a0

08000ea8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <MX_RTC_Init+0x44>)
 8000eae:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <MX_RTC_Init+0x48>)
 8000eb0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <MX_RTC_Init+0x44>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <MX_RTC_Init+0x44>)
 8000eba:	227f      	movs	r2, #127	; 0x7f
 8000ebc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <MX_RTC_Init+0x44>)
 8000ec0:	22ff      	movs	r2, #255	; 0xff
 8000ec2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ec4:	4b09      	ldr	r3, [pc, #36]	; (8000eec <MX_RTC_Init+0x44>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000eca:	4b08      	ldr	r3, [pc, #32]	; (8000eec <MX_RTC_Init+0x44>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_RTC_Init+0x44>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_RTC_Init+0x44>)
 8000ed8:	f002 fa88 	bl	80033ec <HAL_RTC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000ee2:	f000 f979 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000f0 	.word	0x200000f0
 8000ef0:	40002800 	.word	0x40002800

08000ef4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efa:	f107 0308 	add.w	r3, r7, #8
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f08:	463b      	mov	r3, r7
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	601a      	str	r2, [r3, #0]
 8000f0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f10:	4b1d      	ldr	r3, [pc, #116]	; (8000f88 <MX_TIM4_Init+0x94>)
 8000f12:	4a1e      	ldr	r2, [pc, #120]	; (8000f8c <MX_TIM4_Init+0x98>)
 8000f14:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 319;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	; (8000f88 <MX_TIM4_Init+0x94>)
 8000f18:	f240 123f 	movw	r2, #319	; 0x13f
 8000f1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	; (8000f88 <MX_TIM4_Init+0x94>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000f24:	4b18      	ldr	r3, [pc, #96]	; (8000f88 <MX_TIM4_Init+0x94>)
 8000f26:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2c:	4b16      	ldr	r3, [pc, #88]	; (8000f88 <MX_TIM4_Init+0x94>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f32:	4b15      	ldr	r3, [pc, #84]	; (8000f88 <MX_TIM4_Init+0x94>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f38:	4813      	ldr	r0, [pc, #76]	; (8000f88 <MX_TIM4_Init+0x94>)
 8000f3a:	f002 fb5d 	bl	80035f8 <HAL_TIM_Base_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000f44:	f000 f948 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f4e:	f107 0308 	add.w	r3, r7, #8
 8000f52:	4619      	mov	r1, r3
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <MX_TIM4_Init+0x94>)
 8000f56:	f002 fcf1 	bl	800393c <HAL_TIM_ConfigClockSource>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000f60:	f000 f93a 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f64:	2300      	movs	r3, #0
 8000f66:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <MX_TIM4_Init+0x94>)
 8000f72:	f002 fef9 	bl	8003d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000f7c:	f000 f92c 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000f80:	bf00      	nop
 8000f82:	3718      	adds	r7, #24
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000110 	.word	0x20000110
 8000f8c:	40000800 	.word	0x40000800

08000f90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <MX_USART2_UART_Init+0x50>)
 8000f98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000f9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fb4:	4b09      	ldr	r3, [pc, #36]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fb6:	220c      	movs	r2, #12
 8000fb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fba:	4b08      	ldr	r3, [pc, #32]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_USART2_UART_Init+0x4c>)
 8000fc8:	f002 ff50 	bl	8003e6c <HAL_UART_Init>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000fd2:	f000 f901 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000158 	.word	0x20000158
 8000fe0:	40004400 	.word	0x40004400

08000fe4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	; 0x28
 8000fe8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	4b26      	ldr	r3, [pc, #152]	; (8001098 <MX_GPIO_Init+0xb4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a25      	ldr	r2, [pc, #148]	; (8001098 <MX_GPIO_Init+0xb4>)
 8001004:	f043 0304 	orr.w	r3, r3, #4
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <MX_GPIO_Init+0xb4>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f003 0304 	and.w	r3, r3, #4
 8001012:	613b      	str	r3, [r7, #16]
 8001014:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b1f      	ldr	r3, [pc, #124]	; (8001098 <MX_GPIO_Init+0xb4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a1e      	ldr	r2, [pc, #120]	; (8001098 <MX_GPIO_Init+0xb4>)
 8001020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_GPIO_Init+0xb4>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	4b18      	ldr	r3, [pc, #96]	; (8001098 <MX_GPIO_Init+0xb4>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a17      	ldr	r2, [pc, #92]	; (8001098 <MX_GPIO_Init+0xb4>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b15      	ldr	r3, [pc, #84]	; (8001098 <MX_GPIO_Init+0xb4>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	4b11      	ldr	r3, [pc, #68]	; (8001098 <MX_GPIO_Init+0xb4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a10      	ldr	r2, [pc, #64]	; (8001098 <MX_GPIO_Init+0xb4>)
 8001058:	f043 0302 	orr.w	r3, r3, #2
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b0e      	ldr	r3, [pc, #56]	; (8001098 <MX_GPIO_Init+0xb4>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2120      	movs	r1, #32
 800106e:	480b      	ldr	r0, [pc, #44]	; (800109c <MX_GPIO_Init+0xb8>)
 8001070:	f000 fdd0 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001074:	2320      	movs	r3, #32
 8001076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4804      	ldr	r0, [pc, #16]	; (800109c <MX_GPIO_Init+0xb8>)
 800108c:	f000 fc3e 	bl	800190c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001090:	bf00      	nop
 8001092:	3728      	adds	r7, #40	; 0x28
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800
 800109c:	40020000 	.word	0x40020000

080010a0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a22      	ldr	r2, [pc, #136]	; (8001138 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d13d      	bne.n	800112e <HAL_TIM_PeriodElapsedCallback+0x8e>
		// InfraredPD functions
		IPD_input_t data_in;
		IPD_output_t data_out;

		// Debug
		sprintf(msg, "Running.\r\n");
 80010b2:	4922      	ldr	r1, [pc, #136]	; (800113c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80010b4:	4822      	ldr	r0, [pc, #136]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010b6:	f004 f993 	bl	80053e0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 80010ba:	4821      	ldr	r0, [pc, #132]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010bc:	f7ff f890 	bl	80001e0 <strlen>
 80010c0:	4603      	mov	r3, r0
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f04f 33ff 	mov.w	r3, #4294967295
 80010c8:	491d      	ldr	r1, [pc, #116]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80010ca:	481e      	ldr	r0, [pc, #120]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80010cc:	f002 ff1e 	bl	8003f0c <HAL_UART_Transmit>

		ReadSensor(data_in.t_amb, data_in.t_obj);
 80010d0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80010d4:	461a      	mov	r2, r3
 80010d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80010da:	4619      	mov	r1, r3
 80010dc:	4610      	mov	r0, r2
 80010de:	f000 f83f 	bl	8001160 <ReadSensor>

		InfraredPD_Update(&IPD_Instance, &data_in, &data_out);
 80010e2:	f107 020c 	add.w	r2, r7, #12
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4816      	ldr	r0, [pc, #88]	; (8001148 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80010ee:	f003 fd73 	bl	8004bd8 <InfraredPD_Update>

		ObjectTempComp = data_out.t_obj_comp;
 80010f2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80010f8:	801a      	strh	r2, [r3, #0]
		ObjectTempCompChange = data_out.t_obj_change;
 80010fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001100:	801a      	strh	r2, [r3, #0]
		MotionDetected = data_out.mot_flag;
 8001102:	7c3a      	ldrb	r2, [r7, #16]
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001106:	701a      	strb	r2, [r3, #0]
		PresenceDetected = data_out.pres_flag;
 8001108:	7c7a      	ldrb	r2, [r7, #17]
 800110a:	4b13      	ldr	r3, [pc, #76]	; (8001158 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800110c:	701a      	strb	r2, [r3, #0]

		sprintf(msg, "ObjectTemp: %u\n\r", &ObjectTempComp);
 800110e:	4a0f      	ldr	r2, [pc, #60]	; (800114c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001110:	4912      	ldr	r1, [pc, #72]	; (800115c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001112:	480b      	ldr	r0, [pc, #44]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001114:	f004 f964 	bl	80053e0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001118:	4809      	ldr	r0, [pc, #36]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800111a:	f7ff f861 	bl	80001e0 <strlen>
 800111e:	4603      	mov	r3, r0
 8001120:	b29a      	uxth	r2, r3
 8001122:	f04f 33ff 	mov.w	r3, #4294967295
 8001126:	4906      	ldr	r1, [pc, #24]	; (8001140 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001128:	4806      	ldr	r0, [pc, #24]	; (8001144 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800112a:	f002 feef 	bl	8003f0c <HAL_UART_Transmit>
	}
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40000800 	.word	0x40000800
 800113c:	08005efc 	.word	0x08005efc
 8001140:	2000007c 	.word	0x2000007c
 8001144:	20000158 	.word	0x20000158
 8001148:	200001a8 	.word	0x200001a8
 800114c:	200001a0 	.word	0x200001a0
 8001150:	200001a2 	.word	0x200001a2
 8001154:	200001a4 	.word	0x200001a4
 8001158:	200001a5 	.word	0x200001a5
 800115c:	08005f08 	.word	0x08005f08

08001160 <ReadSensor>:

void ReadSensor(int16_t *ambientTemp, int16_t *objectTemp) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af04      	add	r7, sp, #16
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
    uint8_t tempBytes[4];

    // Read ambient temperature
    HAL_I2C_Mem_Read(&hi2c3, STHS34PF80_I2C_ADDR << 1, TAMBIENT_L, I2C_MEMADD_SIZE_8BIT, tempBytes, 2, 1000);
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	9302      	str	r3, [sp, #8]
 8001170:	2302      	movs	r3, #2
 8001172:	9301      	str	r3, [sp, #4]
 8001174:	f107 0308 	add.w	r3, r7, #8
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2301      	movs	r3, #1
 800117c:	2228      	movs	r2, #40	; 0x28
 800117e:	211e      	movs	r1, #30
 8001180:	4814      	ldr	r0, [pc, #80]	; (80011d4 <ReadSensor+0x74>)
 8001182:	f000 fea5 	bl	8001ed0 <HAL_I2C_Mem_Read>
    int16_t ambientTempRaw = (tempBytes[1] << 8) | tempBytes[0];
 8001186:	7a7b      	ldrb	r3, [r7, #9]
 8001188:	021b      	lsls	r3, r3, #8
 800118a:	b21a      	sxth	r2, r3
 800118c:	7a3b      	ldrb	r3, [r7, #8]
 800118e:	b21b      	sxth	r3, r3
 8001190:	4313      	orrs	r3, r2
 8001192:	81fb      	strh	r3, [r7, #14]

    // Read object temperature
    HAL_I2C_Mem_Read(&hi2c3, STHS34PF80_I2C_ADDR << 1, TOBJECT_L, I2C_MEMADD_SIZE_8BIT, tempBytes + 2, 2, 1000);
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	3302      	adds	r3, #2
 800119a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800119e:	9202      	str	r2, [sp, #8]
 80011a0:	2202      	movs	r2, #2
 80011a2:	9201      	str	r2, [sp, #4]
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	2301      	movs	r3, #1
 80011a8:	2226      	movs	r2, #38	; 0x26
 80011aa:	211e      	movs	r1, #30
 80011ac:	4809      	ldr	r0, [pc, #36]	; (80011d4 <ReadSensor+0x74>)
 80011ae:	f000 fe8f 	bl	8001ed0 <HAL_I2C_Mem_Read>
    int16_t objectTempRaw = (tempBytes[3] << 8) | tempBytes[2];
 80011b2:	7afb      	ldrb	r3, [r7, #11]
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	7abb      	ldrb	r3, [r7, #10]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	81bb      	strh	r3, [r7, #12]

    // Convert raw data to temperature (assuming sensitivity and calibration handled elsewhere)
    *ambientTemp = ambientTempRaw;  // Example conversion factor
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	89fa      	ldrh	r2, [r7, #14]
 80011c4:	801a      	strh	r2, [r3, #0]
    *objectTemp = objectTempRaw; // Example conversion factor
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	89ba      	ldrh	r2, [r7, #12]
 80011ca:	801a      	strh	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	2000009c 	.word	0x2000009c

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <Error_Handler+0x8>
	...

080011e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b10      	ldr	r3, [pc, #64]	; (8001230 <HAL_MspInit+0x4c>)
 80011f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f2:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <HAL_MspInit+0x4c>)
 80011f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f8:	6453      	str	r3, [r2, #68]	; 0x44
 80011fa:	4b0d      	ldr	r3, [pc, #52]	; (8001230 <HAL_MspInit+0x4c>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	4a08      	ldr	r2, [pc, #32]	; (8001230 <HAL_MspInit+0x4c>)
 8001210:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001214:	6413      	str	r3, [r2, #64]	; 0x40
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_MspInit+0x4c>)
 8001218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001222:	2007      	movs	r0, #7
 8001224:	f000 fb14 	bl	8001850 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40023800 	.word	0x40023800

08001234 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001234:	b480      	push	{r7}
 8001236:	b085      	sub	sp, #20
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0b      	ldr	r2, [pc, #44]	; (8001270 <HAL_CRC_MspInit+0x3c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d10d      	bne.n	8001262 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_CRC_MspInit+0x40>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a09      	ldr	r2, [pc, #36]	; (8001274 <HAL_CRC_MspInit+0x40>)
 8001250:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <HAL_CRC_MspInit+0x40>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023000 	.word	0x40023000
 8001274:	40023800 	.word	0x40023800

08001278 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08a      	sub	sp, #40	; 0x28
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a28      	ldr	r2, [pc, #160]	; (8001338 <HAL_I2C_MspInit+0xc0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d14a      	bne.n	8001330 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
 800129e:	4b27      	ldr	r3, [pc, #156]	; (800133c <HAL_I2C_MspInit+0xc4>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a26      	ldr	r2, [pc, #152]	; (800133c <HAL_I2C_MspInit+0xc4>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_I2C_MspInit+0xc4>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_I2C_MspInit+0xc4>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a1f      	ldr	r2, [pc, #124]	; (800133c <HAL_I2C_MspInit+0xc4>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <HAL_I2C_MspInit+0xc4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012d8:	2312      	movs	r3, #18
 80012da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012e4:	2304      	movs	r3, #4
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	4619      	mov	r1, r3
 80012ee:	4814      	ldr	r0, [pc, #80]	; (8001340 <HAL_I2C_MspInit+0xc8>)
 80012f0:	f000 fb0c 	bl	800190c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012f4:	2310      	movs	r3, #16
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f8:	2312      	movs	r3, #18
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001304:	2309      	movs	r3, #9
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	480d      	ldr	r0, [pc, #52]	; (8001344 <HAL_I2C_MspInit+0xcc>)
 8001310:	f000 fafc 	bl	800190c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001314:	2300      	movs	r3, #0
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <HAL_I2C_MspInit+0xc4>)
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	4a07      	ldr	r2, [pc, #28]	; (800133c <HAL_I2C_MspInit+0xc4>)
 800131e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001322:	6413      	str	r3, [r2, #64]	; 0x40
 8001324:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_I2C_MspInit+0xc4>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001328:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40005c00 	.word	0x40005c00
 800133c:	40023800 	.word	0x40023800
 8001340:	40020000 	.word	0x40020000
 8001344:	40020400 	.word	0x40020400

08001348 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001350:	f107 030c 	add.w	r3, r7, #12
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
 800135c:	60da      	str	r2, [r3, #12]
 800135e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a0c      	ldr	r2, [pc, #48]	; (8001398 <HAL_RTC_MspInit+0x50>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d111      	bne.n	800138e <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800136a:	2302      	movs	r3, #2
 800136c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800136e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001372:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	4618      	mov	r0, r3
 800137a:	f001 ff49 	bl	8003210 <HAL_RCCEx_PeriphCLKConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001384:	f7ff ff28 	bl	80011d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <HAL_RTC_MspInit+0x54>)
 800138a:	2201      	movs	r2, #1
 800138c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800138e:	bf00      	nop
 8001390:	3720      	adds	r7, #32
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40002800 	.word	0x40002800
 800139c:	42470e3c 	.word	0x42470e3c

080013a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_TIM_Base_MspInit+0x48>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d115      	bne.n	80013de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	4b0d      	ldr	r3, [pc, #52]	; (80013ec <HAL_TIM_Base_MspInit+0x4c>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <HAL_TIM_Base_MspInit+0x4c>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	6413      	str	r3, [r2, #64]	; 0x40
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_TIM_Base_MspInit+0x4c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	60fb      	str	r3, [r7, #12]
 80013cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	201e      	movs	r0, #30
 80013d4:	f000 fa47 	bl	8001866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80013d8:	201e      	movs	r0, #30
 80013da:	f000 fa60 	bl	800189e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40000800 	.word	0x40000800
 80013ec:	40023800 	.word	0x40023800

080013f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a19      	ldr	r2, [pc, #100]	; (8001474 <HAL_UART_MspInit+0x84>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d12b      	bne.n	800146a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	613b      	str	r3, [r7, #16]
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	4a17      	ldr	r2, [pc, #92]	; (8001478 <HAL_UART_MspInit+0x88>)
 800141c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001420:	6413      	str	r3, [r2, #64]	; 0x40
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_UART_MspInit+0x88>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800144a:	230c      	movs	r3, #12
 800144c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800145a:	2307      	movs	r3, #7
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	4619      	mov	r1, r3
 8001464:	4805      	ldr	r0, [pc, #20]	; (800147c <HAL_UART_MspInit+0x8c>)
 8001466:	f000 fa51 	bl	800190c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800146a:	bf00      	nop
 800146c:	3728      	adds	r7, #40	; 0x28
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40004400 	.word	0x40004400
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000

08001480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001484:	e7fe      	b.n	8001484 <NMI_Handler+0x4>

08001486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001486:	b480      	push	{r7}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800148a:	e7fe      	b.n	800148a <HardFault_Handler+0x4>

0800148c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001490:	e7fe      	b.n	8001490 <MemManage_Handler+0x4>

08001492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001496:	e7fe      	b.n	8001496 <BusFault_Handler+0x4>

08001498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800149c:	e7fe      	b.n	800149c <UsageFault_Handler+0x4>

0800149e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149e:	b480      	push	{r7}
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014a2:	bf00      	nop
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr

080014ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014cc:	f000 f8d0 	bl	8001670 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80014d8:	4802      	ldr	r0, [pc, #8]	; (80014e4 <TIM4_IRQHandler+0x10>)
 80014da:	f002 f93f 	bl	800375c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20000110 	.word	0x20000110

080014e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f0:	4a14      	ldr	r2, [pc, #80]	; (8001544 <_sbrk+0x5c>)
 80014f2:	4b15      	ldr	r3, [pc, #84]	; (8001548 <_sbrk+0x60>)
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <_sbrk+0x64>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d102      	bne.n	800150a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <_sbrk+0x64>)
 8001506:	4a12      	ldr	r2, [pc, #72]	; (8001550 <_sbrk+0x68>)
 8001508:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <_sbrk+0x64>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4413      	add	r3, r2
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	429a      	cmp	r2, r3
 8001516:	d207      	bcs.n	8001528 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001518:	f003 ff9a 	bl	8005450 <__errno>
 800151c:	4603      	mov	r3, r0
 800151e:	220c      	movs	r2, #12
 8001520:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001522:	f04f 33ff 	mov.w	r3, #4294967295
 8001526:	e009      	b.n	800153c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800152e:	4b07      	ldr	r3, [pc, #28]	; (800154c <_sbrk+0x64>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	4a05      	ldr	r2, [pc, #20]	; (800154c <_sbrk+0x64>)
 8001538:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800153a:	68fb      	ldr	r3, [r7, #12]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20018000 	.word	0x20018000
 8001548:	00000400 	.word	0x00000400
 800154c:	200001c8 	.word	0x200001c8
 8001550:	20000318 	.word	0x20000318

08001554 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <SystemInit+0x20>)
 800155a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800155e:	4a05      	ldr	r2, [pc, #20]	; (8001574 <SystemInit+0x20>)
 8001560:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001564:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001578:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015b0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800157c:	f7ff ffea 	bl	8001554 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001580:	480c      	ldr	r0, [pc, #48]	; (80015b4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001582:	490d      	ldr	r1, [pc, #52]	; (80015b8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001586:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001588:	e002      	b.n	8001590 <LoopCopyDataInit>

0800158a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800158a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800158c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800158e:	3304      	adds	r3, #4

08001590 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001590:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001592:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001594:	d3f9      	bcc.n	800158a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001596:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001598:	4c0a      	ldr	r4, [pc, #40]	; (80015c4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800159a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800159c:	e001      	b.n	80015a2 <LoopFillZerobss>

0800159e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800159e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015a0:	3204      	adds	r2, #4

080015a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015a4:	d3fb      	bcc.n	800159e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80015a6:	f003 ff59 	bl	800545c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015aa:	f7ff fb5d 	bl	8000c68 <main>
  bx  lr    
 80015ae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80015b0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80015b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80015bc:	08005fbc 	.word	0x08005fbc
  ldr r2, =_sbss
 80015c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80015c4:	20000318 	.word	0x20000318

080015c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c8:	e7fe      	b.n	80015c8 <ADC_IRQHandler>
	...

080015cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d0:	4b0e      	ldr	r3, [pc, #56]	; (800160c <HAL_Init+0x40>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a0d      	ldr	r2, [pc, #52]	; (800160c <HAL_Init+0x40>)
 80015d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0a      	ldr	r2, [pc, #40]	; (800160c <HAL_Init+0x40>)
 80015e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a07      	ldr	r2, [pc, #28]	; (800160c <HAL_Init+0x40>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f4:	2003      	movs	r0, #3
 80015f6:	f000 f92b 	bl	8001850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015fa:	2000      	movs	r0, #0
 80015fc:	f000 f808 	bl	8001610 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001600:	f7ff fdf0 	bl	80011e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00

08001610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x54>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b12      	ldr	r3, [pc, #72]	; (8001668 <HAL_InitTick+0x58>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	fbb3 f3f1 	udiv	r3, r3, r1
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	4618      	mov	r0, r3
 8001630:	f000 f943 	bl	80018ba <HAL_SYSTICK_Config>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e00e      	b.n	800165c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b0f      	cmp	r3, #15
 8001642:	d80a      	bhi.n	800165a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001644:	2200      	movs	r2, #0
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	f000 f90b 	bl	8001866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001650:	4a06      	ldr	r2, [pc, #24]	; (800166c <HAL_InitTick+0x5c>)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	e000      	b.n	800165c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
}
 800165c:	4618      	mov	r0, r3
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	20000000 	.word	0x20000000
 8001668:	20000008 	.word	0x20000008
 800166c:	20000004 	.word	0x20000004

08001670 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <HAL_IncTick+0x20>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	461a      	mov	r2, r3
 800167a:	4b06      	ldr	r3, [pc, #24]	; (8001694 <HAL_IncTick+0x24>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4413      	add	r3, r2
 8001680:	4a04      	ldr	r2, [pc, #16]	; (8001694 <HAL_IncTick+0x24>)
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	bf00      	nop
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
 800168e:	bf00      	nop
 8001690:	20000008 	.word	0x20000008
 8001694:	200001cc 	.word	0x200001cc

08001698 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return uwTick;
 800169c:	4b03      	ldr	r3, [pc, #12]	; (80016ac <HAL_GetTick+0x14>)
 800169e:	681b      	ldr	r3, [r3, #0]
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	200001cc 	.word	0x200001cc

080016b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c0:	4b0c      	ldr	r3, [pc, #48]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016cc:	4013      	ands	r3, r2
 80016ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d4:	68bb      	ldr	r3, [r7, #8]
 80016d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016e2:	4a04      	ldr	r2, [pc, #16]	; (80016f4 <__NVIC_SetPriorityGrouping+0x44>)
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	60d3      	str	r3, [r2, #12]
}
 80016e8:	bf00      	nop
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr
 80016f4:	e000ed00 	.word	0xe000ed00

080016f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <__NVIC_GetPriorityGrouping+0x18>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	0a1b      	lsrs	r3, r3, #8
 8001702:	f003 0307 	and.w	r3, r3, #7
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001722:	2b00      	cmp	r3, #0
 8001724:	db0b      	blt.n	800173e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	f003 021f 	and.w	r2, r3, #31
 800172c:	4907      	ldr	r1, [pc, #28]	; (800174c <__NVIC_EnableIRQ+0x38>)
 800172e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001732:	095b      	lsrs	r3, r3, #5
 8001734:	2001      	movs	r0, #1
 8001736:	fa00 f202 	lsl.w	r2, r0, r2
 800173a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	e000e100 	.word	0xe000e100

08001750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	4603      	mov	r3, r0
 8001758:	6039      	str	r1, [r7, #0]
 800175a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	2b00      	cmp	r3, #0
 8001762:	db0a      	blt.n	800177a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	b2da      	uxtb	r2, r3
 8001768:	490c      	ldr	r1, [pc, #48]	; (800179c <__NVIC_SetPriority+0x4c>)
 800176a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800176e:	0112      	lsls	r2, r2, #4
 8001770:	b2d2      	uxtb	r2, r2
 8001772:	440b      	add	r3, r1
 8001774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001778:	e00a      	b.n	8001790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4908      	ldr	r1, [pc, #32]	; (80017a0 <__NVIC_SetPriority+0x50>)
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	f003 030f 	and.w	r3, r3, #15
 8001786:	3b04      	subs	r3, #4
 8001788:	0112      	lsls	r2, r2, #4
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	440b      	add	r3, r1
 800178e:	761a      	strb	r2, [r3, #24]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr
 800179c:	e000e100 	.word	0xe000e100
 80017a0:	e000ed00 	.word	0xe000ed00

080017a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b089      	sub	sp, #36	; 0x24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f1c3 0307 	rsb	r3, r3, #7
 80017be:	2b04      	cmp	r3, #4
 80017c0:	bf28      	it	cs
 80017c2:	2304      	movcs	r3, #4
 80017c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3304      	adds	r3, #4
 80017ca:	2b06      	cmp	r3, #6
 80017cc:	d902      	bls.n	80017d4 <NVIC_EncodePriority+0x30>
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3b03      	subs	r3, #3
 80017d2:	e000      	b.n	80017d6 <NVIC_EncodePriority+0x32>
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d8:	f04f 32ff 	mov.w	r2, #4294967295
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43da      	mvns	r2, r3
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	401a      	ands	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017ec:	f04f 31ff 	mov.w	r1, #4294967295
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fa01 f303 	lsl.w	r3, r1, r3
 80017f6:	43d9      	mvns	r1, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	4313      	orrs	r3, r2
         );
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3724      	adds	r7, #36	; 0x24
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	3b01      	subs	r3, #1
 8001818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800181c:	d301      	bcc.n	8001822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800181e:	2301      	movs	r3, #1
 8001820:	e00f      	b.n	8001842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001822:	4a0a      	ldr	r2, [pc, #40]	; (800184c <SysTick_Config+0x40>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3b01      	subs	r3, #1
 8001828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800182a:	210f      	movs	r1, #15
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	f7ff ff8e 	bl	8001750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001834:	4b05      	ldr	r3, [pc, #20]	; (800184c <SysTick_Config+0x40>)
 8001836:	2200      	movs	r2, #0
 8001838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800183a:	4b04      	ldr	r3, [pc, #16]	; (800184c <SysTick_Config+0x40>)
 800183c:	2207      	movs	r2, #7
 800183e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	e000e010 	.word	0xe000e010

08001850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f7ff ff29 	bl	80016b0 <__NVIC_SetPriorityGrouping>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	4603      	mov	r3, r0
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
 8001872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001878:	f7ff ff3e 	bl	80016f8 <__NVIC_GetPriorityGrouping>
 800187c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	68b9      	ldr	r1, [r7, #8]
 8001882:	6978      	ldr	r0, [r7, #20]
 8001884:	f7ff ff8e 	bl	80017a4 <NVIC_EncodePriority>
 8001888:	4602      	mov	r2, r0
 800188a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800188e:	4611      	mov	r1, r2
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff ff5d 	bl	8001750 <__NVIC_SetPriority>
}
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b082      	sub	sp, #8
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	4603      	mov	r3, r0
 80018a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff ff31 	bl	8001714 <__NVIC_EnableIRQ>
}
 80018b2:	bf00      	nop
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}

080018ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ffa2 	bl	800180c <SysTick_Config>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e00e      	b.n	8001902 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	795b      	ldrb	r3, [r3, #5]
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d105      	bne.n	80018fa <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f7ff fc9d 	bl	8001234 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001900:	2300      	movs	r3, #0
}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001922:	2300      	movs	r3, #0
 8001924:	61fb      	str	r3, [r7, #28]
 8001926:	e159      	b.n	8001bdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001928:	2201      	movs	r2, #1
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	429a      	cmp	r2, r3
 8001942:	f040 8148 	bne.w	8001bd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d005      	beq.n	800195e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195a:	2b02      	cmp	r3, #2
 800195c:	d130      	bne.n	80019c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	2203      	movs	r2, #3
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	68da      	ldr	r2, [r3, #12]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001994:	2201      	movs	r2, #1
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	43db      	mvns	r3, r3
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	4013      	ands	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	091b      	lsrs	r3, r3, #4
 80019aa:	f003 0201 	and.w	r2, r3, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4313      	orrs	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69ba      	ldr	r2, [r7, #24]
 80019be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f003 0303 	and.w	r3, r3, #3
 80019c8:	2b03      	cmp	r3, #3
 80019ca:	d017      	beq.n	80019fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d123      	bne.n	8001a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	69b9      	ldr	r1, [r7, #24]
 8001a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 0203 	and.w	r2, r3, #3
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	fa02 f303 	lsl.w	r3, r2, r3
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 80a2 	beq.w	8001bd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a92:	2300      	movs	r3, #0
 8001a94:	60fb      	str	r3, [r7, #12]
 8001a96:	4b57      	ldr	r3, [pc, #348]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9a:	4a56      	ldr	r2, [pc, #344]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001a9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa2:	4b54      	ldr	r3, [pc, #336]	; (8001bf4 <HAL_GPIO_Init+0x2e8>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aae:	4a52      	ldr	r2, [pc, #328]	; (8001bf8 <HAL_GPIO_Init+0x2ec>)
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a49      	ldr	r2, [pc, #292]	; (8001bfc <HAL_GPIO_Init+0x2f0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d019      	beq.n	8001b0e <HAL_GPIO_Init+0x202>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <HAL_GPIO_Init+0x2f4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d013      	beq.n	8001b0a <HAL_GPIO_Init+0x1fe>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a47      	ldr	r2, [pc, #284]	; (8001c04 <HAL_GPIO_Init+0x2f8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d00d      	beq.n	8001b06 <HAL_GPIO_Init+0x1fa>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a46      	ldr	r2, [pc, #280]	; (8001c08 <HAL_GPIO_Init+0x2fc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d007      	beq.n	8001b02 <HAL_GPIO_Init+0x1f6>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a45      	ldr	r2, [pc, #276]	; (8001c0c <HAL_GPIO_Init+0x300>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d101      	bne.n	8001afe <HAL_GPIO_Init+0x1f2>
 8001afa:	2304      	movs	r3, #4
 8001afc:	e008      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001afe:	2307      	movs	r3, #7
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b02:	2303      	movs	r3, #3
 8001b04:	e004      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b06:	2302      	movs	r3, #2
 8001b08:	e002      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e000      	b.n	8001b10 <HAL_GPIO_Init+0x204>
 8001b0e:	2300      	movs	r3, #0
 8001b10:	69fa      	ldr	r2, [r7, #28]
 8001b12:	f002 0203 	and.w	r2, r2, #3
 8001b16:	0092      	lsls	r2, r2, #2
 8001b18:	4093      	lsls	r3, r2
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b20:	4935      	ldr	r1, [pc, #212]	; (8001bf8 <HAL_GPIO_Init+0x2ec>)
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	089b      	lsrs	r3, r3, #2
 8001b26:	3302      	adds	r3, #2
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b2e:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b52:	4a2f      	ldr	r2, [pc, #188]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b58:	4b2d      	ldr	r3, [pc, #180]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	69ba      	ldr	r2, [r7, #24]
 8001b64:	4013      	ands	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b7c:	4a24      	ldr	r2, [pc, #144]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ba6:	4a1a      	ldr	r2, [pc, #104]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bac:	4b18      	ldr	r3, [pc, #96]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bd0:	4a0f      	ldr	r2, [pc, #60]	; (8001c10 <HAL_GPIO_Init+0x304>)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b0f      	cmp	r3, #15
 8001be0:	f67f aea2 	bls.w	8001928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001be4:	bf00      	nop
 8001be6:	bf00      	nop
 8001be8:	3724      	adds	r7, #36	; 0x24
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40013800 	.word	0x40013800
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	40020400 	.word	0x40020400
 8001c04:	40020800 	.word	0x40020800
 8001c08:	40020c00 	.word	0x40020c00
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40013c00 	.word	0x40013c00

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e12b      	b.n	8001eb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d106      	bne.n	8001c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fb02 	bl	8001278 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2224      	movs	r2, #36	; 0x24
 8001c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f022 0201 	bic.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001caa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cac:	f001 fa88 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 8001cb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4a81      	ldr	r2, [pc, #516]	; (8001ebc <HAL_I2C_Init+0x274>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d807      	bhi.n	8001ccc <HAL_I2C_Init+0x84>
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4a80      	ldr	r2, [pc, #512]	; (8001ec0 <HAL_I2C_Init+0x278>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	bf94      	ite	ls
 8001cc4:	2301      	movls	r3, #1
 8001cc6:	2300      	movhi	r3, #0
 8001cc8:	b2db      	uxtb	r3, r3
 8001cca:	e006      	b.n	8001cda <HAL_I2C_Init+0x92>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4a7d      	ldr	r2, [pc, #500]	; (8001ec4 <HAL_I2C_Init+0x27c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	bf94      	ite	ls
 8001cd4:	2301      	movls	r3, #1
 8001cd6:	2300      	movhi	r3, #0
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e0e7      	b.n	8001eb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	4a78      	ldr	r2, [pc, #480]	; (8001ec8 <HAL_I2C_Init+0x280>)
 8001ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cea:	0c9b      	lsrs	r3, r3, #18
 8001cec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	430a      	orrs	r2, r1
 8001d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6a1b      	ldr	r3, [r3, #32]
 8001d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	4a6a      	ldr	r2, [pc, #424]	; (8001ebc <HAL_I2C_Init+0x274>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d802      	bhi.n	8001d1c <HAL_I2C_Init+0xd4>
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	e009      	b.n	8001d30 <HAL_I2C_Init+0xe8>
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d22:	fb02 f303 	mul.w	r3, r2, r3
 8001d26:	4a69      	ldr	r2, [pc, #420]	; (8001ecc <HAL_I2C_Init+0x284>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	099b      	lsrs	r3, r3, #6
 8001d2e:	3301      	adds	r3, #1
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	69db      	ldr	r3, [r3, #28]
 8001d3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	495c      	ldr	r1, [pc, #368]	; (8001ebc <HAL_I2C_Init+0x274>)
 8001d4c:	428b      	cmp	r3, r1
 8001d4e:	d819      	bhi.n	8001d84 <HAL_I2C_Init+0x13c>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1e59      	subs	r1, r3, #1
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d5e:	1c59      	adds	r1, r3, #1
 8001d60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d64:	400b      	ands	r3, r1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d00a      	beq.n	8001d80 <HAL_I2C_Init+0x138>
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1e59      	subs	r1, r3, #1
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d78:	3301      	adds	r3, #1
 8001d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d7e:	e051      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001d80:	2304      	movs	r3, #4
 8001d82:	e04f      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d111      	bne.n	8001db0 <HAL_I2C_Init+0x168>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1e58      	subs	r0, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6859      	ldr	r1, [r3, #4]
 8001d94:	460b      	mov	r3, r1
 8001d96:	005b      	lsls	r3, r3, #1
 8001d98:	440b      	add	r3, r1
 8001d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	bf0c      	ite	eq
 8001da8:	2301      	moveq	r3, #1
 8001daa:	2300      	movne	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e012      	b.n	8001dd6 <HAL_I2C_Init+0x18e>
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1e58      	subs	r0, r3, #1
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6859      	ldr	r1, [r3, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	0099      	lsls	r1, r3, #2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	bf0c      	ite	eq
 8001dd0:	2301      	moveq	r3, #1
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_I2C_Init+0x196>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e022      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d10e      	bne.n	8001e04 <HAL_I2C_Init+0x1bc>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1e58      	subs	r0, r3, #1
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6859      	ldr	r1, [r3, #4]
 8001dee:	460b      	mov	r3, r1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	440b      	add	r3, r1
 8001df4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e02:	e00f      	b.n	8001e24 <HAL_I2C_Init+0x1dc>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1e58      	subs	r0, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	0099      	lsls	r1, r3, #2
 8001e14:	440b      	add	r3, r1
 8001e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e24:	6879      	ldr	r1, [r7, #4]
 8001e26:	6809      	ldr	r1, [r1, #0]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69da      	ldr	r2, [r3, #28]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	431a      	orrs	r2, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6911      	ldr	r1, [r2, #16]
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	68d2      	ldr	r2, [r2, #12]
 8001e5e:	4311      	orrs	r1, r2
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	6812      	ldr	r2, [r2, #0]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	430a      	orrs	r2, r1
 8001e82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2220      	movs	r2, #32
 8001e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eb0:	2300      	movs	r3, #0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	000186a0 	.word	0x000186a0
 8001ec0:	001e847f 	.word	0x001e847f
 8001ec4:	003d08ff 	.word	0x003d08ff
 8001ec8:	431bde83 	.word	0x431bde83
 8001ecc:	10624dd3 	.word	0x10624dd3

08001ed0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08c      	sub	sp, #48	; 0x30
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4611      	mov	r1, r2
 8001edc:	461a      	mov	r2, r3
 8001ede:	4603      	mov	r3, r0
 8001ee0:	817b      	strh	r3, [r7, #10]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	813b      	strh	r3, [r7, #8]
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001eea:	f7ff fbd5 	bl	8001698 <HAL_GetTick>
 8001eee:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b20      	cmp	r3, #32
 8001efa:	f040 8214 	bne.w	8002326 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2319      	movs	r3, #25
 8001f04:	2201      	movs	r2, #1
 8001f06:	497b      	ldr	r1, [pc, #492]	; (80020f4 <HAL_I2C_Mem_Read+0x224>)
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	f000 fafb 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8001f14:	2302      	movs	r3, #2
 8001f16:	e207      	b.n	8002328 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d101      	bne.n	8001f26 <HAL_I2C_Mem_Read+0x56>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e200      	b.n	8002328 <HAL_I2C_Mem_Read+0x458>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d007      	beq.n	8001f4c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0201 	orr.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2222      	movs	r2, #34	; 0x22
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2240      	movs	r2, #64	; 0x40
 8001f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f82:	b29a      	uxth	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	4a5b      	ldr	r2, [pc, #364]	; (80020f8 <HAL_I2C_Mem_Read+0x228>)
 8001f8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f8e:	88f8      	ldrh	r0, [r7, #6]
 8001f90:	893a      	ldrh	r2, [r7, #8]
 8001f92:	8979      	ldrh	r1, [r7, #10]
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	9301      	str	r3, [sp, #4]
 8001f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f9a:	9300      	str	r3, [sp, #0]
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f000 f9c8 	bl	8002334 <I2C_RequestMemoryRead>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e1bc      	b.n	8002328 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d113      	bne.n	8001fde <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	623b      	str	r3, [r7, #32]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	623b      	str	r3, [r7, #32]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	623b      	str	r3, [r7, #32]
 8001fca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	e190      	b.n	8002300 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d11b      	bne.n	800201e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	e170      	b.n	8002300 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002022:	2b02      	cmp	r3, #2
 8002024:	d11b      	bne.n	800205e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002034:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002044:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002046:	2300      	movs	r3, #0
 8002048:	61bb      	str	r3, [r7, #24]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	695b      	ldr	r3, [r3, #20]
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	61bb      	str	r3, [r7, #24]
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	e150      	b.n	8002300 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800205e:	2300      	movs	r3, #0
 8002060:	617b      	str	r3, [r7, #20]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002074:	e144      	b.n	8002300 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800207a:	2b03      	cmp	r3, #3
 800207c:	f200 80f1 	bhi.w	8002262 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002084:	2b01      	cmp	r3, #1
 8002086:	d123      	bne.n	80020d0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	f000 fb9b 	bl	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002092:	4603      	mov	r3, r0
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e145      	b.n	8002328 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ae:	1c5a      	adds	r2, r3, #1
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b8:	3b01      	subs	r3, #1
 80020ba:	b29a      	uxth	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	3b01      	subs	r3, #1
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020ce:	e117      	b.n	8002300 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d14e      	bne.n	8002176 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80020d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020de:	2200      	movs	r2, #0
 80020e0:	4906      	ldr	r1, [pc, #24]	; (80020fc <HAL_I2C_Mem_Read+0x22c>)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fa0e 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e11a      	b.n	8002328 <HAL_I2C_Mem_Read+0x458>
 80020f2:	bf00      	nop
 80020f4:	00100002 	.word	0x00100002
 80020f8:	ffff0000 	.word	0xffff0000
 80020fc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800210e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691a      	ldr	r2, [r3, #16]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	b2d2      	uxtb	r2, r2
 800211c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002122:	1c5a      	adds	r2, r3, #1
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800212c:	3b01      	subs	r3, #1
 800212e:	b29a      	uxth	r2, r3
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29b      	uxth	r3, r3
 800213a:	3b01      	subs	r3, #1
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	1c5a      	adds	r2, r3, #1
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215e:	3b01      	subs	r3, #1
 8002160:	b29a      	uxth	r2, r3
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800216a:	b29b      	uxth	r3, r3
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002174:	e0c4      	b.n	8002300 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217c:	2200      	movs	r2, #0
 800217e:	496c      	ldr	r1, [pc, #432]	; (8002330 <HAL_I2C_Mem_Read+0x460>)
 8002180:	68f8      	ldr	r0, [r7, #12]
 8002182:	f000 f9bf 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0cb      	b.n	8002328 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800219e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	b2d2      	uxtb	r2, r2
 80021ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	1c5a      	adds	r2, r3, #1
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021bc:	3b01      	subs	r3, #1
 80021be:	b29a      	uxth	r2, r3
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	3b01      	subs	r3, #1
 80021cc:	b29a      	uxth	r2, r3
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021d8:	2200      	movs	r2, #0
 80021da:	4955      	ldr	r1, [pc, #340]	; (8002330 <HAL_I2C_Mem_Read+0x460>)
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f000 f991 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e09d      	b.n	8002328 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002218:	3b01      	subs	r3, #1
 800221a:	b29a      	uxth	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002224:	b29b      	uxth	r3, r3
 8002226:	3b01      	subs	r3, #1
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800224a:	3b01      	subs	r3, #1
 800224c:	b29a      	uxth	r2, r3
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002260:	e04e      	b.n	8002300 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002264:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f000 faae 	bl	80027c8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e058      	b.n	8002328 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002292:	3b01      	subs	r3, #1
 8002294:	b29a      	uxth	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800229e:	b29b      	uxth	r3, r3
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d124      	bne.n	8002300 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d107      	bne.n	80022ce <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022cc:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	691a      	ldr	r2, [r3, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d8:	b2d2      	uxtb	r2, r2
 80022da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ea:	3b01      	subs	r3, #1
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	3b01      	subs	r3, #1
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002304:	2b00      	cmp	r3, #0
 8002306:	f47f aeb6 	bne.w	8002076 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2220      	movs	r2, #32
 800230e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002326:	2302      	movs	r3, #2
  }
}
 8002328:	4618      	mov	r0, r3
 800232a:	3728      	adds	r7, #40	; 0x28
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	00010004 	.word	0x00010004

08002334 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b088      	sub	sp, #32
 8002338:	af02      	add	r7, sp, #8
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	4608      	mov	r0, r1
 800233e:	4611      	mov	r1, r2
 8002340:	461a      	mov	r2, r3
 8002342:	4603      	mov	r3, r0
 8002344:	817b      	strh	r3, [r7, #10]
 8002346:	460b      	mov	r3, r1
 8002348:	813b      	strh	r3, [r7, #8]
 800234a:	4613      	mov	r3, r2
 800234c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800235c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800236c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	9300      	str	r3, [sp, #0]
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	2200      	movs	r2, #0
 8002376:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f8c2 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00d      	beq.n	80023a2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002394:	d103      	bne.n	800239e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800239c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e0aa      	b.n	80024f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023a2:	897b      	ldrh	r3, [r7, #10]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	461a      	mov	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	6a3a      	ldr	r2, [r7, #32]
 80023b6:	4952      	ldr	r1, [pc, #328]	; (8002500 <I2C_RequestMemoryRead+0x1cc>)
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f91d 	bl	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e097      	b.n	80024f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	617b      	str	r3, [r7, #20]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80023de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023e0:	6a39      	ldr	r1, [r7, #32]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f000 f9a8 	bl	8002738 <I2C_WaitOnTXEFlagUntilTimeout>
 80023e8:	4603      	mov	r3, r0
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d00d      	beq.n	800240a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	2b04      	cmp	r3, #4
 80023f4:	d107      	bne.n	8002406 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002404:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e076      	b.n	80024f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800240a:	88fb      	ldrh	r3, [r7, #6]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d105      	bne.n	800241c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002410:	893b      	ldrh	r3, [r7, #8]
 8002412:	b2da      	uxtb	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	611a      	str	r2, [r3, #16]
 800241a:	e021      	b.n	8002460 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800241c:	893b      	ldrh	r3, [r7, #8]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	b29b      	uxth	r3, r3
 8002422:	b2da      	uxtb	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800242a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242c:	6a39      	ldr	r1, [r7, #32]
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f982 	bl	8002738 <I2C_WaitOnTXEFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d00d      	beq.n	8002456 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	2b04      	cmp	r3, #4
 8002440:	d107      	bne.n	8002452 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002450:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e050      	b.n	80024f8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002456:	893b      	ldrh	r3, [r7, #8]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002462:	6a39      	ldr	r1, [r7, #32]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f967 	bl	8002738 <I2C_WaitOnTXEFlagUntilTimeout>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d00d      	beq.n	800248c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	2b04      	cmp	r3, #4
 8002476:	d107      	bne.n	8002488 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002486:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e035      	b.n	80024f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800249a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f82b 	bl	8002504 <I2C_WaitOnFlagUntilTimeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00d      	beq.n	80024d0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024c2:	d103      	bne.n	80024cc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	e013      	b.n	80024f8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80024d0:	897b      	ldrh	r3, [r7, #10]
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	6a3a      	ldr	r2, [r7, #32]
 80024e4:	4906      	ldr	r1, [pc, #24]	; (8002500 <I2C_RequestMemoryRead+0x1cc>)
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 f886 	bl	80025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	00010002 	.word	0x00010002

08002504 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	603b      	str	r3, [r7, #0]
 8002510:	4613      	mov	r3, r2
 8002512:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002514:	e048      	b.n	80025a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d044      	beq.n	80025a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800251e:	f7ff f8bb 	bl	8001698 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	683a      	ldr	r2, [r7, #0]
 800252a:	429a      	cmp	r2, r3
 800252c:	d302      	bcc.n	8002534 <I2C_WaitOnFlagUntilTimeout+0x30>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d139      	bne.n	80025a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	0c1b      	lsrs	r3, r3, #16
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b01      	cmp	r3, #1
 800253c:	d10d      	bne.n	800255a <I2C_WaitOnFlagUntilTimeout+0x56>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	43da      	mvns	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	4013      	ands	r3, r2
 800254a:	b29b      	uxth	r3, r3
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf0c      	ite	eq
 8002550:	2301      	moveq	r3, #1
 8002552:	2300      	movne	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	e00c      	b.n	8002574 <I2C_WaitOnFlagUntilTimeout+0x70>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	699b      	ldr	r3, [r3, #24]
 8002560:	43da      	mvns	r2, r3
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	4013      	ands	r3, r2
 8002566:	b29b      	uxth	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	bf0c      	ite	eq
 800256c:	2301      	moveq	r3, #1
 800256e:	2300      	movne	r3, #0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	429a      	cmp	r2, r3
 8002578:	d116      	bne.n	80025a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2200      	movs	r2, #0
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2220      	movs	r2, #32
 8002584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	f043 0220 	orr.w	r2, r3, #32
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e023      	b.n	80025f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	0c1b      	lsrs	r3, r3, #16
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d10d      	bne.n	80025ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	695b      	ldr	r3, [r3, #20]
 80025b8:	43da      	mvns	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	4013      	ands	r3, r2
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	bf0c      	ite	eq
 80025c4:	2301      	moveq	r3, #1
 80025c6:	2300      	movne	r3, #0
 80025c8:	b2db      	uxtb	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	e00c      	b.n	80025e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	43da      	mvns	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	4013      	ands	r3, r2
 80025da:	b29b      	uxth	r3, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	461a      	mov	r2, r3
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d093      	beq.n	8002516 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025ee:	2300      	movs	r3, #0
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}

080025f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	60b9      	str	r1, [r7, #8]
 8002602:	607a      	str	r2, [r7, #4]
 8002604:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002606:	e071      	b.n	80026ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002616:	d123      	bne.n	8002660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002626:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002630:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f043 0204 	orr.w	r2, r3, #4
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e067      	b.n	8002730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002666:	d041      	beq.n	80026ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002668:	f7ff f816 	bl	8001698 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	429a      	cmp	r2, r3
 8002676:	d302      	bcc.n	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d136      	bne.n	80026ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b01      	cmp	r3, #1
 8002686:	d10c      	bne.n	80026a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	43da      	mvns	r2, r3
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4013      	ands	r3, r2
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf14      	ite	ne
 800269a:	2301      	movne	r3, #1
 800269c:	2300      	moveq	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	e00b      	b.n	80026ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	43da      	mvns	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4013      	ands	r3, r2
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d016      	beq.n	80026ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e021      	b.n	8002730 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	0c1b      	lsrs	r3, r3, #16
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d10c      	bne.n	8002710 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	43da      	mvns	r2, r3
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf14      	ite	ne
 8002708:	2301      	movne	r3, #1
 800270a:	2300      	moveq	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	e00b      	b.n	8002728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	43da      	mvns	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4013      	ands	r3, r2
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	bf14      	ite	ne
 8002722:	2301      	movne	r3, #1
 8002724:	2300      	moveq	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	f47f af6d 	bne.w	8002608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002744:	e034      	b.n	80027b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 f89b 	bl	8002882 <I2C_IsAcknowledgeFailed>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002752:	2301      	movs	r3, #1
 8002754:	e034      	b.n	80027c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275c:	d028      	beq.n	80027b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800275e:	f7fe ff9b 	bl	8001698 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	68ba      	ldr	r2, [r7, #8]
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d11d      	bne.n	80027b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800277e:	2b80      	cmp	r3, #128	; 0x80
 8002780:	d016      	beq.n	80027b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2220      	movs	r2, #32
 800278c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	f043 0220 	orr.w	r2, r3, #32
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e007      	b.n	80027c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ba:	2b80      	cmp	r3, #128	; 0x80
 80027bc:	d1c3      	bne.n	8002746 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80027d4:	e049      	b.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d119      	bne.n	8002818 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0210 	mvn.w	r2, #16
 80027ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2200      	movs	r2, #0
 80027f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2220      	movs	r2, #32
 80027f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e030      	b.n	800287a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002818:	f7fe ff3e 	bl	8001698 <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	68ba      	ldr	r2, [r7, #8]
 8002824:	429a      	cmp	r2, r3
 8002826:	d302      	bcc.n	800282e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d11d      	bne.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	695b      	ldr	r3, [r3, #20]
 8002834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002838:	2b40      	cmp	r3, #64	; 0x40
 800283a:	d016      	beq.n	800286a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f043 0220 	orr.w	r2, r3, #32
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e007      	b.n	800287a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	695b      	ldr	r3, [r3, #20]
 8002870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002874:	2b40      	cmp	r3, #64	; 0x40
 8002876:	d1ae      	bne.n	80027d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3710      	adds	r7, #16
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002894:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002898:	d11b      	bne.n	80028d2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028a2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f043 0204 	orr.w	r2, r3, #4
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e267      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d075      	beq.n	80029ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80028fe:	4b88      	ldr	r3, [pc, #544]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	2b04      	cmp	r3, #4
 8002908:	d00c      	beq.n	8002924 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800290a:	4b85      	ldr	r3, [pc, #532]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002912:	2b08      	cmp	r3, #8
 8002914:	d112      	bne.n	800293c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002916:	4b82      	ldr	r3, [pc, #520]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800291e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002922:	d10b      	bne.n	800293c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	4b7e      	ldr	r3, [pc, #504]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d05b      	beq.n	80029e8 <HAL_RCC_OscConfig+0x108>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d157      	bne.n	80029e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e242      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002944:	d106      	bne.n	8002954 <HAL_RCC_OscConfig+0x74>
 8002946:	4b76      	ldr	r3, [pc, #472]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a75      	ldr	r2, [pc, #468]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800294c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002950:	6013      	str	r3, [r2, #0]
 8002952:	e01d      	b.n	8002990 <HAL_RCC_OscConfig+0xb0>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x98>
 800295e:	4b70      	ldr	r3, [pc, #448]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a6f      	ldr	r2, [pc, #444]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002964:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	4b6d      	ldr	r3, [pc, #436]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a6c      	ldr	r2, [pc, #432]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002970:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0xb0>
 8002978:	4b69      	ldr	r3, [pc, #420]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a68      	ldr	r2, [pc, #416]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800297e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002982:	6013      	str	r3, [r2, #0]
 8002984:	4b66      	ldr	r3, [pc, #408]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a65      	ldr	r2, [pc, #404]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 800298a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800298e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d013      	beq.n	80029c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002998:	f7fe fe7e 	bl	8001698 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029a0:	f7fe fe7a 	bl	8001698 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b64      	cmp	r3, #100	; 0x64
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e207      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029b2:	4b5b      	ldr	r3, [pc, #364]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0xc0>
 80029be:	e014      	b.n	80029ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c0:	f7fe fe6a 	bl	8001698 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029c8:	f7fe fe66 	bl	8001698 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b64      	cmp	r3, #100	; 0x64
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e1f3      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029da:	4b51      	ldr	r3, [pc, #324]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0xe8>
 80029e6:	e000      	b.n	80029ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d063      	beq.n	8002abe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80029f6:	4b4a      	ldr	r3, [pc, #296]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 030c 	and.w	r3, r3, #12
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00b      	beq.n	8002a1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a0a:	2b08      	cmp	r3, #8
 8002a0c:	d11c      	bne.n	8002a48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a0e:	4b44      	ldr	r3, [pc, #272]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d116      	bne.n	8002a48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d005      	beq.n	8002a32 <HAL_RCC_OscConfig+0x152>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d001      	beq.n	8002a32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e1c7      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	00db      	lsls	r3, r3, #3
 8002a40:	4937      	ldr	r1, [pc, #220]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a46:	e03a      	b.n	8002abe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d020      	beq.n	8002a92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a50:	4b34      	ldr	r3, [pc, #208]	; (8002b24 <HAL_RCC_OscConfig+0x244>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a56:	f7fe fe1f 	bl	8001698 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a5e:	f7fe fe1b 	bl	8001698 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e1a8      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a70:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7c:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4925      	ldr	r1, [pc, #148]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]
 8002a90:	e015      	b.n	8002abe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a92:	4b24      	ldr	r3, [pc, #144]	; (8002b24 <HAL_RCC_OscConfig+0x244>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a98:	f7fe fdfe 	bl	8001698 <HAL_GetTick>
 8002a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a9e:	e008      	b.n	8002ab2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa0:	f7fe fdfa 	bl	8001698 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d901      	bls.n	8002ab2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	e187      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1f0      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0308 	and.w	r3, r3, #8
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d036      	beq.n	8002b38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d016      	beq.n	8002b00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_RCC_OscConfig+0x248>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad8:	f7fe fdde 	bl	8001698 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ae0:	f7fe fdda 	bl	8001698 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e167      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af2:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_OscConfig+0x240>)
 8002af4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d0f0      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x200>
 8002afe:	e01b      	b.n	8002b38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b00:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <HAL_RCC_OscConfig+0x248>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b06:	f7fe fdc7 	bl	8001698 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b0c:	e00e      	b.n	8002b2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b0e:	f7fe fdc3 	bl	8001698 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d907      	bls.n	8002b2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e150      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
 8002b20:	40023800 	.word	0x40023800
 8002b24:	42470000 	.word	0x42470000
 8002b28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b2c:	4b88      	ldr	r3, [pc, #544]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1ea      	bne.n	8002b0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 8097 	beq.w	8002c74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b46:	2300      	movs	r3, #0
 8002b48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b4a:	4b81      	ldr	r3, [pc, #516]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10f      	bne.n	8002b76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
 8002b5a:	4b7d      	ldr	r3, [pc, #500]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	4a7c      	ldr	r2, [pc, #496]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b64:	6413      	str	r3, [r2, #64]	; 0x40
 8002b66:	4b7a      	ldr	r3, [pc, #488]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6e:	60bb      	str	r3, [r7, #8]
 8002b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b72:	2301      	movs	r3, #1
 8002b74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b76:	4b77      	ldr	r3, [pc, #476]	; (8002d54 <HAL_RCC_OscConfig+0x474>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d118      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b82:	4b74      	ldr	r3, [pc, #464]	; (8002d54 <HAL_RCC_OscConfig+0x474>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a73      	ldr	r2, [pc, #460]	; (8002d54 <HAL_RCC_OscConfig+0x474>)
 8002b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b8e:	f7fe fd83 	bl	8001698 <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b94:	e008      	b.n	8002ba8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b96:	f7fe fd7f 	bl	8001698 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d901      	bls.n	8002ba8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e10c      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ba8:	4b6a      	ldr	r3, [pc, #424]	; (8002d54 <HAL_RCC_OscConfig+0x474>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d0f0      	beq.n	8002b96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_OscConfig+0x2ea>
 8002bbc:	4b64      	ldr	r3, [pc, #400]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc0:	4a63      	ldr	r2, [pc, #396]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bc2:	f043 0301 	orr.w	r3, r3, #1
 8002bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bc8:	e01c      	b.n	8002c04 <HAL_RCC_OscConfig+0x324>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b05      	cmp	r3, #5
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x30c>
 8002bd2:	4b5f      	ldr	r3, [pc, #380]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a5e      	ldr	r2, [pc, #376]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bd8:	f043 0304 	orr.w	r3, r3, #4
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bde:	4b5c      	ldr	r3, [pc, #368]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be2:	4a5b      	ldr	r2, [pc, #364]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002be4:	f043 0301 	orr.w	r3, r3, #1
 8002be8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0x324>
 8002bec:	4b58      	ldr	r3, [pc, #352]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf0:	4a57      	ldr	r2, [pc, #348]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf8:	4b55      	ldr	r3, [pc, #340]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfc:	4a54      	ldr	r2, [pc, #336]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002bfe:	f023 0304 	bic.w	r3, r3, #4
 8002c02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d015      	beq.n	8002c38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c0c:	f7fe fd44 	bl	8001698 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c14:	f7fe fd40 	bl	8001698 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e0cb      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c2a:	4b49      	ldr	r3, [pc, #292]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0ee      	beq.n	8002c14 <HAL_RCC_OscConfig+0x334>
 8002c36:	e014      	b.n	8002c62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c38:	f7fe fd2e 	bl	8001698 <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c3e:	e00a      	b.n	8002c56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c40:	f7fe fd2a 	bl	8001698 <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e0b5      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c56:	4b3e      	ldr	r3, [pc, #248]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1ee      	bne.n	8002c40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c62:	7dfb      	ldrb	r3, [r7, #23]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d105      	bne.n	8002c74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c68:	4b39      	ldr	r3, [pc, #228]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	4a38      	ldr	r2, [pc, #224]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 80a1 	beq.w	8002dc0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c7e:	4b34      	ldr	r3, [pc, #208]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d05c      	beq.n	8002d44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d141      	bne.n	8002d16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b31      	ldr	r3, [pc, #196]	; (8002d58 <HAL_RCC_OscConfig+0x478>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c98:	f7fe fcfe 	bl	8001698 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c9e:	e008      	b.n	8002cb2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca0:	f7fe fcfa 	bl	8001698 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e087      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cb2:	4b27      	ldr	r3, [pc, #156]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d1f0      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69da      	ldr	r2, [r3, #28]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a1b      	ldr	r3, [r3, #32]
 8002cc6:	431a      	orrs	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ccc:	019b      	lsls	r3, r3, #6
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd4:	085b      	lsrs	r3, r3, #1
 8002cd6:	3b01      	subs	r3, #1
 8002cd8:	041b      	lsls	r3, r3, #16
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce0:	061b      	lsls	r3, r3, #24
 8002ce2:	491b      	ldr	r1, [pc, #108]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_RCC_OscConfig+0x478>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cee:	f7fe fcd3 	bl	8001698 <HAL_GetTick>
 8002cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf4:	e008      	b.n	8002d08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf6:	f7fe fccf 	bl	8001698 <HAL_GetTick>
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	693b      	ldr	r3, [r7, #16]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e05c      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d08:	4b11      	ldr	r3, [pc, #68]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d0f0      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x416>
 8002d14:	e054      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_RCC_OscConfig+0x478>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe fcbc 	bl	8001698 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d24:	f7fe fcb8 	bl	8001698 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e045      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d36:	4b06      	ldr	r3, [pc, #24]	; (8002d50 <HAL_RCC_OscConfig+0x470>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d1f0      	bne.n	8002d24 <HAL_RCC_OscConfig+0x444>
 8002d42:	e03d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d107      	bne.n	8002d5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e038      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
 8002d50:	40023800 	.word	0x40023800
 8002d54:	40007000 	.word	0x40007000
 8002d58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d5c:	4b1b      	ldr	r3, [pc, #108]	; (8002dcc <HAL_RCC_OscConfig+0x4ec>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d028      	beq.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d121      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d11a      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d86:	68fa      	ldr	r2, [r7, #12]
 8002d88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d111      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da2:	085b      	lsrs	r3, r3, #1
 8002da4:	3b01      	subs	r3, #1
 8002da6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d107      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e000      	b.n	8002dc2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800

08002dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0cc      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de4:	4b68      	ldr	r3, [pc, #416]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d90c      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b65      	ldr	r3, [pc, #404]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b63      	ldr	r3, [pc, #396]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0b8      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d020      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e24:	4b59      	ldr	r3, [pc, #356]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	4a58      	ldr	r2, [pc, #352]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0308 	and.w	r3, r3, #8
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e3c:	4b53      	ldr	r3, [pc, #332]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	4a52      	ldr	r2, [pc, #328]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e48:	4b50      	ldr	r3, [pc, #320]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	494d      	ldr	r1, [pc, #308]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d044      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	4b47      	ldr	r3, [pc, #284]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d119      	bne.n	8002eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e07f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d003      	beq.n	8002e8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e8a:	2b03      	cmp	r3, #3
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8e:	4b3f      	ldr	r3, [pc, #252]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d109      	bne.n	8002eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e06f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9e:	4b3b      	ldr	r3, [pc, #236]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e067      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eae:	4b37      	ldr	r3, [pc, #220]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f023 0203 	bic.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	4934      	ldr	r1, [pc, #208]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec0:	f7fe fbea 	bl	8001698 <HAL_GetTick>
 8002ec4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	e00a      	b.n	8002ede <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec8:	f7fe fbe6 	bl	8001698 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e04f      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ede:	4b2b      	ldr	r3, [pc, #172]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f003 020c 	and.w	r2, r3, #12
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d1eb      	bne.n	8002ec8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef0:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d20c      	bcs.n	8002f18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	4b22      	ldr	r3, [pc, #136]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f06:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_RCC_ClockConfig+0x1b8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d001      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e032      	b.n	8002f7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d008      	beq.n	8002f36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	4916      	ldr	r1, [pc, #88]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0308 	and.w	r3, r3, #8
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f42:	4b12      	ldr	r3, [pc, #72]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	00db      	lsls	r3, r3, #3
 8002f50:	490e      	ldr	r1, [pc, #56]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f56:	f000 f821 	bl	8002f9c <HAL_RCC_GetSysClockFreq>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	4b0b      	ldr	r3, [pc, #44]	; (8002f8c <HAL_RCC_ClockConfig+0x1bc>)
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	091b      	lsrs	r3, r3, #4
 8002f62:	f003 030f 	and.w	r3, r3, #15
 8002f66:	490a      	ldr	r1, [pc, #40]	; (8002f90 <HAL_RCC_ClockConfig+0x1c0>)
 8002f68:	5ccb      	ldrb	r3, [r1, r3]
 8002f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6e:	4a09      	ldr	r2, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1c4>)
 8002f70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f72:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x1c8>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7fe fb4a 	bl	8001610 <HAL_InitTick>

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	40023c00 	.word	0x40023c00
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	08005f48 	.word	0x08005f48
 8002f94:	20000000 	.word	0x20000000
 8002f98:	20000004 	.word	0x20000004

08002f9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa0:	b094      	sub	sp, #80	; 0x50
 8002fa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	647b      	str	r3, [r7, #68]	; 0x44
 8002fa8:	2300      	movs	r3, #0
 8002faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fac:	2300      	movs	r3, #0
 8002fae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fb4:	4b79      	ldr	r3, [pc, #484]	; (800319c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d00d      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x40>
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	f200 80e1 	bhi.w	8003188 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002fce:	e0db      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fd0:	4b73      	ldr	r3, [pc, #460]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002fd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002fd4:	e0db      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fd6:	4b73      	ldr	r3, [pc, #460]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002fd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002fda:	e0d8      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fdc:	4b6f      	ldr	r3, [pc, #444]	; (800319c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fe4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fe6:	4b6d      	ldr	r3, [pc, #436]	; (800319c <HAL_RCC_GetSysClockFreq+0x200>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d063      	beq.n	80030ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ff2:	4b6a      	ldr	r3, [pc, #424]	; (800319c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	099b      	lsrs	r3, r3, #6
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ffc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003004:	633b      	str	r3, [r7, #48]	; 0x30
 8003006:	2300      	movs	r3, #0
 8003008:	637b      	str	r3, [r7, #52]	; 0x34
 800300a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800300e:	4622      	mov	r2, r4
 8003010:	462b      	mov	r3, r5
 8003012:	f04f 0000 	mov.w	r0, #0
 8003016:	f04f 0100 	mov.w	r1, #0
 800301a:	0159      	lsls	r1, r3, #5
 800301c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003020:	0150      	lsls	r0, r2, #5
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4621      	mov	r1, r4
 8003028:	1a51      	subs	r1, r2, r1
 800302a:	6139      	str	r1, [r7, #16]
 800302c:	4629      	mov	r1, r5
 800302e:	eb63 0301 	sbc.w	r3, r3, r1
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	f04f 0200 	mov.w	r2, #0
 8003038:	f04f 0300 	mov.w	r3, #0
 800303c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003040:	4659      	mov	r1, fp
 8003042:	018b      	lsls	r3, r1, #6
 8003044:	4651      	mov	r1, sl
 8003046:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800304a:	4651      	mov	r1, sl
 800304c:	018a      	lsls	r2, r1, #6
 800304e:	4651      	mov	r1, sl
 8003050:	ebb2 0801 	subs.w	r8, r2, r1
 8003054:	4659      	mov	r1, fp
 8003056:	eb63 0901 	sbc.w	r9, r3, r1
 800305a:	f04f 0200 	mov.w	r2, #0
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003066:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800306a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800306e:	4690      	mov	r8, r2
 8003070:	4699      	mov	r9, r3
 8003072:	4623      	mov	r3, r4
 8003074:	eb18 0303 	adds.w	r3, r8, r3
 8003078:	60bb      	str	r3, [r7, #8]
 800307a:	462b      	mov	r3, r5
 800307c:	eb49 0303 	adc.w	r3, r9, r3
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800308e:	4629      	mov	r1, r5
 8003090:	024b      	lsls	r3, r1, #9
 8003092:	4621      	mov	r1, r4
 8003094:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003098:	4621      	mov	r1, r4
 800309a:	024a      	lsls	r2, r1, #9
 800309c:	4610      	mov	r0, r2
 800309e:	4619      	mov	r1, r3
 80030a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030a2:	2200      	movs	r2, #0
 80030a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80030a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030ac:	f7fd fc5e 	bl	800096c <__aeabi_uldivmod>
 80030b0:	4602      	mov	r2, r0
 80030b2:	460b      	mov	r3, r1
 80030b4:	4613      	mov	r3, r2
 80030b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030b8:	e058      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030ba:	4b38      	ldr	r3, [pc, #224]	; (800319c <HAL_RCC_GetSysClockFreq+0x200>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	099b      	lsrs	r3, r3, #6
 80030c0:	2200      	movs	r2, #0
 80030c2:	4618      	mov	r0, r3
 80030c4:	4611      	mov	r1, r2
 80030c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030ca:	623b      	str	r3, [r7, #32]
 80030cc:	2300      	movs	r3, #0
 80030ce:	627b      	str	r3, [r7, #36]	; 0x24
 80030d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030d4:	4642      	mov	r2, r8
 80030d6:	464b      	mov	r3, r9
 80030d8:	f04f 0000 	mov.w	r0, #0
 80030dc:	f04f 0100 	mov.w	r1, #0
 80030e0:	0159      	lsls	r1, r3, #5
 80030e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030e6:	0150      	lsls	r0, r2, #5
 80030e8:	4602      	mov	r2, r0
 80030ea:	460b      	mov	r3, r1
 80030ec:	4641      	mov	r1, r8
 80030ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80030f2:	4649      	mov	r1, r9
 80030f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003104:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003108:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800310c:	ebb2 040a 	subs.w	r4, r2, sl
 8003110:	eb63 050b 	sbc.w	r5, r3, fp
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	00eb      	lsls	r3, r5, #3
 800311e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003122:	00e2      	lsls	r2, r4, #3
 8003124:	4614      	mov	r4, r2
 8003126:	461d      	mov	r5, r3
 8003128:	4643      	mov	r3, r8
 800312a:	18e3      	adds	r3, r4, r3
 800312c:	603b      	str	r3, [r7, #0]
 800312e:	464b      	mov	r3, r9
 8003130:	eb45 0303 	adc.w	r3, r5, r3
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 0300 	mov.w	r3, #0
 800313e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003142:	4629      	mov	r1, r5
 8003144:	028b      	lsls	r3, r1, #10
 8003146:	4621      	mov	r1, r4
 8003148:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800314c:	4621      	mov	r1, r4
 800314e:	028a      	lsls	r2, r1, #10
 8003150:	4610      	mov	r0, r2
 8003152:	4619      	mov	r1, r3
 8003154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003156:	2200      	movs	r2, #0
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	61fa      	str	r2, [r7, #28]
 800315c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003160:	f7fd fc04 	bl	800096c <__aeabi_uldivmod>
 8003164:	4602      	mov	r2, r0
 8003166:	460b      	mov	r3, r1
 8003168:	4613      	mov	r3, r2
 800316a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <HAL_RCC_GetSysClockFreq+0x200>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	3301      	adds	r3, #1
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800317c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800317e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003180:	fbb2 f3f3 	udiv	r3, r2, r3
 8003184:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003186:	e002      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003188:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800318a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800318c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800318e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003190:	4618      	mov	r0, r3
 8003192:	3750      	adds	r7, #80	; 0x50
 8003194:	46bd      	mov	sp, r7
 8003196:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800319a:	bf00      	nop
 800319c:	40023800 	.word	0x40023800
 80031a0:	00f42400 	.word	0x00f42400
 80031a4:	007a1200 	.word	0x007a1200

080031a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ac:	4b03      	ldr	r3, [pc, #12]	; (80031bc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	20000000 	.word	0x20000000

080031c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031c4:	f7ff fff0 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031c8:	4602      	mov	r2, r0
 80031ca:	4b05      	ldr	r3, [pc, #20]	; (80031e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	0a9b      	lsrs	r3, r3, #10
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	4903      	ldr	r1, [pc, #12]	; (80031e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031d6:	5ccb      	ldrb	r3, [r1, r3]
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40023800 	.word	0x40023800
 80031e4:	08005f58 	.word	0x08005f58

080031e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031ec:	f7ff ffdc 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	0b5b      	lsrs	r3, r3, #13
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	4903      	ldr	r1, [pc, #12]	; (800320c <HAL_RCC_GetPCLK2Freq+0x24>)
 80031fe:	5ccb      	ldrb	r3, [r1, r3]
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40023800 	.word	0x40023800
 800320c:	08005f58 	.word	0x08005f58

08003210 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d105      	bne.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003234:	2b00      	cmp	r3, #0
 8003236:	d035      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003238:	4b67      	ldr	r3, [pc, #412]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800323a:	2200      	movs	r2, #0
 800323c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800323e:	f7fe fa2b 	bl	8001698 <HAL_GetTick>
 8003242:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003246:	f7fe fa27 	bl	8001698 <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e0ba      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003258:	4b60      	ldr	r3, [pc, #384]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f0      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	019a      	lsls	r2, r3, #6
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	071b      	lsls	r3, r3, #28
 8003270:	495a      	ldr	r1, [pc, #360]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003278:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800327e:	f7fe fa0b 	bl	8001698 <HAL_GetTick>
 8003282:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003286:	f7fe fa07 	bl	8001698 <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e09a      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003298:	4b50      	ldr	r3, [pc, #320]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f0      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8083 	beq.w	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60fb      	str	r3, [r7, #12]
 80032b6:	4b49      	ldr	r3, [pc, #292]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	4a48      	ldr	r2, [pc, #288]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c0:	6413      	str	r3, [r2, #64]	; 0x40
 80032c2:	4b46      	ldr	r3, [pc, #280]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80032ce:	4b44      	ldr	r3, [pc, #272]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a43      	ldr	r2, [pc, #268]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032da:	f7fe f9dd 	bl	8001698 <HAL_GetTick>
 80032de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80032e2:	f7fe f9d9 	bl	8001698 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e06c      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80032f4:	4b3a      	ldr	r3, [pc, #232]	; (80033e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003300:	4b36      	ldr	r3, [pc, #216]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003304:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003308:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d02f      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	429a      	cmp	r2, r3
 800331c:	d028      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800331e:	4b2f      	ldr	r3, [pc, #188]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003326:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003328:	4b2e      	ldr	r3, [pc, #184]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800332a:	2201      	movs	r2, #1
 800332c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800332e:	4b2d      	ldr	r3, [pc, #180]	; (80033e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003334:	4a29      	ldr	r2, [pc, #164]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800333a:	4b28      	ldr	r3, [pc, #160]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333e:	f003 0301 	and.w	r3, r3, #1
 8003342:	2b01      	cmp	r3, #1
 8003344:	d114      	bne.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003346:	f7fe f9a7 	bl	8001698 <HAL_GetTick>
 800334a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800334c:	e00a      	b.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800334e:	f7fe f9a3 	bl	8001698 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	f241 3288 	movw	r2, #5000	; 0x1388
 800335c:	4293      	cmp	r3, r2
 800335e:	d901      	bls.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e034      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003364:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0ee      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003378:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800337c:	d10d      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800337e:	4b17      	ldr	r3, [pc, #92]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800338e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003392:	4912      	ldr	r1, [pc, #72]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003394:	4313      	orrs	r3, r2
 8003396:	608b      	str	r3, [r1, #8]
 8003398:	e005      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800339a:	4b10      	ldr	r3, [pc, #64]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	4a0f      	ldr	r2, [pc, #60]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80033a4:	6093      	str	r3, [r2, #8]
 80033a6:	4b0d      	ldr	r3, [pc, #52]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b2:	490a      	ldr	r1, [pc, #40]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d003      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	7c1a      	ldrb	r2, [r3, #16]
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033ca:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	42470068 	.word	0x42470068
 80033dc:	40023800 	.word	0x40023800
 80033e0:	40007000 	.word	0x40007000
 80033e4:	42470e40 	.word	0x42470e40
 80033e8:	424711e0 	.word	0x424711e0

080033ec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e073      	b.n	80034ea <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	7f5b      	ldrb	r3, [r3, #29]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d105      	bne.n	8003418 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd ff98 	bl	8001348 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0310 	and.w	r3, r3, #16
 8003428:	2b10      	cmp	r3, #16
 800342a:	d055      	beq.n	80034d8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	22ca      	movs	r2, #202	; 0xca
 8003432:	625a      	str	r2, [r3, #36]	; 0x24
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2253      	movs	r2, #83	; 0x53
 800343a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f000 f87f 	bl	8003540 <RTC_EnterInitMode>
 8003442:	4603      	mov	r3, r0
 8003444:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d12c      	bne.n	80034a6 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6812      	ldr	r2, [r2, #0]
 8003456:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800345a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800345e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6899      	ldr	r1, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	68d2      	ldr	r2, [r2, #12]
 8003486:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6919      	ldr	r1, [r3, #16]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	041a      	lsls	r2, r3, #16
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f886 	bl	80035ae <RTC_ExitInitMode>
 80034a2:	4603      	mov	r3, r0
 80034a4:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80034a6:	7bfb      	ldrb	r3, [r7, #15]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d110      	bne.n	80034ce <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80034ba:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	22ff      	movs	r2, #255	; 0xff
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24
 80034d6:	e001      	b.n	80034dc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3710      	adds	r7, #16
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a0d      	ldr	r2, [pc, #52]	; (800353c <HAL_RTC_WaitForSynchro+0x48>)
 8003506:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003508:	f7fe f8c6 	bl	8001698 <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800350e:	e009      	b.n	8003524 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003510:	f7fe f8c2 	bl	8001698 <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800351e:	d901      	bls.n	8003524 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003520:	2303      	movs	r3, #3
 8003522:	e007      	b.n	8003534 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0ee      	beq.n	8003510 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	00013f5f 	.word	0x00013f5f

08003540 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003548:	2300      	movs	r3, #0
 800354a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d122      	bne.n	80035a4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800356c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800356e:	f7fe f893 	bl	8001698 <HAL_GetTick>
 8003572:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003574:	e00c      	b.n	8003590 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003576:	f7fe f88f 	bl	8001698 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003584:	d904      	bls.n	8003590 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2204      	movs	r2, #4
 800358a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359a:	2b00      	cmp	r3, #0
 800359c:	d102      	bne.n	80035a4 <RTC_EnterInitMode+0x64>
 800359e:	7bfb      	ldrb	r3, [r7, #15]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d1e8      	bne.n	8003576 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80035a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035c8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10a      	bne.n	80035ee <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff ff8b 	bl	80034f4 <HAL_RTC_WaitForSynchro>
 80035de:	4603      	mov	r3, r0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d004      	beq.n	80035ee <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2204      	movs	r2, #4
 80035e8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80035ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3710      	adds	r7, #16
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e041      	b.n	800368e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d106      	bne.n	8003624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7fd febe 	bl	80013a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3304      	adds	r3, #4
 8003634:	4619      	mov	r1, r3
 8003636:	4610      	mov	r0, r2
 8003638:	f000 fa70 	bl	8003b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2201      	movs	r2, #1
 8003668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d001      	beq.n	80036b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e044      	b.n	800373a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2202      	movs	r2, #2
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68da      	ldr	r2, [r3, #12]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0201 	orr.w	r2, r2, #1
 80036c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1e      	ldr	r2, [pc, #120]	; (8003748 <HAL_TIM_Base_Start_IT+0xb0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d018      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x6c>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036da:	d013      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x6c>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a1a      	ldr	r2, [pc, #104]	; (800374c <HAL_TIM_Base_Start_IT+0xb4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00e      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x6c>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a19      	ldr	r2, [pc, #100]	; (8003750 <HAL_TIM_Base_Start_IT+0xb8>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d009      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x6c>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a17      	ldr	r2, [pc, #92]	; (8003754 <HAL_TIM_Base_Start_IT+0xbc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_TIM_Base_Start_IT+0x6c>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a16      	ldr	r2, [pc, #88]	; (8003758 <HAL_TIM_Base_Start_IT+0xc0>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d111      	bne.n	8003728 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b06      	cmp	r3, #6
 8003714:	d010      	beq.n	8003738 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003726:	e007      	b.n	8003738 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0201 	orr.w	r2, r2, #1
 8003736:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40014000 	.word	0x40014000

0800375c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d020      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b00      	cmp	r3, #0
 8003786:	d01b      	beq.n	80037c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f06f 0202 	mvn.w	r2, #2
 8003790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	f003 0303 	and.w	r3, r3, #3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d003      	beq.n	80037ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f999 	bl	8003ade <HAL_TIM_IC_CaptureCallback>
 80037ac:	e005      	b.n	80037ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f98b 	bl	8003aca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 f99c 	bl	8003af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	f003 0304 	and.w	r3, r3, #4
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d020      	beq.n	800380c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01b      	beq.n	800380c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f06f 0204 	mvn.w	r2, #4
 80037dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2202      	movs	r2, #2
 80037e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d003      	beq.n	80037fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f973 	bl	8003ade <HAL_TIM_IC_CaptureCallback>
 80037f8:	e005      	b.n	8003806 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	f000 f965 	bl	8003aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f000 f976 	bl	8003af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d020      	beq.n	8003858 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f003 0308 	and.w	r3, r3, #8
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01b      	beq.n	8003858 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f06f 0208 	mvn.w	r2, #8
 8003828:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2204      	movs	r2, #4
 800382e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	69db      	ldr	r3, [r3, #28]
 8003836:	f003 0303 	and.w	r3, r3, #3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 f94d 	bl	8003ade <HAL_TIM_IC_CaptureCallback>
 8003844:	e005      	b.n	8003852 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f93f 	bl	8003aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f000 f950 	bl	8003af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	2b00      	cmp	r3, #0
 8003860:	d020      	beq.n	80038a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01b      	beq.n	80038a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f06f 0210 	mvn.w	r2, #16
 8003874:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2208      	movs	r2, #8
 800387a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 f927 	bl	8003ade <HAL_TIM_IC_CaptureCallback>
 8003890:	e005      	b.n	800389e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f000 f919 	bl	8003aca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 f92a 	bl	8003af2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00c      	beq.n	80038c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d007      	beq.n	80038c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f06f 0201 	mvn.w	r2, #1
 80038c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fd fbec 	bl	80010a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00c      	beq.n	80038ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fab6 	bl	8003e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d00c      	beq.n	8003910 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d007      	beq.n	8003910 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f8fb 	bl	8003b06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0320 	and.w	r3, r3, #32
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00c      	beq.n	8003934 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f003 0320 	and.w	r3, r3, #32
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f06f 0220 	mvn.w	r2, #32
 800392c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fa88 	bl	8003e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003934:	bf00      	nop
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003950:	2b01      	cmp	r3, #1
 8003952:	d101      	bne.n	8003958 <HAL_TIM_ConfigClockSource+0x1c>
 8003954:	2302      	movs	r3, #2
 8003956:	e0b4      	b.n	8003ac2 <HAL_TIM_ConfigClockSource+0x186>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2202      	movs	r2, #2
 8003964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003976:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800397e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68ba      	ldr	r2, [r7, #8]
 8003986:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003990:	d03e      	beq.n	8003a10 <HAL_TIM_ConfigClockSource+0xd4>
 8003992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003996:	f200 8087 	bhi.w	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 800399a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399e:	f000 8086 	beq.w	8003aae <HAL_TIM_ConfigClockSource+0x172>
 80039a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a6:	d87f      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80039a8:	2b70      	cmp	r3, #112	; 0x70
 80039aa:	d01a      	beq.n	80039e2 <HAL_TIM_ConfigClockSource+0xa6>
 80039ac:	2b70      	cmp	r3, #112	; 0x70
 80039ae:	d87b      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80039b0:	2b60      	cmp	r3, #96	; 0x60
 80039b2:	d050      	beq.n	8003a56 <HAL_TIM_ConfigClockSource+0x11a>
 80039b4:	2b60      	cmp	r3, #96	; 0x60
 80039b6:	d877      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80039b8:	2b50      	cmp	r3, #80	; 0x50
 80039ba:	d03c      	beq.n	8003a36 <HAL_TIM_ConfigClockSource+0xfa>
 80039bc:	2b50      	cmp	r3, #80	; 0x50
 80039be:	d873      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d058      	beq.n	8003a76 <HAL_TIM_ConfigClockSource+0x13a>
 80039c4:	2b40      	cmp	r3, #64	; 0x40
 80039c6:	d86f      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80039c8:	2b30      	cmp	r3, #48	; 0x30
 80039ca:	d064      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x15a>
 80039cc:	2b30      	cmp	r3, #48	; 0x30
 80039ce:	d86b      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d060      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x15a>
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d867      	bhi.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d05c      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x15a>
 80039dc:	2b10      	cmp	r3, #16
 80039de:	d05a      	beq.n	8003a96 <HAL_TIM_ConfigClockSource+0x15a>
 80039e0:	e062      	b.n	8003aa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80039f2:	f000 f999 	bl	8003d28 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68ba      	ldr	r2, [r7, #8]
 8003a0c:	609a      	str	r2, [r3, #8]
      break;
 8003a0e:	e04f      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a20:	f000 f982 	bl	8003d28 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689a      	ldr	r2, [r3, #8]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a32:	609a      	str	r2, [r3, #8]
      break;
 8003a34:	e03c      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a42:	461a      	mov	r2, r3
 8003a44:	f000 f8f6 	bl	8003c34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2150      	movs	r1, #80	; 0x50
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f94f 	bl	8003cf2 <TIM_ITRx_SetConfig>
      break;
 8003a54:	e02c      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a62:	461a      	mov	r2, r3
 8003a64:	f000 f915 	bl	8003c92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2160      	movs	r1, #96	; 0x60
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f93f 	bl	8003cf2 <TIM_ITRx_SetConfig>
      break;
 8003a74:	e01c      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a82:	461a      	mov	r2, r3
 8003a84:	f000 f8d6 	bl	8003c34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2140      	movs	r1, #64	; 0x40
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f000 f92f 	bl	8003cf2 <TIM_ITRx_SetConfig>
      break;
 8003a94:	e00c      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f000 f926 	bl	8003cf2 <TIM_ITRx_SetConfig>
      break;
 8003aa6:	e003      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	73fb      	strb	r3, [r7, #15]
      break;
 8003aac:	e000      	b.n	8003ab0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003aae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}

08003aca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aca:	b480      	push	{r7}
 8003acc:	b083      	sub	sp, #12
 8003ace:	af00      	add	r7, sp, #0
 8003ad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ad2:	bf00      	nop
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr

08003ade <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ade:	b480      	push	{r7}
 8003ae0:	b083      	sub	sp, #12
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003afa:	bf00      	nop
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b083      	sub	sp, #12
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b0e:	bf00      	nop
 8003b10:	370c      	adds	r7, #12
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a3a      	ldr	r2, [pc, #232]	; (8003c18 <TIM_Base_SetConfig+0xfc>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00f      	beq.n	8003b54 <TIM_Base_SetConfig+0x38>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3a:	d00b      	beq.n	8003b54 <TIM_Base_SetConfig+0x38>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a37      	ldr	r2, [pc, #220]	; (8003c1c <TIM_Base_SetConfig+0x100>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d007      	beq.n	8003b54 <TIM_Base_SetConfig+0x38>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a36      	ldr	r2, [pc, #216]	; (8003c20 <TIM_Base_SetConfig+0x104>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <TIM_Base_SetConfig+0x38>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a35      	ldr	r2, [pc, #212]	; (8003c24 <TIM_Base_SetConfig+0x108>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d108      	bne.n	8003b66 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	4313      	orrs	r3, r2
 8003b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a2b      	ldr	r2, [pc, #172]	; (8003c18 <TIM_Base_SetConfig+0xfc>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01b      	beq.n	8003ba6 <TIM_Base_SetConfig+0x8a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b74:	d017      	beq.n	8003ba6 <TIM_Base_SetConfig+0x8a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a28      	ldr	r2, [pc, #160]	; (8003c1c <TIM_Base_SetConfig+0x100>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d013      	beq.n	8003ba6 <TIM_Base_SetConfig+0x8a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a27      	ldr	r2, [pc, #156]	; (8003c20 <TIM_Base_SetConfig+0x104>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00f      	beq.n	8003ba6 <TIM_Base_SetConfig+0x8a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a26      	ldr	r2, [pc, #152]	; (8003c24 <TIM_Base_SetConfig+0x108>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00b      	beq.n	8003ba6 <TIM_Base_SetConfig+0x8a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a25      	ldr	r2, [pc, #148]	; (8003c28 <TIM_Base_SetConfig+0x10c>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d007      	beq.n	8003ba6 <TIM_Base_SetConfig+0x8a>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a24      	ldr	r2, [pc, #144]	; (8003c2c <TIM_Base_SetConfig+0x110>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <TIM_Base_SetConfig+0x8a>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a23      	ldr	r2, [pc, #140]	; (8003c30 <TIM_Base_SetConfig+0x114>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d108      	bne.n	8003bb8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	689a      	ldr	r2, [r3, #8]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a0e      	ldr	r2, [pc, #56]	; (8003c18 <TIM_Base_SetConfig+0xfc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d103      	bne.n	8003bec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d105      	bne.n	8003c0a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f023 0201 	bic.w	r2, r3, #1
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	611a      	str	r2, [r3, #16]
  }
}
 8003c0a:	bf00      	nop
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800
 8003c24:	40000c00 	.word	0x40000c00
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40014400 	.word	0x40014400
 8003c30:	40014800 	.word	0x40014800

08003c34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6a1b      	ldr	r3, [r3, #32]
 8003c4a:	f023 0201 	bic.w	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	699b      	ldr	r3, [r3, #24]
 8003c56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	f023 030a 	bic.w	r3, r3, #10
 8003c70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c72:	697a      	ldr	r2, [r7, #20]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	621a      	str	r2, [r3, #32]
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b087      	sub	sp, #28
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a1b      	ldr	r3, [r3, #32]
 8003ca8:	f023 0210 	bic.w	r2, r3, #16
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	699b      	ldr	r3, [r3, #24]
 8003cb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cbc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	031b      	lsls	r3, r3, #12
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	621a      	str	r2, [r3, #32]
}
 8003ce6:	bf00      	nop
 8003ce8:	371c      	adds	r7, #28
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b085      	sub	sp, #20
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	f043 0307 	orr.w	r3, r3, #7
 8003d14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	609a      	str	r2, [r3, #8]
}
 8003d1c:	bf00      	nop
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b087      	sub	sp, #28
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	021a      	lsls	r2, r3, #8
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	431a      	orrs	r2, r3
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	609a      	str	r2, [r3, #8]
}
 8003d5c:	bf00      	nop
 8003d5e:	371c      	adds	r7, #28
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr

08003d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e050      	b.n	8003e22 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003da6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d018      	beq.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dcc:	d013      	beq.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a18      	ldr	r2, [pc, #96]	; (8003e34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d00e      	beq.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a16      	ldr	r2, [pc, #88]	; (8003e38 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d009      	beq.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d004      	beq.n	8003df6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a13      	ldr	r2, [pc, #76]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d10c      	bne.n	8003e10 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	40010000 	.word	0x40010000
 8003e34:	40000400 	.word	0x40000400
 8003e38:	40000800 	.word	0x40000800
 8003e3c:	40000c00 	.word	0x40000c00
 8003e40:	40014000 	.word	0x40014000

08003e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e042      	b.n	8003f04 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd faac 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2224      	movs	r2, #36	; 0x24
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f973 	bl	800419c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ec4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695a      	ldr	r2, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ed4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68da      	ldr	r2, [r3, #12]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ee4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	603b      	str	r3, [r7, #0]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b20      	cmp	r3, #32
 8003f2a:	d175      	bne.n	8004018 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d002      	beq.n	8003f38 <HAL_UART_Transmit+0x2c>
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e06e      	b.n	800401a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2221      	movs	r2, #33	; 0x21
 8003f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f4a:	f7fd fba5 	bl	8001698 <HAL_GetTick>
 8003f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	88fa      	ldrh	r2, [r7, #6]
 8003f54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	88fa      	ldrh	r2, [r7, #6]
 8003f5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f64:	d108      	bne.n	8003f78 <HAL_UART_Transmit+0x6c>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d104      	bne.n	8003f78 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	61bb      	str	r3, [r7, #24]
 8003f76:	e003      	b.n	8003f80 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f80:	e02e      	b.n	8003fe0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	2180      	movs	r1, #128	; 0x80
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 f848 	bl	8004022 <UART_WaitOnFlagUntilTimeout>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d005      	beq.n	8003fa4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e03a      	b.n	800401a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10b      	bne.n	8003fc2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	e007      	b.n	8003fd2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1cb      	bne.n	8003f82 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2140      	movs	r1, #64	; 0x40
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f814 	bl	8004022 <UART_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2220      	movs	r2, #32
 8004004:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004008:	2303      	movs	r3, #3
 800400a:	e006      	b.n	800401a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004014:	2300      	movs	r3, #0
 8004016:	e000      	b.n	800401a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004018:	2302      	movs	r3, #2
  }
}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004022:	b580      	push	{r7, lr}
 8004024:	b086      	sub	sp, #24
 8004026:	af00      	add	r7, sp, #0
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	603b      	str	r3, [r7, #0]
 800402e:	4613      	mov	r3, r2
 8004030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004032:	e03b      	b.n	80040ac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800403a:	d037      	beq.n	80040ac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403c:	f7fd fb2c 	bl	8001698 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	6a3a      	ldr	r2, [r7, #32]
 8004048:	429a      	cmp	r2, r3
 800404a:	d302      	bcc.n	8004052 <UART_WaitOnFlagUntilTimeout+0x30>
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e03a      	b.n	80040cc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d023      	beq.n	80040ac <UART_WaitOnFlagUntilTimeout+0x8a>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b80      	cmp	r3, #128	; 0x80
 8004068:	d020      	beq.n	80040ac <UART_WaitOnFlagUntilTimeout+0x8a>
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	2b40      	cmp	r3, #64	; 0x40
 800406e:	d01d      	beq.n	80040ac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0308 	and.w	r3, r3, #8
 800407a:	2b08      	cmp	r3, #8
 800407c:	d116      	bne.n	80040ac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	617b      	str	r3, [r7, #20]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	617b      	str	r3, [r7, #20]
 8004092:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f81d 	bl	80040d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2208      	movs	r2, #8
 800409e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e00f      	b.n	80040cc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4013      	ands	r3, r2
 80040b6:	68ba      	ldr	r2, [r7, #8]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	bf0c      	ite	eq
 80040bc:	2301      	moveq	r3, #1
 80040be:	2300      	movne	r3, #0
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	461a      	mov	r2, r3
 80040c4:	79fb      	ldrb	r3, [r7, #7]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d0b4      	beq.n	8004034 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b095      	sub	sp, #84	; 0x54
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040fc:	643a      	str	r2, [r7, #64]	; 0x40
 80040fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e5      	bne.n	80040dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3314      	adds	r3, #20
 8004116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	64bb      	str	r3, [r7, #72]	; 0x48
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3314      	adds	r3, #20
 800412e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004130:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e5      	bne.n	8004110 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	2b01      	cmp	r3, #1
 800414a:	d119      	bne.n	8004180 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	60bb      	str	r3, [r7, #8]
   return(result);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f023 0310 	bic.w	r3, r3, #16
 8004162:	647b      	str	r3, [r7, #68]	; 0x44
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800416c:	61ba      	str	r2, [r7, #24]
 800416e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6979      	ldr	r1, [r7, #20]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	613b      	str	r3, [r7, #16]
   return(result);
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e5      	bne.n	800414c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800418e:	bf00      	nop
 8004190:	3754      	adds	r7, #84	; 0x54
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr
	...

0800419c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800419c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a0:	b0c0      	sub	sp, #256	; 0x100
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b8:	68d9      	ldr	r1, [r3, #12]
 80041ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	ea40 0301 	orr.w	r3, r0, r1
 80041c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ca:	689a      	ldr	r2, [r3, #8]
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	431a      	orrs	r2, r3
 80041dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041f4:	f021 010c 	bic.w	r1, r1, #12
 80041f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004202:	430b      	orrs	r3, r1
 8004204:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004216:	6999      	ldr	r1, [r3, #24]
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	ea40 0301 	orr.w	r3, r0, r1
 8004222:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	4b8f      	ldr	r3, [pc, #572]	; (8004468 <UART_SetConfig+0x2cc>)
 800422c:	429a      	cmp	r2, r3
 800422e:	d005      	beq.n	800423c <UART_SetConfig+0xa0>
 8004230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4b8d      	ldr	r3, [pc, #564]	; (800446c <UART_SetConfig+0x2d0>)
 8004238:	429a      	cmp	r2, r3
 800423a:	d104      	bne.n	8004246 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800423c:	f7fe ffd4 	bl	80031e8 <HAL_RCC_GetPCLK2Freq>
 8004240:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004244:	e003      	b.n	800424e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004246:	f7fe ffbb 	bl	80031c0 <HAL_RCC_GetPCLK1Freq>
 800424a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800424e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004258:	f040 810c 	bne.w	8004474 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800425c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004260:	2200      	movs	r2, #0
 8004262:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004266:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800426a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800426e:	4622      	mov	r2, r4
 8004270:	462b      	mov	r3, r5
 8004272:	1891      	adds	r1, r2, r2
 8004274:	65b9      	str	r1, [r7, #88]	; 0x58
 8004276:	415b      	adcs	r3, r3
 8004278:	65fb      	str	r3, [r7, #92]	; 0x5c
 800427a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800427e:	4621      	mov	r1, r4
 8004280:	eb12 0801 	adds.w	r8, r2, r1
 8004284:	4629      	mov	r1, r5
 8004286:	eb43 0901 	adc.w	r9, r3, r1
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004296:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800429a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800429e:	4690      	mov	r8, r2
 80042a0:	4699      	mov	r9, r3
 80042a2:	4623      	mov	r3, r4
 80042a4:	eb18 0303 	adds.w	r3, r8, r3
 80042a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80042ac:	462b      	mov	r3, r5
 80042ae:	eb49 0303 	adc.w	r3, r9, r3
 80042b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042ca:	460b      	mov	r3, r1
 80042cc:	18db      	adds	r3, r3, r3
 80042ce:	653b      	str	r3, [r7, #80]	; 0x50
 80042d0:	4613      	mov	r3, r2
 80042d2:	eb42 0303 	adc.w	r3, r2, r3
 80042d6:	657b      	str	r3, [r7, #84]	; 0x54
 80042d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042e0:	f7fc fb44 	bl	800096c <__aeabi_uldivmod>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4b61      	ldr	r3, [pc, #388]	; (8004470 <UART_SetConfig+0x2d4>)
 80042ea:	fba3 2302 	umull	r2, r3, r3, r2
 80042ee:	095b      	lsrs	r3, r3, #5
 80042f0:	011c      	lsls	r4, r3, #4
 80042f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042f6:	2200      	movs	r2, #0
 80042f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042fc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004300:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004304:	4642      	mov	r2, r8
 8004306:	464b      	mov	r3, r9
 8004308:	1891      	adds	r1, r2, r2
 800430a:	64b9      	str	r1, [r7, #72]	; 0x48
 800430c:	415b      	adcs	r3, r3
 800430e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004310:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004314:	4641      	mov	r1, r8
 8004316:	eb12 0a01 	adds.w	sl, r2, r1
 800431a:	4649      	mov	r1, r9
 800431c:	eb43 0b01 	adc.w	fp, r3, r1
 8004320:	f04f 0200 	mov.w	r2, #0
 8004324:	f04f 0300 	mov.w	r3, #0
 8004328:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800432c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004334:	4692      	mov	sl, r2
 8004336:	469b      	mov	fp, r3
 8004338:	4643      	mov	r3, r8
 800433a:	eb1a 0303 	adds.w	r3, sl, r3
 800433e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004342:	464b      	mov	r3, r9
 8004344:	eb4b 0303 	adc.w	r3, fp, r3
 8004348:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004358:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800435c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004360:	460b      	mov	r3, r1
 8004362:	18db      	adds	r3, r3, r3
 8004364:	643b      	str	r3, [r7, #64]	; 0x40
 8004366:	4613      	mov	r3, r2
 8004368:	eb42 0303 	adc.w	r3, r2, r3
 800436c:	647b      	str	r3, [r7, #68]	; 0x44
 800436e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004372:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004376:	f7fc faf9 	bl	800096c <__aeabi_uldivmod>
 800437a:	4602      	mov	r2, r0
 800437c:	460b      	mov	r3, r1
 800437e:	4611      	mov	r1, r2
 8004380:	4b3b      	ldr	r3, [pc, #236]	; (8004470 <UART_SetConfig+0x2d4>)
 8004382:	fba3 2301 	umull	r2, r3, r3, r1
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	2264      	movs	r2, #100	; 0x64
 800438a:	fb02 f303 	mul.w	r3, r2, r3
 800438e:	1acb      	subs	r3, r1, r3
 8004390:	00db      	lsls	r3, r3, #3
 8004392:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004396:	4b36      	ldr	r3, [pc, #216]	; (8004470 <UART_SetConfig+0x2d4>)
 8004398:	fba3 2302 	umull	r2, r3, r3, r2
 800439c:	095b      	lsrs	r3, r3, #5
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80043a4:	441c      	add	r4, r3
 80043a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80043b0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043b8:	4642      	mov	r2, r8
 80043ba:	464b      	mov	r3, r9
 80043bc:	1891      	adds	r1, r2, r2
 80043be:	63b9      	str	r1, [r7, #56]	; 0x38
 80043c0:	415b      	adcs	r3, r3
 80043c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043c8:	4641      	mov	r1, r8
 80043ca:	1851      	adds	r1, r2, r1
 80043cc:	6339      	str	r1, [r7, #48]	; 0x30
 80043ce:	4649      	mov	r1, r9
 80043d0:	414b      	adcs	r3, r1
 80043d2:	637b      	str	r3, [r7, #52]	; 0x34
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	f04f 0300 	mov.w	r3, #0
 80043dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043e0:	4659      	mov	r1, fp
 80043e2:	00cb      	lsls	r3, r1, #3
 80043e4:	4651      	mov	r1, sl
 80043e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ea:	4651      	mov	r1, sl
 80043ec:	00ca      	lsls	r2, r1, #3
 80043ee:	4610      	mov	r0, r2
 80043f0:	4619      	mov	r1, r3
 80043f2:	4603      	mov	r3, r0
 80043f4:	4642      	mov	r2, r8
 80043f6:	189b      	adds	r3, r3, r2
 80043f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043fc:	464b      	mov	r3, r9
 80043fe:	460a      	mov	r2, r1
 8004400:	eb42 0303 	adc.w	r3, r2, r3
 8004404:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004414:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004418:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800441c:	460b      	mov	r3, r1
 800441e:	18db      	adds	r3, r3, r3
 8004420:	62bb      	str	r3, [r7, #40]	; 0x28
 8004422:	4613      	mov	r3, r2
 8004424:	eb42 0303 	adc.w	r3, r2, r3
 8004428:	62fb      	str	r3, [r7, #44]	; 0x2c
 800442a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800442e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004432:	f7fc fa9b 	bl	800096c <__aeabi_uldivmod>
 8004436:	4602      	mov	r2, r0
 8004438:	460b      	mov	r3, r1
 800443a:	4b0d      	ldr	r3, [pc, #52]	; (8004470 <UART_SetConfig+0x2d4>)
 800443c:	fba3 1302 	umull	r1, r3, r3, r2
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	2164      	movs	r1, #100	; 0x64
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	3332      	adds	r3, #50	; 0x32
 800444e:	4a08      	ldr	r2, [pc, #32]	; (8004470 <UART_SetConfig+0x2d4>)
 8004450:	fba2 2303 	umull	r2, r3, r2, r3
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	f003 0207 	and.w	r2, r3, #7
 800445a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4422      	add	r2, r4
 8004462:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004464:	e106      	b.n	8004674 <UART_SetConfig+0x4d8>
 8004466:	bf00      	nop
 8004468:	40011000 	.word	0x40011000
 800446c:	40011400 	.word	0x40011400
 8004470:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004474:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004478:	2200      	movs	r2, #0
 800447a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800447e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004482:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004486:	4642      	mov	r2, r8
 8004488:	464b      	mov	r3, r9
 800448a:	1891      	adds	r1, r2, r2
 800448c:	6239      	str	r1, [r7, #32]
 800448e:	415b      	adcs	r3, r3
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
 8004492:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004496:	4641      	mov	r1, r8
 8004498:	1854      	adds	r4, r2, r1
 800449a:	4649      	mov	r1, r9
 800449c:	eb43 0501 	adc.w	r5, r3, r1
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	00eb      	lsls	r3, r5, #3
 80044aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044ae:	00e2      	lsls	r2, r4, #3
 80044b0:	4614      	mov	r4, r2
 80044b2:	461d      	mov	r5, r3
 80044b4:	4643      	mov	r3, r8
 80044b6:	18e3      	adds	r3, r4, r3
 80044b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044bc:	464b      	mov	r3, r9
 80044be:	eb45 0303 	adc.w	r3, r5, r3
 80044c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044d2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044d6:	f04f 0200 	mov.w	r2, #0
 80044da:	f04f 0300 	mov.w	r3, #0
 80044de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044e2:	4629      	mov	r1, r5
 80044e4:	008b      	lsls	r3, r1, #2
 80044e6:	4621      	mov	r1, r4
 80044e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044ec:	4621      	mov	r1, r4
 80044ee:	008a      	lsls	r2, r1, #2
 80044f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044f4:	f7fc fa3a 	bl	800096c <__aeabi_uldivmod>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4b60      	ldr	r3, [pc, #384]	; (8004680 <UART_SetConfig+0x4e4>)
 80044fe:	fba3 2302 	umull	r2, r3, r3, r2
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	011c      	lsls	r4, r3, #4
 8004506:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800450a:	2200      	movs	r2, #0
 800450c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004510:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004514:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004518:	4642      	mov	r2, r8
 800451a:	464b      	mov	r3, r9
 800451c:	1891      	adds	r1, r2, r2
 800451e:	61b9      	str	r1, [r7, #24]
 8004520:	415b      	adcs	r3, r3
 8004522:	61fb      	str	r3, [r7, #28]
 8004524:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004528:	4641      	mov	r1, r8
 800452a:	1851      	adds	r1, r2, r1
 800452c:	6139      	str	r1, [r7, #16]
 800452e:	4649      	mov	r1, r9
 8004530:	414b      	adcs	r3, r1
 8004532:	617b      	str	r3, [r7, #20]
 8004534:	f04f 0200 	mov.w	r2, #0
 8004538:	f04f 0300 	mov.w	r3, #0
 800453c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004540:	4659      	mov	r1, fp
 8004542:	00cb      	lsls	r3, r1, #3
 8004544:	4651      	mov	r1, sl
 8004546:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800454a:	4651      	mov	r1, sl
 800454c:	00ca      	lsls	r2, r1, #3
 800454e:	4610      	mov	r0, r2
 8004550:	4619      	mov	r1, r3
 8004552:	4603      	mov	r3, r0
 8004554:	4642      	mov	r2, r8
 8004556:	189b      	adds	r3, r3, r2
 8004558:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800455c:	464b      	mov	r3, r9
 800455e:	460a      	mov	r2, r1
 8004560:	eb42 0303 	adc.w	r3, r2, r3
 8004564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	67bb      	str	r3, [r7, #120]	; 0x78
 8004572:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f04f 0300 	mov.w	r3, #0
 800457c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004580:	4649      	mov	r1, r9
 8004582:	008b      	lsls	r3, r1, #2
 8004584:	4641      	mov	r1, r8
 8004586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800458a:	4641      	mov	r1, r8
 800458c:	008a      	lsls	r2, r1, #2
 800458e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004592:	f7fc f9eb 	bl	800096c <__aeabi_uldivmod>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4611      	mov	r1, r2
 800459c:	4b38      	ldr	r3, [pc, #224]	; (8004680 <UART_SetConfig+0x4e4>)
 800459e:	fba3 2301 	umull	r2, r3, r3, r1
 80045a2:	095b      	lsrs	r3, r3, #5
 80045a4:	2264      	movs	r2, #100	; 0x64
 80045a6:	fb02 f303 	mul.w	r3, r2, r3
 80045aa:	1acb      	subs	r3, r1, r3
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	3332      	adds	r3, #50	; 0x32
 80045b0:	4a33      	ldr	r2, [pc, #204]	; (8004680 <UART_SetConfig+0x4e4>)
 80045b2:	fba2 2303 	umull	r2, r3, r2, r3
 80045b6:	095b      	lsrs	r3, r3, #5
 80045b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045bc:	441c      	add	r4, r3
 80045be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045c2:	2200      	movs	r2, #0
 80045c4:	673b      	str	r3, [r7, #112]	; 0x70
 80045c6:	677a      	str	r2, [r7, #116]	; 0x74
 80045c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045cc:	4642      	mov	r2, r8
 80045ce:	464b      	mov	r3, r9
 80045d0:	1891      	adds	r1, r2, r2
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	415b      	adcs	r3, r3
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045dc:	4641      	mov	r1, r8
 80045de:	1851      	adds	r1, r2, r1
 80045e0:	6039      	str	r1, [r7, #0]
 80045e2:	4649      	mov	r1, r9
 80045e4:	414b      	adcs	r3, r1
 80045e6:	607b      	str	r3, [r7, #4]
 80045e8:	f04f 0200 	mov.w	r2, #0
 80045ec:	f04f 0300 	mov.w	r3, #0
 80045f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045f4:	4659      	mov	r1, fp
 80045f6:	00cb      	lsls	r3, r1, #3
 80045f8:	4651      	mov	r1, sl
 80045fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045fe:	4651      	mov	r1, sl
 8004600:	00ca      	lsls	r2, r1, #3
 8004602:	4610      	mov	r0, r2
 8004604:	4619      	mov	r1, r3
 8004606:	4603      	mov	r3, r0
 8004608:	4642      	mov	r2, r8
 800460a:	189b      	adds	r3, r3, r2
 800460c:	66bb      	str	r3, [r7, #104]	; 0x68
 800460e:	464b      	mov	r3, r9
 8004610:	460a      	mov	r2, r1
 8004612:	eb42 0303 	adc.w	r3, r2, r3
 8004616:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	663b      	str	r3, [r7, #96]	; 0x60
 8004622:	667a      	str	r2, [r7, #100]	; 0x64
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004630:	4649      	mov	r1, r9
 8004632:	008b      	lsls	r3, r1, #2
 8004634:	4641      	mov	r1, r8
 8004636:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800463a:	4641      	mov	r1, r8
 800463c:	008a      	lsls	r2, r1, #2
 800463e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004642:	f7fc f993 	bl	800096c <__aeabi_uldivmod>
 8004646:	4602      	mov	r2, r0
 8004648:	460b      	mov	r3, r1
 800464a:	4b0d      	ldr	r3, [pc, #52]	; (8004680 <UART_SetConfig+0x4e4>)
 800464c:	fba3 1302 	umull	r1, r3, r3, r2
 8004650:	095b      	lsrs	r3, r3, #5
 8004652:	2164      	movs	r1, #100	; 0x64
 8004654:	fb01 f303 	mul.w	r3, r1, r3
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	011b      	lsls	r3, r3, #4
 800465c:	3332      	adds	r3, #50	; 0x32
 800465e:	4a08      	ldr	r2, [pc, #32]	; (8004680 <UART_SetConfig+0x4e4>)
 8004660:	fba2 2303 	umull	r2, r3, r2, r3
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	f003 020f 	and.w	r2, r3, #15
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4422      	add	r2, r4
 8004672:	609a      	str	r2, [r3, #8]
}
 8004674:	bf00      	nop
 8004676:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800467a:	46bd      	mov	sp, r7
 800467c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004680:	51eb851f 	.word	0x51eb851f

08004684 <InfraredPD_Initialize>:
 8004684:	2802      	cmp	r0, #2
 8004686:	d825      	bhi.n	80046d4 <InfraredPD_Initialize+0x50>
 8004688:	2800      	cmp	r0, #0
 800468a:	d130      	bne.n	80046ee <InfraredPD_Initialize+0x6a>
 800468c:	4a3e      	ldr	r2, [pc, #248]	; (8004788 <InfraredPD_Initialize+0x104>)
 800468e:	6813      	ldr	r3, [r2, #0]
 8004690:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8004694:	f023 0301 	bic.w	r3, r3, #1
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 800469e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80046a2:	f24c 2240 	movw	r2, #49728	; 0xc240
 80046a6:	400b      	ands	r3, r1
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d02e      	beq.n	800470a <InfraredPD_Initialize+0x86>
 80046ac:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 80046b0:	f24c 2270 	movw	r2, #49776	; 0xc270
 80046b4:	400b      	ands	r3, r1
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d027      	beq.n	800470a <InfraredPD_Initialize+0x86>
 80046ba:	4a34      	ldr	r2, [pc, #208]	; (800478c <InfraredPD_Initialize+0x108>)
 80046bc:	2301      	movs	r3, #1
 80046be:	6093      	str	r3, [r2, #8]
 80046c0:	6893      	ldr	r3, [r2, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d1fc      	bne.n	80046c0 <InfraredPD_Initialize+0x3c>
 80046c6:	4b32      	ldr	r3, [pc, #200]	; (8004790 <InfraredPD_Initialize+0x10c>)
 80046c8:	6013      	str	r3, [r2, #0]
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	4b31      	ldr	r3, [pc, #196]	; (8004794 <InfraredPD_Initialize+0x110>)
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d016      	beq.n	8004700 <InfraredPD_Initialize+0x7c>
 80046d2:	e7fe      	b.n	80046d2 <InfraredPD_Initialize+0x4e>
 80046d4:	2803      	cmp	r0, #3
 80046d6:	d1d9      	bne.n	800468c <InfraredPD_Initialize+0x8>
 80046d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80046dc:	4a2e      	ldr	r2, [pc, #184]	; (8004798 <InfraredPD_Initialize+0x114>)
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	4291      	cmp	r1, r2
 80046e2:	d00d      	beq.n	8004700 <InfraredPD_Initialize+0x7c>
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	4b2d      	ldr	r3, [pc, #180]	; (800479c <InfraredPD_Initialize+0x118>)
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d009      	beq.n	8004700 <InfraredPD_Initialize+0x7c>
 80046ec:	e7fe      	b.n	80046ec <InfraredPD_Initialize+0x68>
 80046ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80046f2:	4a2b      	ldr	r2, [pc, #172]	; (80047a0 <InfraredPD_Initialize+0x11c>)
 80046f4:	f8d3 37f8 	ldr.w	r3, [r3, #2040]	; 0x7f8
 80046f8:	0c1b      	lsrs	r3, r3, #16
 80046fa:	041b      	lsls	r3, r3, #16
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d103      	bne.n	8004708 <InfraredPD_Initialize+0x84>
 8004700:	4b28      	ldr	r3, [pc, #160]	; (80047a4 <InfraredPD_Initialize+0x120>)
 8004702:	2201      	movs	r2, #1
 8004704:	701a      	strb	r2, [r3, #0]
 8004706:	4770      	bx	lr
 8004708:	e7fe      	b.n	8004708 <InfraredPD_Initialize+0x84>
 800470a:	4b27      	ldr	r3, [pc, #156]	; (80047a8 <InfraredPD_Initialize+0x124>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1d3      	bne.n	80046ba <InfraredPD_Initialize+0x36>
 8004712:	4a26      	ldr	r2, [pc, #152]	; (80047ac <InfraredPD_Initialize+0x128>)
 8004714:	6813      	ldr	r3, [r2, #0]
 8004716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800471a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800471e:	d021      	beq.n	8004764 <InfraredPD_Initialize+0xe0>
 8004720:	6813      	ldr	r3, [r2, #0]
 8004722:	f240 4183 	movw	r1, #1155	; 0x483
 8004726:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800472a:	428b      	cmp	r3, r1
 800472c:	d01a      	beq.n	8004764 <InfraredPD_Initialize+0xe0>
 800472e:	6813      	ldr	r3, [r2, #0]
 8004730:	f240 4285 	movw	r2, #1157	; 0x485
 8004734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004738:	4293      	cmp	r3, r2
 800473a:	d013      	beq.n	8004764 <InfraredPD_Initialize+0xe0>
 800473c:	4b1c      	ldr	r3, [pc, #112]	; (80047b0 <InfraredPD_Initialize+0x12c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004744:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004748:	d1b7      	bne.n	80046ba <InfraredPD_Initialize+0x36>
 800474a:	4a1a      	ldr	r2, [pc, #104]	; (80047b4 <InfraredPD_Initialize+0x130>)
 800474c:	2301      	movs	r3, #1
 800474e:	6093      	str	r3, [r2, #8]
 8004750:	6893      	ldr	r3, [r2, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d1fc      	bne.n	8004750 <InfraredPD_Initialize+0xcc>
 8004756:	4b0e      	ldr	r3, [pc, #56]	; (8004790 <InfraredPD_Initialize+0x10c>)
 8004758:	6013      	str	r3, [r2, #0]
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	4b0d      	ldr	r3, [pc, #52]	; (8004794 <InfraredPD_Initialize+0x110>)
 800475e:	429a      	cmp	r2, r3
 8004760:	d0ce      	beq.n	8004700 <InfraredPD_Initialize+0x7c>
 8004762:	e7b6      	b.n	80046d2 <InfraredPD_Initialize+0x4e>
 8004764:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <InfraredPD_Initialize+0x134>)
 8004766:	2301      	movs	r3, #1
 8004768:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800476c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1fb      	bne.n	800476c <InfraredPD_Initialize+0xe8>
 8004774:	4b06      	ldr	r3, [pc, #24]	; (8004790 <InfraredPD_Initialize+0x10c>)
 8004776:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800477a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800477e:	4b05      	ldr	r3, [pc, #20]	; (8004794 <InfraredPD_Initialize+0x110>)
 8004780:	429a      	cmp	r2, r3
 8004782:	d0bd      	beq.n	8004700 <InfraredPD_Initialize+0x7c>
 8004784:	e7a5      	b.n	80046d2 <InfraredPD_Initialize+0x4e>
 8004786:	bf00      	nop
 8004788:	e0002000 	.word	0xe0002000
 800478c:	40023000 	.word	0x40023000
 8004790:	f407a5c2 	.word	0xf407a5c2
 8004794:	b5e8b5cd 	.word	0xb5e8b5cd
 8004798:	0201e041 	.word	0x0201e041
 800479c:	02028041 	.word	0x02028041
 80047a0:	aa550000 	.word	0xaa550000
 80047a4:	20000078 	.word	0x20000078
 80047a8:	e0042000 	.word	0xe0042000
 80047ac:	5c001000 	.word	0x5c001000
 80047b0:	50081000 	.word	0x50081000
 80047b4:	4c004000 	.word	0x4c004000
 80047b8:	58024000 	.word	0x58024000

080047bc <InfraredPD_CreateInstance>:
 80047bc:	4b0a      	ldr	r3, [pc, #40]	; (80047e8 <InfraredPD_CreateInstance+0x2c>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	b183      	cbz	r3, 80047e4 <InfraredPD_CreateInstance+0x28>
 80047c2:	b510      	push	{r4, lr}
 80047c4:	4604      	mov	r4, r0
 80047c6:	20c0      	movs	r0, #192	; 0xc0
 80047c8:	f000 fd4e 	bl	8005268 <malloc>
 80047cc:	4603      	mov	r3, r0
 80047ce:	b138      	cbz	r0, 80047e0 <InfraredPD_CreateInstance+0x24>
 80047d0:	4a06      	ldr	r2, [pc, #24]	; (80047ec <InfraredPD_CreateInstance+0x30>)
 80047d2:	ca03      	ldmia	r2!, {r0, r1}
 80047d4:	f04f 0c00 	mov.w	ip, #0
 80047d8:	f883 c0a8 	strb.w	ip, [r3, #168]	; 0xa8
 80047dc:	6020      	str	r0, [r4, #0]
 80047de:	6061      	str	r1, [r4, #4]
 80047e0:	4618      	mov	r0, r3
 80047e2:	bd10      	pop	{r4, pc}
 80047e4:	4618      	mov	r0, r3
 80047e6:	4770      	bx	lr
 80047e8:	20000078 	.word	0x20000078
 80047ec:	08005f1c 	.word	0x08005f1c

080047f0 <InfraredPD_Start>:
 80047f0:	4bbc      	ldr	r3, [pc, #752]	; (8004ae4 <InfraredPD_Start+0x2f4>)
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	b90b      	cbnz	r3, 80047fa <InfraredPD_Start+0xa>
 80047f6:	4618      	mov	r0, r3
 80047f8:	4770      	bx	lr
 80047fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fe:	ed2d 8b04 	vpush	{d8-d9}
 8004802:	4616      	mov	r6, r2
 8004804:	780a      	ldrb	r2, [r1, #0]
 8004806:	1e53      	subs	r3, r2, #1
 8004808:	2b01      	cmp	r3, #1
 800480a:	4604      	mov	r4, r0
 800480c:	460d      	mov	r5, r1
 800480e:	d917      	bls.n	8004840 <InfraredPD_Start+0x50>
 8004810:	2a0f      	cmp	r2, #15
 8004812:	d846      	bhi.n	80048a2 <InfraredPD_Start+0xb2>
 8004814:	f248 1310 	movw	r3, #33040	; 0x8110
 8004818:	40d3      	lsrs	r3, r2
 800481a:	07db      	lsls	r3, r3, #31
 800481c:	f140 81aa 	bpl.w	8004b74 <InfraredPD_Start+0x384>
 8004820:	884b      	ldrh	r3, [r1, #2]
 8004822:	2b80      	cmp	r3, #128	; 0x80
 8004824:	f000 81ae 	beq.w	8004b84 <InfraredPD_Start+0x394>
 8004828:	d90f      	bls.n	800484a <InfraredPD_Start+0x5a>
 800482a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800482e:	f000 81ae 	beq.w	8004b8e <InfraredPD_Start+0x39e>
 8004832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004836:	f040 817b 	bne.w	8004b30 <InfraredPD_Start+0x340>
 800483a:	4bab      	ldr	r3, [pc, #684]	; (8004ae8 <InfraredPD_Start+0x2f8>)
 800483c:	60a3      	str	r3, [r4, #8]
 800483e:	e020      	b.n	8004882 <InfraredPD_Start+0x92>
 8004840:	884b      	ldrh	r3, [r1, #2]
 8004842:	2b80      	cmp	r3, #128	; 0x80
 8004844:	f000 8187 	beq.w	8004b56 <InfraredPD_Start+0x366>
 8004848:	d810      	bhi.n	800486c <InfraredPD_Start+0x7c>
 800484a:	2b08      	cmp	r3, #8
 800484c:	f000 817d 	beq.w	8004b4a <InfraredPD_Start+0x35a>
 8004850:	2b20      	cmp	r3, #32
 8004852:	d120      	bne.n	8004896 <InfraredPD_Start+0xa6>
 8004854:	4ba5      	ldr	r3, [pc, #660]	; (8004aec <InfraredPD_Start+0x2fc>)
 8004856:	60a3      	str	r3, [r4, #8]
 8004858:	792b      	ldrb	r3, [r5, #4]
 800485a:	3b01      	subs	r3, #1
 800485c:	2b07      	cmp	r3, #7
 800485e:	d838      	bhi.n	80048d2 <InfraredPD_Start+0xe2>
 8004860:	e8df f003 	tbb	[pc, r3]
 8004864:	ac37b13d 	.word	0xac37b13d
 8004868:	a7373737 	.word	0xa7373737
 800486c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004870:	f000 816e 	beq.w	8004b50 <InfraredPD_Start+0x360>
 8004874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004878:	d106      	bne.n	8004888 <InfraredPD_Start+0x98>
 800487a:	4b9b      	ldr	r3, [pc, #620]	; (8004ae8 <InfraredPD_Start+0x2f8>)
 800487c:	6083      	str	r3, [r0, #8]
 800487e:	2a02      	cmp	r2, #2
 8004880:	d1ea      	bne.n	8004858 <InfraredPD_Start+0x68>
 8004882:	2301      	movs	r3, #1
 8004884:	702b      	strb	r3, [r5, #0]
 8004886:	e7e7      	b.n	8004858 <InfraredPD_Start+0x68>
 8004888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488c:	f040 814a 	bne.w	8004b24 <InfraredPD_Start+0x334>
 8004890:	4b97      	ldr	r3, [pc, #604]	; (8004af0 <InfraredPD_Start+0x300>)
 8004892:	6083      	str	r3, [r0, #8]
 8004894:	e7e0      	b.n	8004858 <InfraredPD_Start+0x68>
 8004896:	2b02      	cmp	r3, #2
 8004898:	f040 8144 	bne.w	8004b24 <InfraredPD_Start+0x334>
 800489c:	4b95      	ldr	r3, [pc, #596]	; (8004af4 <InfraredPD_Start+0x304>)
 800489e:	60a3      	str	r3, [r4, #8]
 80048a0:	e7da      	b.n	8004858 <InfraredPD_Start+0x68>
 80048a2:	2a1e      	cmp	r2, #30
 80048a4:	f040 8166 	bne.w	8004b74 <InfraredPD_Start+0x384>
 80048a8:	884b      	ldrh	r3, [r1, #2]
 80048aa:	2b80      	cmp	r3, #128	; 0x80
 80048ac:	f000 815d 	beq.w	8004b6a <InfraredPD_Start+0x37a>
 80048b0:	d9cb      	bls.n	800484a <InfraredPD_Start+0x5a>
 80048b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048b6:	f000 8172 	beq.w	8004b9e <InfraredPD_Start+0x3ae>
 80048ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048be:	d0bc      	beq.n	800483a <InfraredPD_Start+0x4a>
 80048c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048c4:	f040 812e 	bne.w	8004b24 <InfraredPD_Start+0x334>
 80048c8:	4b89      	ldr	r3, [pc, #548]	; (8004af0 <InfraredPD_Start+0x300>)
 80048ca:	6083      	str	r3, [r0, #8]
 80048cc:	2304      	movs	r3, #4
 80048ce:	702b      	strb	r3, [r5, #0]
 80048d0:	e7c2      	b.n	8004858 <InfraredPD_Start+0x68>
 80048d2:	2303      	movs	r3, #3
 80048d4:	ecbd 8b04 	vpop	{d8-d9}
 80048d8:	4618      	mov	r0, r3
 80048da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048de:	4b86      	ldr	r3, [pc, #536]	; (8004af8 <InfraredPD_Start+0x308>)
 80048e0:	eddf 7a86 	vldr	s15, [pc, #536]	; 8004afc <InfraredPD_Start+0x30c>
 80048e4:	60e3      	str	r3, [r4, #12]
 80048e6:	796b      	ldrb	r3, [r5, #5]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d002      	beq.n	80048f2 <InfraredPD_Start+0x102>
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	f040 812a 	bne.w	8004b46 <InfraredPD_Start+0x356>
 80048f2:	ed95 7a02 	vldr	s14, [r5, #8]
 80048f6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80048fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fe:	f100 8120 	bmi.w	8004b42 <InfraredPD_Start+0x352>
 8004902:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004906:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800490a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490e:	f300 8118 	bgt.w	8004b42 <InfraredPD_Start+0x352>
 8004912:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8004916:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8004b00 <InfraredPD_Start+0x310>
 800491a:	2b00      	cmp	r3, #0
 800491c:	bfbc      	itt	lt
 800491e:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 8004922:	8073      	strhlt	r3, [r6, #2]
 8004924:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8004928:	2b00      	cmp	r3, #0
 800492a:	bfbc      	itt	lt
 800492c:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 8004930:	80b3      	strhlt	r3, [r6, #4]
 8004932:	88eb      	ldrh	r3, [r5, #6]
 8004934:	ee08 3a10 	vmov	s16, r3
 8004938:	ee27 7a26 	vmul.f32	s14, s14, s13
 800493c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8004940:	edd4 6a02 	vldr	s13, [r4, #8]
 8004944:	ee28 8a07 	vmul.f32	s16, s16, s14
 8004948:	ee68 7a27 	vmul.f32	s15, s16, s15
 800494c:	ed84 8a05 	vstr	s16, [r4, #20]
 8004950:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004954:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8004958:	eeb1 7ae7 	vsqrt.f32	s14, s15
 800495c:	ee87 0a26 	vdiv.f32	s0, s14, s13
 8004960:	ed84 7a04 	vstr	s14, [r4, #16]
 8004964:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004968:	ed84 0a06 	vstr	s0, [r4, #24]
 800496c:	f001 f974 	bl	8005c58 <ceilf>
 8004970:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8004974:	2301      	movs	r3, #1
 8004976:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800497a:	ee10 3a10 	vmov	r3, s0
 800497e:	b298      	uxth	r0, r3
 8004980:	2300      	movs	r3, #0
 8004982:	83a0      	strh	r0, [r4, #28]
 8004984:	6223      	str	r3, [r4, #32]
 8004986:	7833      	ldrb	r3, [r6, #0]
 8004988:	b313      	cbz	r3, 80049d0 <InfraredPD_Start+0x1e0>
 800498a:	2b02      	cmp	r3, #2
 800498c:	f000 80e6 	beq.w	8004b5c <InfraredPD_Start+0x36c>
 8004990:	7873      	ldrb	r3, [r6, #1]
 8004992:	b1eb      	cbz	r3, 80049d0 <InfraredPD_Start+0x1e0>
 8004994:	2300      	movs	r3, #0
 8004996:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800499a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 800499e:	2b01      	cmp	r3, #1
 80049a0:	f000 8100 	beq.w	8004ba4 <InfraredPD_Start+0x3b4>
 80049a4:	0080      	lsls	r0, r0, #2
 80049a6:	f000 fc5f 	bl	8005268 <malloc>
 80049aa:	6460      	str	r0, [r4, #68]	; 0x44
 80049ac:	b980      	cbnz	r0, 80049d0 <InfraredPD_Start+0x1e0>
 80049ae:	2306      	movs	r3, #6
 80049b0:	e790      	b.n	80048d4 <InfraredPD_Start+0xe4>
 80049b2:	4b54      	ldr	r3, [pc, #336]	; (8004b04 <InfraredPD_Start+0x314>)
 80049b4:	eddf 7a54 	vldr	s15, [pc, #336]	; 8004b08 <InfraredPD_Start+0x318>
 80049b8:	60e3      	str	r3, [r4, #12]
 80049ba:	e794      	b.n	80048e6 <InfraredPD_Start+0xf6>
 80049bc:	4b53      	ldr	r3, [pc, #332]	; (8004b0c <InfraredPD_Start+0x31c>)
 80049be:	eddf 7a54 	vldr	s15, [pc, #336]	; 8004b10 <InfraredPD_Start+0x320>
 80049c2:	60e3      	str	r3, [r4, #12]
 80049c4:	e78f      	b.n	80048e6 <InfraredPD_Start+0xf6>
 80049c6:	4b53      	ldr	r3, [pc, #332]	; (8004b14 <InfraredPD_Start+0x324>)
 80049c8:	eddf 7a53 	vldr	s15, [pc, #332]	; 8004b18 <InfraredPD_Start+0x328>
 80049cc:	60e3      	str	r3, [r4, #12]
 80049ce:	e78a      	b.n	80048e6 <InfraredPD_Start+0xf6>
 80049d0:	2300      	movs	r3, #0
 80049d2:	7828      	ldrb	r0, [r5, #0]
 80049d4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 80049d8:	2301      	movs	r3, #1
 80049da:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 80049de:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 80049e2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80049e6:	0040      	lsls	r0, r0, #1
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
 80049ee:	f000 80c3 	beq.w	8004b78 <InfraredPD_Start+0x388>
 80049f2:	0080      	lsls	r0, r0, #2
 80049f4:	f000 fc38 	bl	8005268 <malloc>
 80049f8:	6520      	str	r0, [r4, #80]	; 0x50
 80049fa:	2800      	cmp	r0, #0
 80049fc:	f000 80d7 	beq.w	8004bae <InfraredPD_Start+0x3be>
 8004a00:	f04f 0800 	mov.w	r8, #0
 8004a04:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 8004a08:	2300      	movs	r3, #0
 8004a0a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004a0c:	88b3      	ldrh	r3, [r6, #4]
 8004a0e:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8004b1c <InfraredPD_Start+0x32c>
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a1a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8004a1e:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8004a22:	ee67 6aa8 	vmul.f32	s13, s15, s17
 8004a26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004a2a:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
 8004a2e:	edc4 6a1a 	vstr	s13, [r4, #104]	; 0x68
 8004a32:	ed84 7a1b 	vstr	s14, [r4, #108]	; 0x6c
 8004a36:	782f      	ldrb	r7, [r5, #0]
 8004a38:	ee07 7a90 	vmov	s15, r7
 8004a3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a40:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004a44:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8004a48:	ee27 0ac0 	vnmul.f32	s0, s15, s0
 8004a4c:	eeb1 9a67 	vneg.f32	s18, s15
 8004a50:	f001 f8be 	bl	8005bd0 <expf>
 8004a54:	eddf 7a32 	vldr	s15, [pc, #200]	; 8004b20 <InfraredPD_Start+0x330>
 8004a58:	ee38 0a40 	vsub.f32	s0, s16, s0
 8004a5c:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 8004a60:	ee29 0a27 	vmul.f32	s0, s18, s15
 8004a64:	f001 f8b4 	bl	8005bd0 <expf>
 8004a68:	8873      	ldrh	r3, [r6, #2]
 8004a6a:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	2201      	movs	r2, #1
 8004a74:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
 8004a78:	ebc7 1107 	rsb	r1, r7, r7, lsl #4
 8004a7c:	b2ba      	uxth	r2, r7
 8004a7e:	e9c4 8828 	strd	r8, r8, [r4, #160]	; 0xa0
 8004a82:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
 8004a86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a8a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004a8e:	0049      	lsls	r1, r1, #1
 8004a90:	f8a4 1098 	strh.w	r1, [r4, #152]	; 0x98
 8004a94:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8004a98:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8004a9c:	00c9      	lsls	r1, r1, #3
 8004a9e:	0092      	lsls	r2, r2, #2
 8004aa0:	f8a4 109c 	strh.w	r1, [r4, #156]	; 0x9c
 8004aa4:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 8004aa8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004aac:	edc4 8a22 	vstr	s17, [r4, #136]	; 0x88
 8004ab0:	ee38 0a40 	vsub.f32	s0, s16, s0
 8004ab4:	ecbd 8b04 	vpop	{d8-d9}
 8004ab8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8004abc:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8004ac0:	f104 07ac 	add.w	r7, r4, #172	; 0xac
 8004ac4:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
 8004ac8:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
 8004acc:	f8a4 808e 	strh.w	r8, [r4, #142]	; 0x8e
 8004ad0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004ad4:	6830      	ldr	r0, [r6, #0]
 8004ad6:	6871      	ldr	r1, [r6, #4]
 8004ad8:	4643      	mov	r3, r8
 8004ada:	34b8      	adds	r4, #184	; 0xb8
 8004adc:	c403      	stmia	r4!, {r0, r1}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ae4:	20000078 	.word	0x20000078
 8004ae8:	41680000 	.word	0x41680000
 8004aec:	42006666 	.word	0x42006666
 8004af0:	419b3333 	.word	0x419b3333
 8004af4:	42c6999a 	.word	0x42c6999a
 8004af8:	43168000 	.word	0x43168000
 8004afc:	3e1a1cad 	.word	0x3e1a1cad
 8004b00:	3f933333 	.word	0x3f933333
 8004b04:	4254cccd 	.word	0x4254cccd
 8004b08:	3d59e83f 	.word	0x3d59e83f
 8004b0c:	42966666 	.word	0x42966666
 8004b10:	3d9a0275 	.word	0x3d9a0275
 8004b14:	42d4cccd 	.word	0x42d4cccd
 8004b18:	3dd9e83f 	.word	0x3dd9e83f
 8004b1c:	4048e093 	.word	0x4048e093
 8004b20:	3ea0da75 	.word	0x3ea0da75
 8004b24:	ecbd 8b04 	vpop	{d8-d9}
 8004b28:	2302      	movs	r3, #2
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b34:	d1f6      	bne.n	8004b24 <InfraredPD_Start+0x334>
 8004b36:	4b22      	ldr	r3, [pc, #136]	; (8004bc0 <InfraredPD_Start+0x3d0>)
 8004b38:	60a3      	str	r3, [r4, #8]
 8004b3a:	2a04      	cmp	r2, #4
 8004b3c:	f63f aec6 	bhi.w	80048cc <InfraredPD_Start+0xdc>
 8004b40:	e68a      	b.n	8004858 <InfraredPD_Start+0x68>
 8004b42:	2305      	movs	r3, #5
 8004b44:	e6c6      	b.n	80048d4 <InfraredPD_Start+0xe4>
 8004b46:	2304      	movs	r3, #4
 8004b48:	e6c4      	b.n	80048d4 <InfraredPD_Start+0xe4>
 8004b4a:	4b1e      	ldr	r3, [pc, #120]	; (8004bc4 <InfraredPD_Start+0x3d4>)
 8004b4c:	60a3      	str	r3, [r4, #8]
 8004b4e:	e683      	b.n	8004858 <InfraredPD_Start+0x68>
 8004b50:	4b1d      	ldr	r3, [pc, #116]	; (8004bc8 <InfraredPD_Start+0x3d8>)
 8004b52:	6083      	str	r3, [r0, #8]
 8004b54:	e680      	b.n	8004858 <InfraredPD_Start+0x68>
 8004b56:	4b1d      	ldr	r3, [pc, #116]	; (8004bcc <InfraredPD_Start+0x3dc>)
 8004b58:	6083      	str	r3, [r0, #8]
 8004b5a:	e67d      	b.n	8004858 <InfraredPD_Start+0x68>
 8004b5c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004bd0 <InfraredPD_Start+0x3e0>
 8004b60:	ee28 7a07 	vmul.f32	s14, s16, s14
 8004b64:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
 8004b68:	e712      	b.n	8004990 <InfraredPD_Start+0x1a0>
 8004b6a:	4b18      	ldr	r3, [pc, #96]	; (8004bcc <InfraredPD_Start+0x3dc>)
 8004b6c:	60a3      	str	r3, [r4, #8]
 8004b6e:	2308      	movs	r3, #8
 8004b70:	702b      	strb	r3, [r5, #0]
 8004b72:	e671      	b.n	8004858 <InfraredPD_Start+0x68>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e6ad      	b.n	80048d4 <InfraredPD_Start+0xe4>
 8004b78:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004b7a:	f000 fb7d 	bl	8005278 <free>
 8004b7e:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8004b82:	e736      	b.n	80049f2 <InfraredPD_Start+0x202>
 8004b84:	4b11      	ldr	r3, [pc, #68]	; (8004bcc <InfraredPD_Start+0x3dc>)
 8004b86:	60a3      	str	r3, [r4, #8]
 8004b88:	2a08      	cmp	r2, #8
 8004b8a:	d8f0      	bhi.n	8004b6e <InfraredPD_Start+0x37e>
 8004b8c:	e664      	b.n	8004858 <InfraredPD_Start+0x68>
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <InfraredPD_Start+0x3d8>)
 8004b90:	60a3      	str	r3, [r4, #8]
 8004b92:	2a02      	cmp	r2, #2
 8004b94:	f67f ae60 	bls.w	8004858 <InfraredPD_Start+0x68>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	702b      	strb	r3, [r5, #0]
 8004b9c:	e65c      	b.n	8004858 <InfraredPD_Start+0x68>
 8004b9e:	4b0a      	ldr	r3, [pc, #40]	; (8004bc8 <InfraredPD_Start+0x3d8>)
 8004ba0:	6083      	str	r3, [r0, #8]
 8004ba2:	e7f9      	b.n	8004b98 <InfraredPD_Start+0x3a8>
 8004ba4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004ba6:	f000 fb67 	bl	8005278 <free>
 8004baa:	8ba0      	ldrh	r0, [r4, #28]
 8004bac:	e6fa      	b.n	80049a4 <InfraredPD_Start+0x1b4>
 8004bae:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004bb0:	b118      	cbz	r0, 8004bba <InfraredPD_Start+0x3ca>
 8004bb2:	f000 fb61 	bl	8005278 <free>
 8004bb6:	2307      	movs	r3, #7
 8004bb8:	e68c      	b.n	80048d4 <InfraredPD_Start+0xe4>
 8004bba:	2307      	movs	r3, #7
 8004bbc:	e68a      	b.n	80048d4 <InfraredPD_Start+0xe4>
 8004bbe:	bf00      	nop
 8004bc0:	419b3333 	.word	0x419b3333
 8004bc4:	42560000 	.word	0x42560000
 8004bc8:	41873333 	.word	0x41873333
 8004bcc:	41b00000 	.word	0x41b00000
 8004bd0:	3223b1a8 	.word	0x3223b1a8
 8004bd4:	00000000 	.word	0x00000000

08004bd8 <InfraredPD_Update>:
 8004bd8:	4bba      	ldr	r3, [pc, #744]	; (8004ec4 <InfraredPD_Update+0x2ec>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	b903      	cbnz	r3, 8004be0 <InfraredPD_Update+0x8>
 8004bde:	4770      	bx	lr
 8004be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be4:	ed2d 8b02 	vpush	{d8}
 8004be8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8004bec:	f890 60b1 	ldrb.w	r6, [r0, #177]	; 0xb1
 8004bf0:	4615      	mov	r5, r2
 8004bf2:	f9b1 2000 	ldrsh.w	r2, [r1]
 8004bf6:	fb16 f303 	smulbb	r3, r6, r3
 8004bfa:	ee07 2a10 	vmov	s14, r2
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c0a:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 8004c0e:	ed80 7a00 	vstr	s14, [r0]
 8004c12:	b083      	sub	sp, #12
 8004c14:	4604      	mov	r4, r0
 8004c16:	edc0 7a01 	vstr	s15, [r0, #4]
 8004c1a:	2a00      	cmp	r2, #0
 8004c1c:	d067      	beq.n	8004cee <InfraredPD_Update+0x116>
 8004c1e:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d168      	bne.n	8004cf8 <InfraredPD_Update+0x120>
 8004c26:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	f040 8303 	bne.w	8005236 <InfraredPD_Update+0x65e>
 8004c30:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 8004c34:	6a07      	ldr	r7, [r0, #32]
 8004c36:	3301      	adds	r3, #1
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004c3e:	3a01      	subs	r2, #1
 8004c40:	0090      	lsls	r0, r2, #2
 8004c42:	2f01      	cmp	r7, #1
 8004c44:	d068      	beq.n	8004d18 <InfraredPD_Update+0x140>
 8004c46:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8004ec8 <InfraredPD_Update+0x2f0>
 8004c4a:	eeb0 6ae7 	vabs.f32	s12, s15
 8004c4e:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8004c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c56:	d57b      	bpl.n	8004d50 <InfraredPD_Update+0x178>
 8004c58:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	f000 81a8 	beq.w	8004fb2 <InfraredPD_Update+0x3da>
 8004c62:	2a01      	cmp	r2, #1
 8004c64:	f000 8265 	beq.w	8005132 <InfraredPD_Update+0x55a>
 8004c68:	2a02      	cmp	r2, #2
 8004c6a:	f000 8246 	beq.w	80050fa <InfraredPD_Update+0x522>
 8004c6e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8004c72:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 8004c76:	2a00      	cmp	r2, #0
 8004c78:	f000 80a6 	beq.w	8004dc8 <InfraredPD_Update+0x1f0>
 8004c7c:	e070      	b.n	8004d60 <InfraredPD_Update+0x188>
 8004c7e:	2f01      	cmp	r7, #1
 8004c80:	f000 82c2 	beq.w	8005208 <InfraredPD_Update+0x630>
 8004c84:	2300      	movs	r3, #0
 8004c86:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8004c8a:	2f00      	cmp	r7, #0
 8004c8c:	f040 82d0 	bne.w	8005230 <InfraredPD_Update+0x658>
 8004c90:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8004c94:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
 8004c98:	3301      	adds	r3, #1
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8004ca2:	d10b      	bne.n	8004cbc <InfraredPD_Update+0xe4>
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8004caa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8004cae:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8004cb2:	b91b      	cbnz	r3, 8004cbc <InfraredPD_Update+0xe4>
 8004cb4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8004cb8:	2300      	movs	r3, #0
 8004cba:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004cbc:	ee07 6a90 	vmov	s15, r6
 8004cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cc4:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8004cc8:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8004ccc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004cd4:	ee17 3a10 	vmov	r3, s14
 8004cd8:	802b      	strh	r3, [r5, #0]
 8004cda:	ee17 3a90 	vmov	r3, s15
 8004cde:	806b      	strh	r3, [r5, #2]
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	716b      	strb	r3, [r5, #5]
 8004ce4:	712f      	strb	r7, [r5, #4]
 8004ce6:	2f01      	cmp	r7, #1
 8004ce8:	d101      	bne.n	8004cee <InfraredPD_Update+0x116>
 8004cea:	2301      	movs	r3, #1
 8004cec:	716b      	strb	r3, [r5, #5]
 8004cee:	b003      	add	sp, #12
 8004cf0:	ecbd 8b02 	vpop	{d8}
 8004cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8004d00:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8004d04:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 8004d08:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 8004d0c:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
 8004d10:	f880 20a7 	strb.w	r2, [r0, #167]	; 0xa7
 8004d14:	6203      	str	r3, [r0, #32]
 8004d16:	4610      	mov	r0, r2
 8004d18:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8004d1c:	b182      	cbz	r2, 8004d40 <InfraredPD_Update+0x168>
 8004d1e:	2a01      	cmp	r2, #1
 8004d20:	f000 81e8 	beq.w	80050f4 <InfraredPD_Update+0x51c>
 8004d24:	2a02      	cmp	r2, #2
 8004d26:	d10b      	bne.n	8004d40 <InfraredPD_Update+0x168>
 8004d28:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8004ecc <InfraredPD_Update+0x2f4>
 8004d2c:	eddf 6a68 	vldr	s13, [pc, #416]	; 8004ed0 <InfraredPD_Update+0x2f8>
 8004d30:	eee7 6a06 	vfma.f32	s13, s14, s12
 8004d34:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8004d38:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8004d3c:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
 8004d40:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8004d44:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
 8004d48:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 8004d4c:	2701      	movs	r7, #1
 8004d4e:	e77a      	b.n	8004c46 <InfraredPD_Update+0x6e>
 8004d50:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 8004d54:	b3b2      	cbz	r2, 8004dc4 <InfraredPD_Update+0x1ec>
 8004d56:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8004d5a:	b39a      	cbz	r2, 8004dc4 <InfraredPD_Update+0x1ec>
 8004d5c:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8004d60:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8004d64:	8ba1      	ldrh	r1, [r4, #28]
 8004d66:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 8004d6a:	3201      	adds	r2, #1
 8004d6c:	b2d2      	uxtb	r2, r2
 8004d6e:	428a      	cmp	r2, r1
 8004d70:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8004d74:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 8004d78:	bf08      	it	eq
 8004d7a:	2200      	moveq	r2, #0
 8004d7c:	ed4e 7a01 	vstr	s15, [lr, #-4]
 8004d80:	bf08      	it	eq
 8004d82:	f884 2040 	strbeq.w	r2, [r4, #64]	; 0x40
 8004d86:	2901      	cmp	r1, #1
 8004d88:	f240 81ce 	bls.w	8005128 <InfraredPD_Update+0x550>
 8004d8c:	42b9      	cmp	r1, r7
 8004d8e:	f240 81df 	bls.w	8005150 <InfraredPD_Update+0x578>
 8004d92:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8004ed4 <InfraredPD_Update+0x2fc>
 8004d96:	b167      	cbz	r7, 8004db2 <InfraredPD_Update+0x1da>
 8004d98:	2200      	movs	r2, #0
 8004d9a:	4611      	mov	r1, r2
 8004d9c:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8004da0:	3201      	adds	r2, #1
 8004da2:	edd1 7a00 	vldr	s15, [r1]
 8004da6:	b292      	uxth	r2, r2
 8004da8:	42ba      	cmp	r2, r7
 8004daa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004dae:	4611      	mov	r1, r2
 8004db0:	d3f4      	bcc.n	8004d9c <InfraredPD_Update+0x1c4>
 8004db2:	ee07 7a90 	vmov	s15, r7
 8004db6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004dba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dbe:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8004dc2:	e003      	b.n	8004dcc <InfraredPD_Update+0x1f4>
 8004dc4:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8004dc8:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8004dcc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004dce:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8004dd2:	180a      	adds	r2, r1, r0
 8004dd4:	edc2 7a00 	vstr	s15, [r2]
 8004dd8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8004ddc:	f894 c04c 	ldrb.w	ip, [r4, #76]	; 0x4c
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d07b      	beq.n	8004edc <InfraredPD_Update+0x304>
 8004de4:	ed94 6a1c 	vldr	s12, [r4, #112]	; 0x70
 8004de8:	edd4 6a1d 	vldr	s13, [r4, #116]	; 0x74
 8004dec:	ed94 5a1e 	vldr	s10, [r4, #120]	; 0x78
 8004df0:	edd4 5a1f 	vldr	s11, [r4, #124]	; 0x7c
 8004df4:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 8004df8:	f894 7090 	ldrb.w	r7, [r4, #144]	; 0x90
 8004dfc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004e00:	ee37 8a46 	vsub.f32	s16, s14, s12
 8004e04:	ee77 7a66 	vsub.f32	s15, s14, s13
 8004e08:	ee28 8a05 	vmul.f32	s16, s16, s10
 8004e0c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004e10:	eea6 8a28 	vfma.f32	s16, s12, s17
 8004e14:	eee8 7aa6 	vfma.f32	s15, s17, s13
 8004e18:	ed84 8a1e 	vstr	s16, [r4, #120]	; 0x78
 8004e1c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8004e20:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 8004e24:	ed84 8a20 	vstr	s16, [r4, #128]	; 0x80
 8004e28:	2f00      	cmp	r7, #0
 8004e2a:	f000 80b4 	beq.w	8004f96 <InfraredPD_Update+0x3be>
 8004e2e:	2f01      	cmp	r7, #1
 8004e30:	d114      	bne.n	8004e5c <InfraredPD_Update+0x284>
 8004e32:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
 8004e36:	eef0 6ac8 	vabs.f32	s13, s16
 8004e3a:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e42:	f140 80c0 	bpl.w	8004fc6 <InfraredPD_Update+0x3ee>
 8004e46:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 8004e4a:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
 8004e4e:	3301      	adds	r3, #1
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	429a      	cmp	r2, r3
 8004e54:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 8004e58:	f240 8146 	bls.w	80050e8 <InfraredPD_Update+0x510>
 8004e5c:	f894 80a6 	ldrb.w	r8, [r4, #166]	; 0xa6
 8004e60:	f1bc 0f00 	cmp.w	ip, #0
 8004e64:	d108      	bne.n	8004e78 <InfraredPD_Update+0x2a0>
 8004e66:	f1b8 0f03 	cmp.w	r8, #3
 8004e6a:	d809      	bhi.n	8004e80 <InfraredPD_Update+0x2a8>
 8004e6c:	e8df f018 	tbh	[pc, r8, lsl #1]
 8004e70:	010d011c 	.word	0x010d011c
 8004e74:	00af00fd 	.word	0x00af00fd
 8004e78:	f1b8 0f00 	cmp.w	r8, #0
 8004e7c:	f43f af17 	beq.w	8004cae <InfraredPD_Update+0xd6>
 8004e80:	ee07 6a90 	vmov	s15, r6
 8004e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e88:	f1b8 0f02 	cmp.w	r8, #2
 8004e8c:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8004e90:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8004e94:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004e98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e9c:	ee17 3a10 	vmov	r3, s14
 8004ea0:	802b      	strh	r3, [r5, #0]
 8004ea2:	ee17 3a90 	vmov	r3, s15
 8004ea6:	806b      	strh	r3, [r5, #2]
 8004ea8:	f43f af1a 	beq.w	8004ce0 <InfraredPD_Update+0x108>
 8004eac:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
 8004eb0:	f1b8 0f01 	cmp.w	r8, #1
 8004eb4:	f000 8080 	beq.w	8004fb8 <InfraredPD_Update+0x3e0>
 8004eb8:	796b      	ldrb	r3, [r5, #5]
 8004eba:	712f      	strb	r7, [r5, #4]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	f47f af12 	bne.w	8004ce6 <InfraredPD_Update+0x10e>
 8004ec2:	e712      	b.n	8004cea <InfraredPD_Update+0x112>
 8004ec4:	20000078 	.word	0x20000078
 8004ec8:	46f05e00 	.word	0x46f05e00
 8004ecc:	3c23d70a 	.word	0x3c23d70a
 8004ed0:	43889333 	.word	0x43889333
 8004ed4:	00000000 	.word	0x00000000
 8004ed8:	7fc00000 	.word	0x7fc00000
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
 8004ee2:	f1bc 0f00 	cmp.w	ip, #0
 8004ee6:	d169      	bne.n	8004fbc <InfraredPD_Update+0x3e4>
 8004ee8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004eea:	65a2      	str	r2, [r4, #88]	; 0x58
 8004eec:	b1d3      	cbz	r3, 8004f24 <InfraredPD_Update+0x34c>
 8004eee:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 8004ed4 <InfraredPD_Update+0x2fc>
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	3201      	adds	r2, #1
 8004ef6:	ecb1 7a01 	vldmia	r1!, {s14}
 8004efa:	b290      	uxth	r0, r2
 8004efc:	4283      	cmp	r3, r0
 8004efe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f02:	d8f7      	bhi.n	8004ef4 <InfraredPD_Update+0x31c>
 8004f04:	ee07 3a10 	vmov	s14, r3
 8004f08:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8004f0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004f10:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 8004f14:	f1bc 0f00 	cmp.w	ip, #0
 8004f18:	d00a      	beq.n	8004f30 <InfraredPD_Update+0x358>
 8004f1a:	f04f 0c00 	mov.w	ip, #0
 8004f1e:	f884 c04c 	strb.w	ip, [r4, #76]	; 0x4c
 8004f22:	e75f      	b.n	8004de4 <InfraredPD_Update+0x20c>
 8004f24:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 8004ed8 <InfraredPD_Update+0x300>
 8004f28:	eeb0 7a67 	vmov.f32	s14, s15
 8004f2c:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
 8004f30:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f040 80c8 	bne.w	80050ca <InfraredPD_Update+0x4f2>
 8004f3a:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8004f3e:	b17a      	cbz	r2, 8004f60 <InfraredPD_Update+0x388>
 8004f40:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8004f44:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 8004f48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f4c:	eef1 6a66 	vneg.f32	s13, s13
 8004f50:	eef4 7ae6 	vcmpe.f32	s15, s13
 8004f54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f58:	f340 8115 	ble.w	8005186 <InfraredPD_Update+0x5ae>
 8004f5c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8004f60:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f47f af3d 	bne.w	8004de4 <InfraredPD_Update+0x20c>
 8004f6a:	edd4 6a16 	vldr	s13, [r4, #88]	; 0x58
 8004f6e:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 8004f72:	ee37 7a66 	vsub.f32	s14, s14, s13
 8004f76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f7e:	f340 8127 	ble.w	80051d0 <InfraredPD_Update+0x5f8>
 8004f82:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8004f86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8004f90:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 8004f94:	e726      	b.n	8004de4 <InfraredPD_Update+0x20c>
 8004f96:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 8004f9a:	eef0 6ac8 	vabs.f32	s13, s16
 8004f9e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fa6:	f77f af59 	ble.w	8004e5c <InfraredPD_Update+0x284>
 8004faa:	2701      	movs	r7, #1
 8004fac:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 8004fb0:	e754      	b.n	8004e5c <InfraredPD_Update+0x284>
 8004fb2:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8004fb6:	e707      	b.n	8004dc8 <InfraredPD_Update+0x1f0>
 8004fb8:	712f      	strb	r7, [r5, #4]
 8004fba:	e696      	b.n	8004cea <InfraredPD_Update+0x112>
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d196      	bne.n	8004eee <InfraredPD_Update+0x316>
 8004fc0:	4ba5      	ldr	r3, [pc, #660]	; (8005258 <InfraredPD_Update+0x680>)
 8004fc2:	6563      	str	r3, [r4, #84]	; 0x54
 8004fc4:	e7a9      	b.n	8004f1a <InfraredPD_Update+0x342>
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 8004fcc:	e746      	b.n	8004e5c <InfraredPD_Update+0x284>
 8004fce:	f8b4 90a4 	ldrh.w	r9, [r4, #164]	; 0xa4
 8004fd2:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
 8004fd6:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8004fda:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8004fde:	f109 0901 	add.w	r9, r9, #1
 8004fe2:	fa1f f989 	uxth.w	r9, r9
 8004fe6:	ee17 0a90 	vmov	r0, s15
 8004fea:	f8a4 90a4 	strh.w	r9, [r4, #164]	; 0xa4
 8004fee:	ed8d 7a01 	vstr	s14, [sp, #4]
 8004ff2:	f7fb fbdb 	bl	80007ac <__aeabi_f2d>
 8004ff6:	4682      	mov	sl, r0
 8004ff8:	9801      	ldr	r0, [sp, #4]
 8004ffa:	468b      	mov	fp, r1
 8004ffc:	f7fb fbd6 	bl	80007ac <__aeabi_f2d>
 8005000:	a393      	add	r3, pc, #588	; (adr r3, 8005250 <InfraredPD_Update+0x678>)
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	f7fb f943 	bl	8000290 <__aeabi_dmul>
 800500a:	4602      	mov	r2, r0
 800500c:	460b      	mov	r3, r1
 800500e:	4650      	mov	r0, sl
 8005010:	4659      	mov	r1, fp
 8005012:	f7fb fc83 	bl	800091c <__aeabi_dcmplt>
 8005016:	2800      	cmp	r0, #0
 8005018:	f47f ae44 	bne.w	8004ca4 <InfraredPD_Update+0xcc>
 800501c:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 8005020:	454b      	cmp	r3, r9
 8005022:	f43f ae3f 	beq.w	8004ca4 <InfraredPD_Update+0xcc>
 8005026:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 800502a:	ed9d 7a01 	vldr	s14, [sp, #4]
 800502e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005036:	d505      	bpl.n	8005044 <InfraredPD_Update+0x46c>
 8005038:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
 800503c:	f04f 0801 	mov.w	r8, #1
 8005040:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 8005044:	ee07 6a90 	vmov	s15, r6
 8005048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800504c:	eec8 6aa7 	vdiv.f32	s13, s17, s15
 8005050:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005054:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8005058:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800505c:	ee16 3a90 	vmov	r3, s13
 8005060:	802b      	strh	r3, [r5, #0]
 8005062:	ee17 3a10 	vmov	r3, s14
 8005066:	806b      	strh	r3, [r5, #2]
 8005068:	e720      	b.n	8004eac <InfraredPD_Update+0x2d4>
 800506a:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 800506e:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8005072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800507a:	f57f ae00 	bpl.w	8004c7e <InfraredPD_Update+0xa6>
 800507e:	2300      	movs	r3, #0
 8005080:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8005084:	f8c4 30a2 	str.w	r3, [r4, #162]	; 0xa2
 8005088:	e611      	b.n	8004cae <InfraredPD_Update+0xd6>
 800508a:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 800508e:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8005092:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800509a:	d57b      	bpl.n	8005194 <InfraredPD_Update+0x5bc>
 800509c:	2300      	movs	r3, #0
 800509e:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80050a2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 80050a6:	e602      	b.n	8004cae <InfraredPD_Update+0xd6>
 80050a8:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 80050ac:	ee78 6ae7 	vsub.f32	s13, s17, s15
 80050b0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80050b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050b8:	f340 8081 	ble.w	80051be <InfraredPD_Update+0x5e6>
 80050bc:	f04f 0803 	mov.w	r8, #3
 80050c0:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 80050c4:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
 80050c8:	e7bc      	b.n	8005044 <InfraredPD_Update+0x46c>
 80050ca:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 80050ce:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 80050d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050d6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80050da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050de:	d552      	bpl.n	8005186 <InfraredPD_Update+0x5ae>
 80050e0:	2300      	movs	r3, #0
 80050e2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80050e6:	e73b      	b.n	8004f60 <InfraredPD_Update+0x388>
 80050e8:	2700      	movs	r7, #0
 80050ea:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 80050ee:	f8a4 708e 	strh.w	r7, [r4, #142]	; 0x8e
 80050f2:	e6b3      	b.n	8004e5c <InfraredPD_Update+0x284>
 80050f4:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 80050f8:	e622      	b.n	8004d40 <InfraredPD_Update+0x168>
 80050fa:	eddf 5a58 	vldr	s11, [pc, #352]	; 800525c <InfraredPD_Update+0x684>
 80050fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005260 <InfraredPD_Update+0x688>
 8005102:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8005106:	ed94 5a0e 	vldr	s10, [r4, #56]	; 0x38
 800510a:	eee7 6a25 	vfma.f32	s13, s14, s11
 800510e:	eeb0 7a46 	vmov.f32	s14, s12
 8005112:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8005116:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
 800511a:	ee95 7aa5 	vfnms.f32	s14, s11, s11
 800511e:	eee5 7a07 	vfma.f32	s15, s10, s14
 8005122:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8005126:	e5a4      	b.n	8004c72 <InfraredPD_Update+0x9a>
 8005128:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800512c:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8005130:	e64c      	b.n	8004dcc <InfraredPD_Update+0x1f4>
 8005132:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 8005136:	edd4 6a05 	vldr	s13, [r4, #20]
 800513a:	ed9f 6a48 	vldr	s12, [pc, #288]	; 800525c <InfraredPD_Update+0x684>
 800513e:	ee37 7a65 	vsub.f32	s14, s14, s11
 8005142:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005146:	eee7 7a26 	vfma.f32	s15, s14, s13
 800514a:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 800514e:	e590      	b.n	8004c72 <InfraredPD_Update+0x9a>
 8005150:	1e4f      	subs	r7, r1, #1
 8005152:	4662      	mov	r2, ip
 8005154:	fa1f fc87 	uxth.w	ip, r7
 8005158:	2700      	movs	r7, #0
 800515a:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 800515e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005264 <InfraredPD_Update+0x68c>
 8005162:	1d17      	adds	r7, r2, #4
 8005164:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8005168:	ecf2 7a01 	vldmia	r2!, {s15}
 800516c:	4297      	cmp	r7, r2
 800516e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005172:	d1f9      	bne.n	8005168 <InfraredPD_Update+0x590>
 8005174:	ee07 1a90 	vmov	s15, r1
 8005178:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800517c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005180:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8005184:	e622      	b.n	8004dcc <InfraredPD_Update+0x1f4>
 8005186:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
 800518a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800518e:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 8005192:	e6e5      	b.n	8004f60 <InfraredPD_Update+0x388>
 8005194:	bba7      	cbnz	r7, 8005200 <InfraredPD_Update+0x628>
 8005196:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 800519a:	b38b      	cbz	r3, 8005200 <InfraredPD_Update+0x628>
 800519c:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 80051a0:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
 80051a4:	3301      	adds	r3, #1
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	429a      	cmp	r2, r3
 80051aa:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 80051ae:	f47f af49 	bne.w	8005044 <InfraredPD_Update+0x46c>
 80051b2:	2302      	movs	r3, #2
 80051b4:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80051b8:	f8a4 70a0 	strh.w	r7, [r4, #160]	; 0xa0
 80051bc:	e57e      	b.n	8004cbc <InfraredPD_Update+0xe4>
 80051be:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 80051c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ca:	f57f ad70 	bpl.w	8004cae <InfraredPD_Update+0xd6>
 80051ce:	e735      	b.n	800503c <InfraredPD_Update+0x464>
 80051d0:	eef1 7a67 	vneg.f32	s15, s15
 80051d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051dc:	f57f ae02 	bpl.w	8004de4 <InfraredPD_Update+0x20c>
 80051e0:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 80051e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80051e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051ec:	f77f adfa 	ble.w	8004de4 <InfraredPD_Update+0x20c>
 80051f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80051f4:	2301      	movs	r3, #1
 80051f6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80051fa:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 80051fe:	e5f1      	b.n	8004de4 <InfraredPD_Update+0x20c>
 8005200:	2300      	movs	r3, #0
 8005202:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8005206:	e71d      	b.n	8005044 <InfraredPD_Update+0x46c>
 8005208:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 800520c:	f8b4 109a 	ldrh.w	r1, [r4, #154]	; 0x9a
 8005210:	3301      	adds	r3, #1
 8005212:	b29b      	uxth	r3, r3
 8005214:	2200      	movs	r2, #0
 8005216:	4299      	cmp	r1, r3
 8005218:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
 800521c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8005220:	f47f ad4c 	bne.w	8004cbc <InfraredPD_Update+0xe4>
 8005224:	f884 70a6 	strb.w	r7, [r4, #166]	; 0xa6
 8005228:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
 800522c:	46b8      	mov	r8, r7
 800522e:	e709      	b.n	8005044 <InfraredPD_Update+0x46c>
 8005230:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8005234:	e542      	b.n	8004cbc <InfraredPD_Update+0xe4>
 8005236:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 800523a:	6a07      	ldr	r7, [r0, #32]
 800523c:	3301      	adds	r3, #1
 800523e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8005242:	fa12 f283 	uxtah	r2, r2, r3
 8005246:	3701      	adds	r7, #1
 8005248:	6207      	str	r7, [r0, #32]
 800524a:	b29b      	uxth	r3, r3
 800524c:	0090      	lsls	r0, r2, #2
 800524e:	e4f8      	b.n	8004c42 <InfraredPD_Update+0x6a>
 8005250:	cccccccd 	.word	0xcccccccd
 8005254:	3feccccc 	.word	0x3feccccc
 8005258:	7fc00000 	.word	0x7fc00000
 800525c:	3c23d70a 	.word	0x3c23d70a
 8005260:	43889333 	.word	0x43889333
 8005264:	00000000 	.word	0x00000000

08005268 <malloc>:
 8005268:	4b02      	ldr	r3, [pc, #8]	; (8005274 <malloc+0xc>)
 800526a:	4601      	mov	r1, r0
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	f000 b82b 	b.w	80052c8 <_malloc_r>
 8005272:	bf00      	nop
 8005274:	20000058 	.word	0x20000058

08005278 <free>:
 8005278:	4b02      	ldr	r3, [pc, #8]	; (8005284 <free+0xc>)
 800527a:	4601      	mov	r1, r0
 800527c:	6818      	ldr	r0, [r3, #0]
 800527e:	f000 b913 	b.w	80054a8 <_free_r>
 8005282:	bf00      	nop
 8005284:	20000058 	.word	0x20000058

08005288 <sbrk_aligned>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	4e0e      	ldr	r6, [pc, #56]	; (80052c4 <sbrk_aligned+0x3c>)
 800528c:	460c      	mov	r4, r1
 800528e:	6831      	ldr	r1, [r6, #0]
 8005290:	4605      	mov	r5, r0
 8005292:	b911      	cbnz	r1, 800529a <sbrk_aligned+0x12>
 8005294:	f000 f8cc 	bl	8005430 <_sbrk_r>
 8005298:	6030      	str	r0, [r6, #0]
 800529a:	4621      	mov	r1, r4
 800529c:	4628      	mov	r0, r5
 800529e:	f000 f8c7 	bl	8005430 <_sbrk_r>
 80052a2:	1c43      	adds	r3, r0, #1
 80052a4:	d00a      	beq.n	80052bc <sbrk_aligned+0x34>
 80052a6:	1cc4      	adds	r4, r0, #3
 80052a8:	f024 0403 	bic.w	r4, r4, #3
 80052ac:	42a0      	cmp	r0, r4
 80052ae:	d007      	beq.n	80052c0 <sbrk_aligned+0x38>
 80052b0:	1a21      	subs	r1, r4, r0
 80052b2:	4628      	mov	r0, r5
 80052b4:	f000 f8bc 	bl	8005430 <_sbrk_r>
 80052b8:	3001      	adds	r0, #1
 80052ba:	d101      	bne.n	80052c0 <sbrk_aligned+0x38>
 80052bc:	f04f 34ff 	mov.w	r4, #4294967295
 80052c0:	4620      	mov	r0, r4
 80052c2:	bd70      	pop	{r4, r5, r6, pc}
 80052c4:	200001d4 	.word	0x200001d4

080052c8 <_malloc_r>:
 80052c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052cc:	1ccd      	adds	r5, r1, #3
 80052ce:	f025 0503 	bic.w	r5, r5, #3
 80052d2:	3508      	adds	r5, #8
 80052d4:	2d0c      	cmp	r5, #12
 80052d6:	bf38      	it	cc
 80052d8:	250c      	movcc	r5, #12
 80052da:	2d00      	cmp	r5, #0
 80052dc:	4607      	mov	r7, r0
 80052de:	db01      	blt.n	80052e4 <_malloc_r+0x1c>
 80052e0:	42a9      	cmp	r1, r5
 80052e2:	d905      	bls.n	80052f0 <_malloc_r+0x28>
 80052e4:	230c      	movs	r3, #12
 80052e6:	603b      	str	r3, [r7, #0]
 80052e8:	2600      	movs	r6, #0
 80052ea:	4630      	mov	r0, r6
 80052ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80053c4 <_malloc_r+0xfc>
 80052f4:	f000 f868 	bl	80053c8 <__malloc_lock>
 80052f8:	f8d8 3000 	ldr.w	r3, [r8]
 80052fc:	461c      	mov	r4, r3
 80052fe:	bb5c      	cbnz	r4, 8005358 <_malloc_r+0x90>
 8005300:	4629      	mov	r1, r5
 8005302:	4638      	mov	r0, r7
 8005304:	f7ff ffc0 	bl	8005288 <sbrk_aligned>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	4604      	mov	r4, r0
 800530c:	d155      	bne.n	80053ba <_malloc_r+0xf2>
 800530e:	f8d8 4000 	ldr.w	r4, [r8]
 8005312:	4626      	mov	r6, r4
 8005314:	2e00      	cmp	r6, #0
 8005316:	d145      	bne.n	80053a4 <_malloc_r+0xdc>
 8005318:	2c00      	cmp	r4, #0
 800531a:	d048      	beq.n	80053ae <_malloc_r+0xe6>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	4631      	mov	r1, r6
 8005320:	4638      	mov	r0, r7
 8005322:	eb04 0903 	add.w	r9, r4, r3
 8005326:	f000 f883 	bl	8005430 <_sbrk_r>
 800532a:	4581      	cmp	r9, r0
 800532c:	d13f      	bne.n	80053ae <_malloc_r+0xe6>
 800532e:	6821      	ldr	r1, [r4, #0]
 8005330:	1a6d      	subs	r5, r5, r1
 8005332:	4629      	mov	r1, r5
 8005334:	4638      	mov	r0, r7
 8005336:	f7ff ffa7 	bl	8005288 <sbrk_aligned>
 800533a:	3001      	adds	r0, #1
 800533c:	d037      	beq.n	80053ae <_malloc_r+0xe6>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	442b      	add	r3, r5
 8005342:	6023      	str	r3, [r4, #0]
 8005344:	f8d8 3000 	ldr.w	r3, [r8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d038      	beq.n	80053be <_malloc_r+0xf6>
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	42a2      	cmp	r2, r4
 8005350:	d12b      	bne.n	80053aa <_malloc_r+0xe2>
 8005352:	2200      	movs	r2, #0
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	e00f      	b.n	8005378 <_malloc_r+0xb0>
 8005358:	6822      	ldr	r2, [r4, #0]
 800535a:	1b52      	subs	r2, r2, r5
 800535c:	d41f      	bmi.n	800539e <_malloc_r+0xd6>
 800535e:	2a0b      	cmp	r2, #11
 8005360:	d917      	bls.n	8005392 <_malloc_r+0xca>
 8005362:	1961      	adds	r1, r4, r5
 8005364:	42a3      	cmp	r3, r4
 8005366:	6025      	str	r5, [r4, #0]
 8005368:	bf18      	it	ne
 800536a:	6059      	strne	r1, [r3, #4]
 800536c:	6863      	ldr	r3, [r4, #4]
 800536e:	bf08      	it	eq
 8005370:	f8c8 1000 	streq.w	r1, [r8]
 8005374:	5162      	str	r2, [r4, r5]
 8005376:	604b      	str	r3, [r1, #4]
 8005378:	4638      	mov	r0, r7
 800537a:	f104 060b 	add.w	r6, r4, #11
 800537e:	f000 f829 	bl	80053d4 <__malloc_unlock>
 8005382:	f026 0607 	bic.w	r6, r6, #7
 8005386:	1d23      	adds	r3, r4, #4
 8005388:	1af2      	subs	r2, r6, r3
 800538a:	d0ae      	beq.n	80052ea <_malloc_r+0x22>
 800538c:	1b9b      	subs	r3, r3, r6
 800538e:	50a3      	str	r3, [r4, r2]
 8005390:	e7ab      	b.n	80052ea <_malloc_r+0x22>
 8005392:	42a3      	cmp	r3, r4
 8005394:	6862      	ldr	r2, [r4, #4]
 8005396:	d1dd      	bne.n	8005354 <_malloc_r+0x8c>
 8005398:	f8c8 2000 	str.w	r2, [r8]
 800539c:	e7ec      	b.n	8005378 <_malloc_r+0xb0>
 800539e:	4623      	mov	r3, r4
 80053a0:	6864      	ldr	r4, [r4, #4]
 80053a2:	e7ac      	b.n	80052fe <_malloc_r+0x36>
 80053a4:	4634      	mov	r4, r6
 80053a6:	6876      	ldr	r6, [r6, #4]
 80053a8:	e7b4      	b.n	8005314 <_malloc_r+0x4c>
 80053aa:	4613      	mov	r3, r2
 80053ac:	e7cc      	b.n	8005348 <_malloc_r+0x80>
 80053ae:	230c      	movs	r3, #12
 80053b0:	603b      	str	r3, [r7, #0]
 80053b2:	4638      	mov	r0, r7
 80053b4:	f000 f80e 	bl	80053d4 <__malloc_unlock>
 80053b8:	e797      	b.n	80052ea <_malloc_r+0x22>
 80053ba:	6025      	str	r5, [r4, #0]
 80053bc:	e7dc      	b.n	8005378 <_malloc_r+0xb0>
 80053be:	605b      	str	r3, [r3, #4]
 80053c0:	deff      	udf	#255	; 0xff
 80053c2:	bf00      	nop
 80053c4:	200001d0 	.word	0x200001d0

080053c8 <__malloc_lock>:
 80053c8:	4801      	ldr	r0, [pc, #4]	; (80053d0 <__malloc_lock+0x8>)
 80053ca:	f000 b86b 	b.w	80054a4 <__retarget_lock_acquire_recursive>
 80053ce:	bf00      	nop
 80053d0:	20000314 	.word	0x20000314

080053d4 <__malloc_unlock>:
 80053d4:	4801      	ldr	r0, [pc, #4]	; (80053dc <__malloc_unlock+0x8>)
 80053d6:	f000 b866 	b.w	80054a6 <__retarget_lock_release_recursive>
 80053da:	bf00      	nop
 80053dc:	20000314 	.word	0x20000314

080053e0 <siprintf>:
 80053e0:	b40e      	push	{r1, r2, r3}
 80053e2:	b500      	push	{lr}
 80053e4:	b09c      	sub	sp, #112	; 0x70
 80053e6:	ab1d      	add	r3, sp, #116	; 0x74
 80053e8:	9002      	str	r0, [sp, #8]
 80053ea:	9006      	str	r0, [sp, #24]
 80053ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80053f0:	4809      	ldr	r0, [pc, #36]	; (8005418 <siprintf+0x38>)
 80053f2:	9107      	str	r1, [sp, #28]
 80053f4:	9104      	str	r1, [sp, #16]
 80053f6:	4909      	ldr	r1, [pc, #36]	; (800541c <siprintf+0x3c>)
 80053f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80053fc:	9105      	str	r1, [sp, #20]
 80053fe:	6800      	ldr	r0, [r0, #0]
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	a902      	add	r1, sp, #8
 8005404:	f000 f8f6 	bl	80055f4 <_svfiprintf_r>
 8005408:	9b02      	ldr	r3, [sp, #8]
 800540a:	2200      	movs	r2, #0
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	b01c      	add	sp, #112	; 0x70
 8005410:	f85d eb04 	ldr.w	lr, [sp], #4
 8005414:	b003      	add	sp, #12
 8005416:	4770      	bx	lr
 8005418:	20000058 	.word	0x20000058
 800541c:	ffff0208 	.word	0xffff0208

08005420 <memset>:
 8005420:	4402      	add	r2, r0
 8005422:	4603      	mov	r3, r0
 8005424:	4293      	cmp	r3, r2
 8005426:	d100      	bne.n	800542a <memset+0xa>
 8005428:	4770      	bx	lr
 800542a:	f803 1b01 	strb.w	r1, [r3], #1
 800542e:	e7f9      	b.n	8005424 <memset+0x4>

08005430 <_sbrk_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4d06      	ldr	r5, [pc, #24]	; (800544c <_sbrk_r+0x1c>)
 8005434:	2300      	movs	r3, #0
 8005436:	4604      	mov	r4, r0
 8005438:	4608      	mov	r0, r1
 800543a:	602b      	str	r3, [r5, #0]
 800543c:	f7fc f854 	bl	80014e8 <_sbrk>
 8005440:	1c43      	adds	r3, r0, #1
 8005442:	d102      	bne.n	800544a <_sbrk_r+0x1a>
 8005444:	682b      	ldr	r3, [r5, #0]
 8005446:	b103      	cbz	r3, 800544a <_sbrk_r+0x1a>
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	bd38      	pop	{r3, r4, r5, pc}
 800544c:	20000310 	.word	0x20000310

08005450 <__errno>:
 8005450:	4b01      	ldr	r3, [pc, #4]	; (8005458 <__errno+0x8>)
 8005452:	6818      	ldr	r0, [r3, #0]
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20000058 	.word	0x20000058

0800545c <__libc_init_array>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	4d0d      	ldr	r5, [pc, #52]	; (8005494 <__libc_init_array+0x38>)
 8005460:	4c0d      	ldr	r4, [pc, #52]	; (8005498 <__libc_init_array+0x3c>)
 8005462:	1b64      	subs	r4, r4, r5
 8005464:	10a4      	asrs	r4, r4, #2
 8005466:	2600      	movs	r6, #0
 8005468:	42a6      	cmp	r6, r4
 800546a:	d109      	bne.n	8005480 <__libc_init_array+0x24>
 800546c:	4d0b      	ldr	r5, [pc, #44]	; (800549c <__libc_init_array+0x40>)
 800546e:	4c0c      	ldr	r4, [pc, #48]	; (80054a0 <__libc_init_array+0x44>)
 8005470:	f000 fd24 	bl	8005ebc <_init>
 8005474:	1b64      	subs	r4, r4, r5
 8005476:	10a4      	asrs	r4, r4, #2
 8005478:	2600      	movs	r6, #0
 800547a:	42a6      	cmp	r6, r4
 800547c:	d105      	bne.n	800548a <__libc_init_array+0x2e>
 800547e:	bd70      	pop	{r4, r5, r6, pc}
 8005480:	f855 3b04 	ldr.w	r3, [r5], #4
 8005484:	4798      	blx	r3
 8005486:	3601      	adds	r6, #1
 8005488:	e7ee      	b.n	8005468 <__libc_init_array+0xc>
 800548a:	f855 3b04 	ldr.w	r3, [r5], #4
 800548e:	4798      	blx	r3
 8005490:	3601      	adds	r6, #1
 8005492:	e7f2      	b.n	800547a <__libc_init_array+0x1e>
 8005494:	08005fb4 	.word	0x08005fb4
 8005498:	08005fb4 	.word	0x08005fb4
 800549c:	08005fb4 	.word	0x08005fb4
 80054a0:	08005fb8 	.word	0x08005fb8

080054a4 <__retarget_lock_acquire_recursive>:
 80054a4:	4770      	bx	lr

080054a6 <__retarget_lock_release_recursive>:
 80054a6:	4770      	bx	lr

080054a8 <_free_r>:
 80054a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054aa:	2900      	cmp	r1, #0
 80054ac:	d044      	beq.n	8005538 <_free_r+0x90>
 80054ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054b2:	9001      	str	r0, [sp, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f1a1 0404 	sub.w	r4, r1, #4
 80054ba:	bfb8      	it	lt
 80054bc:	18e4      	addlt	r4, r4, r3
 80054be:	f7ff ff83 	bl	80053c8 <__malloc_lock>
 80054c2:	4a1e      	ldr	r2, [pc, #120]	; (800553c <_free_r+0x94>)
 80054c4:	9801      	ldr	r0, [sp, #4]
 80054c6:	6813      	ldr	r3, [r2, #0]
 80054c8:	b933      	cbnz	r3, 80054d8 <_free_r+0x30>
 80054ca:	6063      	str	r3, [r4, #4]
 80054cc:	6014      	str	r4, [r2, #0]
 80054ce:	b003      	add	sp, #12
 80054d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80054d4:	f7ff bf7e 	b.w	80053d4 <__malloc_unlock>
 80054d8:	42a3      	cmp	r3, r4
 80054da:	d908      	bls.n	80054ee <_free_r+0x46>
 80054dc:	6825      	ldr	r5, [r4, #0]
 80054de:	1961      	adds	r1, r4, r5
 80054e0:	428b      	cmp	r3, r1
 80054e2:	bf01      	itttt	eq
 80054e4:	6819      	ldreq	r1, [r3, #0]
 80054e6:	685b      	ldreq	r3, [r3, #4]
 80054e8:	1949      	addeq	r1, r1, r5
 80054ea:	6021      	streq	r1, [r4, #0]
 80054ec:	e7ed      	b.n	80054ca <_free_r+0x22>
 80054ee:	461a      	mov	r2, r3
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	b10b      	cbz	r3, 80054f8 <_free_r+0x50>
 80054f4:	42a3      	cmp	r3, r4
 80054f6:	d9fa      	bls.n	80054ee <_free_r+0x46>
 80054f8:	6811      	ldr	r1, [r2, #0]
 80054fa:	1855      	adds	r5, r2, r1
 80054fc:	42a5      	cmp	r5, r4
 80054fe:	d10b      	bne.n	8005518 <_free_r+0x70>
 8005500:	6824      	ldr	r4, [r4, #0]
 8005502:	4421      	add	r1, r4
 8005504:	1854      	adds	r4, r2, r1
 8005506:	42a3      	cmp	r3, r4
 8005508:	6011      	str	r1, [r2, #0]
 800550a:	d1e0      	bne.n	80054ce <_free_r+0x26>
 800550c:	681c      	ldr	r4, [r3, #0]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	6053      	str	r3, [r2, #4]
 8005512:	440c      	add	r4, r1
 8005514:	6014      	str	r4, [r2, #0]
 8005516:	e7da      	b.n	80054ce <_free_r+0x26>
 8005518:	d902      	bls.n	8005520 <_free_r+0x78>
 800551a:	230c      	movs	r3, #12
 800551c:	6003      	str	r3, [r0, #0]
 800551e:	e7d6      	b.n	80054ce <_free_r+0x26>
 8005520:	6825      	ldr	r5, [r4, #0]
 8005522:	1961      	adds	r1, r4, r5
 8005524:	428b      	cmp	r3, r1
 8005526:	bf04      	itt	eq
 8005528:	6819      	ldreq	r1, [r3, #0]
 800552a:	685b      	ldreq	r3, [r3, #4]
 800552c:	6063      	str	r3, [r4, #4]
 800552e:	bf04      	itt	eq
 8005530:	1949      	addeq	r1, r1, r5
 8005532:	6021      	streq	r1, [r4, #0]
 8005534:	6054      	str	r4, [r2, #4]
 8005536:	e7ca      	b.n	80054ce <_free_r+0x26>
 8005538:	b003      	add	sp, #12
 800553a:	bd30      	pop	{r4, r5, pc}
 800553c:	200001d0 	.word	0x200001d0

08005540 <__ssputs_r>:
 8005540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005544:	688e      	ldr	r6, [r1, #8]
 8005546:	461f      	mov	r7, r3
 8005548:	42be      	cmp	r6, r7
 800554a:	680b      	ldr	r3, [r1, #0]
 800554c:	4682      	mov	sl, r0
 800554e:	460c      	mov	r4, r1
 8005550:	4690      	mov	r8, r2
 8005552:	d82c      	bhi.n	80055ae <__ssputs_r+0x6e>
 8005554:	898a      	ldrh	r2, [r1, #12]
 8005556:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800555a:	d026      	beq.n	80055aa <__ssputs_r+0x6a>
 800555c:	6965      	ldr	r5, [r4, #20]
 800555e:	6909      	ldr	r1, [r1, #16]
 8005560:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005564:	eba3 0901 	sub.w	r9, r3, r1
 8005568:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800556c:	1c7b      	adds	r3, r7, #1
 800556e:	444b      	add	r3, r9
 8005570:	106d      	asrs	r5, r5, #1
 8005572:	429d      	cmp	r5, r3
 8005574:	bf38      	it	cc
 8005576:	461d      	movcc	r5, r3
 8005578:	0553      	lsls	r3, r2, #21
 800557a:	d527      	bpl.n	80055cc <__ssputs_r+0x8c>
 800557c:	4629      	mov	r1, r5
 800557e:	f7ff fea3 	bl	80052c8 <_malloc_r>
 8005582:	4606      	mov	r6, r0
 8005584:	b360      	cbz	r0, 80055e0 <__ssputs_r+0xa0>
 8005586:	6921      	ldr	r1, [r4, #16]
 8005588:	464a      	mov	r2, r9
 800558a:	f000 fadb 	bl	8005b44 <memcpy>
 800558e:	89a3      	ldrh	r3, [r4, #12]
 8005590:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005594:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	6126      	str	r6, [r4, #16]
 800559c:	6165      	str	r5, [r4, #20]
 800559e:	444e      	add	r6, r9
 80055a0:	eba5 0509 	sub.w	r5, r5, r9
 80055a4:	6026      	str	r6, [r4, #0]
 80055a6:	60a5      	str	r5, [r4, #8]
 80055a8:	463e      	mov	r6, r7
 80055aa:	42be      	cmp	r6, r7
 80055ac:	d900      	bls.n	80055b0 <__ssputs_r+0x70>
 80055ae:	463e      	mov	r6, r7
 80055b0:	6820      	ldr	r0, [r4, #0]
 80055b2:	4632      	mov	r2, r6
 80055b4:	4641      	mov	r1, r8
 80055b6:	f000 faab 	bl	8005b10 <memmove>
 80055ba:	68a3      	ldr	r3, [r4, #8]
 80055bc:	1b9b      	subs	r3, r3, r6
 80055be:	60a3      	str	r3, [r4, #8]
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	4433      	add	r3, r6
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	2000      	movs	r0, #0
 80055c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055cc:	462a      	mov	r2, r5
 80055ce:	f000 fac7 	bl	8005b60 <_realloc_r>
 80055d2:	4606      	mov	r6, r0
 80055d4:	2800      	cmp	r0, #0
 80055d6:	d1e0      	bne.n	800559a <__ssputs_r+0x5a>
 80055d8:	6921      	ldr	r1, [r4, #16]
 80055da:	4650      	mov	r0, sl
 80055dc:	f7ff ff64 	bl	80054a8 <_free_r>
 80055e0:	230c      	movs	r3, #12
 80055e2:	f8ca 3000 	str.w	r3, [sl]
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ec:	81a3      	strh	r3, [r4, #12]
 80055ee:	f04f 30ff 	mov.w	r0, #4294967295
 80055f2:	e7e9      	b.n	80055c8 <__ssputs_r+0x88>

080055f4 <_svfiprintf_r>:
 80055f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f8:	4698      	mov	r8, r3
 80055fa:	898b      	ldrh	r3, [r1, #12]
 80055fc:	061b      	lsls	r3, r3, #24
 80055fe:	b09d      	sub	sp, #116	; 0x74
 8005600:	4607      	mov	r7, r0
 8005602:	460d      	mov	r5, r1
 8005604:	4614      	mov	r4, r2
 8005606:	d50e      	bpl.n	8005626 <_svfiprintf_r+0x32>
 8005608:	690b      	ldr	r3, [r1, #16]
 800560a:	b963      	cbnz	r3, 8005626 <_svfiprintf_r+0x32>
 800560c:	2140      	movs	r1, #64	; 0x40
 800560e:	f7ff fe5b 	bl	80052c8 <_malloc_r>
 8005612:	6028      	str	r0, [r5, #0]
 8005614:	6128      	str	r0, [r5, #16]
 8005616:	b920      	cbnz	r0, 8005622 <_svfiprintf_r+0x2e>
 8005618:	230c      	movs	r3, #12
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	f04f 30ff 	mov.w	r0, #4294967295
 8005620:	e0d0      	b.n	80057c4 <_svfiprintf_r+0x1d0>
 8005622:	2340      	movs	r3, #64	; 0x40
 8005624:	616b      	str	r3, [r5, #20]
 8005626:	2300      	movs	r3, #0
 8005628:	9309      	str	r3, [sp, #36]	; 0x24
 800562a:	2320      	movs	r3, #32
 800562c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005630:	f8cd 800c 	str.w	r8, [sp, #12]
 8005634:	2330      	movs	r3, #48	; 0x30
 8005636:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80057dc <_svfiprintf_r+0x1e8>
 800563a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800563e:	f04f 0901 	mov.w	r9, #1
 8005642:	4623      	mov	r3, r4
 8005644:	469a      	mov	sl, r3
 8005646:	f813 2b01 	ldrb.w	r2, [r3], #1
 800564a:	b10a      	cbz	r2, 8005650 <_svfiprintf_r+0x5c>
 800564c:	2a25      	cmp	r2, #37	; 0x25
 800564e:	d1f9      	bne.n	8005644 <_svfiprintf_r+0x50>
 8005650:	ebba 0b04 	subs.w	fp, sl, r4
 8005654:	d00b      	beq.n	800566e <_svfiprintf_r+0x7a>
 8005656:	465b      	mov	r3, fp
 8005658:	4622      	mov	r2, r4
 800565a:	4629      	mov	r1, r5
 800565c:	4638      	mov	r0, r7
 800565e:	f7ff ff6f 	bl	8005540 <__ssputs_r>
 8005662:	3001      	adds	r0, #1
 8005664:	f000 80a9 	beq.w	80057ba <_svfiprintf_r+0x1c6>
 8005668:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800566a:	445a      	add	r2, fp
 800566c:	9209      	str	r2, [sp, #36]	; 0x24
 800566e:	f89a 3000 	ldrb.w	r3, [sl]
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 80a1 	beq.w	80057ba <_svfiprintf_r+0x1c6>
 8005678:	2300      	movs	r3, #0
 800567a:	f04f 32ff 	mov.w	r2, #4294967295
 800567e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005682:	f10a 0a01 	add.w	sl, sl, #1
 8005686:	9304      	str	r3, [sp, #16]
 8005688:	9307      	str	r3, [sp, #28]
 800568a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800568e:	931a      	str	r3, [sp, #104]	; 0x68
 8005690:	4654      	mov	r4, sl
 8005692:	2205      	movs	r2, #5
 8005694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005698:	4850      	ldr	r0, [pc, #320]	; (80057dc <_svfiprintf_r+0x1e8>)
 800569a:	f7fa fda9 	bl	80001f0 <memchr>
 800569e:	9a04      	ldr	r2, [sp, #16]
 80056a0:	b9d8      	cbnz	r0, 80056da <_svfiprintf_r+0xe6>
 80056a2:	06d0      	lsls	r0, r2, #27
 80056a4:	bf44      	itt	mi
 80056a6:	2320      	movmi	r3, #32
 80056a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056ac:	0711      	lsls	r1, r2, #28
 80056ae:	bf44      	itt	mi
 80056b0:	232b      	movmi	r3, #43	; 0x2b
 80056b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b6:	f89a 3000 	ldrb.w	r3, [sl]
 80056ba:	2b2a      	cmp	r3, #42	; 0x2a
 80056bc:	d015      	beq.n	80056ea <_svfiprintf_r+0xf6>
 80056be:	9a07      	ldr	r2, [sp, #28]
 80056c0:	4654      	mov	r4, sl
 80056c2:	2000      	movs	r0, #0
 80056c4:	f04f 0c0a 	mov.w	ip, #10
 80056c8:	4621      	mov	r1, r4
 80056ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056ce:	3b30      	subs	r3, #48	; 0x30
 80056d0:	2b09      	cmp	r3, #9
 80056d2:	d94d      	bls.n	8005770 <_svfiprintf_r+0x17c>
 80056d4:	b1b0      	cbz	r0, 8005704 <_svfiprintf_r+0x110>
 80056d6:	9207      	str	r2, [sp, #28]
 80056d8:	e014      	b.n	8005704 <_svfiprintf_r+0x110>
 80056da:	eba0 0308 	sub.w	r3, r0, r8
 80056de:	fa09 f303 	lsl.w	r3, r9, r3
 80056e2:	4313      	orrs	r3, r2
 80056e4:	9304      	str	r3, [sp, #16]
 80056e6:	46a2      	mov	sl, r4
 80056e8:	e7d2      	b.n	8005690 <_svfiprintf_r+0x9c>
 80056ea:	9b03      	ldr	r3, [sp, #12]
 80056ec:	1d19      	adds	r1, r3, #4
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	9103      	str	r1, [sp, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bfbb      	ittet	lt
 80056f6:	425b      	neglt	r3, r3
 80056f8:	f042 0202 	orrlt.w	r2, r2, #2
 80056fc:	9307      	strge	r3, [sp, #28]
 80056fe:	9307      	strlt	r3, [sp, #28]
 8005700:	bfb8      	it	lt
 8005702:	9204      	strlt	r2, [sp, #16]
 8005704:	7823      	ldrb	r3, [r4, #0]
 8005706:	2b2e      	cmp	r3, #46	; 0x2e
 8005708:	d10c      	bne.n	8005724 <_svfiprintf_r+0x130>
 800570a:	7863      	ldrb	r3, [r4, #1]
 800570c:	2b2a      	cmp	r3, #42	; 0x2a
 800570e:	d134      	bne.n	800577a <_svfiprintf_r+0x186>
 8005710:	9b03      	ldr	r3, [sp, #12]
 8005712:	1d1a      	adds	r2, r3, #4
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	9203      	str	r2, [sp, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	bfb8      	it	lt
 800571c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005720:	3402      	adds	r4, #2
 8005722:	9305      	str	r3, [sp, #20]
 8005724:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80057ec <_svfiprintf_r+0x1f8>
 8005728:	7821      	ldrb	r1, [r4, #0]
 800572a:	2203      	movs	r2, #3
 800572c:	4650      	mov	r0, sl
 800572e:	f7fa fd5f 	bl	80001f0 <memchr>
 8005732:	b138      	cbz	r0, 8005744 <_svfiprintf_r+0x150>
 8005734:	9b04      	ldr	r3, [sp, #16]
 8005736:	eba0 000a 	sub.w	r0, r0, sl
 800573a:	2240      	movs	r2, #64	; 0x40
 800573c:	4082      	lsls	r2, r0
 800573e:	4313      	orrs	r3, r2
 8005740:	3401      	adds	r4, #1
 8005742:	9304      	str	r3, [sp, #16]
 8005744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005748:	4825      	ldr	r0, [pc, #148]	; (80057e0 <_svfiprintf_r+0x1ec>)
 800574a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800574e:	2206      	movs	r2, #6
 8005750:	f7fa fd4e 	bl	80001f0 <memchr>
 8005754:	2800      	cmp	r0, #0
 8005756:	d038      	beq.n	80057ca <_svfiprintf_r+0x1d6>
 8005758:	4b22      	ldr	r3, [pc, #136]	; (80057e4 <_svfiprintf_r+0x1f0>)
 800575a:	bb1b      	cbnz	r3, 80057a4 <_svfiprintf_r+0x1b0>
 800575c:	9b03      	ldr	r3, [sp, #12]
 800575e:	3307      	adds	r3, #7
 8005760:	f023 0307 	bic.w	r3, r3, #7
 8005764:	3308      	adds	r3, #8
 8005766:	9303      	str	r3, [sp, #12]
 8005768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800576a:	4433      	add	r3, r6
 800576c:	9309      	str	r3, [sp, #36]	; 0x24
 800576e:	e768      	b.n	8005642 <_svfiprintf_r+0x4e>
 8005770:	fb0c 3202 	mla	r2, ip, r2, r3
 8005774:	460c      	mov	r4, r1
 8005776:	2001      	movs	r0, #1
 8005778:	e7a6      	b.n	80056c8 <_svfiprintf_r+0xd4>
 800577a:	2300      	movs	r3, #0
 800577c:	3401      	adds	r4, #1
 800577e:	9305      	str	r3, [sp, #20]
 8005780:	4619      	mov	r1, r3
 8005782:	f04f 0c0a 	mov.w	ip, #10
 8005786:	4620      	mov	r0, r4
 8005788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800578c:	3a30      	subs	r2, #48	; 0x30
 800578e:	2a09      	cmp	r2, #9
 8005790:	d903      	bls.n	800579a <_svfiprintf_r+0x1a6>
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0c6      	beq.n	8005724 <_svfiprintf_r+0x130>
 8005796:	9105      	str	r1, [sp, #20]
 8005798:	e7c4      	b.n	8005724 <_svfiprintf_r+0x130>
 800579a:	fb0c 2101 	mla	r1, ip, r1, r2
 800579e:	4604      	mov	r4, r0
 80057a0:	2301      	movs	r3, #1
 80057a2:	e7f0      	b.n	8005786 <_svfiprintf_r+0x192>
 80057a4:	ab03      	add	r3, sp, #12
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	462a      	mov	r2, r5
 80057aa:	4b0f      	ldr	r3, [pc, #60]	; (80057e8 <_svfiprintf_r+0x1f4>)
 80057ac:	a904      	add	r1, sp, #16
 80057ae:	4638      	mov	r0, r7
 80057b0:	f3af 8000 	nop.w
 80057b4:	1c42      	adds	r2, r0, #1
 80057b6:	4606      	mov	r6, r0
 80057b8:	d1d6      	bne.n	8005768 <_svfiprintf_r+0x174>
 80057ba:	89ab      	ldrh	r3, [r5, #12]
 80057bc:	065b      	lsls	r3, r3, #25
 80057be:	f53f af2d 	bmi.w	800561c <_svfiprintf_r+0x28>
 80057c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057c4:	b01d      	add	sp, #116	; 0x74
 80057c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057ca:	ab03      	add	r3, sp, #12
 80057cc:	9300      	str	r3, [sp, #0]
 80057ce:	462a      	mov	r2, r5
 80057d0:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <_svfiprintf_r+0x1f4>)
 80057d2:	a904      	add	r1, sp, #16
 80057d4:	4638      	mov	r0, r7
 80057d6:	f000 f879 	bl	80058cc <_printf_i>
 80057da:	e7eb      	b.n	80057b4 <_svfiprintf_r+0x1c0>
 80057dc:	08005f60 	.word	0x08005f60
 80057e0:	08005f6a 	.word	0x08005f6a
 80057e4:	00000000 	.word	0x00000000
 80057e8:	08005541 	.word	0x08005541
 80057ec:	08005f66 	.word	0x08005f66

080057f0 <_printf_common>:
 80057f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f4:	4616      	mov	r6, r2
 80057f6:	4699      	mov	r9, r3
 80057f8:	688a      	ldr	r2, [r1, #8]
 80057fa:	690b      	ldr	r3, [r1, #16]
 80057fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005800:	4293      	cmp	r3, r2
 8005802:	bfb8      	it	lt
 8005804:	4613      	movlt	r3, r2
 8005806:	6033      	str	r3, [r6, #0]
 8005808:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800580c:	4607      	mov	r7, r0
 800580e:	460c      	mov	r4, r1
 8005810:	b10a      	cbz	r2, 8005816 <_printf_common+0x26>
 8005812:	3301      	adds	r3, #1
 8005814:	6033      	str	r3, [r6, #0]
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	0699      	lsls	r1, r3, #26
 800581a:	bf42      	ittt	mi
 800581c:	6833      	ldrmi	r3, [r6, #0]
 800581e:	3302      	addmi	r3, #2
 8005820:	6033      	strmi	r3, [r6, #0]
 8005822:	6825      	ldr	r5, [r4, #0]
 8005824:	f015 0506 	ands.w	r5, r5, #6
 8005828:	d106      	bne.n	8005838 <_printf_common+0x48>
 800582a:	f104 0a19 	add.w	sl, r4, #25
 800582e:	68e3      	ldr	r3, [r4, #12]
 8005830:	6832      	ldr	r2, [r6, #0]
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	42ab      	cmp	r3, r5
 8005836:	dc26      	bgt.n	8005886 <_printf_common+0x96>
 8005838:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800583c:	1e13      	subs	r3, r2, #0
 800583e:	6822      	ldr	r2, [r4, #0]
 8005840:	bf18      	it	ne
 8005842:	2301      	movne	r3, #1
 8005844:	0692      	lsls	r2, r2, #26
 8005846:	d42b      	bmi.n	80058a0 <_printf_common+0xb0>
 8005848:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800584c:	4649      	mov	r1, r9
 800584e:	4638      	mov	r0, r7
 8005850:	47c0      	blx	r8
 8005852:	3001      	adds	r0, #1
 8005854:	d01e      	beq.n	8005894 <_printf_common+0xa4>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	6922      	ldr	r2, [r4, #16]
 800585a:	f003 0306 	and.w	r3, r3, #6
 800585e:	2b04      	cmp	r3, #4
 8005860:	bf02      	ittt	eq
 8005862:	68e5      	ldreq	r5, [r4, #12]
 8005864:	6833      	ldreq	r3, [r6, #0]
 8005866:	1aed      	subeq	r5, r5, r3
 8005868:	68a3      	ldr	r3, [r4, #8]
 800586a:	bf0c      	ite	eq
 800586c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005870:	2500      	movne	r5, #0
 8005872:	4293      	cmp	r3, r2
 8005874:	bfc4      	itt	gt
 8005876:	1a9b      	subgt	r3, r3, r2
 8005878:	18ed      	addgt	r5, r5, r3
 800587a:	2600      	movs	r6, #0
 800587c:	341a      	adds	r4, #26
 800587e:	42b5      	cmp	r5, r6
 8005880:	d11a      	bne.n	80058b8 <_printf_common+0xc8>
 8005882:	2000      	movs	r0, #0
 8005884:	e008      	b.n	8005898 <_printf_common+0xa8>
 8005886:	2301      	movs	r3, #1
 8005888:	4652      	mov	r2, sl
 800588a:	4649      	mov	r1, r9
 800588c:	4638      	mov	r0, r7
 800588e:	47c0      	blx	r8
 8005890:	3001      	adds	r0, #1
 8005892:	d103      	bne.n	800589c <_printf_common+0xac>
 8005894:	f04f 30ff 	mov.w	r0, #4294967295
 8005898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800589c:	3501      	adds	r5, #1
 800589e:	e7c6      	b.n	800582e <_printf_common+0x3e>
 80058a0:	18e1      	adds	r1, r4, r3
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	2030      	movs	r0, #48	; 0x30
 80058a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80058aa:	4422      	add	r2, r4
 80058ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80058b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80058b4:	3302      	adds	r3, #2
 80058b6:	e7c7      	b.n	8005848 <_printf_common+0x58>
 80058b8:	2301      	movs	r3, #1
 80058ba:	4622      	mov	r2, r4
 80058bc:	4649      	mov	r1, r9
 80058be:	4638      	mov	r0, r7
 80058c0:	47c0      	blx	r8
 80058c2:	3001      	adds	r0, #1
 80058c4:	d0e6      	beq.n	8005894 <_printf_common+0xa4>
 80058c6:	3601      	adds	r6, #1
 80058c8:	e7d9      	b.n	800587e <_printf_common+0x8e>
	...

080058cc <_printf_i>:
 80058cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d0:	7e0f      	ldrb	r7, [r1, #24]
 80058d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80058d4:	2f78      	cmp	r7, #120	; 0x78
 80058d6:	4691      	mov	r9, r2
 80058d8:	4680      	mov	r8, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	469a      	mov	sl, r3
 80058de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80058e2:	d807      	bhi.n	80058f4 <_printf_i+0x28>
 80058e4:	2f62      	cmp	r7, #98	; 0x62
 80058e6:	d80a      	bhi.n	80058fe <_printf_i+0x32>
 80058e8:	2f00      	cmp	r7, #0
 80058ea:	f000 80d4 	beq.w	8005a96 <_printf_i+0x1ca>
 80058ee:	2f58      	cmp	r7, #88	; 0x58
 80058f0:	f000 80c0 	beq.w	8005a74 <_printf_i+0x1a8>
 80058f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058fc:	e03a      	b.n	8005974 <_printf_i+0xa8>
 80058fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005902:	2b15      	cmp	r3, #21
 8005904:	d8f6      	bhi.n	80058f4 <_printf_i+0x28>
 8005906:	a101      	add	r1, pc, #4	; (adr r1, 800590c <_printf_i+0x40>)
 8005908:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800590c:	08005965 	.word	0x08005965
 8005910:	08005979 	.word	0x08005979
 8005914:	080058f5 	.word	0x080058f5
 8005918:	080058f5 	.word	0x080058f5
 800591c:	080058f5 	.word	0x080058f5
 8005920:	080058f5 	.word	0x080058f5
 8005924:	08005979 	.word	0x08005979
 8005928:	080058f5 	.word	0x080058f5
 800592c:	080058f5 	.word	0x080058f5
 8005930:	080058f5 	.word	0x080058f5
 8005934:	080058f5 	.word	0x080058f5
 8005938:	08005a7d 	.word	0x08005a7d
 800593c:	080059a5 	.word	0x080059a5
 8005940:	08005a37 	.word	0x08005a37
 8005944:	080058f5 	.word	0x080058f5
 8005948:	080058f5 	.word	0x080058f5
 800594c:	08005a9f 	.word	0x08005a9f
 8005950:	080058f5 	.word	0x080058f5
 8005954:	080059a5 	.word	0x080059a5
 8005958:	080058f5 	.word	0x080058f5
 800595c:	080058f5 	.word	0x080058f5
 8005960:	08005a3f 	.word	0x08005a3f
 8005964:	682b      	ldr	r3, [r5, #0]
 8005966:	1d1a      	adds	r2, r3, #4
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	602a      	str	r2, [r5, #0]
 800596c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005970:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005974:	2301      	movs	r3, #1
 8005976:	e09f      	b.n	8005ab8 <_printf_i+0x1ec>
 8005978:	6820      	ldr	r0, [r4, #0]
 800597a:	682b      	ldr	r3, [r5, #0]
 800597c:	0607      	lsls	r7, r0, #24
 800597e:	f103 0104 	add.w	r1, r3, #4
 8005982:	6029      	str	r1, [r5, #0]
 8005984:	d501      	bpl.n	800598a <_printf_i+0xbe>
 8005986:	681e      	ldr	r6, [r3, #0]
 8005988:	e003      	b.n	8005992 <_printf_i+0xc6>
 800598a:	0646      	lsls	r6, r0, #25
 800598c:	d5fb      	bpl.n	8005986 <_printf_i+0xba>
 800598e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005992:	2e00      	cmp	r6, #0
 8005994:	da03      	bge.n	800599e <_printf_i+0xd2>
 8005996:	232d      	movs	r3, #45	; 0x2d
 8005998:	4276      	negs	r6, r6
 800599a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800599e:	485a      	ldr	r0, [pc, #360]	; (8005b08 <_printf_i+0x23c>)
 80059a0:	230a      	movs	r3, #10
 80059a2:	e012      	b.n	80059ca <_printf_i+0xfe>
 80059a4:	682b      	ldr	r3, [r5, #0]
 80059a6:	6820      	ldr	r0, [r4, #0]
 80059a8:	1d19      	adds	r1, r3, #4
 80059aa:	6029      	str	r1, [r5, #0]
 80059ac:	0605      	lsls	r5, r0, #24
 80059ae:	d501      	bpl.n	80059b4 <_printf_i+0xe8>
 80059b0:	681e      	ldr	r6, [r3, #0]
 80059b2:	e002      	b.n	80059ba <_printf_i+0xee>
 80059b4:	0641      	lsls	r1, r0, #25
 80059b6:	d5fb      	bpl.n	80059b0 <_printf_i+0xe4>
 80059b8:	881e      	ldrh	r6, [r3, #0]
 80059ba:	4853      	ldr	r0, [pc, #332]	; (8005b08 <_printf_i+0x23c>)
 80059bc:	2f6f      	cmp	r7, #111	; 0x6f
 80059be:	bf0c      	ite	eq
 80059c0:	2308      	moveq	r3, #8
 80059c2:	230a      	movne	r3, #10
 80059c4:	2100      	movs	r1, #0
 80059c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80059ca:	6865      	ldr	r5, [r4, #4]
 80059cc:	60a5      	str	r5, [r4, #8]
 80059ce:	2d00      	cmp	r5, #0
 80059d0:	bfa2      	ittt	ge
 80059d2:	6821      	ldrge	r1, [r4, #0]
 80059d4:	f021 0104 	bicge.w	r1, r1, #4
 80059d8:	6021      	strge	r1, [r4, #0]
 80059da:	b90e      	cbnz	r6, 80059e0 <_printf_i+0x114>
 80059dc:	2d00      	cmp	r5, #0
 80059de:	d04b      	beq.n	8005a78 <_printf_i+0x1ac>
 80059e0:	4615      	mov	r5, r2
 80059e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80059e6:	fb03 6711 	mls	r7, r3, r1, r6
 80059ea:	5dc7      	ldrb	r7, [r0, r7]
 80059ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059f0:	4637      	mov	r7, r6
 80059f2:	42bb      	cmp	r3, r7
 80059f4:	460e      	mov	r6, r1
 80059f6:	d9f4      	bls.n	80059e2 <_printf_i+0x116>
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d10b      	bne.n	8005a14 <_printf_i+0x148>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	07de      	lsls	r6, r3, #31
 8005a00:	d508      	bpl.n	8005a14 <_printf_i+0x148>
 8005a02:	6923      	ldr	r3, [r4, #16]
 8005a04:	6861      	ldr	r1, [r4, #4]
 8005a06:	4299      	cmp	r1, r3
 8005a08:	bfde      	ittt	le
 8005a0a:	2330      	movle	r3, #48	; 0x30
 8005a0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005a10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005a14:	1b52      	subs	r2, r2, r5
 8005a16:	6122      	str	r2, [r4, #16]
 8005a18:	f8cd a000 	str.w	sl, [sp]
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	aa03      	add	r2, sp, #12
 8005a20:	4621      	mov	r1, r4
 8005a22:	4640      	mov	r0, r8
 8005a24:	f7ff fee4 	bl	80057f0 <_printf_common>
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d14a      	bne.n	8005ac2 <_printf_i+0x1f6>
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a30:	b004      	add	sp, #16
 8005a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	f043 0320 	orr.w	r3, r3, #32
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	4833      	ldr	r0, [pc, #204]	; (8005b0c <_printf_i+0x240>)
 8005a40:	2778      	movs	r7, #120	; 0x78
 8005a42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	6829      	ldr	r1, [r5, #0]
 8005a4a:	061f      	lsls	r7, r3, #24
 8005a4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005a50:	d402      	bmi.n	8005a58 <_printf_i+0x18c>
 8005a52:	065f      	lsls	r7, r3, #25
 8005a54:	bf48      	it	mi
 8005a56:	b2b6      	uxthmi	r6, r6
 8005a58:	07df      	lsls	r7, r3, #31
 8005a5a:	bf48      	it	mi
 8005a5c:	f043 0320 	orrmi.w	r3, r3, #32
 8005a60:	6029      	str	r1, [r5, #0]
 8005a62:	bf48      	it	mi
 8005a64:	6023      	strmi	r3, [r4, #0]
 8005a66:	b91e      	cbnz	r6, 8005a70 <_printf_i+0x1a4>
 8005a68:	6823      	ldr	r3, [r4, #0]
 8005a6a:	f023 0320 	bic.w	r3, r3, #32
 8005a6e:	6023      	str	r3, [r4, #0]
 8005a70:	2310      	movs	r3, #16
 8005a72:	e7a7      	b.n	80059c4 <_printf_i+0xf8>
 8005a74:	4824      	ldr	r0, [pc, #144]	; (8005b08 <_printf_i+0x23c>)
 8005a76:	e7e4      	b.n	8005a42 <_printf_i+0x176>
 8005a78:	4615      	mov	r5, r2
 8005a7a:	e7bd      	b.n	80059f8 <_printf_i+0x12c>
 8005a7c:	682b      	ldr	r3, [r5, #0]
 8005a7e:	6826      	ldr	r6, [r4, #0]
 8005a80:	6961      	ldr	r1, [r4, #20]
 8005a82:	1d18      	adds	r0, r3, #4
 8005a84:	6028      	str	r0, [r5, #0]
 8005a86:	0635      	lsls	r5, r6, #24
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	d501      	bpl.n	8005a90 <_printf_i+0x1c4>
 8005a8c:	6019      	str	r1, [r3, #0]
 8005a8e:	e002      	b.n	8005a96 <_printf_i+0x1ca>
 8005a90:	0670      	lsls	r0, r6, #25
 8005a92:	d5fb      	bpl.n	8005a8c <_printf_i+0x1c0>
 8005a94:	8019      	strh	r1, [r3, #0]
 8005a96:	2300      	movs	r3, #0
 8005a98:	6123      	str	r3, [r4, #16]
 8005a9a:	4615      	mov	r5, r2
 8005a9c:	e7bc      	b.n	8005a18 <_printf_i+0x14c>
 8005a9e:	682b      	ldr	r3, [r5, #0]
 8005aa0:	1d1a      	adds	r2, r3, #4
 8005aa2:	602a      	str	r2, [r5, #0]
 8005aa4:	681d      	ldr	r5, [r3, #0]
 8005aa6:	6862      	ldr	r2, [r4, #4]
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4628      	mov	r0, r5
 8005aac:	f7fa fba0 	bl	80001f0 <memchr>
 8005ab0:	b108      	cbz	r0, 8005ab6 <_printf_i+0x1ea>
 8005ab2:	1b40      	subs	r0, r0, r5
 8005ab4:	6060      	str	r0, [r4, #4]
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	6123      	str	r3, [r4, #16]
 8005aba:	2300      	movs	r3, #0
 8005abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ac0:	e7aa      	b.n	8005a18 <_printf_i+0x14c>
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	462a      	mov	r2, r5
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4640      	mov	r0, r8
 8005aca:	47d0      	blx	sl
 8005acc:	3001      	adds	r0, #1
 8005ace:	d0ad      	beq.n	8005a2c <_printf_i+0x160>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	079b      	lsls	r3, r3, #30
 8005ad4:	d413      	bmi.n	8005afe <_printf_i+0x232>
 8005ad6:	68e0      	ldr	r0, [r4, #12]
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	4298      	cmp	r0, r3
 8005adc:	bfb8      	it	lt
 8005ade:	4618      	movlt	r0, r3
 8005ae0:	e7a6      	b.n	8005a30 <_printf_i+0x164>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4632      	mov	r2, r6
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	4640      	mov	r0, r8
 8005aea:	47d0      	blx	sl
 8005aec:	3001      	adds	r0, #1
 8005aee:	d09d      	beq.n	8005a2c <_printf_i+0x160>
 8005af0:	3501      	adds	r5, #1
 8005af2:	68e3      	ldr	r3, [r4, #12]
 8005af4:	9903      	ldr	r1, [sp, #12]
 8005af6:	1a5b      	subs	r3, r3, r1
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	dcf2      	bgt.n	8005ae2 <_printf_i+0x216>
 8005afc:	e7eb      	b.n	8005ad6 <_printf_i+0x20a>
 8005afe:	2500      	movs	r5, #0
 8005b00:	f104 0619 	add.w	r6, r4, #25
 8005b04:	e7f5      	b.n	8005af2 <_printf_i+0x226>
 8005b06:	bf00      	nop
 8005b08:	08005f71 	.word	0x08005f71
 8005b0c:	08005f82 	.word	0x08005f82

08005b10 <memmove>:
 8005b10:	4288      	cmp	r0, r1
 8005b12:	b510      	push	{r4, lr}
 8005b14:	eb01 0402 	add.w	r4, r1, r2
 8005b18:	d902      	bls.n	8005b20 <memmove+0x10>
 8005b1a:	4284      	cmp	r4, r0
 8005b1c:	4623      	mov	r3, r4
 8005b1e:	d807      	bhi.n	8005b30 <memmove+0x20>
 8005b20:	1e43      	subs	r3, r0, #1
 8005b22:	42a1      	cmp	r1, r4
 8005b24:	d008      	beq.n	8005b38 <memmove+0x28>
 8005b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005b2e:	e7f8      	b.n	8005b22 <memmove+0x12>
 8005b30:	4402      	add	r2, r0
 8005b32:	4601      	mov	r1, r0
 8005b34:	428a      	cmp	r2, r1
 8005b36:	d100      	bne.n	8005b3a <memmove+0x2a>
 8005b38:	bd10      	pop	{r4, pc}
 8005b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b42:	e7f7      	b.n	8005b34 <memmove+0x24>

08005b44 <memcpy>:
 8005b44:	440a      	add	r2, r1
 8005b46:	4291      	cmp	r1, r2
 8005b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b4c:	d100      	bne.n	8005b50 <memcpy+0xc>
 8005b4e:	4770      	bx	lr
 8005b50:	b510      	push	{r4, lr}
 8005b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b5a:	4291      	cmp	r1, r2
 8005b5c:	d1f9      	bne.n	8005b52 <memcpy+0xe>
 8005b5e:	bd10      	pop	{r4, pc}

08005b60 <_realloc_r>:
 8005b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b64:	4680      	mov	r8, r0
 8005b66:	4614      	mov	r4, r2
 8005b68:	460e      	mov	r6, r1
 8005b6a:	b921      	cbnz	r1, 8005b76 <_realloc_r+0x16>
 8005b6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b70:	4611      	mov	r1, r2
 8005b72:	f7ff bba9 	b.w	80052c8 <_malloc_r>
 8005b76:	b92a      	cbnz	r2, 8005b84 <_realloc_r+0x24>
 8005b78:	f7ff fc96 	bl	80054a8 <_free_r>
 8005b7c:	4625      	mov	r5, r4
 8005b7e:	4628      	mov	r0, r5
 8005b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b84:	f000 f81b 	bl	8005bbe <_malloc_usable_size_r>
 8005b88:	4284      	cmp	r4, r0
 8005b8a:	4607      	mov	r7, r0
 8005b8c:	d802      	bhi.n	8005b94 <_realloc_r+0x34>
 8005b8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b92:	d812      	bhi.n	8005bba <_realloc_r+0x5a>
 8005b94:	4621      	mov	r1, r4
 8005b96:	4640      	mov	r0, r8
 8005b98:	f7ff fb96 	bl	80052c8 <_malloc_r>
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d0ed      	beq.n	8005b7e <_realloc_r+0x1e>
 8005ba2:	42bc      	cmp	r4, r7
 8005ba4:	4622      	mov	r2, r4
 8005ba6:	4631      	mov	r1, r6
 8005ba8:	bf28      	it	cs
 8005baa:	463a      	movcs	r2, r7
 8005bac:	f7ff ffca 	bl	8005b44 <memcpy>
 8005bb0:	4631      	mov	r1, r6
 8005bb2:	4640      	mov	r0, r8
 8005bb4:	f7ff fc78 	bl	80054a8 <_free_r>
 8005bb8:	e7e1      	b.n	8005b7e <_realloc_r+0x1e>
 8005bba:	4635      	mov	r5, r6
 8005bbc:	e7df      	b.n	8005b7e <_realloc_r+0x1e>

08005bbe <_malloc_usable_size_r>:
 8005bbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bc2:	1f18      	subs	r0, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	bfbc      	itt	lt
 8005bc8:	580b      	ldrlt	r3, [r1, r0]
 8005bca:	18c0      	addlt	r0, r0, r3
 8005bcc:	4770      	bx	lr
	...

08005bd0 <expf>:
 8005bd0:	b508      	push	{r3, lr}
 8005bd2:	ed2d 8b02 	vpush	{d8}
 8005bd6:	eef0 8a40 	vmov.f32	s17, s0
 8005bda:	f000 f87f 	bl	8005cdc <__ieee754_expf>
 8005bde:	eeb0 8a40 	vmov.f32	s16, s0
 8005be2:	eeb0 0a68 	vmov.f32	s0, s17
 8005be6:	f000 f829 	bl	8005c3c <finitef>
 8005bea:	b160      	cbz	r0, 8005c06 <expf+0x36>
 8005bec:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8005c2c <expf+0x5c>
 8005bf0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8005bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf8:	dd0a      	ble.n	8005c10 <expf+0x40>
 8005bfa:	f7ff fc29 	bl	8005450 <__errno>
 8005bfe:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8005c30 <expf+0x60>
 8005c02:	2322      	movs	r3, #34	; 0x22
 8005c04:	6003      	str	r3, [r0, #0]
 8005c06:	eeb0 0a48 	vmov.f32	s0, s16
 8005c0a:	ecbd 8b02 	vpop	{d8}
 8005c0e:	bd08      	pop	{r3, pc}
 8005c10:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005c34 <expf+0x64>
 8005c14:	eef4 8ae7 	vcmpe.f32	s17, s15
 8005c18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c1c:	d5f3      	bpl.n	8005c06 <expf+0x36>
 8005c1e:	f7ff fc17 	bl	8005450 <__errno>
 8005c22:	2322      	movs	r3, #34	; 0x22
 8005c24:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8005c38 <expf+0x68>
 8005c28:	6003      	str	r3, [r0, #0]
 8005c2a:	e7ec      	b.n	8005c06 <expf+0x36>
 8005c2c:	42b17217 	.word	0x42b17217
 8005c30:	7f800000 	.word	0x7f800000
 8005c34:	c2cff1b5 	.word	0xc2cff1b5
 8005c38:	00000000 	.word	0x00000000

08005c3c <finitef>:
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005c42:	9801      	ldr	r0, [sp, #4]
 8005c44:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005c48:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8005c4c:	bfac      	ite	ge
 8005c4e:	2000      	movge	r0, #0
 8005c50:	2001      	movlt	r0, #1
 8005c52:	b002      	add	sp, #8
 8005c54:	4770      	bx	lr
	...

08005c58 <ceilf>:
 8005c58:	ee10 3a10 	vmov	r3, s0
 8005c5c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005c60:	3a7f      	subs	r2, #127	; 0x7f
 8005c62:	2a16      	cmp	r2, #22
 8005c64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005c68:	dc2a      	bgt.n	8005cc0 <ceilf+0x68>
 8005c6a:	2a00      	cmp	r2, #0
 8005c6c:	da11      	bge.n	8005c92 <ceilf+0x3a>
 8005c6e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8005cd4 <ceilf+0x7c>
 8005c72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005c76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c7e:	dd05      	ble.n	8005c8c <ceilf+0x34>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	db23      	blt.n	8005ccc <ceilf+0x74>
 8005c84:	2900      	cmp	r1, #0
 8005c86:	bf18      	it	ne
 8005c88:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8005c8c:	ee00 3a10 	vmov	s0, r3
 8005c90:	4770      	bx	lr
 8005c92:	4911      	ldr	r1, [pc, #68]	; (8005cd8 <ceilf+0x80>)
 8005c94:	4111      	asrs	r1, r2
 8005c96:	420b      	tst	r3, r1
 8005c98:	d0fa      	beq.n	8005c90 <ceilf+0x38>
 8005c9a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005cd4 <ceilf+0x7c>
 8005c9e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005ca2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005caa:	ddef      	ble.n	8005c8c <ceilf+0x34>
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	bfc2      	ittt	gt
 8005cb0:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8005cb4:	fa40 f202 	asrgt.w	r2, r0, r2
 8005cb8:	189b      	addgt	r3, r3, r2
 8005cba:	ea23 0301 	bic.w	r3, r3, r1
 8005cbe:	e7e5      	b.n	8005c8c <ceilf+0x34>
 8005cc0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005cc4:	d3e4      	bcc.n	8005c90 <ceilf+0x38>
 8005cc6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005cca:	4770      	bx	lr
 8005ccc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005cd0:	e7dc      	b.n	8005c8c <ceilf+0x34>
 8005cd2:	bf00      	nop
 8005cd4:	7149f2ca 	.word	0x7149f2ca
 8005cd8:	007fffff 	.word	0x007fffff

08005cdc <__ieee754_expf>:
 8005cdc:	ee10 2a10 	vmov	r2, s0
 8005ce0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8005ce4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005ce8:	d902      	bls.n	8005cf0 <__ieee754_expf+0x14>
 8005cea:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005cee:	4770      	bx	lr
 8005cf0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8005cf4:	d106      	bne.n	8005d04 <__ieee754_expf+0x28>
 8005cf6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8005e30 <__ieee754_expf+0x154>
 8005cfa:	2900      	cmp	r1, #0
 8005cfc:	bf18      	it	ne
 8005cfe:	eeb0 0a67 	vmovne.f32	s0, s15
 8005d02:	4770      	bx	lr
 8005d04:	484b      	ldr	r0, [pc, #300]	; (8005e34 <__ieee754_expf+0x158>)
 8005d06:	4282      	cmp	r2, r0
 8005d08:	dd02      	ble.n	8005d10 <__ieee754_expf+0x34>
 8005d0a:	2000      	movs	r0, #0
 8005d0c:	f000 b8d0 	b.w	8005eb0 <__math_oflowf>
 8005d10:	2a00      	cmp	r2, #0
 8005d12:	da05      	bge.n	8005d20 <__ieee754_expf+0x44>
 8005d14:	4a48      	ldr	r2, [pc, #288]	; (8005e38 <__ieee754_expf+0x15c>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d902      	bls.n	8005d20 <__ieee754_expf+0x44>
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	f000 b8c2 	b.w	8005ea4 <__math_uflowf>
 8005d20:	4a46      	ldr	r2, [pc, #280]	; (8005e3c <__ieee754_expf+0x160>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005d28:	d952      	bls.n	8005dd0 <__ieee754_expf+0xf4>
 8005d2a:	4a45      	ldr	r2, [pc, #276]	; (8005e40 <__ieee754_expf+0x164>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8005d32:	d834      	bhi.n	8005d9e <__ieee754_expf+0xc2>
 8005d34:	4b43      	ldr	r3, [pc, #268]	; (8005e44 <__ieee754_expf+0x168>)
 8005d36:	4413      	add	r3, r2
 8005d38:	ed93 7a00 	vldr	s14, [r3]
 8005d3c:	4b42      	ldr	r3, [pc, #264]	; (8005e48 <__ieee754_expf+0x16c>)
 8005d3e:	4413      	add	r3, r2
 8005d40:	ee30 7a47 	vsub.f32	s14, s0, s14
 8005d44:	f1c1 0201 	rsb	r2, r1, #1
 8005d48:	edd3 7a00 	vldr	s15, [r3]
 8005d4c:	1a52      	subs	r2, r2, r1
 8005d4e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8005d52:	ee20 6a00 	vmul.f32	s12, s0, s0
 8005d56:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8005e4c <__ieee754_expf+0x170>
 8005d5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005e50 <__ieee754_expf+0x174>
 8005d5e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8005d62:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8005e54 <__ieee754_expf+0x178>
 8005d66:	eea6 5a86 	vfma.f32	s10, s13, s12
 8005d6a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8005e58 <__ieee754_expf+0x17c>
 8005d6e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8005d72:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8005e5c <__ieee754_expf+0x180>
 8005d76:	eea6 5a86 	vfma.f32	s10, s13, s12
 8005d7a:	eef0 6a40 	vmov.f32	s13, s0
 8005d7e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8005d82:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8005d86:	ee20 5a26 	vmul.f32	s10, s0, s13
 8005d8a:	bb92      	cbnz	r2, 8005df2 <__ieee754_expf+0x116>
 8005d8c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8005d90:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8005d94:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8005d98:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8005d9c:	4770      	bx	lr
 8005d9e:	4b30      	ldr	r3, [pc, #192]	; (8005e60 <__ieee754_expf+0x184>)
 8005da0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005e64 <__ieee754_expf+0x188>
 8005da4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8005e68 <__ieee754_expf+0x18c>
 8005da8:	4413      	add	r3, r2
 8005daa:	edd3 7a00 	vldr	s15, [r3]
 8005dae:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005db2:	eeb0 7a40 	vmov.f32	s14, s0
 8005db6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dba:	ee17 2a90 	vmov	r2, s15
 8005dbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005dc2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8005dc6:	eddf 6a29 	vldr	s13, [pc, #164]	; 8005e6c <__ieee754_expf+0x190>
 8005dca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005dce:	e7be      	b.n	8005d4e <__ieee754_expf+0x72>
 8005dd0:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8005dd4:	d20b      	bcs.n	8005dee <__ieee754_expf+0x112>
 8005dd6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005e70 <__ieee754_expf+0x194>
 8005dda:	ee70 6a26 	vadd.f32	s13, s0, s13
 8005dde:	eef4 6ae5 	vcmpe.f32	s13, s11
 8005de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de6:	dd02      	ble.n	8005dee <__ieee754_expf+0x112>
 8005de8:	ee30 0a25 	vadd.f32	s0, s0, s11
 8005dec:	4770      	bx	lr
 8005dee:	2200      	movs	r2, #0
 8005df0:	e7af      	b.n	8005d52 <__ieee754_expf+0x76>
 8005df2:	ee36 6a66 	vsub.f32	s12, s12, s13
 8005df6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8005dfa:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8005dfe:	bfb8      	it	lt
 8005e00:	3264      	addlt	r2, #100	; 0x64
 8005e02:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005e06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e0a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8005e0e:	ee17 3a90 	vmov	r3, s15
 8005e12:	bfab      	itete	ge
 8005e14:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8005e18:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8005e1c:	ee00 3a10 	vmovge	s0, r3
 8005e20:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8005e74 <__ieee754_expf+0x198>
 8005e24:	bfbc      	itt	lt
 8005e26:	ee00 3a10 	vmovlt	s0, r3
 8005e2a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8005e2e:	4770      	bx	lr
 8005e30:	00000000 	.word	0x00000000
 8005e34:	42b17217 	.word	0x42b17217
 8005e38:	42cff1b5 	.word	0x42cff1b5
 8005e3c:	3eb17218 	.word	0x3eb17218
 8005e40:	3f851591 	.word	0x3f851591
 8005e44:	08005f9c 	.word	0x08005f9c
 8005e48:	08005fa4 	.word	0x08005fa4
 8005e4c:	3331bb4c 	.word	0x3331bb4c
 8005e50:	b5ddea0e 	.word	0xb5ddea0e
 8005e54:	388ab355 	.word	0x388ab355
 8005e58:	bb360b61 	.word	0xbb360b61
 8005e5c:	3e2aaaab 	.word	0x3e2aaaab
 8005e60:	08005f94 	.word	0x08005f94
 8005e64:	3fb8aa3b 	.word	0x3fb8aa3b
 8005e68:	3f317180 	.word	0x3f317180
 8005e6c:	3717f7d1 	.word	0x3717f7d1
 8005e70:	7149f2ca 	.word	0x7149f2ca
 8005e74:	0d800000 	.word	0x0d800000

08005e78 <with_errnof>:
 8005e78:	b513      	push	{r0, r1, r4, lr}
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005e80:	f7ff fae6 	bl	8005450 <__errno>
 8005e84:	ed9d 0a01 	vldr	s0, [sp, #4]
 8005e88:	6004      	str	r4, [r0, #0]
 8005e8a:	b002      	add	sp, #8
 8005e8c:	bd10      	pop	{r4, pc}

08005e8e <xflowf>:
 8005e8e:	b130      	cbz	r0, 8005e9e <xflowf+0x10>
 8005e90:	eef1 7a40 	vneg.f32	s15, s0
 8005e94:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005e98:	2022      	movs	r0, #34	; 0x22
 8005e9a:	f7ff bfed 	b.w	8005e78 <with_errnof>
 8005e9e:	eef0 7a40 	vmov.f32	s15, s0
 8005ea2:	e7f7      	b.n	8005e94 <xflowf+0x6>

08005ea4 <__math_uflowf>:
 8005ea4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005eac <__math_uflowf+0x8>
 8005ea8:	f7ff bff1 	b.w	8005e8e <xflowf>
 8005eac:	10000000 	.word	0x10000000

08005eb0 <__math_oflowf>:
 8005eb0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005eb8 <__math_oflowf+0x8>
 8005eb4:	f7ff bfeb 	b.w	8005e8e <xflowf>
 8005eb8:	70000000 	.word	0x70000000

08005ebc <_init>:
 8005ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ebe:	bf00      	nop
 8005ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ec2:	bc08      	pop	{r3}
 8005ec4:	469e      	mov	lr, r3
 8005ec6:	4770      	bx	lr

08005ec8 <_fini>:
 8005ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eca:	bf00      	nop
 8005ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ece:	bc08      	pop	{r3}
 8005ed0:	469e      	mov	lr, r3
 8005ed2:	4770      	bx	lr
