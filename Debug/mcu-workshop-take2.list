
mcu-workshop-take2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006034  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  080061d4  080061d4  000161d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062e4  080062e4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080062e4  080062e4  000162e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062ec  080062ec  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062ec  080062ec  000162ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062f0  080062f0  000162f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080062f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000308  2000005c  08006350  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08006350  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013f8c  00000000  00000000  0002011f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b62  00000000  00000000  000340ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001278  00000000  00000000  00036c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e71  00000000  00000000  00037e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019965  00000000  00000000  00038cf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e69  00000000  00000000  0005265e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3919  00000000  00000000  000694c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005654  00000000  00000000  0010cde0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00112434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080061bc 	.word	0x080061bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080061bc 	.word	0x080061bc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__gedf2>:
 800085c:	f04f 3cff 	mov.w	ip, #4294967295
 8000860:	e006      	b.n	8000870 <__cmpdf2+0x4>
 8000862:	bf00      	nop

08000864 <__ledf2>:
 8000864:	f04f 0c01 	mov.w	ip, #1
 8000868:	e002      	b.n	8000870 <__cmpdf2+0x4>
 800086a:	bf00      	nop

0800086c <__cmpdf2>:
 800086c:	f04f 0c01 	mov.w	ip, #1
 8000870:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000874:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000878:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800087c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000880:	bf18      	it	ne
 8000882:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000886:	d01b      	beq.n	80008c0 <__cmpdf2+0x54>
 8000888:	b001      	add	sp, #4
 800088a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800088e:	bf0c      	ite	eq
 8000890:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000894:	ea91 0f03 	teqne	r1, r3
 8000898:	bf02      	ittt	eq
 800089a:	ea90 0f02 	teqeq	r0, r2
 800089e:	2000      	moveq	r0, #0
 80008a0:	4770      	bxeq	lr
 80008a2:	f110 0f00 	cmn.w	r0, #0
 80008a6:	ea91 0f03 	teq	r1, r3
 80008aa:	bf58      	it	pl
 80008ac:	4299      	cmppl	r1, r3
 80008ae:	bf08      	it	eq
 80008b0:	4290      	cmpeq	r0, r2
 80008b2:	bf2c      	ite	cs
 80008b4:	17d8      	asrcs	r0, r3, #31
 80008b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ba:	f040 0001 	orr.w	r0, r0, #1
 80008be:	4770      	bx	lr
 80008c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d102      	bne.n	80008d0 <__cmpdf2+0x64>
 80008ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008ce:	d107      	bne.n	80008e0 <__cmpdf2+0x74>
 80008d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008d8:	d1d6      	bne.n	8000888 <__cmpdf2+0x1c>
 80008da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008de:	d0d3      	beq.n	8000888 <__cmpdf2+0x1c>
 80008e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdrcmple>:
 80008e8:	4684      	mov	ip, r0
 80008ea:	4610      	mov	r0, r2
 80008ec:	4662      	mov	r2, ip
 80008ee:	468c      	mov	ip, r1
 80008f0:	4619      	mov	r1, r3
 80008f2:	4663      	mov	r3, ip
 80008f4:	e000      	b.n	80008f8 <__aeabi_cdcmpeq>
 80008f6:	bf00      	nop

080008f8 <__aeabi_cdcmpeq>:
 80008f8:	b501      	push	{r0, lr}
 80008fa:	f7ff ffb7 	bl	800086c <__cmpdf2>
 80008fe:	2800      	cmp	r0, #0
 8000900:	bf48      	it	mi
 8000902:	f110 0f00 	cmnmi.w	r0, #0
 8000906:	bd01      	pop	{r0, pc}

08000908 <__aeabi_dcmpeq>:
 8000908:	f84d ed08 	str.w	lr, [sp, #-8]!
 800090c:	f7ff fff4 	bl	80008f8 <__aeabi_cdcmpeq>
 8000910:	bf0c      	ite	eq
 8000912:	2001      	moveq	r0, #1
 8000914:	2000      	movne	r0, #0
 8000916:	f85d fb08 	ldr.w	pc, [sp], #8
 800091a:	bf00      	nop

0800091c <__aeabi_dcmplt>:
 800091c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000920:	f7ff ffea 	bl	80008f8 <__aeabi_cdcmpeq>
 8000924:	bf34      	ite	cc
 8000926:	2001      	movcc	r0, #1
 8000928:	2000      	movcs	r0, #0
 800092a:	f85d fb08 	ldr.w	pc, [sp], #8
 800092e:	bf00      	nop

08000930 <__aeabi_dcmple>:
 8000930:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000934:	f7ff ffe0 	bl	80008f8 <__aeabi_cdcmpeq>
 8000938:	bf94      	ite	ls
 800093a:	2001      	movls	r0, #1
 800093c:	2000      	movhi	r0, #0
 800093e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000942:	bf00      	nop

08000944 <__aeabi_dcmpge>:
 8000944:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000948:	f7ff ffce 	bl	80008e8 <__aeabi_cdrcmple>
 800094c:	bf94      	ite	ls
 800094e:	2001      	movls	r0, #1
 8000950:	2000      	movhi	r0, #0
 8000952:	f85d fb08 	ldr.w	pc, [sp], #8
 8000956:	bf00      	nop

08000958 <__aeabi_dcmpgt>:
 8000958:	f84d ed08 	str.w	lr, [sp, #-8]!
 800095c:	f7ff ffc4 	bl	80008e8 <__aeabi_cdrcmple>
 8000960:	bf34      	ite	cc
 8000962:	2001      	movcc	r0, #1
 8000964:	2000      	movcs	r0, #0
 8000966:	f85d fb08 	ldr.w	pc, [sp], #8
 800096a:	bf00      	nop

0800096c <__aeabi_uldivmod>:
 800096c:	b953      	cbnz	r3, 8000984 <__aeabi_uldivmod+0x18>
 800096e:	b94a      	cbnz	r2, 8000984 <__aeabi_uldivmod+0x18>
 8000970:	2900      	cmp	r1, #0
 8000972:	bf08      	it	eq
 8000974:	2800      	cmpeq	r0, #0
 8000976:	bf1c      	itt	ne
 8000978:	f04f 31ff 	movne.w	r1, #4294967295
 800097c:	f04f 30ff 	movne.w	r0, #4294967295
 8000980:	f000 b970 	b.w	8000c64 <__aeabi_idiv0>
 8000984:	f1ad 0c08 	sub.w	ip, sp, #8
 8000988:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800098c:	f000 f806 	bl	800099c <__udivmoddi4>
 8000990:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000994:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000998:	b004      	add	sp, #16
 800099a:	4770      	bx	lr

0800099c <__udivmoddi4>:
 800099c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a0:	9e08      	ldr	r6, [sp, #32]
 80009a2:	460d      	mov	r5, r1
 80009a4:	4604      	mov	r4, r0
 80009a6:	460f      	mov	r7, r1
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d14a      	bne.n	8000a42 <__udivmoddi4+0xa6>
 80009ac:	428a      	cmp	r2, r1
 80009ae:	4694      	mov	ip, r2
 80009b0:	d965      	bls.n	8000a7e <__udivmoddi4+0xe2>
 80009b2:	fab2 f382 	clz	r3, r2
 80009b6:	b143      	cbz	r3, 80009ca <__udivmoddi4+0x2e>
 80009b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80009bc:	f1c3 0220 	rsb	r2, r3, #32
 80009c0:	409f      	lsls	r7, r3
 80009c2:	fa20 f202 	lsr.w	r2, r0, r2
 80009c6:	4317      	orrs	r7, r2
 80009c8:	409c      	lsls	r4, r3
 80009ca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009ce:	fa1f f58c 	uxth.w	r5, ip
 80009d2:	fbb7 f1fe 	udiv	r1, r7, lr
 80009d6:	0c22      	lsrs	r2, r4, #16
 80009d8:	fb0e 7711 	mls	r7, lr, r1, r7
 80009dc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009e0:	fb01 f005 	mul.w	r0, r1, r5
 80009e4:	4290      	cmp	r0, r2
 80009e6:	d90a      	bls.n	80009fe <__udivmoddi4+0x62>
 80009e8:	eb1c 0202 	adds.w	r2, ip, r2
 80009ec:	f101 37ff 	add.w	r7, r1, #4294967295
 80009f0:	f080 811c 	bcs.w	8000c2c <__udivmoddi4+0x290>
 80009f4:	4290      	cmp	r0, r2
 80009f6:	f240 8119 	bls.w	8000c2c <__udivmoddi4+0x290>
 80009fa:	3902      	subs	r1, #2
 80009fc:	4462      	add	r2, ip
 80009fe:	1a12      	subs	r2, r2, r0
 8000a00:	b2a4      	uxth	r4, r4
 8000a02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a0e:	fb00 f505 	mul.w	r5, r0, r5
 8000a12:	42a5      	cmp	r5, r4
 8000a14:	d90a      	bls.n	8000a2c <__udivmoddi4+0x90>
 8000a16:	eb1c 0404 	adds.w	r4, ip, r4
 8000a1a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a1e:	f080 8107 	bcs.w	8000c30 <__udivmoddi4+0x294>
 8000a22:	42a5      	cmp	r5, r4
 8000a24:	f240 8104 	bls.w	8000c30 <__udivmoddi4+0x294>
 8000a28:	4464      	add	r4, ip
 8000a2a:	3802      	subs	r0, #2
 8000a2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a30:	1b64      	subs	r4, r4, r5
 8000a32:	2100      	movs	r1, #0
 8000a34:	b11e      	cbz	r6, 8000a3e <__udivmoddi4+0xa2>
 8000a36:	40dc      	lsrs	r4, r3
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a42:	428b      	cmp	r3, r1
 8000a44:	d908      	bls.n	8000a58 <__udivmoddi4+0xbc>
 8000a46:	2e00      	cmp	r6, #0
 8000a48:	f000 80ed 	beq.w	8000c26 <__udivmoddi4+0x28a>
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a52:	4608      	mov	r0, r1
 8000a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a58:	fab3 f183 	clz	r1, r3
 8000a5c:	2900      	cmp	r1, #0
 8000a5e:	d149      	bne.n	8000af4 <__udivmoddi4+0x158>
 8000a60:	42ab      	cmp	r3, r5
 8000a62:	d302      	bcc.n	8000a6a <__udivmoddi4+0xce>
 8000a64:	4282      	cmp	r2, r0
 8000a66:	f200 80f8 	bhi.w	8000c5a <__udivmoddi4+0x2be>
 8000a6a:	1a84      	subs	r4, r0, r2
 8000a6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a70:	2001      	movs	r0, #1
 8000a72:	4617      	mov	r7, r2
 8000a74:	2e00      	cmp	r6, #0
 8000a76:	d0e2      	beq.n	8000a3e <__udivmoddi4+0xa2>
 8000a78:	e9c6 4700 	strd	r4, r7, [r6]
 8000a7c:	e7df      	b.n	8000a3e <__udivmoddi4+0xa2>
 8000a7e:	b902      	cbnz	r2, 8000a82 <__udivmoddi4+0xe6>
 8000a80:	deff      	udf	#255	; 0xff
 8000a82:	fab2 f382 	clz	r3, r2
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	f040 8090 	bne.w	8000bac <__udivmoddi4+0x210>
 8000a8c:	1a8a      	subs	r2, r1, r2
 8000a8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a92:	fa1f fe8c 	uxth.w	lr, ip
 8000a96:	2101      	movs	r1, #1
 8000a98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000aa0:	0c22      	lsrs	r2, r4, #16
 8000aa2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000aa6:	fb0e f005 	mul.w	r0, lr, r5
 8000aaa:	4290      	cmp	r0, r2
 8000aac:	d908      	bls.n	8000ac0 <__udivmoddi4+0x124>
 8000aae:	eb1c 0202 	adds.w	r2, ip, r2
 8000ab2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ab6:	d202      	bcs.n	8000abe <__udivmoddi4+0x122>
 8000ab8:	4290      	cmp	r0, r2
 8000aba:	f200 80cb 	bhi.w	8000c54 <__udivmoddi4+0x2b8>
 8000abe:	4645      	mov	r5, r8
 8000ac0:	1a12      	subs	r2, r2, r0
 8000ac2:	b2a4      	uxth	r4, r4
 8000ac4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ac8:	fb07 2210 	mls	r2, r7, r0, r2
 8000acc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ad0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ad4:	45a6      	cmp	lr, r4
 8000ad6:	d908      	bls.n	8000aea <__udivmoddi4+0x14e>
 8000ad8:	eb1c 0404 	adds.w	r4, ip, r4
 8000adc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ae0:	d202      	bcs.n	8000ae8 <__udivmoddi4+0x14c>
 8000ae2:	45a6      	cmp	lr, r4
 8000ae4:	f200 80bb 	bhi.w	8000c5e <__udivmoddi4+0x2c2>
 8000ae8:	4610      	mov	r0, r2
 8000aea:	eba4 040e 	sub.w	r4, r4, lr
 8000aee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000af2:	e79f      	b.n	8000a34 <__udivmoddi4+0x98>
 8000af4:	f1c1 0720 	rsb	r7, r1, #32
 8000af8:	408b      	lsls	r3, r1
 8000afa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000afe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b02:	fa05 f401 	lsl.w	r4, r5, r1
 8000b06:	fa20 f307 	lsr.w	r3, r0, r7
 8000b0a:	40fd      	lsrs	r5, r7
 8000b0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b10:	4323      	orrs	r3, r4
 8000b12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b16:	fa1f fe8c 	uxth.w	lr, ip
 8000b1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b1e:	0c1c      	lsrs	r4, r3, #16
 8000b20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b24:	fb08 f50e 	mul.w	r5, r8, lr
 8000b28:	42a5      	cmp	r5, r4
 8000b2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b32:	d90b      	bls.n	8000b4c <__udivmoddi4+0x1b0>
 8000b34:	eb1c 0404 	adds.w	r4, ip, r4
 8000b38:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b3c:	f080 8088 	bcs.w	8000c50 <__udivmoddi4+0x2b4>
 8000b40:	42a5      	cmp	r5, r4
 8000b42:	f240 8085 	bls.w	8000c50 <__udivmoddi4+0x2b4>
 8000b46:	f1a8 0802 	sub.w	r8, r8, #2
 8000b4a:	4464      	add	r4, ip
 8000b4c:	1b64      	subs	r4, r4, r5
 8000b4e:	b29d      	uxth	r5, r3
 8000b50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b54:	fb09 4413 	mls	r4, r9, r3, r4
 8000b58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d908      	bls.n	8000b76 <__udivmoddi4+0x1da>
 8000b64:	eb1c 0404 	adds.w	r4, ip, r4
 8000b68:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b6c:	d26c      	bcs.n	8000c48 <__udivmoddi4+0x2ac>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	d96a      	bls.n	8000c48 <__udivmoddi4+0x2ac>
 8000b72:	3b02      	subs	r3, #2
 8000b74:	4464      	add	r4, ip
 8000b76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b7e:	eba4 040e 	sub.w	r4, r4, lr
 8000b82:	42ac      	cmp	r4, r5
 8000b84:	46c8      	mov	r8, r9
 8000b86:	46ae      	mov	lr, r5
 8000b88:	d356      	bcc.n	8000c38 <__udivmoddi4+0x29c>
 8000b8a:	d053      	beq.n	8000c34 <__udivmoddi4+0x298>
 8000b8c:	b156      	cbz	r6, 8000ba4 <__udivmoddi4+0x208>
 8000b8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b92:	eb64 040e 	sbc.w	r4, r4, lr
 8000b96:	fa04 f707 	lsl.w	r7, r4, r7
 8000b9a:	40ca      	lsrs	r2, r1
 8000b9c:	40cc      	lsrs	r4, r1
 8000b9e:	4317      	orrs	r7, r2
 8000ba0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bac:	f1c3 0120 	rsb	r1, r3, #32
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	fa20 f201 	lsr.w	r2, r0, r1
 8000bb8:	fa25 f101 	lsr.w	r1, r5, r1
 8000bbc:	409d      	lsls	r5, r3
 8000bbe:	432a      	orrs	r2, r5
 8000bc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc4:	fa1f fe8c 	uxth.w	lr, ip
 8000bc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bcc:	fb07 1510 	mls	r5, r7, r0, r1
 8000bd0:	0c11      	lsrs	r1, r2, #16
 8000bd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000bda:	428d      	cmp	r5, r1
 8000bdc:	fa04 f403 	lsl.w	r4, r4, r3
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x258>
 8000be2:	eb1c 0101 	adds.w	r1, ip, r1
 8000be6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bea:	d22f      	bcs.n	8000c4c <__udivmoddi4+0x2b0>
 8000bec:	428d      	cmp	r5, r1
 8000bee:	d92d      	bls.n	8000c4c <__udivmoddi4+0x2b0>
 8000bf0:	3802      	subs	r0, #2
 8000bf2:	4461      	add	r1, ip
 8000bf4:	1b49      	subs	r1, r1, r5
 8000bf6:	b292      	uxth	r2, r2
 8000bf8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000c00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c04:	fb05 f10e 	mul.w	r1, r5, lr
 8000c08:	4291      	cmp	r1, r2
 8000c0a:	d908      	bls.n	8000c1e <__udivmoddi4+0x282>
 8000c0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c10:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c14:	d216      	bcs.n	8000c44 <__udivmoddi4+0x2a8>
 8000c16:	4291      	cmp	r1, r2
 8000c18:	d914      	bls.n	8000c44 <__udivmoddi4+0x2a8>
 8000c1a:	3d02      	subs	r5, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a52      	subs	r2, r2, r1
 8000c20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c24:	e738      	b.n	8000a98 <__udivmoddi4+0xfc>
 8000c26:	4631      	mov	r1, r6
 8000c28:	4630      	mov	r0, r6
 8000c2a:	e708      	b.n	8000a3e <__udivmoddi4+0xa2>
 8000c2c:	4639      	mov	r1, r7
 8000c2e:	e6e6      	b.n	80009fe <__udivmoddi4+0x62>
 8000c30:	4610      	mov	r0, r2
 8000c32:	e6fb      	b.n	8000a2c <__udivmoddi4+0x90>
 8000c34:	4548      	cmp	r0, r9
 8000c36:	d2a9      	bcs.n	8000b8c <__udivmoddi4+0x1f0>
 8000c38:	ebb9 0802 	subs.w	r8, r9, r2
 8000c3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c40:	3b01      	subs	r3, #1
 8000c42:	e7a3      	b.n	8000b8c <__udivmoddi4+0x1f0>
 8000c44:	4645      	mov	r5, r8
 8000c46:	e7ea      	b.n	8000c1e <__udivmoddi4+0x282>
 8000c48:	462b      	mov	r3, r5
 8000c4a:	e794      	b.n	8000b76 <__udivmoddi4+0x1da>
 8000c4c:	4640      	mov	r0, r8
 8000c4e:	e7d1      	b.n	8000bf4 <__udivmoddi4+0x258>
 8000c50:	46d0      	mov	r8, sl
 8000c52:	e77b      	b.n	8000b4c <__udivmoddi4+0x1b0>
 8000c54:	3d02      	subs	r5, #2
 8000c56:	4462      	add	r2, ip
 8000c58:	e732      	b.n	8000ac0 <__udivmoddi4+0x124>
 8000c5a:	4608      	mov	r0, r1
 8000c5c:	e70a      	b.n	8000a74 <__udivmoddi4+0xd8>
 8000c5e:	4464      	add	r4, ip
 8000c60:	3802      	subs	r0, #2
 8000c62:	e742      	b.n	8000aea <__udivmoddi4+0x14e>

08000c64 <__aeabi_idiv0>:
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f000 fc80 	bl	8001570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f86c 	bl	8000d4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f000 f9dc 	bl	8001030 <MX_GPIO_Init>
  MX_CRC_Init();
 8000c78:	f000 f928 	bl	8000ecc <MX_CRC_Init>
  MX_RTC_Init();
 8000c7c:	f000 f93a 	bl	8000ef4 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000c80:	f000 f9ac 	bl	8000fdc <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000c84:	f000 f95c 	bl	8000f40 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000c88:	f000 f8ce 	bl	8000e28 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  // Debug
  sprintf(msg, "Timer Starting.\r\n");
 8000c8c:	4925      	ldr	r1, [pc, #148]	; (8000d24 <main+0xbc>)
 8000c8e:	4826      	ldr	r0, [pc, #152]	; (8000d28 <main+0xc0>)
 8000c90:	f004 fd26 	bl	80056e0 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000c94:	4824      	ldr	r0, [pc, #144]	; (8000d28 <main+0xc0>)
 8000c96:	f7ff faa3 	bl	80001e0 <strlen>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	4921      	ldr	r1, [pc, #132]	; (8000d28 <main+0xc0>)
 8000ca4:	4821      	ldr	r0, [pc, #132]	; (8000d2c <main+0xc4>)
 8000ca6:	f003 f873 	bl	8003d90 <HAL_UART_Transmit>

  // Start Timer
  // Enable the TIM4 peripheral
  //__HAL_RCC_TIM4_CLK_ENABLE();
  HAL_NVIC_SetPriority(TIM4_IRQn, 1, 1);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2101      	movs	r1, #1
 8000cae:	201e      	movs	r0, #30
 8000cb0:	f001 f80d 	bl	8001cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000cb4:	201e      	movs	r0, #30
 8000cb6:	f001 f826 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  HAL_TIM_Base_Start_IT(&htim4);
 8000cba:	481d      	ldr	r0, [pc, #116]	; (8000d30 <main+0xc8>)
 8000cbc:	f002 fc2e 	bl	800351c <HAL_TIM_Base_Start_IT>

  // Initialise infraredPD instance
  InfraredPD_Initialize(mcu);
 8000cc0:	4b1c      	ldr	r3, [pc, #112]	; (8000d34 <main+0xcc>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 fe5d 	bl	8004984 <InfraredPD_Initialize>
  IPD_Instance = InfraredPD_CreateInstance(&algo_conf);
 8000cca:	481b      	ldr	r0, [pc, #108]	; (8000d38 <main+0xd0>)
 8000ccc:	f003 fef6 	bl	8004abc <InfraredPD_CreateInstance>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	4a1a      	ldr	r2, [pc, #104]	; (8000d3c <main+0xd4>)
 8000cd4:	6013      	str	r3, [r2, #0]

  device_conf.odr = 30;
 8000cd6:	4b1a      	ldr	r3, [pc, #104]	; (8000d40 <main+0xd8>)
 8000cd8:	221e      	movs	r2, #30
 8000cda:	701a      	strb	r2, [r3, #0]
  device_conf.avg_tmos = 32;
 8000cdc:	4b18      	ldr	r3, [pc, #96]	; (8000d40 <main+0xd8>)
 8000cde:	2220      	movs	r2, #32
 8000ce0:	805a      	strh	r2, [r3, #2]
  device_conf.avg_t = 8;
 8000ce2:	4b17      	ldr	r3, [pc, #92]	; (8000d40 <main+0xd8>)
 8000ce4:	2208      	movs	r2, #8
 8000ce6:	711a      	strb	r2, [r3, #4]

  status = InfraredPD_Start(IPD_Instance, &device_conf, &algo_conf);
 8000ce8:	4b14      	ldr	r3, [pc, #80]	; (8000d3c <main+0xd4>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a12      	ldr	r2, [pc, #72]	; (8000d38 <main+0xd0>)
 8000cee:	4914      	ldr	r1, [pc, #80]	; (8000d40 <main+0xd8>)
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fefd 	bl	8004af0 <InfraredPD_Start>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	4b12      	ldr	r3, [pc, #72]	; (8000d44 <main+0xdc>)
 8000cfc:	701a      	strb	r2, [r3, #0]

  // Debug
  sprintf(msg, "Program Starting.");
 8000cfe:	4912      	ldr	r1, [pc, #72]	; (8000d48 <main+0xe0>)
 8000d00:	4809      	ldr	r0, [pc, #36]	; (8000d28 <main+0xc0>)
 8000d02:	f004 fced 	bl	80056e0 <siprintf>
  HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8000d06:	4808      	ldr	r0, [pc, #32]	; (8000d28 <main+0xc0>)
 8000d08:	f7ff fa6a 	bl	80001e0 <strlen>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	b29a      	uxth	r2, r3
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295
 8000d14:	4904      	ldr	r1, [pc, #16]	; (8000d28 <main+0xc0>)
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <main+0xc4>)
 8000d18:	f003 f83a 	bl	8003d90 <HAL_UART_Transmit>

  stateClear();
 8000d1c:	f000 fa3c 	bl	8001198 <stateClear>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <main+0xb8>
 8000d22:	bf00      	nop
 8000d24:	080061d4 	.word	0x080061d4
 8000d28:	2000007c 	.word	0x2000007c
 8000d2c:	2000014c 	.word	0x2000014c
 8000d30:	20000104 	.word	0x20000104
 8000d34:	200001a0 	.word	0x200001a0
 8000d38:	200001a4 	.word	0x200001a4
 8000d3c:	2000019c 	.word	0x2000019c
 8000d40:	200001ac 	.word	0x200001ac
 8000d44:	200001b8 	.word	0x200001b8
 8000d48:	080061e8 	.word	0x080061e8

08000d4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b094      	sub	sp, #80	; 0x50
 8000d50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d52:	f107 0320 	add.w	r3, r7, #32
 8000d56:	2230      	movs	r2, #48	; 0x30
 8000d58:	2100      	movs	r1, #0
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f004 fce0 	bl	8005720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	4b2a      	ldr	r3, [pc, #168]	; (8000e20 <SystemClock_Config+0xd4>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	4a29      	ldr	r2, [pc, #164]	; (8000e20 <SystemClock_Config+0xd4>)
 8000d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d80:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <SystemClock_Config+0xd4>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	607b      	str	r3, [r7, #4]
 8000d90:	4b24      	ldr	r3, [pc, #144]	; (8000e24 <SystemClock_Config+0xd8>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d98:	4a22      	ldr	r2, [pc, #136]	; (8000e24 <SystemClock_Config+0xd8>)
 8000d9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d9e:	6013      	str	r3, [r2, #0]
 8000da0:	4b20      	ldr	r3, [pc, #128]	; (8000e24 <SystemClock_Config+0xd8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000dac:	230a      	movs	r3, #10
 8000dae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000db0:	2301      	movs	r3, #1
 8000db2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db4:	2310      	movs	r3, #16
 8000db6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000db8:	2301      	movs	r3, #1
 8000dba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dc8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000dcc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd6:	f107 0320 	add.w	r3, r7, #32
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 fcc2 	bl	8002764 <HAL_RCC_OscConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000de6:	f000 f9ed 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dea:	230f      	movs	r3, #15
 8000dec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dee:	2302      	movs	r3, #2
 8000df0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2102      	movs	r1, #2
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 ff24 	bl	8002c54 <HAL_RCC_ClockConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e12:	f000 f9d7 	bl	80011c4 <Error_Handler>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3750      	adds	r7, #80	; 0x50
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	40007000 	.word	0x40007000

08000e28 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2e:	463b      	mov	r3, r7
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e3a:	4b21      	ldr	r3, [pc, #132]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e3c:	4a21      	ldr	r2, [pc, #132]	; (8000ec4 <MX_ADC1_Init+0x9c>)
 8000e3e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e40:	4b1f      	ldr	r3, [pc, #124]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e42:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e48:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e54:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5a:	4b19      	ldr	r3, [pc, #100]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e68:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e6a:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <MX_ADC1_Init+0xa0>)
 8000e6c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e76:	2201      	movs	r2, #1
 8000e78:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e82:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e88:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000e8a:	f000 fbe3 	bl	8001654 <HAL_ADC_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000e94:	f000 f996 	bl	80011c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea4:	463b      	mov	r3, r7
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4805      	ldr	r0, [pc, #20]	; (8000ec0 <MX_ADC1_Init+0x98>)
 8000eaa:	f000 fc17 	bl	80016dc <HAL_ADC_ConfigChannel>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000eb4:	f000 f986 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eb8:	bf00      	nop
 8000eba:	3710      	adds	r7, #16
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	20000094 	.word	0x20000094
 8000ec4:	40012000 	.word	0x40012000
 8000ec8:	0f000001 	.word	0x0f000001

08000ecc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ed0:	4b06      	ldr	r3, [pc, #24]	; (8000eec <MX_CRC_Init+0x20>)
 8000ed2:	4a07      	ldr	r2, [pc, #28]	; (8000ef0 <MX_CRC_Init+0x24>)
 8000ed4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_CRC_Init+0x20>)
 8000ed8:	f000 ff2f 	bl	8001d3a <HAL_CRC_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000ee2:	f000 f96f 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	200000dc 	.word	0x200000dc
 8000ef0:	40023000 	.word	0x40023000

08000ef4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <MX_RTC_Init+0x44>)
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <MX_RTC_Init+0x48>)
 8000efc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MX_RTC_Init+0x44>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <MX_RTC_Init+0x44>)
 8000f06:	227f      	movs	r2, #127	; 0x7f
 8000f08:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MX_RTC_Init+0x44>)
 8000f0c:	22ff      	movs	r2, #255	; 0xff
 8000f0e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f10:	4b09      	ldr	r3, [pc, #36]	; (8000f38 <MX_RTC_Init+0x44>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MX_RTC_Init+0x44>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f1c:	4b06      	ldr	r3, [pc, #24]	; (8000f38 <MX_RTC_Init+0x44>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f22:	4805      	ldr	r0, [pc, #20]	; (8000f38 <MX_RTC_Init+0x44>)
 8000f24:	f002 f9a4 	bl	8003270 <HAL_RTC_Init>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000f2e:	f000 f949 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000e4 	.word	0x200000e4
 8000f3c:	40002800 	.word	0x40002800

08000f40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	f107 0308 	add.w	r3, r7, #8
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <MX_TIM4_Init+0x94>)
 8000f5e:	4a1e      	ldr	r2, [pc, #120]	; (8000fd8 <MX_TIM4_Init+0x98>)
 8000f60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 319;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_TIM4_Init+0x94>)
 8000f64:	f240 123f 	movw	r2, #319	; 0x13f
 8000f68:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_TIM4_Init+0x94>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <MX_TIM4_Init+0x94>)
 8000f72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f76:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f78:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_TIM4_Init+0x94>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <MX_TIM4_Init+0x94>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f84:	4813      	ldr	r0, [pc, #76]	; (8000fd4 <MX_TIM4_Init+0x94>)
 8000f86:	f002 fa79 	bl	800347c <HAL_TIM_Base_Init>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8000f90:	f000 f918 	bl	80011c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <MX_TIM4_Init+0x94>)
 8000fa2:	f002 fc0d 	bl	80037c0 <HAL_TIM_ConfigClockSource>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8000fac:	f000 f90a 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <MX_TIM4_Init+0x94>)
 8000fbe:	f002 fe15 	bl	8003bec <HAL_TIMEx_MasterConfigSynchronization>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000fc8:	f000 f8fc 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000104 	.word	0x20000104
 8000fd8:	40000800 	.word	0x40000800

08000fdc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <MX_USART2_UART_Init+0x50>)
 8000fe4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000fe8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8001002:	220c      	movs	r2, #12
 8001004:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8001008:	2200      	movs	r2, #0
 800100a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 800100e:	2200      	movs	r2, #0
 8001010:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_USART2_UART_Init+0x4c>)
 8001014:	f002 fe6c 	bl	8003cf0 <HAL_UART_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800101e:	f000 f8d1 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	2000014c 	.word	0x2000014c
 800102c:	40004400 	.word	0x40004400

08001030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	; 0x28
 8001034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <MX_GPIO_Init+0xb4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <MX_GPIO_Init+0xb4>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <MX_GPIO_Init+0xb4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b1f      	ldr	r3, [pc, #124]	; (80010e4 <MX_GPIO_Init+0xb4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a1e      	ldr	r2, [pc, #120]	; (80010e4 <MX_GPIO_Init+0xb4>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b1c      	ldr	r3, [pc, #112]	; (80010e4 <MX_GPIO_Init+0xb4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <MX_GPIO_Init+0xb4>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <MX_GPIO_Init+0xb4>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <MX_GPIO_Init+0xb4>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b11      	ldr	r3, [pc, #68]	; (80010e4 <MX_GPIO_Init+0xb4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <MX_GPIO_Init+0xb4>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <MX_GPIO_Init+0xb4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2120      	movs	r1, #32
 80010ba:	480b      	ldr	r0, [pc, #44]	; (80010e8 <MX_GPIO_Init+0xb8>)
 80010bc:	f000 ffde 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010c0:	2320      	movs	r3, #32
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4804      	ldr	r0, [pc, #16]	; (80010e8 <MX_GPIO_Init+0xb8>)
 80010d8:	f000 fe4c 	bl	8001d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	; 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020000 	.word	0x40020000

080010ec <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4){
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x84>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d134      	bne.n	8001168 <HAL_TIM_PeriodElapsedCallback+0x7c>
		// InfraredPD functions
		IPD_input_t data_in;
		IPD_output_t data_out;

		// Debug
		sprintf(msg, "Running.\r\n");
 80010fe:	491d      	ldr	r1, [pc, #116]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001100:	481d      	ldr	r0, [pc, #116]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001102:	f004 faed 	bl	80056e0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001106:	481c      	ldr	r0, [pc, #112]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001108:	f7ff f86a 	bl	80001e0 <strlen>
 800110c:	4603      	mov	r3, r0
 800110e:	b29a      	uxth	r2, r3
 8001110:	f04f 33ff 	mov.w	r3, #4294967295
 8001114:	4918      	ldr	r1, [pc, #96]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001116:	4819      	ldr	r0, [pc, #100]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001118:	f002 fe3a 	bl	8003d90 <HAL_UART_Transmit>

		//ReadSensor(data_in.t_amb, data_in.t_obj);

		InfraredPD_Update(&IPD_Instance, &data_in, &data_out);
 800111c:	f107 020c 	add.w	r2, r7, #12
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4619      	mov	r1, r3
 8001126:	4816      	ldr	r0, [pc, #88]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001128:	f003 fed6 	bl	8004ed8 <InfraredPD_Update>

		ObjectTempComp = data_out.t_obj_comp;
 800112c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001132:	801a      	strh	r2, [r3, #0]
		ObjectTempCompChange = data_out.t_obj_change;
 8001134:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001138:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 800113a:	801a      	strh	r2, [r3, #0]
		MotionDetected = data_out.mot_flag;
 800113c:	7c3a      	ldrb	r2, [r7, #16]
 800113e:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001140:	701a      	strb	r2, [r3, #0]
		PresenceDetected = data_out.pres_flag;
 8001142:	7c7a      	ldrb	r2, [r7, #17]
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001146:	701a      	strb	r2, [r3, #0]

		sprintf(msg, "ObjectTemp: %u\n\r", &PresenceDetected);
 8001148:	4a11      	ldr	r2, [pc, #68]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800114a:	4912      	ldr	r1, [pc, #72]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800114c:	480a      	ldr	r0, [pc, #40]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800114e:	f004 fac7 	bl	80056e0 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*) msg, strlen(msg), HAL_MAX_DELAY);
 8001152:	4809      	ldr	r0, [pc, #36]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001154:	f7ff f844 	bl	80001e0 <strlen>
 8001158:	4603      	mov	r3, r0
 800115a:	b29a      	uxth	r2, r3
 800115c:	f04f 33ff 	mov.w	r3, #4294967295
 8001160:	4905      	ldr	r1, [pc, #20]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001164:	f002 fe14 	bl	8003d90 <HAL_UART_Transmit>
	}
}
 8001168:	bf00      	nop
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40000800 	.word	0x40000800
 8001174:	080061fc 	.word	0x080061fc
 8001178:	2000007c 	.word	0x2000007c
 800117c:	2000014c 	.word	0x2000014c
 8001180:	2000019c 	.word	0x2000019c
 8001184:	20000194 	.word	0x20000194
 8001188:	20000196 	.word	0x20000196
 800118c:	20000198 	.word	0x20000198
 8001190:	20000199 	.word	0x20000199
 8001194:	08006208 	.word	0x08006208

08001198 <stateClear>:
	potValue = HAL_ADC_GetValue(&hadc1);
	return potValue;
}

// LCD control - No intruder
void stateClear(){
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	I2C_LCD_Init(MyI2C_LCD);
 800119c:	2000      	movs	r0, #0
 800119e:	f003 faa7 	bl	80046f0 <I2C_LCD_Init>
	I2C_LCD_Init(MyI2C_LCD);
 80011a2:	2000      	movs	r0, #0
 80011a4:	f003 faa4 	bl	80046f0 <I2C_LCD_Init>
	I2C_LCD_SetCursor(MyI2C_LCD, 0, 0);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2100      	movs	r1, #0
 80011ac:	2000      	movs	r0, #0
 80011ae:	f003 fb8d 	bl	80048cc <I2C_LCD_SetCursor>
	I2C_LCD_WriteString(MyI2C_LCD, "All Clear");
 80011b2:	4903      	ldr	r1, [pc, #12]	; (80011c0 <stateClear+0x28>)
 80011b4:	2000      	movs	r0, #0
 80011b6:	f003 fbcb 	bl	8004950 <I2C_LCD_WriteString>
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	0800621c 	.word	0x0800621c

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011cc:	e7fe      	b.n	80011cc <Error_Handler+0x8>
	...

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_MspInit+0x4c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	4a0f      	ldr	r2, [pc, #60]	; (800121c <HAL_MspInit+0x4c>)
 80011e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e4:	6453      	str	r3, [r2, #68]	; 0x44
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <HAL_MspInit+0x4c>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b09      	ldr	r3, [pc, #36]	; (800121c <HAL_MspInit+0x4c>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_MspInit+0x4c>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <HAL_MspInit+0x4c>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800120e:	2007      	movs	r0, #7
 8001210:	f000 fd52 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800

08001220 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b08a      	sub	sp, #40	; 0x28
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a17      	ldr	r2, [pc, #92]	; (800129c <HAL_ADC_MspInit+0x7c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d127      	bne.n	8001292 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 800124c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001250:	6453      	str	r3, [r2, #68]	; 0x44
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a0e      	ldr	r2, [pc, #56]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_ADC_MspInit+0x80>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800127a:	2301      	movs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127e:	2303      	movs	r3, #3
 8001280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <HAL_ADC_MspInit+0x84>)
 800128e:	f000 fd71 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001292:	bf00      	nop
 8001294:	3728      	adds	r7, #40	; 0x28
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40012000 	.word	0x40012000
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020000 	.word	0x40020000

080012a8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b085      	sub	sp, #20
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0b      	ldr	r2, [pc, #44]	; (80012e4 <HAL_CRC_MspInit+0x3c>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d10d      	bne.n	80012d6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b0a      	ldr	r3, [pc, #40]	; (80012e8 <HAL_CRC_MspInit+0x40>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a09      	ldr	r2, [pc, #36]	; (80012e8 <HAL_CRC_MspInit+0x40>)
 80012c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b07      	ldr	r3, [pc, #28]	; (80012e8 <HAL_CRC_MspInit+0x40>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40023000 	.word	0x40023000
 80012e8:	40023800 	.word	0x40023800

080012ec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b088      	sub	sp, #32
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0c      	ldr	r2, [pc, #48]	; (800133c <HAL_RTC_MspInit+0x50>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d111      	bne.n	8001332 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800130e:	2302      	movs	r3, #2
 8001310:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001312:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001316:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	4618      	mov	r0, r3
 800131e:	f001 feb9 	bl	8003094 <HAL_RCCEx_PeriphCLKConfig>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001328:	f7ff ff4c 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <HAL_RTC_MspInit+0x54>)
 800132e:	2201      	movs	r2, #1
 8001330:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001332:	bf00      	nop
 8001334:	3720      	adds	r7, #32
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40002800 	.word	0x40002800
 8001340:	42470e3c 	.word	0x42470e3c

08001344 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a0e      	ldr	r2, [pc, #56]	; (800138c <HAL_TIM_Base_MspInit+0x48>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d115      	bne.n	8001382 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_TIM_Base_MspInit+0x4c>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a0c      	ldr	r2, [pc, #48]	; (8001390 <HAL_TIM_Base_MspInit+0x4c>)
 8001360:	f043 0304 	orr.w	r3, r3, #4
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <HAL_TIM_Base_MspInit+0x4c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f003 0304 	and.w	r3, r3, #4
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	201e      	movs	r0, #30
 8001378:	f000 fca9 	bl	8001cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800137c:	201e      	movs	r0, #30
 800137e:	f000 fcc2 	bl	8001d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40000800 	.word	0x40000800
 8001390:	40023800 	.word	0x40023800

08001394 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 0314 	add.w	r3, r7, #20
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a19      	ldr	r2, [pc, #100]	; (8001418 <HAL_UART_MspInit+0x84>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d12b      	bne.n	800140e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	4b18      	ldr	r3, [pc, #96]	; (800141c <HAL_UART_MspInit+0x88>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	4a17      	ldr	r2, [pc, #92]	; (800141c <HAL_UART_MspInit+0x88>)
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_UART_MspInit+0x88>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_UART_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	4a10      	ldr	r2, [pc, #64]	; (800141c <HAL_UART_MspInit+0x88>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6313      	str	r3, [r2, #48]	; 0x30
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_UART_MspInit+0x88>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013ee:	230c      	movs	r3, #12
 80013f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013fe:	2307      	movs	r3, #7
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4805      	ldr	r0, [pc, #20]	; (8001420 <HAL_UART_MspInit+0x8c>)
 800140a:	f000 fcb3 	bl	8001d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800140e:	bf00      	nop
 8001410:	3728      	adds	r7, #40	; 0x28
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	40004400 	.word	0x40004400
 800141c:	40023800 	.word	0x40023800
 8001420:	40020000 	.word	0x40020000

08001424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001428:	e7fe      	b.n	8001428 <NMI_Handler+0x4>

0800142a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <HardFault_Handler+0x4>

08001430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <MemManage_Handler+0x4>

08001436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800143a:	e7fe      	b.n	800143a <BusFault_Handler+0x4>

0800143c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001440:	e7fe      	b.n	8001440 <UsageFault_Handler+0x4>

08001442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001442:	b480      	push	{r7}
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr

0800145e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001470:	f000 f8d0 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}

08001478 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800147c:	4802      	ldr	r0, [pc, #8]	; (8001488 <TIM4_IRQHandler+0x10>)
 800147e:	f002 f8af 	bl	80035e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000104 	.word	0x20000104

0800148c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001494:	4a14      	ldr	r2, [pc, #80]	; (80014e8 <_sbrk+0x5c>)
 8001496:	4b15      	ldr	r3, [pc, #84]	; (80014ec <_sbrk+0x60>)
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a0:	4b13      	ldr	r3, [pc, #76]	; (80014f0 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a8:	4b11      	ldr	r3, [pc, #68]	; (80014f0 <_sbrk+0x64>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	; (80014f4 <_sbrk+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d207      	bcs.n	80014cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014bc:	f004 f948 	bl	8005750 <__errno>
 80014c0:	4603      	mov	r3, r0
 80014c2:	220c      	movs	r2, #12
 80014c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	e009      	b.n	80014e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <_sbrk+0x64>)
 80014dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20018000 	.word	0x20018000
 80014ec:	00000400 	.word	0x00000400
 80014f0:	20000210 	.word	0x20000210
 80014f4:	20000368 	.word	0x20000368

080014f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014fc:	4b06      	ldr	r3, [pc, #24]	; (8001518 <SystemInit+0x20>)
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <SystemInit+0x20>)
 8001504:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001508:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001554 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001520:	f7ff ffea 	bl	80014f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001526:	490d      	ldr	r1, [pc, #52]	; (800155c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001528:	4a0d      	ldr	r2, [pc, #52]	; (8001560 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800152a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800152c:	e002      	b.n	8001534 <LoopCopyDataInit>

0800152e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001530:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001532:	3304      	adds	r3, #4

08001534 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001534:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001536:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001538:	d3f9      	bcc.n	800152e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800153c:	4c0a      	ldr	r4, [pc, #40]	; (8001568 <LoopFillZerobss+0x22>)
  movs r3, #0
 800153e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001540:	e001      	b.n	8001546 <LoopFillZerobss>

08001542 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001542:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001544:	3204      	adds	r2, #4

08001546 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001546:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001548:	d3fb      	bcc.n	8001542 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800154a:	f004 f907 	bl	800575c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154e:	f7ff fb8b 	bl	8000c68 <main>
  bx  lr    
 8001552:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001554:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800155c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001560:	080062f4 	.word	0x080062f4
  ldr r2, =_sbss
 8001564:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001568:	20000364 	.word	0x20000364

0800156c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC_IRQHandler>
	...

08001570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_Init+0x40>)
 800157a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800157e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_Init+0x40>)
 8001586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_Init+0x40>)
 8001592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 fb8d 	bl	8001cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159e:	2000      	movs	r0, #0
 80015a0:	f000 f808 	bl	80015b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a4:	f7ff fe14 	bl	80011d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023c00 	.word	0x40023c00

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_InitTick+0x54>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_InitTick+0x58>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fba5 	bl	8001d22 <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e00e      	b.n	8001600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d80a      	bhi.n	80015fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f000 fb6d 	bl	8001cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <HAL_InitTick+0x5c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000000 	.word	0x20000000
 800160c:	20000008 	.word	0x20000008
 8001610:	20000004 	.word	0x20000004

08001614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <HAL_IncTick+0x20>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b06      	ldr	r3, [pc, #24]	; (8001638 <HAL_IncTick+0x24>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a04      	ldr	r2, [pc, #16]	; (8001638 <HAL_IncTick+0x24>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000008 	.word	0x20000008
 8001638:	20000214 	.word	0x20000214

0800163c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <HAL_GetTick+0x14>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000214 	.word	0x20000214

08001654 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d101      	bne.n	800166a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e033      	b.n	80016d2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	2b00      	cmp	r3, #0
 8001670:	d109      	bne.n	8001686 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fdd4 	bl	8001220 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2200      	movs	r2, #0
 800167c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 0310 	and.w	r3, r3, #16
 800168e:	2b00      	cmp	r3, #0
 8001690:	d118      	bne.n	80016c4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800169a:	f023 0302 	bic.w	r3, r3, #2
 800169e:	f043 0202 	orr.w	r2, r3, #2
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f000 f93a 	bl	8001920 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	f023 0303 	bic.w	r3, r3, #3
 80016ba:	f043 0201 	orr.w	r2, r3, #1
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	641a      	str	r2, [r3, #64]	; 0x40
 80016c2:	e001      	b.n	80016c8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2200      	movs	r2, #0
 80016cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
	...

080016dc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d101      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1c>
 80016f4:	2302      	movs	r3, #2
 80016f6:	e105      	b.n	8001904 <HAL_ADC_ConfigChannel+0x228>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b09      	cmp	r3, #9
 8001706:	d925      	bls.n	8001754 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68d9      	ldr	r1, [r3, #12]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	b29b      	uxth	r3, r3
 8001714:	461a      	mov	r2, r3
 8001716:	4613      	mov	r3, r2
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	4413      	add	r3, r2
 800171c:	3b1e      	subs	r3, #30
 800171e:	2207      	movs	r2, #7
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43da      	mvns	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	400a      	ands	r2, r1
 800172c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68d9      	ldr	r1, [r3, #12]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	b29b      	uxth	r3, r3
 800173e:	4618      	mov	r0, r3
 8001740:	4603      	mov	r3, r0
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4403      	add	r3, r0
 8001746:	3b1e      	subs	r3, #30
 8001748:	409a      	lsls	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	e022      	b.n	800179a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6919      	ldr	r1, [r3, #16]
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	b29b      	uxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	2207      	movs	r2, #7
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43da      	mvns	r2, r3
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	400a      	ands	r2, r1
 8001776:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6919      	ldr	r1, [r3, #16]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	b29b      	uxth	r3, r3
 8001788:	4618      	mov	r0, r3
 800178a:	4603      	mov	r3, r0
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4403      	add	r3, r0
 8001790:	409a      	lsls	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b06      	cmp	r3, #6
 80017a0:	d824      	bhi.n	80017ec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	3b05      	subs	r3, #5
 80017b4:	221f      	movs	r2, #31
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	400a      	ands	r2, r1
 80017c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	4618      	mov	r0, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685a      	ldr	r2, [r3, #4]
 80017d6:	4613      	mov	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4413      	add	r3, r2
 80017dc:	3b05      	subs	r3, #5
 80017de:	fa00 f203 	lsl.w	r2, r0, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	635a      	str	r2, [r3, #52]	; 0x34
 80017ea:	e04c      	b.n	8001886 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b0c      	cmp	r3, #12
 80017f2:	d824      	bhi.n	800183e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	4613      	mov	r3, r2
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	3b23      	subs	r3, #35	; 0x23
 8001806:	221f      	movs	r2, #31
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43da      	mvns	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	400a      	ands	r2, r1
 8001814:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	b29b      	uxth	r3, r3
 8001822:	4618      	mov	r0, r3
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	4613      	mov	r3, r2
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4413      	add	r3, r2
 800182e:	3b23      	subs	r3, #35	; 0x23
 8001830:	fa00 f203 	lsl.w	r2, r0, r3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	430a      	orrs	r2, r1
 800183a:	631a      	str	r2, [r3, #48]	; 0x30
 800183c:	e023      	b.n	8001886 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	4613      	mov	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	4413      	add	r3, r2
 800184e:	3b41      	subs	r3, #65	; 0x41
 8001850:	221f      	movs	r2, #31
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	43da      	mvns	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	400a      	ands	r2, r1
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	4618      	mov	r0, r3
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685a      	ldr	r2, [r3, #4]
 8001872:	4613      	mov	r3, r2
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	3b41      	subs	r3, #65	; 0x41
 800187a:	fa00 f203 	lsl.w	r2, r0, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	430a      	orrs	r2, r1
 8001884:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001886:	4b22      	ldr	r3, [pc, #136]	; (8001910 <HAL_ADC_ConfigChannel+0x234>)
 8001888:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a21      	ldr	r2, [pc, #132]	; (8001914 <HAL_ADC_ConfigChannel+0x238>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d109      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x1cc>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b12      	cmp	r3, #18
 800189a:	d105      	bne.n	80018a8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	; (8001914 <HAL_ADC_ConfigChannel+0x238>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d123      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x21e>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b10      	cmp	r3, #16
 80018b8:	d003      	beq.n	80018c2 <HAL_ADC_ConfigChannel+0x1e6>
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b11      	cmp	r3, #17
 80018c0:	d11b      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b10      	cmp	r3, #16
 80018d4:	d111      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <HAL_ADC_ConfigChannel+0x23c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a10      	ldr	r2, [pc, #64]	; (800191c <HAL_ADC_ConfigChannel+0x240>)
 80018dc:	fba2 2303 	umull	r2, r3, r2, r3
 80018e0:	0c9a      	lsrs	r2, r3, #18
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80018ec:	e002      	b.n	80018f4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f9      	bne.n	80018ee <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	40012300 	.word	0x40012300
 8001914:	40012000 	.word	0x40012000
 8001918:	20000000 	.word	0x20000000
 800191c:	431bde83 	.word	0x431bde83

08001920 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001928:	4b79      	ldr	r3, [pc, #484]	; (8001b10 <ADC_Init+0x1f0>)
 800192a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685a      	ldr	r2, [r3, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	431a      	orrs	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001954:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6859      	ldr	r1, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	691b      	ldr	r3, [r3, #16]
 8001960:	021a      	lsls	r2, r3, #8
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001978:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6859      	ldr	r1, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689a      	ldr	r2, [r3, #8]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	430a      	orrs	r2, r1
 800198a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	689a      	ldr	r2, [r3, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800199a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	6899      	ldr	r1, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019b2:	4a58      	ldr	r2, [pc, #352]	; (8001b14 <ADC_Init+0x1f4>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d022      	beq.n	80019fe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	689a      	ldr	r2, [r3, #8]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6899      	ldr	r1, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	6899      	ldr	r1, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	e00f      	b.n	8001a1e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a0c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a1c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0202 	bic.w	r2, r2, #2
 8001a2c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6899      	ldr	r1, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	7e1b      	ldrb	r3, [r3, #24]
 8001a38:	005a      	lsls	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d01b      	beq.n	8001a84 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a5a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a6a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6859      	ldr	r1, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	3b01      	subs	r3, #1
 8001a78:	035a      	lsls	r2, r3, #13
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	e007      	b.n	8001a94 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a92:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001aa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	051a      	lsls	r2, r3, #20
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ac8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6899      	ldr	r1, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ad6:	025a      	lsls	r2, r3, #9
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	689a      	ldr	r2, [r3, #8]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001aee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6899      	ldr	r1, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	029a      	lsls	r2, r3, #10
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	430a      	orrs	r2, r1
 8001b02:	609a      	str	r2, [r3, #8]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40012300 	.word	0x40012300
 8001b14:	0f000001 	.word	0x0f000001

08001b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b2e:	68ba      	ldr	r2, [r7, #8]
 8001b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b34:	4013      	ands	r3, r2
 8001b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b4a:	4a04      	ldr	r2, [pc, #16]	; (8001b5c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	60d3      	str	r3, [r2, #12]
}
 8001b50:	bf00      	nop
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b64:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <__NVIC_GetPriorityGrouping+0x18>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	0a1b      	lsrs	r3, r3, #8
 8001b6a:	f003 0307 	and.w	r3, r3, #7
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	db0b      	blt.n	8001ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	f003 021f 	and.w	r2, r3, #31
 8001b94:	4907      	ldr	r1, [pc, #28]	; (8001bb4 <__NVIC_EnableIRQ+0x38>)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	095b      	lsrs	r3, r3, #5
 8001b9c:	2001      	movs	r0, #1
 8001b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	6039      	str	r1, [r7, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	db0a      	blt.n	8001be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	490c      	ldr	r1, [pc, #48]	; (8001c04 <__NVIC_SetPriority+0x4c>)
 8001bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd6:	0112      	lsls	r2, r2, #4
 8001bd8:	b2d2      	uxtb	r2, r2
 8001bda:	440b      	add	r3, r1
 8001bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001be0:	e00a      	b.n	8001bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4908      	ldr	r1, [pc, #32]	; (8001c08 <__NVIC_SetPriority+0x50>)
 8001be8:	79fb      	ldrb	r3, [r7, #7]
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	3b04      	subs	r3, #4
 8001bf0:	0112      	lsls	r2, r2, #4
 8001bf2:	b2d2      	uxtb	r2, r2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	761a      	strb	r2, [r3, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	e000e100 	.word	0xe000e100
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b089      	sub	sp, #36	; 0x24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	60b9      	str	r1, [r7, #8]
 8001c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	f1c3 0307 	rsb	r3, r3, #7
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	bf28      	it	cs
 8001c2a:	2304      	movcs	r3, #4
 8001c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	3304      	adds	r3, #4
 8001c32:	2b06      	cmp	r3, #6
 8001c34:	d902      	bls.n	8001c3c <NVIC_EncodePriority+0x30>
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b03      	subs	r3, #3
 8001c3a:	e000      	b.n	8001c3e <NVIC_EncodePriority+0x32>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	f04f 32ff 	mov.w	r2, #4294967295
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43da      	mvns	r2, r3
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	401a      	ands	r2, r3
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5e:	43d9      	mvns	r1, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c64:	4313      	orrs	r3, r2
         );
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3724      	adds	r7, #36	; 0x24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3b01      	subs	r3, #1
 8001c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c84:	d301      	bcc.n	8001c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c8a:	4a0a      	ldr	r2, [pc, #40]	; (8001cb4 <SysTick_Config+0x40>)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c92:	210f      	movs	r1, #15
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f7ff ff8e 	bl	8001bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c9c:	4b05      	ldr	r3, [pc, #20]	; (8001cb4 <SysTick_Config+0x40>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <SysTick_Config+0x40>)
 8001ca4:	2207      	movs	r2, #7
 8001ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	e000e010 	.word	0xe000e010

08001cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ff29 	bl	8001b18 <__NVIC_SetPriorityGrouping>
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
 8001cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce0:	f7ff ff3e 	bl	8001b60 <__NVIC_GetPriorityGrouping>
 8001ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	68b9      	ldr	r1, [r7, #8]
 8001cea:	6978      	ldr	r0, [r7, #20]
 8001cec:	f7ff ff8e 	bl	8001c0c <NVIC_EncodePriority>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cf6:	4611      	mov	r1, r2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ff5d 	bl	8001bb8 <__NVIC_SetPriority>
}
 8001cfe:	bf00      	nop
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff ff31 	bl	8001b7c <__NVIC_EnableIRQ>
}
 8001d1a:	bf00      	nop
 8001d1c:	3708      	adds	r7, #8
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d22:	b580      	push	{r7, lr}
 8001d24:	b082      	sub	sp, #8
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f7ff ffa2 	bl	8001c74 <SysTick_Config>
 8001d30:	4603      	mov	r3, r0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3708      	adds	r7, #8
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e00e      	b.n	8001d6a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	795b      	ldrb	r3, [r3, #5]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d105      	bne.n	8001d62 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f7ff faa3 	bl	80012a8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b089      	sub	sp, #36	; 0x24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
 8001d8e:	e159      	b.n	8002044 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d90:	2201      	movs	r2, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	697a      	ldr	r2, [r7, #20]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	f040 8148 	bne.w	800203e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d005      	beq.n	8001dc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d130      	bne.n	8001e28 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	68da      	ldr	r2, [r3, #12]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 0201 	and.w	r2, r3, #1
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b03      	cmp	r3, #3
 8001e32:	d017      	beq.n	8001e64 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d123      	bne.n	8001eb8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	08da      	lsrs	r2, r3, #3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3208      	adds	r2, #8
 8001e78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	220f      	movs	r2, #15
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	691a      	ldr	r2, [r3, #16]
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	08da      	lsrs	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	3208      	adds	r2, #8
 8001eb2:	69b9      	ldr	r1, [r7, #24]
 8001eb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 0203 	and.w	r2, r3, #3
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f000 80a2 	beq.w	800203e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4b57      	ldr	r3, [pc, #348]	; (800205c <HAL_GPIO_Init+0x2e8>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a56      	ldr	r2, [pc, #344]	; (800205c <HAL_GPIO_Init+0x2e8>)
 8001f04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b54      	ldr	r3, [pc, #336]	; (800205c <HAL_GPIO_Init+0x2e8>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f12:	60fb      	str	r3, [r7, #12]
 8001f14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f16:	4a52      	ldr	r2, [pc, #328]	; (8002060 <HAL_GPIO_Init+0x2ec>)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	43db      	mvns	r3, r3
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	4013      	ands	r3, r2
 8001f38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a49      	ldr	r2, [pc, #292]	; (8002064 <HAL_GPIO_Init+0x2f0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d019      	beq.n	8001f76 <HAL_GPIO_Init+0x202>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a48      	ldr	r2, [pc, #288]	; (8002068 <HAL_GPIO_Init+0x2f4>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d013      	beq.n	8001f72 <HAL_GPIO_Init+0x1fe>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a47      	ldr	r2, [pc, #284]	; (800206c <HAL_GPIO_Init+0x2f8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <HAL_GPIO_Init+0x1fa>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a46      	ldr	r2, [pc, #280]	; (8002070 <HAL_GPIO_Init+0x2fc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d007      	beq.n	8001f6a <HAL_GPIO_Init+0x1f6>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4a45      	ldr	r2, [pc, #276]	; (8002074 <HAL_GPIO_Init+0x300>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d101      	bne.n	8001f66 <HAL_GPIO_Init+0x1f2>
 8001f62:	2304      	movs	r3, #4
 8001f64:	e008      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f66:	2307      	movs	r3, #7
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e004      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f6e:	2302      	movs	r3, #2
 8001f70:	e002      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <HAL_GPIO_Init+0x204>
 8001f76:	2300      	movs	r3, #0
 8001f78:	69fa      	ldr	r2, [r7, #28]
 8001f7a:	f002 0203 	and.w	r2, r2, #3
 8001f7e:	0092      	lsls	r2, r2, #2
 8001f80:	4093      	lsls	r3, r2
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f88:	4935      	ldr	r1, [pc, #212]	; (8002060 <HAL_GPIO_Init+0x2ec>)
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	089b      	lsrs	r3, r3, #2
 8001f8e:	3302      	adds	r3, #2
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f96:	4b38      	ldr	r3, [pc, #224]	; (8002078 <HAL_GPIO_Init+0x304>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	43db      	mvns	r3, r3
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fba:	4a2f      	ldr	r2, [pc, #188]	; (8002078 <HAL_GPIO_Init+0x304>)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fc0:	4b2d      	ldr	r3, [pc, #180]	; (8002078 <HAL_GPIO_Init+0x304>)
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fdc:	69ba      	ldr	r2, [r7, #24]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe4:	4a24      	ldr	r2, [pc, #144]	; (8002078 <HAL_GPIO_Init+0x304>)
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <HAL_GPIO_Init+0x304>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800200e:	4a1a      	ldr	r2, [pc, #104]	; (8002078 <HAL_GPIO_Init+0x304>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002014:	4b18      	ldr	r3, [pc, #96]	; (8002078 <HAL_GPIO_Init+0x304>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002038:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <HAL_GPIO_Init+0x304>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3301      	adds	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	2b0f      	cmp	r3, #15
 8002048:	f67f aea2 	bls.w	8001d90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800204c:	bf00      	nop
 800204e:	bf00      	nop
 8002050:	3724      	adds	r7, #36	; 0x24
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40023800 	.word	0x40023800
 8002060:	40013800 	.word	0x40013800
 8002064:	40020000 	.word	0x40020000
 8002068:	40020400 	.word	0x40020400
 800206c:	40020800 	.word	0x40020800
 8002070:	40020c00 	.word	0x40020c00
 8002074:	40021000 	.word	0x40021000
 8002078:	40013c00 	.word	0x40013c00

0800207c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800208c:	787b      	ldrb	r3, [r7, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002098:	e003      	b.n	80020a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800209a:	887b      	ldrh	r3, [r7, #2]
 800209c:	041a      	lsls	r2, r3, #16
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	619a      	str	r2, [r3, #24]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	461a      	mov	r2, r3
 80020bc:	460b      	mov	r3, r1
 80020be:	817b      	strh	r3, [r7, #10]
 80020c0:	4613      	mov	r3, r2
 80020c2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020c4:	f7ff faba 	bl	800163c <HAL_GetTick>
 80020c8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b20      	cmp	r3, #32
 80020d4:	f040 80e0 	bne.w	8002298 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2319      	movs	r3, #25
 80020de:	2201      	movs	r2, #1
 80020e0:	4970      	ldr	r1, [pc, #448]	; (80022a4 <HAL_I2C_Master_Transmit+0x1f4>)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 f964 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80020ee:	2302      	movs	r3, #2
 80020f0:	e0d3      	b.n	800229a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d101      	bne.n	8002100 <HAL_I2C_Master_Transmit+0x50>
 80020fc:	2302      	movs	r3, #2
 80020fe:	e0cc      	b.n	800229a <HAL_I2C_Master_Transmit+0x1ea>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d007      	beq.n	8002126 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f042 0201 	orr.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002134:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2221      	movs	r2, #33	; 0x21
 800213a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2210      	movs	r2, #16
 8002142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	893a      	ldrh	r2, [r7, #8]
 8002156:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29a      	uxth	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	4a50      	ldr	r2, [pc, #320]	; (80022a8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002166:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002168:	8979      	ldrh	r1, [r7, #10]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	6a3a      	ldr	r2, [r7, #32]
 800216e:	68f8      	ldr	r0, [r7, #12]
 8002170:	f000 f89c 	bl	80022ac <I2C_MasterRequestWrite>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e08d      	b.n	800229a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	613b      	str	r3, [r7, #16]
 8002192:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002194:	e066      	b.n	8002264 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	6a39      	ldr	r1, [r7, #32]
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fa22 	bl	80025e4 <I2C_WaitOnTXEFlagUntilTimeout>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d00d      	beq.n	80021c2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	2b04      	cmp	r3, #4
 80021ac:	d107      	bne.n	80021be <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e06b      	b.n	800229a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	781a      	ldrb	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d2:	1c5a      	adds	r2, r3, #1
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021dc:	b29b      	uxth	r3, r3
 80021de:	3b01      	subs	r3, #1
 80021e0:	b29a      	uxth	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ea:	3b01      	subs	r3, #1
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d11b      	bne.n	8002238 <HAL_I2C_Master_Transmit+0x188>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002204:	2b00      	cmp	r3, #0
 8002206:	d017      	beq.n	8002238 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	781a      	ldrb	r2, [r3, #0]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002218:	1c5a      	adds	r2, r3, #1
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002222:	b29b      	uxth	r3, r3
 8002224:	3b01      	subs	r3, #1
 8002226:	b29a      	uxth	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002230:	3b01      	subs	r3, #1
 8002232:	b29a      	uxth	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	6a39      	ldr	r1, [r7, #32]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fa19 	bl	8002674 <I2C_WaitOnBTFFlagUntilTimeout>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00d      	beq.n	8002264 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224c:	2b04      	cmp	r3, #4
 800224e:	d107      	bne.n	8002260 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800225e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e01a      	b.n	800229a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002268:	2b00      	cmp	r3, #0
 800226a:	d194      	bne.n	8002196 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	e000      	b.n	800229a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002298:	2302      	movs	r3, #2
  }
}
 800229a:	4618      	mov	r0, r3
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	00100002 	.word	0x00100002
 80022a8:	ffff0000 	.word	0xffff0000

080022ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af02      	add	r7, sp, #8
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	460b      	mov	r3, r1
 80022ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	2b08      	cmp	r3, #8
 80022c6:	d006      	beq.n	80022d6 <I2C_MasterRequestWrite+0x2a>
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d003      	beq.n	80022d6 <I2C_MasterRequestWrite+0x2a>
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022d4:	d108      	bne.n	80022e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022e4:	601a      	str	r2, [r3, #0]
 80022e6:	e00b      	b.n	8002300 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ec:	2b12      	cmp	r3, #18
 80022ee:	d107      	bne.n	8002300 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f84f 	bl	80023b0 <I2C_WaitOnFlagUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00d      	beq.n	8002334 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002326:	d103      	bne.n	8002330 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800232e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002330:	2303      	movs	r3, #3
 8002332:	e035      	b.n	80023a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800233c:	d108      	bne.n	8002350 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800233e:	897b      	ldrh	r3, [r7, #10]
 8002340:	b2db      	uxtb	r3, r3
 8002342:	461a      	mov	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800234c:	611a      	str	r2, [r3, #16]
 800234e:	e01b      	b.n	8002388 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002350:	897b      	ldrh	r3, [r7, #10]
 8002352:	11db      	asrs	r3, r3, #7
 8002354:	b2db      	uxtb	r3, r3
 8002356:	f003 0306 	and.w	r3, r3, #6
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f063 030f 	orn	r3, r3, #15
 8002360:	b2da      	uxtb	r2, r3
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	687a      	ldr	r2, [r7, #4]
 800236c:	490e      	ldr	r1, [pc, #56]	; (80023a8 <I2C_MasterRequestWrite+0xfc>)
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f898 	bl	80024a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e010      	b.n	80023a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800237e:	897b      	ldrh	r3, [r7, #10]
 8002380:	b2da      	uxtb	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4907      	ldr	r1, [pc, #28]	; (80023ac <I2C_MasterRequestWrite+0x100>)
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f888 	bl	80024a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e000      	b.n	80023a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3718      	adds	r7, #24
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	00010008 	.word	0x00010008
 80023ac:	00010002 	.word	0x00010002

080023b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	603b      	str	r3, [r7, #0]
 80023bc:	4613      	mov	r3, r2
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023c0:	e048      	b.n	8002454 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c8:	d044      	beq.n	8002454 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023ca:	f7ff f937 	bl	800163c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d302      	bcc.n	80023e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d139      	bne.n	8002454 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	0c1b      	lsrs	r3, r3, #16
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10d      	bne.n	8002406 <I2C_WaitOnFlagUntilTimeout+0x56>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	43da      	mvns	r2, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	4013      	ands	r3, r2
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	bf0c      	ite	eq
 80023fc:	2301      	moveq	r3, #1
 80023fe:	2300      	movne	r3, #0
 8002400:	b2db      	uxtb	r3, r3
 8002402:	461a      	mov	r2, r3
 8002404:	e00c      	b.n	8002420 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	43da      	mvns	r2, r3
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	4013      	ands	r3, r2
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	bf0c      	ite	eq
 8002418:	2301      	moveq	r3, #1
 800241a:	2300      	movne	r3, #0
 800241c:	b2db      	uxtb	r3, r3
 800241e:	461a      	mov	r2, r3
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	429a      	cmp	r2, r3
 8002424:	d116      	bne.n	8002454 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2200      	movs	r2, #0
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f043 0220 	orr.w	r2, r3, #32
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e023      	b.n	800249c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	0c1b      	lsrs	r3, r3, #16
 8002458:	b2db      	uxtb	r3, r3
 800245a:	2b01      	cmp	r3, #1
 800245c:	d10d      	bne.n	800247a <I2C_WaitOnFlagUntilTimeout+0xca>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	43da      	mvns	r2, r3
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	4013      	ands	r3, r2
 800246a:	b29b      	uxth	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	bf0c      	ite	eq
 8002470:	2301      	moveq	r3, #1
 8002472:	2300      	movne	r3, #0
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	e00c      	b.n	8002494 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	43da      	mvns	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	4013      	ands	r3, r2
 8002486:	b29b      	uxth	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	bf0c      	ite	eq
 800248c:	2301      	moveq	r3, #1
 800248e:	2300      	movne	r3, #0
 8002490:	b2db      	uxtb	r3, r3
 8002492:	461a      	mov	r2, r3
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	429a      	cmp	r2, r3
 8002498:	d093      	beq.n	80023c2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]
 80024b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80024b2:	e071      	b.n	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024c2:	d123      	bne.n	800250c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2220      	movs	r2, #32
 80024e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	f043 0204 	orr.w	r2, r3, #4
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e067      	b.n	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002512:	d041      	beq.n	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002514:	f7ff f892 	bl	800163c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	429a      	cmp	r2, r3
 8002522:	d302      	bcc.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d136      	bne.n	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d10c      	bne.n	800254e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	43da      	mvns	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4013      	ands	r3, r2
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	bf14      	ite	ne
 8002546:	2301      	movne	r3, #1
 8002548:	2300      	moveq	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	e00b      	b.n	8002566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	43da      	mvns	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4013      	ands	r3, r2
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d016      	beq.n	8002598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2200      	movs	r2, #0
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2220      	movs	r2, #32
 8002574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	f043 0220 	orr.w	r2, r3, #32
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e021      	b.n	80025dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	0c1b      	lsrs	r3, r3, #16
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d10c      	bne.n	80025bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	43da      	mvns	r2, r3
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4013      	ands	r3, r2
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	bf14      	ite	ne
 80025b4:	2301      	movne	r3, #1
 80025b6:	2300      	moveq	r3, #0
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	e00b      	b.n	80025d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	43da      	mvns	r2, r3
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4013      	ands	r3, r2
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f47f af6d 	bne.w	80024b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025f0:	e034      	b.n	800265c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 f886 	bl	8002704 <I2C_IsAcknowledgeFailed>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e034      	b.n	800266c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002608:	d028      	beq.n	800265c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800260a:	f7ff f817 	bl	800163c <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	429a      	cmp	r2, r3
 8002618:	d302      	bcc.n	8002620 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d11d      	bne.n	800265c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262a:	2b80      	cmp	r3, #128	; 0x80
 800262c:	d016      	beq.n	800265c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	f043 0220 	orr.w	r2, r3, #32
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e007      	b.n	800266c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002666:	2b80      	cmp	r3, #128	; 0x80
 8002668:	d1c3      	bne.n	80025f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002680:	e034      	b.n	80026ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f83e 	bl	8002704 <I2C_IsAcknowledgeFailed>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e034      	b.n	80026fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002698:	d028      	beq.n	80026ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269a:	f7fe ffcf 	bl	800163c <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d302      	bcc.n	80026b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d11d      	bne.n	80026ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d016      	beq.n	80026ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2220      	movs	r2, #32
 80026c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f043 0220 	orr.w	r2, r3, #32
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	e007      	b.n	80026fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	f003 0304 	and.w	r3, r3, #4
 80026f6:	2b04      	cmp	r3, #4
 80026f8:	d1c3      	bne.n	8002682 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}

08002704 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271a:	d11b      	bne.n	8002754 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002724:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002740:	f043 0204 	orr.w	r2, r3, #4
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e000      	b.n	8002756 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e267      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d075      	beq.n	800286e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002782:	4b88      	ldr	r3, [pc, #544]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b04      	cmp	r3, #4
 800278c:	d00c      	beq.n	80027a8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278e:	4b85      	ldr	r3, [pc, #532]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002796:	2b08      	cmp	r3, #8
 8002798:	d112      	bne.n	80027c0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279a:	4b82      	ldr	r3, [pc, #520]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027a6:	d10b      	bne.n	80027c0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027a8:	4b7e      	ldr	r3, [pc, #504]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d05b      	beq.n	800286c <HAL_RCC_OscConfig+0x108>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d157      	bne.n	800286c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e242      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027c8:	d106      	bne.n	80027d8 <HAL_RCC_OscConfig+0x74>
 80027ca:	4b76      	ldr	r3, [pc, #472]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a75      	ldr	r2, [pc, #468]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d4:	6013      	str	r3, [r2, #0]
 80027d6:	e01d      	b.n	8002814 <HAL_RCC_OscConfig+0xb0>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e0:	d10c      	bne.n	80027fc <HAL_RCC_OscConfig+0x98>
 80027e2:	4b70      	ldr	r3, [pc, #448]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a6f      	ldr	r2, [pc, #444]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b6d      	ldr	r3, [pc, #436]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6c      	ldr	r2, [pc, #432]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	e00b      	b.n	8002814 <HAL_RCC_OscConfig+0xb0>
 80027fc:	4b69      	ldr	r3, [pc, #420]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a68      	ldr	r2, [pc, #416]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002806:	6013      	str	r3, [r2, #0]
 8002808:	4b66      	ldr	r3, [pc, #408]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a65      	ldr	r2, [pc, #404]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 800280e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d013      	beq.n	8002844 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281c:	f7fe ff0e 	bl	800163c <HAL_GetTick>
 8002820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002824:	f7fe ff0a 	bl	800163c <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b64      	cmp	r3, #100	; 0x64
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e207      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002836:	4b5b      	ldr	r3, [pc, #364]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d0f0      	beq.n	8002824 <HAL_RCC_OscConfig+0xc0>
 8002842:	e014      	b.n	800286e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002844:	f7fe fefa 	bl	800163c <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800284c:	f7fe fef6 	bl	800163c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b64      	cmp	r3, #100	; 0x64
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e1f3      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800285e:	4b51      	ldr	r3, [pc, #324]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0xe8>
 800286a:	e000      	b.n	800286e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800286c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d063      	beq.n	8002942 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287a:	4b4a      	ldr	r3, [pc, #296]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00b      	beq.n	800289e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002886:	4b47      	ldr	r3, [pc, #284]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800288e:	2b08      	cmp	r3, #8
 8002890:	d11c      	bne.n	80028cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002892:	4b44      	ldr	r3, [pc, #272]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d116      	bne.n	80028cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800289e:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <HAL_RCC_OscConfig+0x152>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d001      	beq.n	80028b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e1c7      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b6:	4b3b      	ldr	r3, [pc, #236]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	691b      	ldr	r3, [r3, #16]
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4937      	ldr	r1, [pc, #220]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ca:	e03a      	b.n	8002942 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d4:	4b34      	ldr	r3, [pc, #208]	; (80029a8 <HAL_RCC_OscConfig+0x244>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028da:	f7fe feaf 	bl	800163c <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e2:	f7fe feab 	bl	800163c <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e1a8      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028f4:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0302 	and.w	r3, r3, #2
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0f0      	beq.n	80028e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002900:	4b28      	ldr	r3, [pc, #160]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4925      	ldr	r1, [pc, #148]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002910:	4313      	orrs	r3, r2
 8002912:	600b      	str	r3, [r1, #0]
 8002914:	e015      	b.n	8002942 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002916:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <HAL_RCC_OscConfig+0x244>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291c:	f7fe fe8e 	bl	800163c <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002924:	f7fe fe8a 	bl	800163c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e187      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d036      	beq.n	80029bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d016      	beq.n	8002984 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002956:	4b15      	ldr	r3, [pc, #84]	; (80029ac <HAL_RCC_OscConfig+0x248>)
 8002958:	2201      	movs	r2, #1
 800295a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7fe fe6e 	bl	800163c <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002964:	f7fe fe6a 	bl	800163c <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e167      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_OscConfig+0x240>)
 8002978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d0f0      	beq.n	8002964 <HAL_RCC_OscConfig+0x200>
 8002982:	e01b      	b.n	80029bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_RCC_OscConfig+0x248>)
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298a:	f7fe fe57 	bl	800163c <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002990:	e00e      	b.n	80029b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002992:	f7fe fe53 	bl	800163c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d907      	bls.n	80029b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e150      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
 80029a4:	40023800 	.word	0x40023800
 80029a8:	42470000 	.word	0x42470000
 80029ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	4b88      	ldr	r3, [pc, #544]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1ea      	bne.n	8002992 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8097 	beq.w	8002af8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ca:	2300      	movs	r3, #0
 80029cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ce:	4b81      	ldr	r3, [pc, #516]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10f      	bne.n	80029fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	60bb      	str	r3, [r7, #8]
 80029de:	4b7d      	ldr	r3, [pc, #500]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	4a7c      	ldr	r2, [pc, #496]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e8:	6413      	str	r3, [r2, #64]	; 0x40
 80029ea:	4b7a      	ldr	r3, [pc, #488]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f6:	2301      	movs	r3, #1
 80029f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fa:	4b77      	ldr	r3, [pc, #476]	; (8002bd8 <HAL_RCC_OscConfig+0x474>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d118      	bne.n	8002a38 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a06:	4b74      	ldr	r3, [pc, #464]	; (8002bd8 <HAL_RCC_OscConfig+0x474>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a73      	ldr	r2, [pc, #460]	; (8002bd8 <HAL_RCC_OscConfig+0x474>)
 8002a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a12:	f7fe fe13 	bl	800163c <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1a:	f7fe fe0f 	bl	800163c <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e10c      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_RCC_OscConfig+0x474>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x2ea>
 8002a40:	4b64      	ldr	r3, [pc, #400]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	4a63      	ldr	r2, [pc, #396]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a4c:	e01c      	b.n	8002a88 <HAL_RCC_OscConfig+0x324>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x30c>
 8002a56:	4b5f      	ldr	r3, [pc, #380]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5a:	4a5e      	ldr	r2, [pc, #376]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	6713      	str	r3, [r2, #112]	; 0x70
 8002a62:	4b5c      	ldr	r3, [pc, #368]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a66:	4a5b      	ldr	r2, [pc, #364]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a6e:	e00b      	b.n	8002a88 <HAL_RCC_OscConfig+0x324>
 8002a70:	4b58      	ldr	r3, [pc, #352]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	4a57      	ldr	r2, [pc, #348]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002a7c:	4b55      	ldr	r3, [pc, #340]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	4a54      	ldr	r2, [pc, #336]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002a82:	f023 0304 	bic.w	r3, r3, #4
 8002a86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d015      	beq.n	8002abc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fe fdd4 	bl	800163c <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a98:	f7fe fdd0 	bl	800163c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e0cb      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aae:	4b49      	ldr	r3, [pc, #292]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0ee      	beq.n	8002a98 <HAL_RCC_OscConfig+0x334>
 8002aba:	e014      	b.n	8002ae6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abc:	f7fe fdbe 	bl	800163c <HAL_GetTick>
 8002ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ac4:	f7fe fdba 	bl	800163c <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	693b      	ldr	r3, [r7, #16]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e0b5      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ada:	4b3e      	ldr	r3, [pc, #248]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1ee      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ae6:	7dfb      	ldrb	r3, [r7, #23]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d105      	bne.n	8002af8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aec:	4b39      	ldr	r3, [pc, #228]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af0:	4a38      	ldr	r2, [pc, #224]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002af2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002af6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f000 80a1 	beq.w	8002c44 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b02:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d05c      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d141      	bne.n	8002b9a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b16:	4b31      	ldr	r3, [pc, #196]	; (8002bdc <HAL_RCC_OscConfig+0x478>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b1c:	f7fe fd8e 	bl	800163c <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b24:	f7fe fd8a 	bl	800163c <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e087      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b36:	4b27      	ldr	r3, [pc, #156]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1f0      	bne.n	8002b24 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69da      	ldr	r2, [r3, #28]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a1b      	ldr	r3, [r3, #32]
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	019b      	lsls	r3, r3, #6
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	085b      	lsrs	r3, r3, #1
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b64:	061b      	lsls	r3, r3, #24
 8002b66:	491b      	ldr	r1, [pc, #108]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b6c:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <HAL_RCC_OscConfig+0x478>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7fe fd63 	bl	800163c <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7a:	f7fe fd5f 	bl	800163c <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e05c      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8c:	4b11      	ldr	r3, [pc, #68]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x416>
 8002b98:	e054      	b.n	8002c44 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b9a:	4b10      	ldr	r3, [pc, #64]	; (8002bdc <HAL_RCC_OscConfig+0x478>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7fe fd4c 	bl	800163c <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba8:	f7fe fd48 	bl	800163c <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e045      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bba:	4b06      	ldr	r3, [pc, #24]	; (8002bd4 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1f0      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x444>
 8002bc6:	e03d      	b.n	8002c44 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d107      	bne.n	8002be0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e038      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40007000 	.word	0x40007000
 8002bdc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_RCC_OscConfig+0x4ec>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d028      	beq.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d121      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d11a      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c10:	4013      	ands	r3, r2
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c16:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d111      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c26:	085b      	lsrs	r3, r3, #1
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d107      	bne.n	8002c40 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d001      	beq.n	8002c44 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800

08002c54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e0cc      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c68:	4b68      	ldr	r3, [pc, #416]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d90c      	bls.n	8002c90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7e:	4b63      	ldr	r3, [pc, #396]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d001      	beq.n	8002c90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0b8      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0302 	and.w	r3, r3, #2
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0304 	and.w	r3, r3, #4
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d005      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca8:	4b59      	ldr	r3, [pc, #356]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	4a58      	ldr	r2, [pc, #352]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0308 	and.w	r3, r3, #8
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d005      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cc0:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	4a52      	ldr	r2, [pc, #328]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002cca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ccc:	4b50      	ldr	r3, [pc, #320]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	494d      	ldr	r1, [pc, #308]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d044      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d119      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e07f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d003      	beq.n	8002d12 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d107      	bne.n	8002d22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d12:	4b3f      	ldr	r3, [pc, #252]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d109      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e06f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d22:	4b3b      	ldr	r3, [pc, #236]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e067      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	f023 0203 	bic.w	r2, r3, #3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	4934      	ldr	r1, [pc, #208]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d44:	f7fe fc7a 	bl	800163c <HAL_GetTick>
 8002d48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d4a:	e00a      	b.n	8002d62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4c:	f7fe fc76 	bl	800163c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e04f      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d62:	4b2b      	ldr	r3, [pc, #172]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 020c 	and.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d1eb      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d74:	4b25      	ldr	r3, [pc, #148]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d20c      	bcs.n	8002d9c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d82:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d84:	683a      	ldr	r2, [r7, #0]
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_RCC_ClockConfig+0x1b8>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d001      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e032      	b.n	8002e02 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d008      	beq.n	8002dba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da8:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4916      	ldr	r1, [pc, #88]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	490e      	ldr	r1, [pc, #56]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dda:	f000 f821 	bl	8002e20 <HAL_RCC_GetSysClockFreq>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b0b      	ldr	r3, [pc, #44]	; (8002e10 <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 030f 	and.w	r3, r3, #15
 8002dea:	490a      	ldr	r1, [pc, #40]	; (8002e14 <HAL_RCC_ClockConfig+0x1c0>)
 8002dec:	5ccb      	ldrb	r3, [r1, r3]
 8002dee:	fa22 f303 	lsr.w	r3, r2, r3
 8002df2:	4a09      	ldr	r2, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1c4>)
 8002df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_ClockConfig+0x1c8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe fbda 	bl	80015b4 <HAL_InitTick>

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	40023c00 	.word	0x40023c00
 8002e10:	40023800 	.word	0x40023800
 8002e14:	08006274 	.word	0x08006274
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000004 	.word	0x20000004

08002e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e24:	b094      	sub	sp, #80	; 0x50
 8002e26:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	647b      	str	r3, [r7, #68]	; 0x44
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e30:	2300      	movs	r3, #0
 8002e32:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e38:	4b79      	ldr	r3, [pc, #484]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d00d      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x40>
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	f200 80e1 	bhi.w	800300c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d002      	beq.n	8002e54 <HAL_RCC_GetSysClockFreq+0x34>
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d003      	beq.n	8002e5a <HAL_RCC_GetSysClockFreq+0x3a>
 8002e52:	e0db      	b.n	800300c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e54:	4b73      	ldr	r3, [pc, #460]	; (8003024 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e56:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e58:	e0db      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e5a:	4b73      	ldr	r3, [pc, #460]	; (8003028 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e5c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e5e:	e0d8      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e60:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e68:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e6a:	4b6d      	ldr	r3, [pc, #436]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d063      	beq.n	8002f3e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e76:	4b6a      	ldr	r3, [pc, #424]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	099b      	lsrs	r3, r3, #6
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e80:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e88:	633b      	str	r3, [r7, #48]	; 0x30
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e92:	4622      	mov	r2, r4
 8002e94:	462b      	mov	r3, r5
 8002e96:	f04f 0000 	mov.w	r0, #0
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	0159      	lsls	r1, r3, #5
 8002ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea4:	0150      	lsls	r0, r2, #5
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4621      	mov	r1, r4
 8002eac:	1a51      	subs	r1, r2, r1
 8002eae:	6139      	str	r1, [r7, #16]
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ec4:	4659      	mov	r1, fp
 8002ec6:	018b      	lsls	r3, r1, #6
 8002ec8:	4651      	mov	r1, sl
 8002eca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ece:	4651      	mov	r1, sl
 8002ed0:	018a      	lsls	r2, r1, #6
 8002ed2:	4651      	mov	r1, sl
 8002ed4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ed8:	4659      	mov	r1, fp
 8002eda:	eb63 0901 	sbc.w	r9, r3, r1
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002eea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002eee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ef2:	4690      	mov	r8, r2
 8002ef4:	4699      	mov	r9, r3
 8002ef6:	4623      	mov	r3, r4
 8002ef8:	eb18 0303 	adds.w	r3, r8, r3
 8002efc:	60bb      	str	r3, [r7, #8]
 8002efe:	462b      	mov	r3, r5
 8002f00:	eb49 0303 	adc.w	r3, r9, r3
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f12:	4629      	mov	r1, r5
 8002f14:	024b      	lsls	r3, r1, #9
 8002f16:	4621      	mov	r1, r4
 8002f18:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	024a      	lsls	r2, r1, #9
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f26:	2200      	movs	r2, #0
 8002f28:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f2c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f30:	f7fd fd1c 	bl	800096c <__aeabi_uldivmod>
 8002f34:	4602      	mov	r2, r0
 8002f36:	460b      	mov	r3, r1
 8002f38:	4613      	mov	r3, r2
 8002f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f3c:	e058      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f3e:	4b38      	ldr	r3, [pc, #224]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	099b      	lsrs	r3, r3, #6
 8002f44:	2200      	movs	r2, #0
 8002f46:	4618      	mov	r0, r3
 8002f48:	4611      	mov	r1, r2
 8002f4a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f4e:	623b      	str	r3, [r7, #32]
 8002f50:	2300      	movs	r3, #0
 8002f52:	627b      	str	r3, [r7, #36]	; 0x24
 8002f54:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f58:	4642      	mov	r2, r8
 8002f5a:	464b      	mov	r3, r9
 8002f5c:	f04f 0000 	mov.w	r0, #0
 8002f60:	f04f 0100 	mov.w	r1, #0
 8002f64:	0159      	lsls	r1, r3, #5
 8002f66:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f6a:	0150      	lsls	r0, r2, #5
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4641      	mov	r1, r8
 8002f72:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f76:	4649      	mov	r1, r9
 8002f78:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f7c:	f04f 0200 	mov.w	r2, #0
 8002f80:	f04f 0300 	mov.w	r3, #0
 8002f84:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f88:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f8c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f90:	ebb2 040a 	subs.w	r4, r2, sl
 8002f94:	eb63 050b 	sbc.w	r5, r3, fp
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	00eb      	lsls	r3, r5, #3
 8002fa2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fa6:	00e2      	lsls	r2, r4, #3
 8002fa8:	4614      	mov	r4, r2
 8002faa:	461d      	mov	r5, r3
 8002fac:	4643      	mov	r3, r8
 8002fae:	18e3      	adds	r3, r4, r3
 8002fb0:	603b      	str	r3, [r7, #0]
 8002fb2:	464b      	mov	r3, r9
 8002fb4:	eb45 0303 	adc.w	r3, r5, r3
 8002fb8:	607b      	str	r3, [r7, #4]
 8002fba:	f04f 0200 	mov.w	r2, #0
 8002fbe:	f04f 0300 	mov.w	r3, #0
 8002fc2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fc6:	4629      	mov	r1, r5
 8002fc8:	028b      	lsls	r3, r1, #10
 8002fca:	4621      	mov	r1, r4
 8002fcc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	028a      	lsls	r2, r1, #10
 8002fd4:	4610      	mov	r0, r2
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fda:	2200      	movs	r2, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	61fa      	str	r2, [r7, #28]
 8002fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fe4:	f7fd fcc2 	bl	800096c <__aeabi_uldivmod>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4613      	mov	r3, r2
 8002fee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	0c1b      	lsrs	r3, r3, #16
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003000:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003004:	fbb2 f3f3 	udiv	r3, r2, r3
 8003008:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800300a:	e002      	b.n	8003012 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800300c:	4b05      	ldr	r3, [pc, #20]	; (8003024 <HAL_RCC_GetSysClockFreq+0x204>)
 800300e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003014:	4618      	mov	r0, r3
 8003016:	3750      	adds	r7, #80	; 0x50
 8003018:	46bd      	mov	sp, r7
 800301a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800301e:	bf00      	nop
 8003020:	40023800 	.word	0x40023800
 8003024:	00f42400 	.word	0x00f42400
 8003028:	007a1200 	.word	0x007a1200

0800302c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003030:	4b03      	ldr	r3, [pc, #12]	; (8003040 <HAL_RCC_GetHCLKFreq+0x14>)
 8003032:	681b      	ldr	r3, [r3, #0]
}
 8003034:	4618      	mov	r0, r3
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	20000000 	.word	0x20000000

08003044 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003048:	f7ff fff0 	bl	800302c <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b05      	ldr	r3, [pc, #20]	; (8003064 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	0a9b      	lsrs	r3, r3, #10
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4903      	ldr	r1, [pc, #12]	; (8003068 <HAL_RCC_GetPCLK1Freq+0x24>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003060:	4618      	mov	r0, r3
 8003062:	bd80      	pop	{r7, pc}
 8003064:	40023800 	.word	0x40023800
 8003068:	08006284 	.word	0x08006284

0800306c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003070:	f7ff ffdc 	bl	800302c <HAL_RCC_GetHCLKFreq>
 8003074:	4602      	mov	r2, r0
 8003076:	4b05      	ldr	r3, [pc, #20]	; (800308c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	0b5b      	lsrs	r3, r3, #13
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	4903      	ldr	r1, [pc, #12]	; (8003090 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003082:	5ccb      	ldrb	r3, [r1, r3]
 8003084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003088:	4618      	mov	r0, r3
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40023800 	.word	0x40023800
 8003090:	08006284 	.word	0x08006284

08003094 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d105      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d035      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030bc:	4b67      	ldr	r3, [pc, #412]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030c2:	f7fe fabb 	bl	800163c <HAL_GetTick>
 80030c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030ca:	f7fe fab7 	bl	800163c <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e0ba      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030dc:	4b60      	ldr	r3, [pc, #384]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f0      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	019a      	lsls	r2, r3, #6
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	071b      	lsls	r3, r3, #28
 80030f4:	495a      	ldr	r1, [pc, #360]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80030f6:	4313      	orrs	r3, r2
 80030f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030fc:	4b57      	ldr	r3, [pc, #348]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003102:	f7fe fa9b 	bl	800163c <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800310a:	f7fe fa97 	bl	800163c <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e09a      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800311c:	4b50      	ldr	r3, [pc, #320]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 8083 	beq.w	800323c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	4b49      	ldr	r3, [pc, #292]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	4a48      	ldr	r2, [pc, #288]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003144:	6413      	str	r3, [r2, #64]	; 0x40
 8003146:	4b46      	ldr	r3, [pc, #280]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003152:	4b44      	ldr	r3, [pc, #272]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a43      	ldr	r2, [pc, #268]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800315c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800315e:	f7fe fa6d 	bl	800163c <HAL_GetTick>
 8003162:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003164:	e008      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003166:	f7fe fa69 	bl	800163c <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e06c      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003178:	4b3a      	ldr	r3, [pc, #232]	; (8003264 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d0f0      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003184:	4b36      	ldr	r3, [pc, #216]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800318c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d02f      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d028      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031a2:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031ac:	4b2e      	ldr	r3, [pc, #184]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80031b2:	4b2d      	ldr	r3, [pc, #180]	; (8003268 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80031b8:	4a29      	ldr	r2, [pc, #164]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80031be:	4b28      	ldr	r3, [pc, #160]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d114      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80031ca:	f7fe fa37 	bl	800163c <HAL_GetTick>
 80031ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031d0:	e00a      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031d2:	f7fe fa33 	bl	800163c <HAL_GetTick>
 80031d6:	4602      	mov	r2, r0
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e034      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0ee      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003200:	d10d      	bne.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003202:	4b17      	ldr	r3, [pc, #92]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003216:	4912      	ldr	r1, [pc, #72]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003218:	4313      	orrs	r3, r2
 800321a:	608b      	str	r3, [r1, #8]
 800321c:	e005      	b.n	800322a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800321e:	4b10      	ldr	r3, [pc, #64]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	4a0f      	ldr	r2, [pc, #60]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003224:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003228:	6093      	str	r3, [r2, #8]
 800322a:	4b0d      	ldr	r3, [pc, #52]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800322c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003236:	490a      	ldr	r1, [pc, #40]	; (8003260 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003238:	4313      	orrs	r3, r2
 800323a:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 0308 	and.w	r3, r3, #8
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	7c1a      	ldrb	r2, [r3, #16]
 800324c:	4b07      	ldr	r3, [pc, #28]	; (800326c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800324e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	42470068 	.word	0x42470068
 8003260:	40023800 	.word	0x40023800
 8003264:	40007000 	.word	0x40007000
 8003268:	42470e40 	.word	0x42470e40
 800326c:	424711e0 	.word	0x424711e0

08003270 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e073      	b.n	800336e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7f5b      	ldrb	r3, [r3, #29]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fe f828 	bl	80012ec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	f003 0310 	and.w	r3, r3, #16
 80032ac:	2b10      	cmp	r3, #16
 80032ae:	d055      	beq.n	800335c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	22ca      	movs	r2, #202	; 0xca
 80032b6:	625a      	str	r2, [r3, #36]	; 0x24
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2253      	movs	r2, #83	; 0x53
 80032be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f87f 	bl	80033c4 <RTC_EnterInitMode>
 80032c6:	4603      	mov	r3, r0
 80032c8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80032ca:	7bfb      	ldrb	r3, [r7, #15]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d12c      	bne.n	800332a <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6812      	ldr	r2, [r2, #0]
 80032da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80032de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032e2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6899      	ldr	r1, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	431a      	orrs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68d2      	ldr	r2, [r2, #12]
 800330a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6919      	ldr	r1, [r3, #16]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	041a      	lsls	r2, r3, #16
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f886 	bl	8003432 <RTC_ExitInitMode>
 8003326:	4603      	mov	r3, r0
 8003328:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800332a:	7bfb      	ldrb	r3, [r7, #15]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d110      	bne.n	8003352 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	22ff      	movs	r2, #255	; 0xff
 8003358:	625a      	str	r2, [r3, #36]	; 0x24
 800335a:	e001      	b.n	8003360 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003360:	7bfb      	ldrb	r3, [r7, #15]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d102      	bne.n	800336c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800336c:	7bfb      	ldrb	r3, [r7, #15]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0d      	ldr	r2, [pc, #52]	; (80033c0 <HAL_RTC_WaitForSynchro+0x48>)
 800338a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800338c:	f7fe f956 	bl	800163c <HAL_GetTick>
 8003390:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003392:	e009      	b.n	80033a8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003394:	f7fe f952 	bl	800163c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033a2:	d901      	bls.n	80033a8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e007      	b.n	80033b8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f003 0320 	and.w	r3, r3, #32
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d0ee      	beq.n	8003394 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3710      	adds	r7, #16
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	00013f5f 	.word	0x00013f5f

080033c4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80033d0:	2300      	movs	r3, #0
 80033d2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d122      	bne.n	8003428 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033f0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033f2:	f7fe f923 	bl	800163c <HAL_GetTick>
 80033f6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80033f8:	e00c      	b.n	8003414 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033fa:	f7fe f91f 	bl	800163c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003408:	d904      	bls.n	8003414 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2204      	movs	r2, #4
 800340e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d102      	bne.n	8003428 <RTC_EnterInitMode+0x64>
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d1e8      	bne.n	80033fa <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003428:	7bfb      	ldrb	r3, [r7, #15]
}
 800342a:	4618      	mov	r0, r3
 800342c:	3710      	adds	r7, #16
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b084      	sub	sp, #16
 8003436:	af00      	add	r7, sp, #0
 8003438:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800344c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10a      	bne.n	8003472 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f7ff ff8b 	bl	8003378 <HAL_RTC_WaitForSynchro>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d004      	beq.n	8003472 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2204      	movs	r2, #4
 800346c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e041      	b.n	8003512 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd ff4e 	bl	8001344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2202      	movs	r2, #2
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	3304      	adds	r3, #4
 80034b8:	4619      	mov	r1, r3
 80034ba:	4610      	mov	r0, r2
 80034bc:	f000 fa70 	bl	80039a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3708      	adds	r7, #8
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
	...

0800351c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b01      	cmp	r3, #1
 800352e:	d001      	beq.n	8003534 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e044      	b.n	80035be <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2202      	movs	r2, #2
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f042 0201 	orr.w	r2, r2, #1
 800354a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1e      	ldr	r2, [pc, #120]	; (80035cc <HAL_TIM_Base_Start_IT+0xb0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d018      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x6c>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800355e:	d013      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x6c>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1a      	ldr	r2, [pc, #104]	; (80035d0 <HAL_TIM_Base_Start_IT+0xb4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00e      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x6c>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a19      	ldr	r2, [pc, #100]	; (80035d4 <HAL_TIM_Base_Start_IT+0xb8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d009      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x6c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a17      	ldr	r2, [pc, #92]	; (80035d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_TIM_Base_Start_IT+0x6c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a16      	ldr	r2, [pc, #88]	; (80035dc <HAL_TIM_Base_Start_IT+0xc0>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d111      	bne.n	80035ac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 0307 	and.w	r3, r3, #7
 8003592:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b06      	cmp	r3, #6
 8003598:	d010      	beq.n	80035bc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035aa:	e007      	b.n	80035bc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40010000 	.word	0x40010000
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40000800 	.word	0x40000800
 80035d8:	40000c00 	.word	0x40000c00
 80035dc:	40014000 	.word	0x40014000

080035e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d020      	beq.n	8003644 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0302 	and.w	r3, r3, #2
 8003608:	2b00      	cmp	r3, #0
 800360a:	d01b      	beq.n	8003644 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f06f 0202 	mvn.w	r2, #2
 8003614:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f003 0303 	and.w	r3, r3, #3
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f999 	bl	8003962 <HAL_TIM_IC_CaptureCallback>
 8003630:	e005      	b.n	800363e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f98b 	bl	800394e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f000 f99c 	bl	8003976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	d020      	beq.n	8003690 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f003 0304 	and.w	r3, r3, #4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01b      	beq.n	8003690 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0204 	mvn.w	r2, #4
 8003660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2202      	movs	r2, #2
 8003666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	699b      	ldr	r3, [r3, #24]
 800366e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 f973 	bl	8003962 <HAL_TIM_IC_CaptureCallback>
 800367c:	e005      	b.n	800368a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f965 	bl	800394e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f976 	bl	8003976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d020      	beq.n	80036dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d01b      	beq.n	80036dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f06f 0208 	mvn.w	r2, #8
 80036ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2204      	movs	r2, #4
 80036b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	69db      	ldr	r3, [r3, #28]
 80036ba:	f003 0303 	and.w	r3, r3, #3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f94d 	bl	8003962 <HAL_TIM_IC_CaptureCallback>
 80036c8:	e005      	b.n	80036d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f000 f93f 	bl	800394e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 f950 	bl	8003976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	f003 0310 	and.w	r3, r3, #16
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d020      	beq.n	8003728 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f003 0310 	and.w	r3, r3, #16
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01b      	beq.n	8003728 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f06f 0210 	mvn.w	r2, #16
 80036f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2208      	movs	r2, #8
 80036fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f927 	bl	8003962 <HAL_TIM_IC_CaptureCallback>
 8003714:	e005      	b.n	8003722 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 f919 	bl	800394e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f92a 	bl	8003976 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00c      	beq.n	800374c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f06f 0201 	mvn.w	r2, #1
 8003744:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd fcd0 	bl	80010ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00c      	beq.n	8003770 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375c:	2b00      	cmp	r3, #0
 800375e:	d007      	beq.n	8003770 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fab6 	bl	8003cdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00c      	beq.n	8003794 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d007      	beq.n	8003794 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800378c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 f8fb 	bl	800398a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00c      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d007      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f06f 0220 	mvn.w	r2, #32
 80037b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 fa88 	bl	8003cc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_TIM_ConfigClockSource+0x1c>
 80037d8:	2302      	movs	r3, #2
 80037da:	e0b4      	b.n	8003946 <HAL_TIM_ConfigClockSource+0x186>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2202      	movs	r2, #2
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003802:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003814:	d03e      	beq.n	8003894 <HAL_TIM_ConfigClockSource+0xd4>
 8003816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800381a:	f200 8087 	bhi.w	800392c <HAL_TIM_ConfigClockSource+0x16c>
 800381e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003822:	f000 8086 	beq.w	8003932 <HAL_TIM_ConfigClockSource+0x172>
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800382a:	d87f      	bhi.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
 800382c:	2b70      	cmp	r3, #112	; 0x70
 800382e:	d01a      	beq.n	8003866 <HAL_TIM_ConfigClockSource+0xa6>
 8003830:	2b70      	cmp	r3, #112	; 0x70
 8003832:	d87b      	bhi.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
 8003834:	2b60      	cmp	r3, #96	; 0x60
 8003836:	d050      	beq.n	80038da <HAL_TIM_ConfigClockSource+0x11a>
 8003838:	2b60      	cmp	r3, #96	; 0x60
 800383a:	d877      	bhi.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
 800383c:	2b50      	cmp	r3, #80	; 0x50
 800383e:	d03c      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0xfa>
 8003840:	2b50      	cmp	r3, #80	; 0x50
 8003842:	d873      	bhi.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
 8003844:	2b40      	cmp	r3, #64	; 0x40
 8003846:	d058      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0x13a>
 8003848:	2b40      	cmp	r3, #64	; 0x40
 800384a:	d86f      	bhi.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
 800384c:	2b30      	cmp	r3, #48	; 0x30
 800384e:	d064      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x15a>
 8003850:	2b30      	cmp	r3, #48	; 0x30
 8003852:	d86b      	bhi.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
 8003854:	2b20      	cmp	r3, #32
 8003856:	d060      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x15a>
 8003858:	2b20      	cmp	r3, #32
 800385a:	d867      	bhi.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
 800385c:	2b00      	cmp	r3, #0
 800385e:	d05c      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x15a>
 8003860:	2b10      	cmp	r3, #16
 8003862:	d05a      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x15a>
 8003864:	e062      	b.n	800392c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003876:	f000 f999 	bl	8003bac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	68ba      	ldr	r2, [r7, #8]
 8003890:	609a      	str	r2, [r3, #8]
      break;
 8003892:	e04f      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038a4:	f000 f982 	bl	8003bac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	689a      	ldr	r2, [r3, #8]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038b6:	609a      	str	r2, [r3, #8]
      break;
 80038b8:	e03c      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c6:	461a      	mov	r2, r3
 80038c8:	f000 f8f6 	bl	8003ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2150      	movs	r1, #80	; 0x50
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f94f 	bl	8003b76 <TIM_ITRx_SetConfig>
      break;
 80038d8:	e02c      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038e6:	461a      	mov	r2, r3
 80038e8:	f000 f915 	bl	8003b16 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2160      	movs	r1, #96	; 0x60
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 f93f 	bl	8003b76 <TIM_ITRx_SetConfig>
      break;
 80038f8:	e01c      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003906:	461a      	mov	r2, r3
 8003908:	f000 f8d6 	bl	8003ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2140      	movs	r1, #64	; 0x40
 8003912:	4618      	mov	r0, r3
 8003914:	f000 f92f 	bl	8003b76 <TIM_ITRx_SetConfig>
      break;
 8003918:	e00c      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f000 f926 	bl	8003b76 <TIM_ITRx_SetConfig>
      break;
 800392a:	e003      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	73fb      	strb	r3, [r7, #15]
      break;
 8003930:	e000      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003944:	7bfb      	ldrb	r3, [r7, #15]
}
 8003946:	4618      	mov	r0, r3
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800396a:	bf00      	nop
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b085      	sub	sp, #20
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	4a3a      	ldr	r2, [pc, #232]	; (8003a9c <TIM_Base_SetConfig+0xfc>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d00f      	beq.n	80039d8 <TIM_Base_SetConfig+0x38>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039be:	d00b      	beq.n	80039d8 <TIM_Base_SetConfig+0x38>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	4a37      	ldr	r2, [pc, #220]	; (8003aa0 <TIM_Base_SetConfig+0x100>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d007      	beq.n	80039d8 <TIM_Base_SetConfig+0x38>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a36      	ldr	r2, [pc, #216]	; (8003aa4 <TIM_Base_SetConfig+0x104>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d003      	beq.n	80039d8 <TIM_Base_SetConfig+0x38>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	4a35      	ldr	r2, [pc, #212]	; (8003aa8 <TIM_Base_SetConfig+0x108>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d108      	bne.n	80039ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2b      	ldr	r2, [pc, #172]	; (8003a9c <TIM_Base_SetConfig+0xfc>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d01b      	beq.n	8003a2a <TIM_Base_SetConfig+0x8a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f8:	d017      	beq.n	8003a2a <TIM_Base_SetConfig+0x8a>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a28      	ldr	r2, [pc, #160]	; (8003aa0 <TIM_Base_SetConfig+0x100>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <TIM_Base_SetConfig+0x8a>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a27      	ldr	r2, [pc, #156]	; (8003aa4 <TIM_Base_SetConfig+0x104>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00f      	beq.n	8003a2a <TIM_Base_SetConfig+0x8a>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a26      	ldr	r2, [pc, #152]	; (8003aa8 <TIM_Base_SetConfig+0x108>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d00b      	beq.n	8003a2a <TIM_Base_SetConfig+0x8a>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a25      	ldr	r2, [pc, #148]	; (8003aac <TIM_Base_SetConfig+0x10c>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d007      	beq.n	8003a2a <TIM_Base_SetConfig+0x8a>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a24      	ldr	r2, [pc, #144]	; (8003ab0 <TIM_Base_SetConfig+0x110>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d003      	beq.n	8003a2a <TIM_Base_SetConfig+0x8a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a23      	ldr	r2, [pc, #140]	; (8003ab4 <TIM_Base_SetConfig+0x114>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d108      	bne.n	8003a3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	695b      	ldr	r3, [r3, #20]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a0e      	ldr	r2, [pc, #56]	; (8003a9c <TIM_Base_SetConfig+0xfc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d103      	bne.n	8003a70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d105      	bne.n	8003a8e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f023 0201 	bic.w	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	611a      	str	r2, [r3, #16]
  }
}
 8003a8e:	bf00      	nop
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40010000 	.word	0x40010000
 8003aa0:	40000400 	.word	0x40000400
 8003aa4:	40000800 	.word	0x40000800
 8003aa8:	40000c00 	.word	0x40000c00
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40014400 	.word	0x40014400
 8003ab4:	40014800 	.word	0x40014800

08003ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	f023 0201 	bic.w	r2, r3, #1
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f023 030a 	bic.w	r3, r3, #10
 8003af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	697a      	ldr	r2, [r7, #20]
 8003b08:	621a      	str	r2, [r3, #32]
}
 8003b0a:	bf00      	nop
 8003b0c:	371c      	adds	r7, #28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr

08003b16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f023 0210 	bic.w	r2, r3, #16
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b40:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	031b      	lsls	r3, r3, #12
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b52:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	697a      	ldr	r2, [r7, #20]
 8003b68:	621a      	str	r2, [r3, #32]
}
 8003b6a:	bf00      	nop
 8003b6c:	371c      	adds	r7, #28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr

08003b76 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b76:	b480      	push	{r7}
 8003b78:	b085      	sub	sp, #20
 8003b7a:	af00      	add	r7, sp, #0
 8003b7c:	6078      	str	r0, [r7, #4]
 8003b7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f043 0307 	orr.w	r3, r3, #7
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	609a      	str	r2, [r3, #8]
}
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
 8003bb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	021a      	lsls	r2, r3, #8
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	609a      	str	r2, [r3, #8]
}
 8003be0:	bf00      	nop
 8003be2:	371c      	adds	r7, #28
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d101      	bne.n	8003c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e050      	b.n	8003ca6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2202      	movs	r2, #2
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1c      	ldr	r2, [pc, #112]	; (8003cb4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d018      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c50:	d013      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a18      	ldr	r2, [pc, #96]	; (8003cb8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00e      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a16      	ldr	r2, [pc, #88]	; (8003cbc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d009      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a15      	ldr	r2, [pc, #84]	; (8003cc0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d004      	beq.n	8003c7a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a13      	ldr	r2, [pc, #76]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d10c      	bne.n	8003c94 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	68ba      	ldr	r2, [r7, #8]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68ba      	ldr	r2, [r7, #8]
 8003c92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop
 8003cb4:	40010000 	.word	0x40010000
 8003cb8:	40000400 	.word	0x40000400
 8003cbc:	40000800 	.word	0x40000800
 8003cc0:	40000c00 	.word	0x40000c00
 8003cc4:	40014000 	.word	0x40014000

08003cc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e042      	b.n	8003d88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fd fb3c 	bl	8001394 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2224      	movs	r2, #36	; 0x24
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f973 	bl	8004020 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08a      	sub	sp, #40	; 0x28
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d175      	bne.n	8003e9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_UART_Transmit+0x2c>
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e06e      	b.n	8003e9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2221      	movs	r2, #33	; 0x21
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dce:	f7fd fc35 	bl	800163c <HAL_GetTick>
 8003dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	88fa      	ldrh	r2, [r7, #6]
 8003dd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	88fa      	ldrh	r2, [r7, #6]
 8003dde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de8:	d108      	bne.n	8003dfc <HAL_UART_Transmit+0x6c>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d104      	bne.n	8003dfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	e003      	b.n	8003e04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e04:	e02e      	b.n	8003e64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2180      	movs	r1, #128	; 0x80
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 f848 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d005      	beq.n	8003e28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2220      	movs	r2, #32
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003e24:	2303      	movs	r3, #3
 8003e26:	e03a      	b.n	8003e9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d10b      	bne.n	8003e46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	461a      	mov	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	3302      	adds	r3, #2
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	e007      	b.n	8003e56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	781a      	ldrb	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	3301      	adds	r3, #1
 8003e54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e68:	b29b      	uxth	r3, r3
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1cb      	bne.n	8003e06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	2200      	movs	r2, #0
 8003e76:	2140      	movs	r1, #64	; 0x40
 8003e78:	68f8      	ldr	r0, [r7, #12]
 8003e7a:	f000 f814 	bl	8003ea6 <UART_WaitOnFlagUntilTimeout>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d005      	beq.n	8003e90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2220      	movs	r2, #32
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e006      	b.n	8003e9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e000      	b.n	8003e9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e9c:	2302      	movs	r3, #2
  }
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3720      	adds	r7, #32
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b086      	sub	sp, #24
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb6:	e03b      	b.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ebe:	d037      	beq.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec0:	f7fd fbbc 	bl	800163c <HAL_GetTick>
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	6a3a      	ldr	r2, [r7, #32]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d302      	bcc.n	8003ed6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e03a      	b.n	8003f50 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f003 0304 	and.w	r3, r3, #4
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d023      	beq.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b80      	cmp	r3, #128	; 0x80
 8003eec:	d020      	beq.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	2b40      	cmp	r3, #64	; 0x40
 8003ef2:	d01d      	beq.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d116      	bne.n	8003f30 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f02:	2300      	movs	r3, #0
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f81d 	bl	8003f58 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2208      	movs	r2, #8
 8003f22:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e00f      	b.n	8003f50 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	4013      	ands	r3, r2
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	bf0c      	ite	eq
 8003f40:	2301      	moveq	r3, #1
 8003f42:	2300      	movne	r3, #0
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	461a      	mov	r2, r3
 8003f48:	79fb      	ldrb	r3, [r7, #7]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d0b4      	beq.n	8003eb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b095      	sub	sp, #84	; 0x54
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	330c      	adds	r3, #12
 8003f66:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f6a:	e853 3f00 	ldrex	r3, [r3]
 8003f6e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f72:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	330c      	adds	r3, #12
 8003f7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f80:	643a      	str	r2, [r7, #64]	; 0x40
 8003f82:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f84:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f88:	e841 2300 	strex	r3, r2, [r1]
 8003f8c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d1e5      	bne.n	8003f60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3314      	adds	r3, #20
 8003f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	e853 3f00 	ldrex	r3, [r3]
 8003fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f023 0301 	bic.w	r3, r3, #1
 8003faa:	64bb      	str	r3, [r7, #72]	; 0x48
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3314      	adds	r3, #20
 8003fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fbc:	e841 2300 	strex	r3, r2, [r1]
 8003fc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1e5      	bne.n	8003f94 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d119      	bne.n	8004004 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f023 0310 	bic.w	r3, r3, #16
 8003fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ff0:	61ba      	str	r2, [r7, #24]
 8003ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6979      	ldr	r1, [r7, #20]
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e5      	bne.n	8003fd0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004012:	bf00      	nop
 8004014:	3754      	adds	r7, #84	; 0x54
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004020:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004024:	b0c0      	sub	sp, #256	; 0x100
 8004026:	af00      	add	r7, sp, #0
 8004028:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800402c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800403c:	68d9      	ldr	r1, [r3, #12]
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	ea40 0301 	orr.w	r3, r0, r1
 8004048:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800404a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	431a      	orrs	r2, r3
 8004058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800405c:	695b      	ldr	r3, [r3, #20]
 800405e:	431a      	orrs	r2, r3
 8004060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800406c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004078:	f021 010c 	bic.w	r1, r1, #12
 800407c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004086:	430b      	orrs	r3, r1
 8004088:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800408a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	695b      	ldr	r3, [r3, #20]
 8004092:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409a:	6999      	ldr	r1, [r3, #24]
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	ea40 0301 	orr.w	r3, r0, r1
 80040a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	4b8f      	ldr	r3, [pc, #572]	; (80042ec <UART_SetConfig+0x2cc>)
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d005      	beq.n	80040c0 <UART_SetConfig+0xa0>
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	4b8d      	ldr	r3, [pc, #564]	; (80042f0 <UART_SetConfig+0x2d0>)
 80040bc:	429a      	cmp	r2, r3
 80040be:	d104      	bne.n	80040ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040c0:	f7fe ffd4 	bl	800306c <HAL_RCC_GetPCLK2Freq>
 80040c4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80040c8:	e003      	b.n	80040d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040ca:	f7fe ffbb 	bl	8003044 <HAL_RCC_GetPCLK1Freq>
 80040ce:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040dc:	f040 810c 	bne.w	80042f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e4:	2200      	movs	r2, #0
 80040e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80040ea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80040ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80040f2:	4622      	mov	r2, r4
 80040f4:	462b      	mov	r3, r5
 80040f6:	1891      	adds	r1, r2, r2
 80040f8:	65b9      	str	r1, [r7, #88]	; 0x58
 80040fa:	415b      	adcs	r3, r3
 80040fc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004102:	4621      	mov	r1, r4
 8004104:	eb12 0801 	adds.w	r8, r2, r1
 8004108:	4629      	mov	r1, r5
 800410a:	eb43 0901 	adc.w	r9, r3, r1
 800410e:	f04f 0200 	mov.w	r2, #0
 8004112:	f04f 0300 	mov.w	r3, #0
 8004116:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800411a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800411e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004122:	4690      	mov	r8, r2
 8004124:	4699      	mov	r9, r3
 8004126:	4623      	mov	r3, r4
 8004128:	eb18 0303 	adds.w	r3, r8, r3
 800412c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004130:	462b      	mov	r3, r5
 8004132:	eb49 0303 	adc.w	r3, r9, r3
 8004136:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800413a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004146:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800414a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800414e:	460b      	mov	r3, r1
 8004150:	18db      	adds	r3, r3, r3
 8004152:	653b      	str	r3, [r7, #80]	; 0x50
 8004154:	4613      	mov	r3, r2
 8004156:	eb42 0303 	adc.w	r3, r2, r3
 800415a:	657b      	str	r3, [r7, #84]	; 0x54
 800415c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004160:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004164:	f7fc fc02 	bl	800096c <__aeabi_uldivmod>
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4b61      	ldr	r3, [pc, #388]	; (80042f4 <UART_SetConfig+0x2d4>)
 800416e:	fba3 2302 	umull	r2, r3, r3, r2
 8004172:	095b      	lsrs	r3, r3, #5
 8004174:	011c      	lsls	r4, r3, #4
 8004176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800417a:	2200      	movs	r2, #0
 800417c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004180:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004184:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004188:	4642      	mov	r2, r8
 800418a:	464b      	mov	r3, r9
 800418c:	1891      	adds	r1, r2, r2
 800418e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004190:	415b      	adcs	r3, r3
 8004192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004194:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004198:	4641      	mov	r1, r8
 800419a:	eb12 0a01 	adds.w	sl, r2, r1
 800419e:	4649      	mov	r1, r9
 80041a0:	eb43 0b01 	adc.w	fp, r3, r1
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80041b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80041b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041b8:	4692      	mov	sl, r2
 80041ba:	469b      	mov	fp, r3
 80041bc:	4643      	mov	r3, r8
 80041be:	eb1a 0303 	adds.w	r3, sl, r3
 80041c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80041c6:	464b      	mov	r3, r9
 80041c8:	eb4b 0303 	adc.w	r3, fp, r3
 80041cc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80041d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041dc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80041e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80041e4:	460b      	mov	r3, r1
 80041e6:	18db      	adds	r3, r3, r3
 80041e8:	643b      	str	r3, [r7, #64]	; 0x40
 80041ea:	4613      	mov	r3, r2
 80041ec:	eb42 0303 	adc.w	r3, r2, r3
 80041f0:	647b      	str	r3, [r7, #68]	; 0x44
 80041f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80041f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80041fa:	f7fc fbb7 	bl	800096c <__aeabi_uldivmod>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	4611      	mov	r1, r2
 8004204:	4b3b      	ldr	r3, [pc, #236]	; (80042f4 <UART_SetConfig+0x2d4>)
 8004206:	fba3 2301 	umull	r2, r3, r3, r1
 800420a:	095b      	lsrs	r3, r3, #5
 800420c:	2264      	movs	r2, #100	; 0x64
 800420e:	fb02 f303 	mul.w	r3, r2, r3
 8004212:	1acb      	subs	r3, r1, r3
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800421a:	4b36      	ldr	r3, [pc, #216]	; (80042f4 <UART_SetConfig+0x2d4>)
 800421c:	fba3 2302 	umull	r2, r3, r3, r2
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004228:	441c      	add	r4, r3
 800422a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800422e:	2200      	movs	r2, #0
 8004230:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004234:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004238:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800423c:	4642      	mov	r2, r8
 800423e:	464b      	mov	r3, r9
 8004240:	1891      	adds	r1, r2, r2
 8004242:	63b9      	str	r1, [r7, #56]	; 0x38
 8004244:	415b      	adcs	r3, r3
 8004246:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004248:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800424c:	4641      	mov	r1, r8
 800424e:	1851      	adds	r1, r2, r1
 8004250:	6339      	str	r1, [r7, #48]	; 0x30
 8004252:	4649      	mov	r1, r9
 8004254:	414b      	adcs	r3, r1
 8004256:	637b      	str	r3, [r7, #52]	; 0x34
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	f04f 0300 	mov.w	r3, #0
 8004260:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004264:	4659      	mov	r1, fp
 8004266:	00cb      	lsls	r3, r1, #3
 8004268:	4651      	mov	r1, sl
 800426a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800426e:	4651      	mov	r1, sl
 8004270:	00ca      	lsls	r2, r1, #3
 8004272:	4610      	mov	r0, r2
 8004274:	4619      	mov	r1, r3
 8004276:	4603      	mov	r3, r0
 8004278:	4642      	mov	r2, r8
 800427a:	189b      	adds	r3, r3, r2
 800427c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004280:	464b      	mov	r3, r9
 8004282:	460a      	mov	r2, r1
 8004284:	eb42 0303 	adc.w	r3, r2, r3
 8004288:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004298:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800429c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042a0:	460b      	mov	r3, r1
 80042a2:	18db      	adds	r3, r3, r3
 80042a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a6:	4613      	mov	r3, r2
 80042a8:	eb42 0303 	adc.w	r3, r2, r3
 80042ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80042b6:	f7fc fb59 	bl	800096c <__aeabi_uldivmod>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4b0d      	ldr	r3, [pc, #52]	; (80042f4 <UART_SetConfig+0x2d4>)
 80042c0:	fba3 1302 	umull	r1, r3, r3, r2
 80042c4:	095b      	lsrs	r3, r3, #5
 80042c6:	2164      	movs	r1, #100	; 0x64
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	00db      	lsls	r3, r3, #3
 80042d0:	3332      	adds	r3, #50	; 0x32
 80042d2:	4a08      	ldr	r2, [pc, #32]	; (80042f4 <UART_SetConfig+0x2d4>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	f003 0207 	and.w	r2, r3, #7
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4422      	add	r2, r4
 80042e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042e8:	e106      	b.n	80044f8 <UART_SetConfig+0x4d8>
 80042ea:	bf00      	nop
 80042ec:	40011000 	.word	0x40011000
 80042f0:	40011400 	.word	0x40011400
 80042f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042fc:	2200      	movs	r2, #0
 80042fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004302:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004306:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800430a:	4642      	mov	r2, r8
 800430c:	464b      	mov	r3, r9
 800430e:	1891      	adds	r1, r2, r2
 8004310:	6239      	str	r1, [r7, #32]
 8004312:	415b      	adcs	r3, r3
 8004314:	627b      	str	r3, [r7, #36]	; 0x24
 8004316:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800431a:	4641      	mov	r1, r8
 800431c:	1854      	adds	r4, r2, r1
 800431e:	4649      	mov	r1, r9
 8004320:	eb43 0501 	adc.w	r5, r3, r1
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	00eb      	lsls	r3, r5, #3
 800432e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004332:	00e2      	lsls	r2, r4, #3
 8004334:	4614      	mov	r4, r2
 8004336:	461d      	mov	r5, r3
 8004338:	4643      	mov	r3, r8
 800433a:	18e3      	adds	r3, r4, r3
 800433c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004340:	464b      	mov	r3, r9
 8004342:	eb45 0303 	adc.w	r3, r5, r3
 8004346:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004356:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800435a:	f04f 0200 	mov.w	r2, #0
 800435e:	f04f 0300 	mov.w	r3, #0
 8004362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004366:	4629      	mov	r1, r5
 8004368:	008b      	lsls	r3, r1, #2
 800436a:	4621      	mov	r1, r4
 800436c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004370:	4621      	mov	r1, r4
 8004372:	008a      	lsls	r2, r1, #2
 8004374:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004378:	f7fc faf8 	bl	800096c <__aeabi_uldivmod>
 800437c:	4602      	mov	r2, r0
 800437e:	460b      	mov	r3, r1
 8004380:	4b60      	ldr	r3, [pc, #384]	; (8004504 <UART_SetConfig+0x4e4>)
 8004382:	fba3 2302 	umull	r2, r3, r3, r2
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	011c      	lsls	r4, r3, #4
 800438a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800438e:	2200      	movs	r2, #0
 8004390:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004394:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004398:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800439c:	4642      	mov	r2, r8
 800439e:	464b      	mov	r3, r9
 80043a0:	1891      	adds	r1, r2, r2
 80043a2:	61b9      	str	r1, [r7, #24]
 80043a4:	415b      	adcs	r3, r3
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043ac:	4641      	mov	r1, r8
 80043ae:	1851      	adds	r1, r2, r1
 80043b0:	6139      	str	r1, [r7, #16]
 80043b2:	4649      	mov	r1, r9
 80043b4:	414b      	adcs	r3, r1
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043c4:	4659      	mov	r1, fp
 80043c6:	00cb      	lsls	r3, r1, #3
 80043c8:	4651      	mov	r1, sl
 80043ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ce:	4651      	mov	r1, sl
 80043d0:	00ca      	lsls	r2, r1, #3
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	4603      	mov	r3, r0
 80043d8:	4642      	mov	r2, r8
 80043da:	189b      	adds	r3, r3, r2
 80043dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80043e0:	464b      	mov	r3, r9
 80043e2:	460a      	mov	r2, r1
 80043e4:	eb42 0303 	adc.w	r3, r2, r3
 80043e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80043f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	f04f 0300 	mov.w	r3, #0
 8004400:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004404:	4649      	mov	r1, r9
 8004406:	008b      	lsls	r3, r1, #2
 8004408:	4641      	mov	r1, r8
 800440a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800440e:	4641      	mov	r1, r8
 8004410:	008a      	lsls	r2, r1, #2
 8004412:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004416:	f7fc faa9 	bl	800096c <__aeabi_uldivmod>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4611      	mov	r1, r2
 8004420:	4b38      	ldr	r3, [pc, #224]	; (8004504 <UART_SetConfig+0x4e4>)
 8004422:	fba3 2301 	umull	r2, r3, r3, r1
 8004426:	095b      	lsrs	r3, r3, #5
 8004428:	2264      	movs	r2, #100	; 0x64
 800442a:	fb02 f303 	mul.w	r3, r2, r3
 800442e:	1acb      	subs	r3, r1, r3
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	3332      	adds	r3, #50	; 0x32
 8004434:	4a33      	ldr	r2, [pc, #204]	; (8004504 <UART_SetConfig+0x4e4>)
 8004436:	fba2 2303 	umull	r2, r3, r2, r3
 800443a:	095b      	lsrs	r3, r3, #5
 800443c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004440:	441c      	add	r4, r3
 8004442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004446:	2200      	movs	r2, #0
 8004448:	673b      	str	r3, [r7, #112]	; 0x70
 800444a:	677a      	str	r2, [r7, #116]	; 0x74
 800444c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004450:	4642      	mov	r2, r8
 8004452:	464b      	mov	r3, r9
 8004454:	1891      	adds	r1, r2, r2
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	415b      	adcs	r3, r3
 800445a:	60fb      	str	r3, [r7, #12]
 800445c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004460:	4641      	mov	r1, r8
 8004462:	1851      	adds	r1, r2, r1
 8004464:	6039      	str	r1, [r7, #0]
 8004466:	4649      	mov	r1, r9
 8004468:	414b      	adcs	r3, r1
 800446a:	607b      	str	r3, [r7, #4]
 800446c:	f04f 0200 	mov.w	r2, #0
 8004470:	f04f 0300 	mov.w	r3, #0
 8004474:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004478:	4659      	mov	r1, fp
 800447a:	00cb      	lsls	r3, r1, #3
 800447c:	4651      	mov	r1, sl
 800447e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004482:	4651      	mov	r1, sl
 8004484:	00ca      	lsls	r2, r1, #3
 8004486:	4610      	mov	r0, r2
 8004488:	4619      	mov	r1, r3
 800448a:	4603      	mov	r3, r0
 800448c:	4642      	mov	r2, r8
 800448e:	189b      	adds	r3, r3, r2
 8004490:	66bb      	str	r3, [r7, #104]	; 0x68
 8004492:	464b      	mov	r3, r9
 8004494:	460a      	mov	r2, r1
 8004496:	eb42 0303 	adc.w	r3, r2, r3
 800449a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	663b      	str	r3, [r7, #96]	; 0x60
 80044a6:	667a      	str	r2, [r7, #100]	; 0x64
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	f04f 0300 	mov.w	r3, #0
 80044b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80044b4:	4649      	mov	r1, r9
 80044b6:	008b      	lsls	r3, r1, #2
 80044b8:	4641      	mov	r1, r8
 80044ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044be:	4641      	mov	r1, r8
 80044c0:	008a      	lsls	r2, r1, #2
 80044c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80044c6:	f7fc fa51 	bl	800096c <__aeabi_uldivmod>
 80044ca:	4602      	mov	r2, r0
 80044cc:	460b      	mov	r3, r1
 80044ce:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <UART_SetConfig+0x4e4>)
 80044d0:	fba3 1302 	umull	r1, r3, r3, r2
 80044d4:	095b      	lsrs	r3, r3, #5
 80044d6:	2164      	movs	r1, #100	; 0x64
 80044d8:	fb01 f303 	mul.w	r3, r1, r3
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	3332      	adds	r3, #50	; 0x32
 80044e2:	4a08      	ldr	r2, [pc, #32]	; (8004504 <UART_SetConfig+0x4e4>)
 80044e4:	fba2 2303 	umull	r2, r3, r2, r3
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	f003 020f 	and.w	r2, r3, #15
 80044ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4422      	add	r2, r4
 80044f6:	609a      	str	r2, [r3, #8]
}
 80044f8:	bf00      	nop
 80044fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80044fe:	46bd      	mov	sp, r7
 8004500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004504:	51eb851f 	.word	0x51eb851f

08004508 <I2C_LCD_ExpanderWrite>:
static I2C_LCD_InfoParam_t I2C_LCD_InfoParam_g[I2C_LCD_MAX];

/*---------------------[STATIC INTERNAL FUNCTIONS]-----------------------*/

static void I2C_LCD_ExpanderWrite(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af02      	add	r7, sp, #8
 800450e:	4603      	mov	r3, r0
 8004510:	460a      	mov	r2, r1
 8004512:	71fb      	strb	r3, [r7, #7]
 8004514:	4613      	mov	r3, r2
 8004516:	71bb      	strb	r3, [r7, #6]
    uint8_t TxData = (DATA) | I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal;
 8004518:	79fb      	ldrb	r3, [r7, #7]
 800451a:	4a14      	ldr	r2, [pc, #80]	; (800456c <I2C_LCD_ExpanderWrite+0x64>)
 800451c:	005b      	lsls	r3, r3, #1
 800451e:	4413      	add	r3, r2
 8004520:	785a      	ldrb	r2, [r3, #1]
 8004522:	79bb      	ldrb	r3, [r7, #6]
 8004524:	4313      	orrs	r3, r2
 8004526:	b2db      	uxtb	r3, r3
 8004528:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Master_Transmit(I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_Handle, (I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_Address<<1), &TxData, sizeof(TxData), 100);
 800452a:	79fa      	ldrb	r2, [r7, #7]
 800452c:	4910      	ldr	r1, [pc, #64]	; (8004570 <I2C_LCD_ExpanderWrite+0x68>)
 800452e:	4613      	mov	r3, r2
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4413      	add	r3, r2
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	3304      	adds	r3, #4
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	79fa      	ldrb	r2, [r7, #7]
 800453e:	490c      	ldr	r1, [pc, #48]	; (8004570 <I2C_LCD_ExpanderWrite+0x68>)
 8004540:	4613      	mov	r3, r2
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	4413      	add	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	3308      	adds	r3, #8
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	b29b      	uxth	r3, r3
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	b299      	uxth	r1, r3
 8004554:	f107 020f 	add.w	r2, r7, #15
 8004558:	2364      	movs	r3, #100	; 0x64
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	2301      	movs	r3, #1
 800455e:	f7fd fda7 	bl	80020b0 <HAL_I2C_Master_Transmit>
}
 8004562:	bf00      	nop
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000218 	.word	0x20000218
 8004570:	0800628c 	.word	0x0800628c

08004574 <I2C_LCD_EnPulse>:

static void I2C_LCD_EnPulse(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	4603      	mov	r3, r0
 800457c:	460a      	mov	r2, r1
 800457e:	71fb      	strb	r3, [r7, #7]
 8004580:	4613      	mov	r3, r2
 8004582:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA | EN)); // En high
 8004584:	79bb      	ldrb	r3, [r7, #6]
 8004586:	f043 0304 	orr.w	r3, r3, #4
 800458a:	b2da      	uxtb	r2, r3
 800458c:	79fb      	ldrb	r3, [r7, #7]
 800458e:	4611      	mov	r1, r2
 8004590:	4618      	mov	r0, r3
 8004592:	f7ff ffb9 	bl	8004508 <I2C_LCD_ExpanderWrite>
	DELAY_US(2); // enable pulse must be >450ns
 8004596:	4b22      	ldr	r3, [pc, #136]	; (8004620 <I2C_LCD_EnPulse+0xac>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	4b21      	ldr	r3, [pc, #132]	; (8004624 <I2C_LCD_EnPulse+0xb0>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a21      	ldr	r2, [pc, #132]	; (8004628 <I2C_LCD_EnPulse+0xb4>)
 80045a2:	fba2 2303 	umull	r2, r3, r2, r3
 80045a6:	0c9b      	lsrs	r3, r3, #18
 80045a8:	005a      	lsls	r2, r3, #1
 80045aa:	4b1e      	ldr	r3, [pc, #120]	; (8004624 <I2C_LCD_EnPulse+0xb0>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	491e      	ldr	r1, [pc, #120]	; (8004628 <I2C_LCD_EnPulse+0xb4>)
 80045b0:	fba1 1303 	umull	r1, r3, r1, r3
 80045b4:	0c9b      	lsrs	r3, r3, #18
 80045b6:	085b      	lsrs	r3, r3, #1
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <I2C_LCD_EnPulse+0xac>)
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	1ad3      	subs	r3, r2, r3
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d8f8      	bhi.n	80045bc <I2C_LCD_EnPulse+0x48>

    I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, (DATA & ~EN)); // En low
 80045ca:	79bb      	ldrb	r3, [r7, #6]
 80045cc:	f023 0304 	bic.w	r3, r3, #4
 80045d0:	b2da      	uxtb	r2, r3
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	4611      	mov	r1, r2
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff ff96 	bl	8004508 <I2C_LCD_ExpanderWrite>
    DELAY_US(50); // commands need > 37us to settle
 80045dc:	4b10      	ldr	r3, [pc, #64]	; (8004620 <I2C_LCD_EnPulse+0xac>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	4b10      	ldr	r3, [pc, #64]	; (8004624 <I2C_LCD_EnPulse+0xb0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a10      	ldr	r2, [pc, #64]	; (8004628 <I2C_LCD_EnPulse+0xb4>)
 80045e8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ec:	0c9b      	lsrs	r3, r3, #18
 80045ee:	2232      	movs	r2, #50	; 0x32
 80045f0:	fb03 f202 	mul.w	r2, r3, r2
 80045f4:	4b0b      	ldr	r3, [pc, #44]	; (8004624 <I2C_LCD_EnPulse+0xb0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	490b      	ldr	r1, [pc, #44]	; (8004628 <I2C_LCD_EnPulse+0xb4>)
 80045fa:	fba1 1303 	umull	r1, r3, r1, r3
 80045fe:	0c9b      	lsrs	r3, r3, #18
 8004600:	085b      	lsrs	r3, r3, #1
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	4b06      	ldr	r3, [pc, #24]	; (8004620 <I2C_LCD_EnPulse+0xac>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	429a      	cmp	r2, r3
 8004612:	d8f8      	bhi.n	8004606 <I2C_LCD_EnPulse+0x92>
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	e000e010 	.word	0xe000e010
 8004624:	20000000 	.word	0x20000000
 8004628:	431bde83 	.word	0x431bde83

0800462c <I2C_LCD_Write4Bits>:

static void I2C_LCD_Write4Bits(uint8_t I2C_LCD_InstanceIndex, uint8_t Val)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b082      	sub	sp, #8
 8004630:	af00      	add	r7, sp, #0
 8004632:	4603      	mov	r3, r0
 8004634:	460a      	mov	r2, r1
 8004636:	71fb      	strb	r3, [r7, #7]
 8004638:	4613      	mov	r3, r2
 800463a:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_ExpanderWrite(I2C_LCD_InstanceIndex, Val);
 800463c:	79ba      	ldrb	r2, [r7, #6]
 800463e:	79fb      	ldrb	r3, [r7, #7]
 8004640:	4611      	mov	r1, r2
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff ff60 	bl	8004508 <I2C_LCD_ExpanderWrite>
	I2C_LCD_EnPulse(I2C_LCD_InstanceIndex, Val);
 8004648:	79ba      	ldrb	r2, [r7, #6]
 800464a:	79fb      	ldrb	r3, [r7, #7]
 800464c:	4611      	mov	r1, r2
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff ff90 	bl	8004574 <I2C_LCD_EnPulse>
}
 8004654:	bf00      	nop
 8004656:	3708      	adds	r7, #8
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}

0800465c <I2C_LCD_Send>:

static void I2C_LCD_Send(uint8_t I2C_LCD_InstanceIndex, uint8_t Val, uint8_t Mode)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	4603      	mov	r3, r0
 8004664:	71fb      	strb	r3, [r7, #7]
 8004666:	460b      	mov	r3, r1
 8004668:	71bb      	strb	r3, [r7, #6]
 800466a:	4613      	mov	r3, r2
 800466c:	717b      	strb	r3, [r7, #5]
    uint8_t HighNib = Val & 0xF0;
 800466e:	79bb      	ldrb	r3, [r7, #6]
 8004670:	f023 030f 	bic.w	r3, r3, #15
 8004674:	73fb      	strb	r3, [r7, #15]
    uint8_t LowNib = (Val << 4) & 0xF0;
 8004676:	79bb      	ldrb	r3, [r7, #6]
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	73bb      	strb	r3, [r7, #14]
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (HighNib) | Mode);
 800467c:	7bfa      	ldrb	r2, [r7, #15]
 800467e:	797b      	ldrb	r3, [r7, #5]
 8004680:	4313      	orrs	r3, r2
 8004682:	b2da      	uxtb	r2, r3
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f7ff ffcf 	bl	800462c <I2C_LCD_Write4Bits>
    I2C_LCD_Write4Bits(I2C_LCD_InstanceIndex, (LowNib) | Mode);
 800468e:	7bba      	ldrb	r2, [r7, #14]
 8004690:	797b      	ldrb	r3, [r7, #5]
 8004692:	4313      	orrs	r3, r2
 8004694:	b2da      	uxtb	r2, r3
 8004696:	79fb      	ldrb	r3, [r7, #7]
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff ffc6 	bl	800462c <I2C_LCD_Write4Bits>
}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <I2C_LCD_Cmd>:

static void I2C_LCD_Cmd(uint8_t I2C_LCD_InstanceIndex, uint8_t CMD)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	4603      	mov	r3, r0
 80046b0:	460a      	mov	r2, r1
 80046b2:	71fb      	strb	r3, [r7, #7]
 80046b4:	4613      	mov	r3, r2
 80046b6:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, CMD, 0);
 80046b8:	79b9      	ldrb	r1, [r7, #6]
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	2200      	movs	r2, #0
 80046be:	4618      	mov	r0, r3
 80046c0:	f7ff ffcc 	bl	800465c <I2C_LCD_Send>
}
 80046c4:	bf00      	nop
 80046c6:	3708      	adds	r7, #8
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <I2C_LCD_Data>:

static void I2C_LCD_Data(uint8_t I2C_LCD_InstanceIndex, uint8_t DATA)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	4603      	mov	r3, r0
 80046d4:	460a      	mov	r2, r1
 80046d6:	71fb      	strb	r3, [r7, #7]
 80046d8:	4613      	mov	r3, r2
 80046da:	71bb      	strb	r3, [r7, #6]
	I2C_LCD_Send(I2C_LCD_InstanceIndex, DATA, 1);
 80046dc:	79b9      	ldrb	r1, [r7, #6]
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	2201      	movs	r2, #1
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff ffba 	bl	800465c <I2C_LCD_Send>
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <I2C_LCD_Init>:
//=========================================================================================================================

/*-----------------------[USER EXTERNAL FUNCTIONS]-----------------------*/

void I2C_LCD_Init(uint8_t I2C_LCD_InstanceIndex)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b08a      	sub	sp, #40	; 0x28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	4603      	mov	r3, r0
 80046f8:	71fb      	strb	r3, [r7, #7]
	// According To Datasheet, We Must Wait At Least 40ms After Power Up Before Interacting With The LCD Module
	while(HAL_GetTick() < 50);
 80046fa:	bf00      	nop
 80046fc:	f7fc ff9e 	bl	800163c <HAL_GetTick>
 8004700:	4603      	mov	r3, r0
 8004702:	2b31      	cmp	r3, #49	; 0x31
 8004704:	d9fa      	bls.n	80046fc <I2C_LCD_Init+0xc>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	2130      	movs	r1, #48	; 0x30
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff ffcc 	bl	80046a8 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8004710:	2300      	movs	r3, #0
 8004712:	627b      	str	r3, [r7, #36]	; 0x24
 8004714:	e01f      	b.n	8004756 <I2C_LCD_Init+0x66>
 8004716:	4b4b      	ldr	r3, [pc, #300]	; (8004844 <I2C_LCD_Init+0x154>)
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	4b4a      	ldr	r3, [pc, #296]	; (8004848 <I2C_LCD_Init+0x158>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a4a      	ldr	r2, [pc, #296]	; (800484c <I2C_LCD_Init+0x15c>)
 8004722:	fba2 2303 	umull	r2, r3, r2, r3
 8004726:	0c9b      	lsrs	r3, r3, #18
 8004728:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800472c:	fb03 f202 	mul.w	r2, r3, r2
 8004730:	4b45      	ldr	r3, [pc, #276]	; (8004848 <I2C_LCD_Init+0x158>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4945      	ldr	r1, [pc, #276]	; (800484c <I2C_LCD_Init+0x15c>)
 8004736:	fba1 1303 	umull	r1, r3, r1, r3
 800473a:	0c9b      	lsrs	r3, r3, #18
 800473c:	085b      	lsrs	r3, r3, #1
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	4b40      	ldr	r3, [pc, #256]	; (8004844 <I2C_LCD_Init+0x154>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	429a      	cmp	r2, r3
 800474e:	d8f8      	bhi.n	8004742 <I2C_LCD_Init+0x52>
 8004750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004752:	3301      	adds	r3, #1
 8004754:	627b      	str	r3, [r7, #36]	; 0x24
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	2b04      	cmp	r3, #4
 800475a:	d9dc      	bls.n	8004716 <I2C_LCD_Init+0x26>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 800475c:	79fb      	ldrb	r3, [r7, #7]
 800475e:	2130      	movs	r1, #48	; 0x30
 8004760:	4618      	mov	r0, r3
 8004762:	f7ff ffa1 	bl	80046a8 <I2C_LCD_Cmd>
    DELAY_MS(5);  // Delay > 4.1ms
 8004766:	2300      	movs	r3, #0
 8004768:	623b      	str	r3, [r7, #32]
 800476a:	e01f      	b.n	80047ac <I2C_LCD_Init+0xbc>
 800476c:	4b35      	ldr	r3, [pc, #212]	; (8004844 <I2C_LCD_Init+0x154>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	617b      	str	r3, [r7, #20]
 8004772:	4b35      	ldr	r3, [pc, #212]	; (8004848 <I2C_LCD_Init+0x158>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a35      	ldr	r2, [pc, #212]	; (800484c <I2C_LCD_Init+0x15c>)
 8004778:	fba2 2303 	umull	r2, r3, r2, r3
 800477c:	0c9b      	lsrs	r3, r3, #18
 800477e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004782:	fb03 f202 	mul.w	r2, r3, r2
 8004786:	4b30      	ldr	r3, [pc, #192]	; (8004848 <I2C_LCD_Init+0x158>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4930      	ldr	r1, [pc, #192]	; (800484c <I2C_LCD_Init+0x15c>)
 800478c:	fba1 1303 	umull	r1, r3, r1, r3
 8004790:	0c9b      	lsrs	r3, r3, #18
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	613b      	str	r3, [r7, #16]
 8004798:	4b2a      	ldr	r3, [pc, #168]	; (8004844 <I2C_LCD_Init+0x154>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d8f8      	bhi.n	8004798 <I2C_LCD_Init+0xa8>
 80047a6:	6a3b      	ldr	r3, [r7, #32]
 80047a8:	3301      	adds	r3, #1
 80047aa:	623b      	str	r3, [r7, #32]
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d9dc      	bls.n	800476c <I2C_LCD_Init+0x7c>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x30);
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	2130      	movs	r1, #48	; 0x30
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff ff76 	bl	80046a8 <I2C_LCD_Cmd>
    DELAY_US(150);  // Delay > 100μs
 80047bc:	4b21      	ldr	r3, [pc, #132]	; (8004844 <I2C_LCD_Init+0x154>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	61fb      	str	r3, [r7, #28]
 80047c2:	4b21      	ldr	r3, [pc, #132]	; (8004848 <I2C_LCD_Init+0x158>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a21      	ldr	r2, [pc, #132]	; (800484c <I2C_LCD_Init+0x15c>)
 80047c8:	fba2 2303 	umull	r2, r3, r2, r3
 80047cc:	0c9b      	lsrs	r3, r3, #18
 80047ce:	2296      	movs	r2, #150	; 0x96
 80047d0:	fb03 f202 	mul.w	r2, r3, r2
 80047d4:	4b1c      	ldr	r3, [pc, #112]	; (8004848 <I2C_LCD_Init+0x158>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	491c      	ldr	r1, [pc, #112]	; (800484c <I2C_LCD_Init+0x15c>)
 80047da:	fba1 1303 	umull	r1, r3, r1, r3
 80047de:	0c9b      	lsrs	r3, r3, #18
 80047e0:	085b      	lsrs	r3, r3, #1
 80047e2:	1ad3      	subs	r3, r2, r3
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	4b17      	ldr	r3, [pc, #92]	; (8004844 <I2C_LCD_Init+0x154>)
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	69fa      	ldr	r2, [r7, #28]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d8f8      	bhi.n	80047e6 <I2C_LCD_Init+0xf6>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, 0x02);
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	2102      	movs	r1, #2
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7ff ff55 	bl	80046a8 <I2C_LCD_Cmd>
    // Configure the LCD
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);
 80047fe:	79fb      	ldrb	r3, [r7, #7]
 8004800:	2128      	movs	r1, #40	; 0x28
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff ff50 	bl	80046a8 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_DISPLAYCONTROL | LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF);
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	210c      	movs	r1, #12
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff ff4b 	bl	80046a8 <I2C_LCD_Cmd>
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_ENTRYMODESET | LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT);
 8004812:	79fb      	ldrb	r3, [r7, #7]
 8004814:	2106      	movs	r1, #6
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff ff46 	bl	80046a8 <I2C_LCD_Cmd>
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].DisplayCtrl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800481c:	79fb      	ldrb	r3, [r7, #7]
 800481e:	4a0c      	ldr	r2, [pc, #48]	; (8004850 <I2C_LCD_Init+0x160>)
 8004820:	2104      	movs	r1, #4
 8004822:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
    I2C_LCD_InfoParam_g[I2C_LCD_InstanceIndex].BacklightVal = LCD_BACKLIGHT;
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	4a09      	ldr	r2, [pc, #36]	; (8004850 <I2C_LCD_Init+0x160>)
 800482a:	005b      	lsls	r3, r3, #1
 800482c:	4413      	add	r3, r2
 800482e:	2208      	movs	r2, #8
 8004830:	705a      	strb	r2, [r3, #1]
    // Clear the LCD
    I2C_LCD_Clear(I2C_LCD_InstanceIndex);
 8004832:	79fb      	ldrb	r3, [r7, #7]
 8004834:	4618      	mov	r0, r3
 8004836:	f000 f80d 	bl	8004854 <I2C_LCD_Clear>
}
 800483a:	bf00      	nop
 800483c:	3728      	adds	r7, #40	; 0x28
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	e000e010 	.word	0xe000e010
 8004848:	20000000 	.word	0x20000000
 800484c:	431bde83 	.word	0x431bde83
 8004850:	20000218 	.word	0x20000218

08004854 <I2C_LCD_Clear>:

void I2C_LCD_Clear(uint8_t I2C_LCD_InstanceIndex)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b086      	sub	sp, #24
 8004858:	af00      	add	r7, sp, #0
 800485a:	4603      	mov	r3, r0
 800485c:	71fb      	strb	r3, [r7, #7]
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_CLEARDISPLAY);
 800485e:	79fb      	ldrb	r3, [r7, #7]
 8004860:	2101      	movs	r1, #1
 8004862:	4618      	mov	r0, r3
 8004864:	f7ff ff20 	bl	80046a8 <I2C_LCD_Cmd>
    DELAY_MS(2);
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]
 800486c:	e01f      	b.n	80048ae <I2C_LCD_Clear+0x5a>
 800486e:	4b14      	ldr	r3, [pc, #80]	; (80048c0 <I2C_LCD_Clear+0x6c>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	4b13      	ldr	r3, [pc, #76]	; (80048c4 <I2C_LCD_Clear+0x70>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a13      	ldr	r2, [pc, #76]	; (80048c8 <I2C_LCD_Clear+0x74>)
 800487a:	fba2 2303 	umull	r2, r3, r2, r3
 800487e:	0c9b      	lsrs	r3, r3, #18
 8004880:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004884:	fb03 f202 	mul.w	r2, r3, r2
 8004888:	4b0e      	ldr	r3, [pc, #56]	; (80048c4 <I2C_LCD_Clear+0x70>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	490e      	ldr	r1, [pc, #56]	; (80048c8 <I2C_LCD_Clear+0x74>)
 800488e:	fba1 1303 	umull	r1, r3, r1, r3
 8004892:	0c9b      	lsrs	r3, r3, #18
 8004894:	085b      	lsrs	r3, r3, #1
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	4b09      	ldr	r3, [pc, #36]	; (80048c0 <I2C_LCD_Clear+0x6c>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d8f8      	bhi.n	800489a <I2C_LCD_Clear+0x46>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	3301      	adds	r3, #1
 80048ac:	617b      	str	r3, [r7, #20]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d9dc      	bls.n	800486e <I2C_LCD_Clear+0x1a>
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	3718      	adds	r7, #24
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	e000e010 	.word	0xe000e010
 80048c4:	20000000 	.word	0x20000000
 80048c8:	431bde83 	.word	0x431bde83

080048cc <I2C_LCD_SetCursor>:
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_RETURNHOME);
    DELAY_MS(2);
}

void I2C_LCD_SetCursor(uint8_t I2C_LCD_InstanceIndex, uint8_t Col, uint8_t Row)
{
 80048cc:	b590      	push	{r4, r7, lr}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	71fb      	strb	r3, [r7, #7]
 80048d6:	460b      	mov	r3, r1
 80048d8:	71bb      	strb	r3, [r7, #6]
 80048da:	4613      	mov	r3, r2
 80048dc:	717b      	strb	r3, [r7, #5]
    int Row_Offsets[] = {0x00, 0x40, 0x14, 0x54};
 80048de:	4b1a      	ldr	r3, [pc, #104]	; (8004948 <I2C_LCD_SetCursor+0x7c>)
 80048e0:	f107 0408 	add.w	r4, r7, #8
 80048e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80048e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (Row > I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow)
 80048ea:	79fa      	ldrb	r2, [r7, #7]
 80048ec:	4917      	ldr	r1, [pc, #92]	; (800494c <I2C_LCD_SetCursor+0x80>)
 80048ee:	4613      	mov	r3, r2
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	440b      	add	r3, r1
 80048f8:	330a      	adds	r3, #10
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	797a      	ldrb	r2, [r7, #5]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d90a      	bls.n	8004918 <I2C_LCD_SetCursor+0x4c>
    {
    	Row = I2C_LCD_CfgParam[I2C_LCD_InstanceIndex].I2C_LCD_nRow - 1;
 8004902:	79fa      	ldrb	r2, [r7, #7]
 8004904:	4911      	ldr	r1, [pc, #68]	; (800494c <I2C_LCD_SetCursor+0x80>)
 8004906:	4613      	mov	r3, r2
 8004908:	005b      	lsls	r3, r3, #1
 800490a:	4413      	add	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	440b      	add	r3, r1
 8004910:	330a      	adds	r3, #10
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	3b01      	subs	r3, #1
 8004916:	717b      	strb	r3, [r7, #5]
    }
    I2C_LCD_Cmd(I2C_LCD_InstanceIndex, LCD_SETDDRAMADDR | (Col + Row_Offsets[Row]));
 8004918:	797b      	ldrb	r3, [r7, #5]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	3318      	adds	r3, #24
 800491e:	443b      	add	r3, r7
 8004920:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8004924:	b2da      	uxtb	r2, r3
 8004926:	79bb      	ldrb	r3, [r7, #6]
 8004928:	4413      	add	r3, r2
 800492a:	b2db      	uxtb	r3, r3
 800492c:	b25b      	sxtb	r3, r3
 800492e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004932:	b25b      	sxtb	r3, r3
 8004934:	b2da      	uxtb	r2, r3
 8004936:	79fb      	ldrb	r3, [r7, #7]
 8004938:	4611      	mov	r1, r2
 800493a:	4618      	mov	r0, r3
 800493c:	f7ff feb4 	bl	80046a8 <I2C_LCD_Cmd>
}
 8004940:	bf00      	nop
 8004942:	371c      	adds	r7, #28
 8004944:	46bd      	mov	sp, r7
 8004946:	bd90      	pop	{r4, r7, pc}
 8004948:	08006238 	.word	0x08006238
 800494c:	0800628c 	.word	0x0800628c

08004950 <I2C_LCD_WriteString>:
{
    I2C_LCD_Data(I2C_LCD_InstanceIndex, Ch);
}

void I2C_LCD_WriteString(uint8_t I2C_LCD_InstanceIndex, char *Str)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	6039      	str	r1, [r7, #0]
 800495a:	71fb      	strb	r3, [r7, #7]
    while (*Str)
 800495c:	e008      	b.n	8004970 <I2C_LCD_WriteString+0x20>
    {
        I2C_LCD_Data(I2C_LCD_InstanceIndex, *Str++);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	603a      	str	r2, [r7, #0]
 8004964:	781a      	ldrb	r2, [r3, #0]
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff feae 	bl	80046cc <I2C_LCD_Data>
    while (*Str)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f2      	bne.n	800495e <I2C_LCD_WriteString+0xe>
    }
}
 8004978:	bf00      	nop
 800497a:	bf00      	nop
 800497c:	3708      	adds	r7, #8
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
	...

08004984 <InfraredPD_Initialize>:
 8004984:	2802      	cmp	r0, #2
 8004986:	d825      	bhi.n	80049d4 <InfraredPD_Initialize+0x50>
 8004988:	2800      	cmp	r0, #0
 800498a:	d130      	bne.n	80049ee <InfraredPD_Initialize+0x6a>
 800498c:	4a3e      	ldr	r2, [pc, #248]	; (8004a88 <InfraredPD_Initialize+0x104>)
 800498e:	6813      	ldr	r3, [r2, #0]
 8004990:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8004994:	f023 0301 	bic.w	r3, r3, #1
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 800499e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 80049a2:	f24c 2240 	movw	r2, #49728	; 0xc240
 80049a6:	400b      	ands	r3, r1
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d02e      	beq.n	8004a0a <InfraredPD_Initialize+0x86>
 80049ac:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 80049b0:	f24c 2270 	movw	r2, #49776	; 0xc270
 80049b4:	400b      	ands	r3, r1
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d027      	beq.n	8004a0a <InfraredPD_Initialize+0x86>
 80049ba:	4a34      	ldr	r2, [pc, #208]	; (8004a8c <InfraredPD_Initialize+0x108>)
 80049bc:	2301      	movs	r3, #1
 80049be:	6093      	str	r3, [r2, #8]
 80049c0:	6893      	ldr	r3, [r2, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1fc      	bne.n	80049c0 <InfraredPD_Initialize+0x3c>
 80049c6:	4b32      	ldr	r3, [pc, #200]	; (8004a90 <InfraredPD_Initialize+0x10c>)
 80049c8:	6013      	str	r3, [r2, #0]
 80049ca:	6812      	ldr	r2, [r2, #0]
 80049cc:	4b31      	ldr	r3, [pc, #196]	; (8004a94 <InfraredPD_Initialize+0x110>)
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d016      	beq.n	8004a00 <InfraredPD_Initialize+0x7c>
 80049d2:	e7fe      	b.n	80049d2 <InfraredPD_Initialize+0x4e>
 80049d4:	2803      	cmp	r0, #3
 80049d6:	d1d9      	bne.n	800498c <InfraredPD_Initialize+0x8>
 80049d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80049dc:	4a2e      	ldr	r2, [pc, #184]	; (8004a98 <InfraredPD_Initialize+0x114>)
 80049de:	6859      	ldr	r1, [r3, #4]
 80049e0:	4291      	cmp	r1, r2
 80049e2:	d00d      	beq.n	8004a00 <InfraredPD_Initialize+0x7c>
 80049e4:	685a      	ldr	r2, [r3, #4]
 80049e6:	4b2d      	ldr	r3, [pc, #180]	; (8004a9c <InfraredPD_Initialize+0x118>)
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d009      	beq.n	8004a00 <InfraredPD_Initialize+0x7c>
 80049ec:	e7fe      	b.n	80049ec <InfraredPD_Initialize+0x68>
 80049ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80049f2:	4a2b      	ldr	r2, [pc, #172]	; (8004aa0 <InfraredPD_Initialize+0x11c>)
 80049f4:	f8d3 37f8 	ldr.w	r3, [r3, #2040]	; 0x7f8
 80049f8:	0c1b      	lsrs	r3, r3, #16
 80049fa:	041b      	lsls	r3, r3, #16
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d103      	bne.n	8004a08 <InfraredPD_Initialize+0x84>
 8004a00:	4b28      	ldr	r3, [pc, #160]	; (8004aa4 <InfraredPD_Initialize+0x120>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	4770      	bx	lr
 8004a08:	e7fe      	b.n	8004a08 <InfraredPD_Initialize+0x84>
 8004a0a:	4b27      	ldr	r3, [pc, #156]	; (8004aa8 <InfraredPD_Initialize+0x124>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1d3      	bne.n	80049ba <InfraredPD_Initialize+0x36>
 8004a12:	4a26      	ldr	r2, [pc, #152]	; (8004aac <InfraredPD_Initialize+0x128>)
 8004a14:	6813      	ldr	r3, [r2, #0]
 8004a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004a1e:	d021      	beq.n	8004a64 <InfraredPD_Initialize+0xe0>
 8004a20:	6813      	ldr	r3, [r2, #0]
 8004a22:	f240 4183 	movw	r1, #1155	; 0x483
 8004a26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a2a:	428b      	cmp	r3, r1
 8004a2c:	d01a      	beq.n	8004a64 <InfraredPD_Initialize+0xe0>
 8004a2e:	6813      	ldr	r3, [r2, #0]
 8004a30:	f240 4285 	movw	r2, #1157	; 0x485
 8004a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d013      	beq.n	8004a64 <InfraredPD_Initialize+0xe0>
 8004a3c:	4b1c      	ldr	r3, [pc, #112]	; (8004ab0 <InfraredPD_Initialize+0x12c>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a44:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8004a48:	d1b7      	bne.n	80049ba <InfraredPD_Initialize+0x36>
 8004a4a:	4a1a      	ldr	r2, [pc, #104]	; (8004ab4 <InfraredPD_Initialize+0x130>)
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	6093      	str	r3, [r2, #8]
 8004a50:	6893      	ldr	r3, [r2, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1fc      	bne.n	8004a50 <InfraredPD_Initialize+0xcc>
 8004a56:	4b0e      	ldr	r3, [pc, #56]	; (8004a90 <InfraredPD_Initialize+0x10c>)
 8004a58:	6013      	str	r3, [r2, #0]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <InfraredPD_Initialize+0x110>)
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d0ce      	beq.n	8004a00 <InfraredPD_Initialize+0x7c>
 8004a62:	e7b6      	b.n	80049d2 <InfraredPD_Initialize+0x4e>
 8004a64:	4a14      	ldr	r2, [pc, #80]	; (8004ab8 <InfraredPD_Initialize+0x134>)
 8004a66:	2301      	movs	r3, #1
 8004a68:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004a6c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1fb      	bne.n	8004a6c <InfraredPD_Initialize+0xe8>
 8004a74:	4b06      	ldr	r3, [pc, #24]	; (8004a90 <InfraredPD_Initialize+0x10c>)
 8004a76:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8004a7a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004a7e:	4b05      	ldr	r3, [pc, #20]	; (8004a94 <InfraredPD_Initialize+0x110>)
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d0bd      	beq.n	8004a00 <InfraredPD_Initialize+0x7c>
 8004a84:	e7a5      	b.n	80049d2 <InfraredPD_Initialize+0x4e>
 8004a86:	bf00      	nop
 8004a88:	e0002000 	.word	0xe0002000
 8004a8c:	40023000 	.word	0x40023000
 8004a90:	f407a5c2 	.word	0xf407a5c2
 8004a94:	b5e8b5cd 	.word	0xb5e8b5cd
 8004a98:	0201e041 	.word	0x0201e041
 8004a9c:	02028041 	.word	0x02028041
 8004aa0:	aa550000 	.word	0xaa550000
 8004aa4:	20000078 	.word	0x20000078
 8004aa8:	e0042000 	.word	0xe0042000
 8004aac:	5c001000 	.word	0x5c001000
 8004ab0:	50081000 	.word	0x50081000
 8004ab4:	4c004000 	.word	0x4c004000
 8004ab8:	58024000 	.word	0x58024000

08004abc <InfraredPD_CreateInstance>:
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <InfraredPD_CreateInstance+0x2c>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	b183      	cbz	r3, 8004ae4 <InfraredPD_CreateInstance+0x28>
 8004ac2:	b510      	push	{r4, lr}
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	20c0      	movs	r0, #192	; 0xc0
 8004ac8:	f000 fd4e 	bl	8005568 <malloc>
 8004acc:	4603      	mov	r3, r0
 8004ace:	b138      	cbz	r0, 8004ae0 <InfraredPD_CreateInstance+0x24>
 8004ad0:	4a06      	ldr	r2, [pc, #24]	; (8004aec <InfraredPD_CreateInstance+0x30>)
 8004ad2:	ca03      	ldmia	r2!, {r0, r1}
 8004ad4:	f04f 0c00 	mov.w	ip, #0
 8004ad8:	f883 c0a8 	strb.w	ip, [r3, #168]	; 0xa8
 8004adc:	6020      	str	r0, [r4, #0]
 8004ade:	6061      	str	r1, [r4, #4]
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	bd10      	pop	{r4, pc}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	4770      	bx	lr
 8004ae8:	20000078 	.word	0x20000078
 8004aec:	08006248 	.word	0x08006248

08004af0 <InfraredPD_Start>:
 8004af0:	4bbc      	ldr	r3, [pc, #752]	; (8004de4 <InfraredPD_Start+0x2f4>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	b90b      	cbnz	r3, 8004afa <InfraredPD_Start+0xa>
 8004af6:	4618      	mov	r0, r3
 8004af8:	4770      	bx	lr
 8004afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afe:	ed2d 8b04 	vpush	{d8-d9}
 8004b02:	4616      	mov	r6, r2
 8004b04:	780a      	ldrb	r2, [r1, #0]
 8004b06:	1e53      	subs	r3, r2, #1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	4604      	mov	r4, r0
 8004b0c:	460d      	mov	r5, r1
 8004b0e:	d917      	bls.n	8004b40 <InfraredPD_Start+0x50>
 8004b10:	2a0f      	cmp	r2, #15
 8004b12:	d846      	bhi.n	8004ba2 <InfraredPD_Start+0xb2>
 8004b14:	f248 1310 	movw	r3, #33040	; 0x8110
 8004b18:	40d3      	lsrs	r3, r2
 8004b1a:	07db      	lsls	r3, r3, #31
 8004b1c:	f140 81aa 	bpl.w	8004e74 <InfraredPD_Start+0x384>
 8004b20:	884b      	ldrh	r3, [r1, #2]
 8004b22:	2b80      	cmp	r3, #128	; 0x80
 8004b24:	f000 81ae 	beq.w	8004e84 <InfraredPD_Start+0x394>
 8004b28:	d90f      	bls.n	8004b4a <InfraredPD_Start+0x5a>
 8004b2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b2e:	f000 81ae 	beq.w	8004e8e <InfraredPD_Start+0x39e>
 8004b32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b36:	f040 817b 	bne.w	8004e30 <InfraredPD_Start+0x340>
 8004b3a:	4bab      	ldr	r3, [pc, #684]	; (8004de8 <InfraredPD_Start+0x2f8>)
 8004b3c:	60a3      	str	r3, [r4, #8]
 8004b3e:	e020      	b.n	8004b82 <InfraredPD_Start+0x92>
 8004b40:	884b      	ldrh	r3, [r1, #2]
 8004b42:	2b80      	cmp	r3, #128	; 0x80
 8004b44:	f000 8187 	beq.w	8004e56 <InfraredPD_Start+0x366>
 8004b48:	d810      	bhi.n	8004b6c <InfraredPD_Start+0x7c>
 8004b4a:	2b08      	cmp	r3, #8
 8004b4c:	f000 817d 	beq.w	8004e4a <InfraredPD_Start+0x35a>
 8004b50:	2b20      	cmp	r3, #32
 8004b52:	d120      	bne.n	8004b96 <InfraredPD_Start+0xa6>
 8004b54:	4ba5      	ldr	r3, [pc, #660]	; (8004dec <InfraredPD_Start+0x2fc>)
 8004b56:	60a3      	str	r3, [r4, #8]
 8004b58:	792b      	ldrb	r3, [r5, #4]
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	2b07      	cmp	r3, #7
 8004b5e:	d838      	bhi.n	8004bd2 <InfraredPD_Start+0xe2>
 8004b60:	e8df f003 	tbb	[pc, r3]
 8004b64:	ac37b13d 	.word	0xac37b13d
 8004b68:	a7373737 	.word	0xa7373737
 8004b6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b70:	f000 816e 	beq.w	8004e50 <InfraredPD_Start+0x360>
 8004b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b78:	d106      	bne.n	8004b88 <InfraredPD_Start+0x98>
 8004b7a:	4b9b      	ldr	r3, [pc, #620]	; (8004de8 <InfraredPD_Start+0x2f8>)
 8004b7c:	6083      	str	r3, [r0, #8]
 8004b7e:	2a02      	cmp	r2, #2
 8004b80:	d1ea      	bne.n	8004b58 <InfraredPD_Start+0x68>
 8004b82:	2301      	movs	r3, #1
 8004b84:	702b      	strb	r3, [r5, #0]
 8004b86:	e7e7      	b.n	8004b58 <InfraredPD_Start+0x68>
 8004b88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8c:	f040 814a 	bne.w	8004e24 <InfraredPD_Start+0x334>
 8004b90:	4b97      	ldr	r3, [pc, #604]	; (8004df0 <InfraredPD_Start+0x300>)
 8004b92:	6083      	str	r3, [r0, #8]
 8004b94:	e7e0      	b.n	8004b58 <InfraredPD_Start+0x68>
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	f040 8144 	bne.w	8004e24 <InfraredPD_Start+0x334>
 8004b9c:	4b95      	ldr	r3, [pc, #596]	; (8004df4 <InfraredPD_Start+0x304>)
 8004b9e:	60a3      	str	r3, [r4, #8]
 8004ba0:	e7da      	b.n	8004b58 <InfraredPD_Start+0x68>
 8004ba2:	2a1e      	cmp	r2, #30
 8004ba4:	f040 8166 	bne.w	8004e74 <InfraredPD_Start+0x384>
 8004ba8:	884b      	ldrh	r3, [r1, #2]
 8004baa:	2b80      	cmp	r3, #128	; 0x80
 8004bac:	f000 815d 	beq.w	8004e6a <InfraredPD_Start+0x37a>
 8004bb0:	d9cb      	bls.n	8004b4a <InfraredPD_Start+0x5a>
 8004bb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bb6:	f000 8172 	beq.w	8004e9e <InfraredPD_Start+0x3ae>
 8004bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bbe:	d0bc      	beq.n	8004b3a <InfraredPD_Start+0x4a>
 8004bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bc4:	f040 812e 	bne.w	8004e24 <InfraredPD_Start+0x334>
 8004bc8:	4b89      	ldr	r3, [pc, #548]	; (8004df0 <InfraredPD_Start+0x300>)
 8004bca:	6083      	str	r3, [r0, #8]
 8004bcc:	2304      	movs	r3, #4
 8004bce:	702b      	strb	r3, [r5, #0]
 8004bd0:	e7c2      	b.n	8004b58 <InfraredPD_Start+0x68>
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	ecbd 8b04 	vpop	{d8-d9}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bde:	4b86      	ldr	r3, [pc, #536]	; (8004df8 <InfraredPD_Start+0x308>)
 8004be0:	eddf 7a86 	vldr	s15, [pc, #536]	; 8004dfc <InfraredPD_Start+0x30c>
 8004be4:	60e3      	str	r3, [r4, #12]
 8004be6:	796b      	ldrb	r3, [r5, #5]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d002      	beq.n	8004bf2 <InfraredPD_Start+0x102>
 8004bec:	2b08      	cmp	r3, #8
 8004bee:	f040 812a 	bne.w	8004e46 <InfraredPD_Start+0x356>
 8004bf2:	ed95 7a02 	vldr	s14, [r5, #8]
 8004bf6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8004bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bfe:	f100 8120 	bmi.w	8004e42 <InfraredPD_Start+0x352>
 8004c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c06:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8004c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c0e:	f300 8118 	bgt.w	8004e42 <InfraredPD_Start+0x352>
 8004c12:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8004c16:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8004e00 <InfraredPD_Start+0x310>
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	bfbc      	itt	lt
 8004c1e:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 8004c22:	8073      	strhlt	r3, [r6, #2]
 8004c24:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bfbc      	itt	lt
 8004c2c:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 8004c30:	80b3      	strhlt	r3, [r6, #4]
 8004c32:	88eb      	ldrh	r3, [r5, #6]
 8004c34:	ee08 3a10 	vmov	s16, r3
 8004c38:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004c3c:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8004c40:	edd4 6a02 	vldr	s13, [r4, #8]
 8004c44:	ee28 8a07 	vmul.f32	s16, s16, s14
 8004c48:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004c4c:	ed84 8a05 	vstr	s16, [r4, #20]
 8004c50:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8004c54:	eee6 7aa6 	vfma.f32	s15, s13, s13
 8004c58:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8004c5c:	ee87 0a26 	vdiv.f32	s0, s14, s13
 8004c60:	ed84 7a04 	vstr	s14, [r4, #16]
 8004c64:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004c68:	ed84 0a06 	vstr	s0, [r4, #24]
 8004c6c:	f001 f974 	bl	8005f58 <ceilf>
 8004c70:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8004c74:	2301      	movs	r3, #1
 8004c76:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8004c7a:	ee10 3a10 	vmov	r3, s0
 8004c7e:	b298      	uxth	r0, r3
 8004c80:	2300      	movs	r3, #0
 8004c82:	83a0      	strh	r0, [r4, #28]
 8004c84:	6223      	str	r3, [r4, #32]
 8004c86:	7833      	ldrb	r3, [r6, #0]
 8004c88:	b313      	cbz	r3, 8004cd0 <InfraredPD_Start+0x1e0>
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	f000 80e6 	beq.w	8004e5c <InfraredPD_Start+0x36c>
 8004c90:	7873      	ldrb	r3, [r6, #1]
 8004c92:	b1eb      	cbz	r3, 8004cd0 <InfraredPD_Start+0x1e0>
 8004c94:	2300      	movs	r3, #0
 8004c96:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004c9a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	f000 8100 	beq.w	8004ea4 <InfraredPD_Start+0x3b4>
 8004ca4:	0080      	lsls	r0, r0, #2
 8004ca6:	f000 fc5f 	bl	8005568 <malloc>
 8004caa:	6460      	str	r0, [r4, #68]	; 0x44
 8004cac:	b980      	cbnz	r0, 8004cd0 <InfraredPD_Start+0x1e0>
 8004cae:	2306      	movs	r3, #6
 8004cb0:	e790      	b.n	8004bd4 <InfraredPD_Start+0xe4>
 8004cb2:	4b54      	ldr	r3, [pc, #336]	; (8004e04 <InfraredPD_Start+0x314>)
 8004cb4:	eddf 7a54 	vldr	s15, [pc, #336]	; 8004e08 <InfraredPD_Start+0x318>
 8004cb8:	60e3      	str	r3, [r4, #12]
 8004cba:	e794      	b.n	8004be6 <InfraredPD_Start+0xf6>
 8004cbc:	4b53      	ldr	r3, [pc, #332]	; (8004e0c <InfraredPD_Start+0x31c>)
 8004cbe:	eddf 7a54 	vldr	s15, [pc, #336]	; 8004e10 <InfraredPD_Start+0x320>
 8004cc2:	60e3      	str	r3, [r4, #12]
 8004cc4:	e78f      	b.n	8004be6 <InfraredPD_Start+0xf6>
 8004cc6:	4b53      	ldr	r3, [pc, #332]	; (8004e14 <InfraredPD_Start+0x324>)
 8004cc8:	eddf 7a53 	vldr	s15, [pc, #332]	; 8004e18 <InfraredPD_Start+0x328>
 8004ccc:	60e3      	str	r3, [r4, #12]
 8004cce:	e78a      	b.n	8004be6 <InfraredPD_Start+0xf6>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	7828      	ldrb	r0, [r5, #0]
 8004cd4:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8004cde:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8004ce2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004ce6:	0040      	lsls	r0, r0, #1
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
 8004cee:	f000 80c3 	beq.w	8004e78 <InfraredPD_Start+0x388>
 8004cf2:	0080      	lsls	r0, r0, #2
 8004cf4:	f000 fc38 	bl	8005568 <malloc>
 8004cf8:	6520      	str	r0, [r4, #80]	; 0x50
 8004cfa:	2800      	cmp	r0, #0
 8004cfc:	f000 80d7 	beq.w	8004eae <InfraredPD_Start+0x3be>
 8004d00:	f04f 0800 	mov.w	r8, #0
 8004d04:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 8004d08:	2300      	movs	r3, #0
 8004d0a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004d0c:	88b3      	ldrh	r3, [r6, #4]
 8004d0e:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8004e1c <InfraredPD_Start+0x32c>
 8004d12:	ee07 3a90 	vmov	s15, r3
 8004d16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d1a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8004d1e:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8004d22:	ee67 6aa8 	vmul.f32	s13, s15, s17
 8004d26:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004d2a:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
 8004d2e:	edc4 6a1a 	vstr	s13, [r4, #104]	; 0x68
 8004d32:	ed84 7a1b 	vstr	s14, [r4, #108]	; 0x6c
 8004d36:	782f      	ldrb	r7, [r5, #0]
 8004d38:	ee07 7a90 	vmov	s15, r7
 8004d3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d40:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8004d44:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8004d48:	ee27 0ac0 	vnmul.f32	s0, s15, s0
 8004d4c:	eeb1 9a67 	vneg.f32	s18, s15
 8004d50:	f001 f8be 	bl	8005ed0 <expf>
 8004d54:	eddf 7a32 	vldr	s15, [pc, #200]	; 8004e20 <InfraredPD_Start+0x330>
 8004d58:	ee38 0a40 	vsub.f32	s0, s16, s0
 8004d5c:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 8004d60:	ee29 0a27 	vmul.f32	s0, s18, s15
 8004d64:	f001 f8b4 	bl	8005ed0 <expf>
 8004d68:	8873      	ldrh	r3, [r6, #2]
 8004d6a:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
 8004d6e:	ee07 3a90 	vmov	s15, r3
 8004d72:	2201      	movs	r2, #1
 8004d74:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
 8004d78:	ebc7 1107 	rsb	r1, r7, r7, lsl #4
 8004d7c:	b2ba      	uxth	r2, r7
 8004d7e:	e9c4 8828 	strd	r8, r8, [r4, #160]	; 0xa0
 8004d82:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
 8004d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004d8a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004d8e:	0049      	lsls	r1, r1, #1
 8004d90:	f8a4 1098 	strh.w	r1, [r4, #152]	; 0x98
 8004d94:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8004d98:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8004d9c:	00c9      	lsls	r1, r1, #3
 8004d9e:	0092      	lsls	r2, r2, #2
 8004da0:	f8a4 109c 	strh.w	r1, [r4, #156]	; 0x9c
 8004da4:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 8004da8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004dac:	edc4 8a22 	vstr	s17, [r4, #136]	; 0x88
 8004db0:	ee38 0a40 	vsub.f32	s0, s16, s0
 8004db4:	ecbd 8b04 	vpop	{d8-d9}
 8004db8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8004dbc:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8004dc0:	f104 07ac 	add.w	r7, r4, #172	; 0xac
 8004dc4:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
 8004dc8:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
 8004dcc:	f8a4 808e 	strh.w	r8, [r4, #142]	; 0x8e
 8004dd0:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8004dd4:	6830      	ldr	r0, [r6, #0]
 8004dd6:	6871      	ldr	r1, [r6, #4]
 8004dd8:	4643      	mov	r3, r8
 8004dda:	34b8      	adds	r4, #184	; 0xb8
 8004ddc:	c403      	stmia	r4!, {r0, r1}
 8004dde:	4618      	mov	r0, r3
 8004de0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004de4:	20000078 	.word	0x20000078
 8004de8:	41680000 	.word	0x41680000
 8004dec:	42006666 	.word	0x42006666
 8004df0:	419b3333 	.word	0x419b3333
 8004df4:	42c6999a 	.word	0x42c6999a
 8004df8:	43168000 	.word	0x43168000
 8004dfc:	3e1a1cad 	.word	0x3e1a1cad
 8004e00:	3f933333 	.word	0x3f933333
 8004e04:	4254cccd 	.word	0x4254cccd
 8004e08:	3d59e83f 	.word	0x3d59e83f
 8004e0c:	42966666 	.word	0x42966666
 8004e10:	3d9a0275 	.word	0x3d9a0275
 8004e14:	42d4cccd 	.word	0x42d4cccd
 8004e18:	3dd9e83f 	.word	0x3dd9e83f
 8004e1c:	4048e093 	.word	0x4048e093
 8004e20:	3ea0da75 	.word	0x3ea0da75
 8004e24:	ecbd 8b04 	vpop	{d8-d9}
 8004e28:	2302      	movs	r3, #2
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e34:	d1f6      	bne.n	8004e24 <InfraredPD_Start+0x334>
 8004e36:	4b22      	ldr	r3, [pc, #136]	; (8004ec0 <InfraredPD_Start+0x3d0>)
 8004e38:	60a3      	str	r3, [r4, #8]
 8004e3a:	2a04      	cmp	r2, #4
 8004e3c:	f63f aec6 	bhi.w	8004bcc <InfraredPD_Start+0xdc>
 8004e40:	e68a      	b.n	8004b58 <InfraredPD_Start+0x68>
 8004e42:	2305      	movs	r3, #5
 8004e44:	e6c6      	b.n	8004bd4 <InfraredPD_Start+0xe4>
 8004e46:	2304      	movs	r3, #4
 8004e48:	e6c4      	b.n	8004bd4 <InfraredPD_Start+0xe4>
 8004e4a:	4b1e      	ldr	r3, [pc, #120]	; (8004ec4 <InfraredPD_Start+0x3d4>)
 8004e4c:	60a3      	str	r3, [r4, #8]
 8004e4e:	e683      	b.n	8004b58 <InfraredPD_Start+0x68>
 8004e50:	4b1d      	ldr	r3, [pc, #116]	; (8004ec8 <InfraredPD_Start+0x3d8>)
 8004e52:	6083      	str	r3, [r0, #8]
 8004e54:	e680      	b.n	8004b58 <InfraredPD_Start+0x68>
 8004e56:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <InfraredPD_Start+0x3dc>)
 8004e58:	6083      	str	r3, [r0, #8]
 8004e5a:	e67d      	b.n	8004b58 <InfraredPD_Start+0x68>
 8004e5c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8004ed0 <InfraredPD_Start+0x3e0>
 8004e60:	ee28 7a07 	vmul.f32	s14, s16, s14
 8004e64:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
 8004e68:	e712      	b.n	8004c90 <InfraredPD_Start+0x1a0>
 8004e6a:	4b18      	ldr	r3, [pc, #96]	; (8004ecc <InfraredPD_Start+0x3dc>)
 8004e6c:	60a3      	str	r3, [r4, #8]
 8004e6e:	2308      	movs	r3, #8
 8004e70:	702b      	strb	r3, [r5, #0]
 8004e72:	e671      	b.n	8004b58 <InfraredPD_Start+0x68>
 8004e74:	2301      	movs	r3, #1
 8004e76:	e6ad      	b.n	8004bd4 <InfraredPD_Start+0xe4>
 8004e78:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004e7a:	f000 fb7d 	bl	8005578 <free>
 8004e7e:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8004e82:	e736      	b.n	8004cf2 <InfraredPD_Start+0x202>
 8004e84:	4b11      	ldr	r3, [pc, #68]	; (8004ecc <InfraredPD_Start+0x3dc>)
 8004e86:	60a3      	str	r3, [r4, #8]
 8004e88:	2a08      	cmp	r2, #8
 8004e8a:	d8f0      	bhi.n	8004e6e <InfraredPD_Start+0x37e>
 8004e8c:	e664      	b.n	8004b58 <InfraredPD_Start+0x68>
 8004e8e:	4b0e      	ldr	r3, [pc, #56]	; (8004ec8 <InfraredPD_Start+0x3d8>)
 8004e90:	60a3      	str	r3, [r4, #8]
 8004e92:	2a02      	cmp	r2, #2
 8004e94:	f67f ae60 	bls.w	8004b58 <InfraredPD_Start+0x68>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	702b      	strb	r3, [r5, #0]
 8004e9c:	e65c      	b.n	8004b58 <InfraredPD_Start+0x68>
 8004e9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ec8 <InfraredPD_Start+0x3d8>)
 8004ea0:	6083      	str	r3, [r0, #8]
 8004ea2:	e7f9      	b.n	8004e98 <InfraredPD_Start+0x3a8>
 8004ea4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004ea6:	f000 fb67 	bl	8005578 <free>
 8004eaa:	8ba0      	ldrh	r0, [r4, #28]
 8004eac:	e6fa      	b.n	8004ca4 <InfraredPD_Start+0x1b4>
 8004eae:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8004eb0:	b118      	cbz	r0, 8004eba <InfraredPD_Start+0x3ca>
 8004eb2:	f000 fb61 	bl	8005578 <free>
 8004eb6:	2307      	movs	r3, #7
 8004eb8:	e68c      	b.n	8004bd4 <InfraredPD_Start+0xe4>
 8004eba:	2307      	movs	r3, #7
 8004ebc:	e68a      	b.n	8004bd4 <InfraredPD_Start+0xe4>
 8004ebe:	bf00      	nop
 8004ec0:	419b3333 	.word	0x419b3333
 8004ec4:	42560000 	.word	0x42560000
 8004ec8:	41873333 	.word	0x41873333
 8004ecc:	41b00000 	.word	0x41b00000
 8004ed0:	3223b1a8 	.word	0x3223b1a8
 8004ed4:	00000000 	.word	0x00000000

08004ed8 <InfraredPD_Update>:
 8004ed8:	4bba      	ldr	r3, [pc, #744]	; (80051c4 <InfraredPD_Update+0x2ec>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	b903      	cbnz	r3, 8004ee0 <InfraredPD_Update+0x8>
 8004ede:	4770      	bx	lr
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	ed2d 8b02 	vpush	{d8}
 8004ee8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8004eec:	f890 60b1 	ldrb.w	r6, [r0, #177]	; 0xb1
 8004ef0:	4615      	mov	r5, r2
 8004ef2:	f9b1 2000 	ldrsh.w	r2, [r1]
 8004ef6:	fb16 f303 	smulbb	r3, r6, r3
 8004efa:	ee07 2a10 	vmov	s14, r2
 8004efe:	ee07 3a90 	vmov	s15, r3
 8004f02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004f06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f0a:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 8004f0e:	ed80 7a00 	vstr	s14, [r0]
 8004f12:	b083      	sub	sp, #12
 8004f14:	4604      	mov	r4, r0
 8004f16:	edc0 7a01 	vstr	s15, [r0, #4]
 8004f1a:	2a00      	cmp	r2, #0
 8004f1c:	d067      	beq.n	8004fee <InfraredPD_Update+0x116>
 8004f1e:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d168      	bne.n	8004ff8 <InfraredPD_Update+0x120>
 8004f26:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f040 8303 	bne.w	8005536 <InfraredPD_Update+0x65e>
 8004f30:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 8004f34:	6a07      	ldr	r7, [r0, #32]
 8004f36:	3301      	adds	r3, #1
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8004f3e:	3a01      	subs	r2, #1
 8004f40:	0090      	lsls	r0, r2, #2
 8004f42:	2f01      	cmp	r7, #1
 8004f44:	d068      	beq.n	8005018 <InfraredPD_Update+0x140>
 8004f46:	eddf 6aa0 	vldr	s13, [pc, #640]	; 80051c8 <InfraredPD_Update+0x2f0>
 8004f4a:	eeb0 6ae7 	vabs.f32	s12, s15
 8004f4e:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8004f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f56:	d57b      	bpl.n	8005050 <InfraredPD_Update+0x178>
 8004f58:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8004f5c:	2a00      	cmp	r2, #0
 8004f5e:	f000 81a8 	beq.w	80052b2 <InfraredPD_Update+0x3da>
 8004f62:	2a01      	cmp	r2, #1
 8004f64:	f000 8265 	beq.w	8005432 <InfraredPD_Update+0x55a>
 8004f68:	2a02      	cmp	r2, #2
 8004f6a:	f000 8246 	beq.w	80053fa <InfraredPD_Update+0x522>
 8004f6e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8004f72:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 8004f76:	2a00      	cmp	r2, #0
 8004f78:	f000 80a6 	beq.w	80050c8 <InfraredPD_Update+0x1f0>
 8004f7c:	e070      	b.n	8005060 <InfraredPD_Update+0x188>
 8004f7e:	2f01      	cmp	r7, #1
 8004f80:	f000 82c2 	beq.w	8005508 <InfraredPD_Update+0x630>
 8004f84:	2300      	movs	r3, #0
 8004f86:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8004f8a:	2f00      	cmp	r7, #0
 8004f8c:	f040 82d0 	bne.w	8005530 <InfraredPD_Update+0x658>
 8004f90:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8004f94:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
 8004f98:	3301      	adds	r3, #1
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8004fa2:	d10b      	bne.n	8004fbc <InfraredPD_Update+0xe4>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8004faa:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8004fae:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8004fb2:	b91b      	cbnz	r3, 8004fbc <InfraredPD_Update+0xe4>
 8004fb4:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8004fb8:	2300      	movs	r3, #0
 8004fba:	65e3      	str	r3, [r4, #92]	; 0x5c
 8004fbc:	ee07 6a90 	vmov	s15, r6
 8004fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc4:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8004fc8:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8004fcc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8004fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004fd4:	ee17 3a10 	vmov	r3, s14
 8004fd8:	802b      	strh	r3, [r5, #0]
 8004fda:	ee17 3a90 	vmov	r3, s15
 8004fde:	806b      	strh	r3, [r5, #2]
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	716b      	strb	r3, [r5, #5]
 8004fe4:	712f      	strb	r7, [r5, #4]
 8004fe6:	2f01      	cmp	r7, #1
 8004fe8:	d101      	bne.n	8004fee <InfraredPD_Update+0x116>
 8004fea:	2301      	movs	r3, #1
 8004fec:	716b      	strb	r3, [r5, #5]
 8004fee:	b003      	add	sp, #12
 8004ff0:	ecbd 8b02 	vpop	{d8}
 8004ff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8005000:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8005004:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 8005008:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 800500c:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
 8005010:	f880 20a7 	strb.w	r2, [r0, #167]	; 0xa7
 8005014:	6203      	str	r3, [r0, #32]
 8005016:	4610      	mov	r0, r2
 8005018:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 800501c:	b182      	cbz	r2, 8005040 <InfraredPD_Update+0x168>
 800501e:	2a01      	cmp	r2, #1
 8005020:	f000 81e8 	beq.w	80053f4 <InfraredPD_Update+0x51c>
 8005024:	2a02      	cmp	r2, #2
 8005026:	d10b      	bne.n	8005040 <InfraredPD_Update+0x168>
 8005028:	ed9f 6a68 	vldr	s12, [pc, #416]	; 80051cc <InfraredPD_Update+0x2f4>
 800502c:	eddf 6a68 	vldr	s13, [pc, #416]	; 80051d0 <InfraredPD_Update+0x2f8>
 8005030:	eee7 6a06 	vfma.f32	s13, s14, s12
 8005034:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8005038:	ee66 6aa6 	vmul.f32	s13, s13, s13
 800503c:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
 8005040:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8005044:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
 8005048:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 800504c:	2701      	movs	r7, #1
 800504e:	e77a      	b.n	8004f46 <InfraredPD_Update+0x6e>
 8005050:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 8005054:	b3b2      	cbz	r2, 80050c4 <InfraredPD_Update+0x1ec>
 8005056:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 800505a:	b39a      	cbz	r2, 80050c4 <InfraredPD_Update+0x1ec>
 800505c:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8005060:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8005064:	8ba1      	ldrh	r1, [r4, #28]
 8005066:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 800506a:	3201      	adds	r2, #1
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	428a      	cmp	r2, r1
 8005070:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8005074:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 8005078:	bf08      	it	eq
 800507a:	2200      	moveq	r2, #0
 800507c:	ed4e 7a01 	vstr	s15, [lr, #-4]
 8005080:	bf08      	it	eq
 8005082:	f884 2040 	strbeq.w	r2, [r4, #64]	; 0x40
 8005086:	2901      	cmp	r1, #1
 8005088:	f240 81ce 	bls.w	8005428 <InfraredPD_Update+0x550>
 800508c:	42b9      	cmp	r1, r7
 800508e:	f240 81df 	bls.w	8005450 <InfraredPD_Update+0x578>
 8005092:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80051d4 <InfraredPD_Update+0x2fc>
 8005096:	b167      	cbz	r7, 80050b2 <InfraredPD_Update+0x1da>
 8005098:	2200      	movs	r2, #0
 800509a:	4611      	mov	r1, r2
 800509c:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 80050a0:	3201      	adds	r2, #1
 80050a2:	edd1 7a00 	vldr	s15, [r1]
 80050a6:	b292      	uxth	r2, r2
 80050a8:	42ba      	cmp	r2, r7
 80050aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050ae:	4611      	mov	r1, r2
 80050b0:	d3f4      	bcc.n	800509c <InfraredPD_Update+0x1c4>
 80050b2:	ee07 7a90 	vmov	s15, r7
 80050b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80050ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050be:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 80050c2:	e003      	b.n	80050cc <InfraredPD_Update+0x1f4>
 80050c4:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80050c8:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 80050cc:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80050ce:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 80050d2:	180a      	adds	r2, r1, r0
 80050d4:	edc2 7a00 	vstr	s15, [r2]
 80050d8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80050dc:	f894 c04c 	ldrb.w	ip, [r4, #76]	; 0x4c
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d07b      	beq.n	80051dc <InfraredPD_Update+0x304>
 80050e4:	ed94 6a1c 	vldr	s12, [r4, #112]	; 0x70
 80050e8:	edd4 6a1d 	vldr	s13, [r4, #116]	; 0x74
 80050ec:	ed94 5a1e 	vldr	s10, [r4, #120]	; 0x78
 80050f0:	edd4 5a1f 	vldr	s11, [r4, #124]	; 0x7c
 80050f4:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 80050f8:	f894 7090 	ldrb.w	r7, [r4, #144]	; 0x90
 80050fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005100:	ee37 8a46 	vsub.f32	s16, s14, s12
 8005104:	ee77 7a66 	vsub.f32	s15, s14, s13
 8005108:	ee28 8a05 	vmul.f32	s16, s16, s10
 800510c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005110:	eea6 8a28 	vfma.f32	s16, s12, s17
 8005114:	eee8 7aa6 	vfma.f32	s15, s17, s13
 8005118:	ed84 8a1e 	vstr	s16, [r4, #120]	; 0x78
 800511c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8005120:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 8005124:	ed84 8a20 	vstr	s16, [r4, #128]	; 0x80
 8005128:	2f00      	cmp	r7, #0
 800512a:	f000 80b4 	beq.w	8005296 <InfraredPD_Update+0x3be>
 800512e:	2f01      	cmp	r7, #1
 8005130:	d114      	bne.n	800515c <InfraredPD_Update+0x284>
 8005132:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
 8005136:	eef0 6ac8 	vabs.f32	s13, s16
 800513a:	eef4 6ac7 	vcmpe.f32	s13, s14
 800513e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005142:	f140 80c0 	bpl.w	80052c6 <InfraredPD_Update+0x3ee>
 8005146:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 800514a:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
 800514e:	3301      	adds	r3, #1
 8005150:	b29b      	uxth	r3, r3
 8005152:	429a      	cmp	r2, r3
 8005154:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 8005158:	f240 8146 	bls.w	80053e8 <InfraredPD_Update+0x510>
 800515c:	f894 80a6 	ldrb.w	r8, [r4, #166]	; 0xa6
 8005160:	f1bc 0f00 	cmp.w	ip, #0
 8005164:	d108      	bne.n	8005178 <InfraredPD_Update+0x2a0>
 8005166:	f1b8 0f03 	cmp.w	r8, #3
 800516a:	d809      	bhi.n	8005180 <InfraredPD_Update+0x2a8>
 800516c:	e8df f018 	tbh	[pc, r8, lsl #1]
 8005170:	010d011c 	.word	0x010d011c
 8005174:	00af00fd 	.word	0x00af00fd
 8005178:	f1b8 0f00 	cmp.w	r8, #0
 800517c:	f43f af17 	beq.w	8004fae <InfraredPD_Update+0xd6>
 8005180:	ee07 6a90 	vmov	s15, r6
 8005184:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005188:	f1b8 0f02 	cmp.w	r8, #2
 800518c:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8005190:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8005194:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8005198:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800519c:	ee17 3a10 	vmov	r3, s14
 80051a0:	802b      	strh	r3, [r5, #0]
 80051a2:	ee17 3a90 	vmov	r3, s15
 80051a6:	806b      	strh	r3, [r5, #2]
 80051a8:	f43f af1a 	beq.w	8004fe0 <InfraredPD_Update+0x108>
 80051ac:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
 80051b0:	f1b8 0f01 	cmp.w	r8, #1
 80051b4:	f000 8080 	beq.w	80052b8 <InfraredPD_Update+0x3e0>
 80051b8:	796b      	ldrb	r3, [r5, #5]
 80051ba:	712f      	strb	r7, [r5, #4]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	f47f af12 	bne.w	8004fe6 <InfraredPD_Update+0x10e>
 80051c2:	e712      	b.n	8004fea <InfraredPD_Update+0x112>
 80051c4:	20000078 	.word	0x20000078
 80051c8:	46f05e00 	.word	0x46f05e00
 80051cc:	3c23d70a 	.word	0x3c23d70a
 80051d0:	43889333 	.word	0x43889333
 80051d4:	00000000 	.word	0x00000000
 80051d8:	7fc00000 	.word	0x7fc00000
 80051dc:	2200      	movs	r2, #0
 80051de:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
 80051e2:	f1bc 0f00 	cmp.w	ip, #0
 80051e6:	d169      	bne.n	80052bc <InfraredPD_Update+0x3e4>
 80051e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80051ea:	65a2      	str	r2, [r4, #88]	; 0x58
 80051ec:	b1d3      	cbz	r3, 8005224 <InfraredPD_Update+0x34c>
 80051ee:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 80051d4 <InfraredPD_Update+0x2fc>
 80051f2:	2200      	movs	r2, #0
 80051f4:	3201      	adds	r2, #1
 80051f6:	ecb1 7a01 	vldmia	r1!, {s14}
 80051fa:	b290      	uxth	r0, r2
 80051fc:	4283      	cmp	r3, r0
 80051fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005202:	d8f7      	bhi.n	80051f4 <InfraredPD_Update+0x31c>
 8005204:	ee07 3a10 	vmov	s14, r3
 8005208:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800520c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005210:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 8005214:	f1bc 0f00 	cmp.w	ip, #0
 8005218:	d00a      	beq.n	8005230 <InfraredPD_Update+0x358>
 800521a:	f04f 0c00 	mov.w	ip, #0
 800521e:	f884 c04c 	strb.w	ip, [r4, #76]	; 0x4c
 8005222:	e75f      	b.n	80050e4 <InfraredPD_Update+0x20c>
 8005224:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 80051d8 <InfraredPD_Update+0x300>
 8005228:	eeb0 7a67 	vmov.f32	s14, s15
 800522c:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
 8005230:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8005234:	2b00      	cmp	r3, #0
 8005236:	f040 80c8 	bne.w	80053ca <InfraredPD_Update+0x4f2>
 800523a:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 800523e:	b17a      	cbz	r2, 8005260 <InfraredPD_Update+0x388>
 8005240:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8005244:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 8005248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800524c:	eef1 6a66 	vneg.f32	s13, s13
 8005250:	eef4 7ae6 	vcmpe.f32	s15, s13
 8005254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005258:	f340 8115 	ble.w	8005486 <InfraredPD_Update+0x5ae>
 800525c:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8005260:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8005264:	2b00      	cmp	r3, #0
 8005266:	f47f af3d 	bne.w	80050e4 <InfraredPD_Update+0x20c>
 800526a:	edd4 6a16 	vldr	s13, [r4, #88]	; 0x58
 800526e:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 8005272:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005276:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800527a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800527e:	f340 8127 	ble.w	80054d0 <InfraredPD_Update+0x5f8>
 8005282:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8005286:	ee37 7a87 	vadd.f32	s14, s15, s14
 800528a:	2301      	movs	r3, #1
 800528c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8005290:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 8005294:	e726      	b.n	80050e4 <InfraredPD_Update+0x20c>
 8005296:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 800529a:	eef0 6ac8 	vabs.f32	s13, s16
 800529e:	eef4 6ac7 	vcmpe.f32	s13, s14
 80052a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a6:	f77f af59 	ble.w	800515c <InfraredPD_Update+0x284>
 80052aa:	2701      	movs	r7, #1
 80052ac:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 80052b0:	e754      	b.n	800515c <InfraredPD_Update+0x284>
 80052b2:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 80052b6:	e707      	b.n	80050c8 <InfraredPD_Update+0x1f0>
 80052b8:	712f      	strb	r7, [r5, #4]
 80052ba:	e696      	b.n	8004fea <InfraredPD_Update+0x112>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d196      	bne.n	80051ee <InfraredPD_Update+0x316>
 80052c0:	4ba5      	ldr	r3, [pc, #660]	; (8005558 <InfraredPD_Update+0x680>)
 80052c2:	6563      	str	r3, [r4, #84]	; 0x54
 80052c4:	e7a9      	b.n	800521a <InfraredPD_Update+0x342>
 80052c6:	2300      	movs	r3, #0
 80052c8:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 80052cc:	e746      	b.n	800515c <InfraredPD_Update+0x284>
 80052ce:	f8b4 90a4 	ldrh.w	r9, [r4, #164]	; 0xa4
 80052d2:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
 80052d6:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 80052da:	ee78 7ae7 	vsub.f32	s15, s17, s15
 80052de:	f109 0901 	add.w	r9, r9, #1
 80052e2:	fa1f f989 	uxth.w	r9, r9
 80052e6:	ee17 0a90 	vmov	r0, s15
 80052ea:	f8a4 90a4 	strh.w	r9, [r4, #164]	; 0xa4
 80052ee:	ed8d 7a01 	vstr	s14, [sp, #4]
 80052f2:	f7fb fa5b 	bl	80007ac <__aeabi_f2d>
 80052f6:	4682      	mov	sl, r0
 80052f8:	9801      	ldr	r0, [sp, #4]
 80052fa:	468b      	mov	fp, r1
 80052fc:	f7fb fa56 	bl	80007ac <__aeabi_f2d>
 8005300:	a393      	add	r3, pc, #588	; (adr r3, 8005550 <InfraredPD_Update+0x678>)
 8005302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005306:	f7fa ffc3 	bl	8000290 <__aeabi_dmul>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4650      	mov	r0, sl
 8005310:	4659      	mov	r1, fp
 8005312:	f7fb fb03 	bl	800091c <__aeabi_dcmplt>
 8005316:	2800      	cmp	r0, #0
 8005318:	f47f ae44 	bne.w	8004fa4 <InfraredPD_Update+0xcc>
 800531c:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 8005320:	454b      	cmp	r3, r9
 8005322:	f43f ae3f 	beq.w	8004fa4 <InfraredPD_Update+0xcc>
 8005326:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 800532a:	ed9d 7a01 	vldr	s14, [sp, #4]
 800532e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005336:	d505      	bpl.n	8005344 <InfraredPD_Update+0x46c>
 8005338:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
 800533c:	f04f 0801 	mov.w	r8, #1
 8005340:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 8005344:	ee07 6a90 	vmov	s15, r6
 8005348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800534c:	eec8 6aa7 	vdiv.f32	s13, s17, s15
 8005350:	ee88 7a27 	vdiv.f32	s14, s16, s15
 8005354:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8005358:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800535c:	ee16 3a90 	vmov	r3, s13
 8005360:	802b      	strh	r3, [r5, #0]
 8005362:	ee17 3a10 	vmov	r3, s14
 8005366:	806b      	strh	r3, [r5, #2]
 8005368:	e720      	b.n	80051ac <InfraredPD_Update+0x2d4>
 800536a:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 800536e:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8005372:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800537a:	f57f ae00 	bpl.w	8004f7e <InfraredPD_Update+0xa6>
 800537e:	2300      	movs	r3, #0
 8005380:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8005384:	f8c4 30a2 	str.w	r3, [r4, #162]	; 0xa2
 8005388:	e611      	b.n	8004fae <InfraredPD_Update+0xd6>
 800538a:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 800538e:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8005392:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800539a:	d57b      	bpl.n	8005494 <InfraredPD_Update+0x5bc>
 800539c:	2300      	movs	r3, #0
 800539e:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80053a2:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 80053a6:	e602      	b.n	8004fae <InfraredPD_Update+0xd6>
 80053a8:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 80053ac:	ee78 6ae7 	vsub.f32	s13, s17, s15
 80053b0:	eef4 6ac7 	vcmpe.f32	s13, s14
 80053b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053b8:	f340 8081 	ble.w	80054be <InfraredPD_Update+0x5e6>
 80053bc:	f04f 0803 	mov.w	r8, #3
 80053c0:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 80053c4:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
 80053c8:	e7bc      	b.n	8005344 <InfraredPD_Update+0x46c>
 80053ca:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 80053ce:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 80053d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053d6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80053da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053de:	d552      	bpl.n	8005486 <InfraredPD_Update+0x5ae>
 80053e0:	2300      	movs	r3, #0
 80053e2:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 80053e6:	e73b      	b.n	8005260 <InfraredPD_Update+0x388>
 80053e8:	2700      	movs	r7, #0
 80053ea:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 80053ee:	f8a4 708e 	strh.w	r7, [r4, #142]	; 0x8e
 80053f2:	e6b3      	b.n	800515c <InfraredPD_Update+0x284>
 80053f4:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 80053f8:	e622      	b.n	8005040 <InfraredPD_Update+0x168>
 80053fa:	eddf 5a58 	vldr	s11, [pc, #352]	; 800555c <InfraredPD_Update+0x684>
 80053fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005560 <InfraredPD_Update+0x688>
 8005402:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8005406:	ed94 5a0e 	vldr	s10, [r4, #56]	; 0x38
 800540a:	eee7 6a25 	vfma.f32	s13, s14, s11
 800540e:	eeb0 7a46 	vmov.f32	s14, s12
 8005412:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8005416:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
 800541a:	ee95 7aa5 	vfnms.f32	s14, s11, s11
 800541e:	eee5 7a07 	vfma.f32	s15, s10, s14
 8005422:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8005426:	e5a4      	b.n	8004f72 <InfraredPD_Update+0x9a>
 8005428:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800542c:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8005430:	e64c      	b.n	80050cc <InfraredPD_Update+0x1f4>
 8005432:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 8005436:	edd4 6a05 	vldr	s13, [r4, #20]
 800543a:	ed9f 6a48 	vldr	s12, [pc, #288]	; 800555c <InfraredPD_Update+0x684>
 800543e:	ee37 7a65 	vsub.f32	s14, s14, s11
 8005442:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005446:	eee7 7a26 	vfma.f32	s15, s14, s13
 800544a:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 800544e:	e590      	b.n	8004f72 <InfraredPD_Update+0x9a>
 8005450:	1e4f      	subs	r7, r1, #1
 8005452:	4662      	mov	r2, ip
 8005454:	fa1f fc87 	uxth.w	ip, r7
 8005458:	2700      	movs	r7, #0
 800545a:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 800545e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005564 <InfraredPD_Update+0x68c>
 8005462:	1d17      	adds	r7, r2, #4
 8005464:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 8005468:	ecf2 7a01 	vldmia	r2!, {s15}
 800546c:	4297      	cmp	r7, r2
 800546e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005472:	d1f9      	bne.n	8005468 <InfraredPD_Update+0x590>
 8005474:	ee07 1a90 	vmov	s15, r1
 8005478:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800547c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005480:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8005484:	e622      	b.n	80050cc <InfraredPD_Update+0x1f4>
 8005486:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
 800548a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800548e:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 8005492:	e6e5      	b.n	8005260 <InfraredPD_Update+0x388>
 8005494:	bba7      	cbnz	r7, 8005500 <InfraredPD_Update+0x628>
 8005496:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 800549a:	b38b      	cbz	r3, 8005500 <InfraredPD_Update+0x628>
 800549c:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 80054a0:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
 80054a4:	3301      	adds	r3, #1
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	429a      	cmp	r2, r3
 80054aa:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 80054ae:	f47f af49 	bne.w	8005344 <InfraredPD_Update+0x46c>
 80054b2:	2302      	movs	r3, #2
 80054b4:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80054b8:	f8a4 70a0 	strh.w	r7, [r4, #160]	; 0xa0
 80054bc:	e57e      	b.n	8004fbc <InfraredPD_Update+0xe4>
 80054be:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 80054c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ca:	f57f ad70 	bpl.w	8004fae <InfraredPD_Update+0xd6>
 80054ce:	e735      	b.n	800533c <InfraredPD_Update+0x464>
 80054d0:	eef1 7a67 	vneg.f32	s15, s15
 80054d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80054d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054dc:	f57f ae02 	bpl.w	80050e4 <InfraredPD_Update+0x20c>
 80054e0:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 80054e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054ec:	f77f adfa 	ble.w	80050e4 <InfraredPD_Update+0x20c>
 80054f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80054f4:	2301      	movs	r3, #1
 80054f6:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80054fa:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 80054fe:	e5f1      	b.n	80050e4 <InfraredPD_Update+0x20c>
 8005500:	2300      	movs	r3, #0
 8005502:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8005506:	e71d      	b.n	8005344 <InfraredPD_Update+0x46c>
 8005508:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 800550c:	f8b4 109a 	ldrh.w	r1, [r4, #154]	; 0x9a
 8005510:	3301      	adds	r3, #1
 8005512:	b29b      	uxth	r3, r3
 8005514:	2200      	movs	r2, #0
 8005516:	4299      	cmp	r1, r3
 8005518:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
 800551c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8005520:	f47f ad4c 	bne.w	8004fbc <InfraredPD_Update+0xe4>
 8005524:	f884 70a6 	strb.w	r7, [r4, #166]	; 0xa6
 8005528:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
 800552c:	46b8      	mov	r8, r7
 800552e:	e709      	b.n	8005344 <InfraredPD_Update+0x46c>
 8005530:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8005534:	e542      	b.n	8004fbc <InfraredPD_Update+0xe4>
 8005536:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 800553a:	6a07      	ldr	r7, [r0, #32]
 800553c:	3301      	adds	r3, #1
 800553e:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8005542:	fa12 f283 	uxtah	r2, r2, r3
 8005546:	3701      	adds	r7, #1
 8005548:	6207      	str	r7, [r0, #32]
 800554a:	b29b      	uxth	r3, r3
 800554c:	0090      	lsls	r0, r2, #2
 800554e:	e4f8      	b.n	8004f42 <InfraredPD_Update+0x6a>
 8005550:	cccccccd 	.word	0xcccccccd
 8005554:	3feccccc 	.word	0x3feccccc
 8005558:	7fc00000 	.word	0x7fc00000
 800555c:	3c23d70a 	.word	0x3c23d70a
 8005560:	43889333 	.word	0x43889333
 8005564:	00000000 	.word	0x00000000

08005568 <malloc>:
 8005568:	4b02      	ldr	r3, [pc, #8]	; (8005574 <malloc+0xc>)
 800556a:	4601      	mov	r1, r0
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	f000 b82b 	b.w	80055c8 <_malloc_r>
 8005572:	bf00      	nop
 8005574:	20000058 	.word	0x20000058

08005578 <free>:
 8005578:	4b02      	ldr	r3, [pc, #8]	; (8005584 <free+0xc>)
 800557a:	4601      	mov	r1, r0
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	f000 b913 	b.w	80057a8 <_free_r>
 8005582:	bf00      	nop
 8005584:	20000058 	.word	0x20000058

08005588 <sbrk_aligned>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	4e0e      	ldr	r6, [pc, #56]	; (80055c4 <sbrk_aligned+0x3c>)
 800558c:	460c      	mov	r4, r1
 800558e:	6831      	ldr	r1, [r6, #0]
 8005590:	4605      	mov	r5, r0
 8005592:	b911      	cbnz	r1, 800559a <sbrk_aligned+0x12>
 8005594:	f000 f8cc 	bl	8005730 <_sbrk_r>
 8005598:	6030      	str	r0, [r6, #0]
 800559a:	4621      	mov	r1, r4
 800559c:	4628      	mov	r0, r5
 800559e:	f000 f8c7 	bl	8005730 <_sbrk_r>
 80055a2:	1c43      	adds	r3, r0, #1
 80055a4:	d00a      	beq.n	80055bc <sbrk_aligned+0x34>
 80055a6:	1cc4      	adds	r4, r0, #3
 80055a8:	f024 0403 	bic.w	r4, r4, #3
 80055ac:	42a0      	cmp	r0, r4
 80055ae:	d007      	beq.n	80055c0 <sbrk_aligned+0x38>
 80055b0:	1a21      	subs	r1, r4, r0
 80055b2:	4628      	mov	r0, r5
 80055b4:	f000 f8bc 	bl	8005730 <_sbrk_r>
 80055b8:	3001      	adds	r0, #1
 80055ba:	d101      	bne.n	80055c0 <sbrk_aligned+0x38>
 80055bc:	f04f 34ff 	mov.w	r4, #4294967295
 80055c0:	4620      	mov	r0, r4
 80055c2:	bd70      	pop	{r4, r5, r6, pc}
 80055c4:	20000220 	.word	0x20000220

080055c8 <_malloc_r>:
 80055c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055cc:	1ccd      	adds	r5, r1, #3
 80055ce:	f025 0503 	bic.w	r5, r5, #3
 80055d2:	3508      	adds	r5, #8
 80055d4:	2d0c      	cmp	r5, #12
 80055d6:	bf38      	it	cc
 80055d8:	250c      	movcc	r5, #12
 80055da:	2d00      	cmp	r5, #0
 80055dc:	4607      	mov	r7, r0
 80055de:	db01      	blt.n	80055e4 <_malloc_r+0x1c>
 80055e0:	42a9      	cmp	r1, r5
 80055e2:	d905      	bls.n	80055f0 <_malloc_r+0x28>
 80055e4:	230c      	movs	r3, #12
 80055e6:	603b      	str	r3, [r7, #0]
 80055e8:	2600      	movs	r6, #0
 80055ea:	4630      	mov	r0, r6
 80055ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80056c4 <_malloc_r+0xfc>
 80055f4:	f000 f868 	bl	80056c8 <__malloc_lock>
 80055f8:	f8d8 3000 	ldr.w	r3, [r8]
 80055fc:	461c      	mov	r4, r3
 80055fe:	bb5c      	cbnz	r4, 8005658 <_malloc_r+0x90>
 8005600:	4629      	mov	r1, r5
 8005602:	4638      	mov	r0, r7
 8005604:	f7ff ffc0 	bl	8005588 <sbrk_aligned>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	4604      	mov	r4, r0
 800560c:	d155      	bne.n	80056ba <_malloc_r+0xf2>
 800560e:	f8d8 4000 	ldr.w	r4, [r8]
 8005612:	4626      	mov	r6, r4
 8005614:	2e00      	cmp	r6, #0
 8005616:	d145      	bne.n	80056a4 <_malloc_r+0xdc>
 8005618:	2c00      	cmp	r4, #0
 800561a:	d048      	beq.n	80056ae <_malloc_r+0xe6>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	4631      	mov	r1, r6
 8005620:	4638      	mov	r0, r7
 8005622:	eb04 0903 	add.w	r9, r4, r3
 8005626:	f000 f883 	bl	8005730 <_sbrk_r>
 800562a:	4581      	cmp	r9, r0
 800562c:	d13f      	bne.n	80056ae <_malloc_r+0xe6>
 800562e:	6821      	ldr	r1, [r4, #0]
 8005630:	1a6d      	subs	r5, r5, r1
 8005632:	4629      	mov	r1, r5
 8005634:	4638      	mov	r0, r7
 8005636:	f7ff ffa7 	bl	8005588 <sbrk_aligned>
 800563a:	3001      	adds	r0, #1
 800563c:	d037      	beq.n	80056ae <_malloc_r+0xe6>
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	442b      	add	r3, r5
 8005642:	6023      	str	r3, [r4, #0]
 8005644:	f8d8 3000 	ldr.w	r3, [r8]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d038      	beq.n	80056be <_malloc_r+0xf6>
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	42a2      	cmp	r2, r4
 8005650:	d12b      	bne.n	80056aa <_malloc_r+0xe2>
 8005652:	2200      	movs	r2, #0
 8005654:	605a      	str	r2, [r3, #4]
 8005656:	e00f      	b.n	8005678 <_malloc_r+0xb0>
 8005658:	6822      	ldr	r2, [r4, #0]
 800565a:	1b52      	subs	r2, r2, r5
 800565c:	d41f      	bmi.n	800569e <_malloc_r+0xd6>
 800565e:	2a0b      	cmp	r2, #11
 8005660:	d917      	bls.n	8005692 <_malloc_r+0xca>
 8005662:	1961      	adds	r1, r4, r5
 8005664:	42a3      	cmp	r3, r4
 8005666:	6025      	str	r5, [r4, #0]
 8005668:	bf18      	it	ne
 800566a:	6059      	strne	r1, [r3, #4]
 800566c:	6863      	ldr	r3, [r4, #4]
 800566e:	bf08      	it	eq
 8005670:	f8c8 1000 	streq.w	r1, [r8]
 8005674:	5162      	str	r2, [r4, r5]
 8005676:	604b      	str	r3, [r1, #4]
 8005678:	4638      	mov	r0, r7
 800567a:	f104 060b 	add.w	r6, r4, #11
 800567e:	f000 f829 	bl	80056d4 <__malloc_unlock>
 8005682:	f026 0607 	bic.w	r6, r6, #7
 8005686:	1d23      	adds	r3, r4, #4
 8005688:	1af2      	subs	r2, r6, r3
 800568a:	d0ae      	beq.n	80055ea <_malloc_r+0x22>
 800568c:	1b9b      	subs	r3, r3, r6
 800568e:	50a3      	str	r3, [r4, r2]
 8005690:	e7ab      	b.n	80055ea <_malloc_r+0x22>
 8005692:	42a3      	cmp	r3, r4
 8005694:	6862      	ldr	r2, [r4, #4]
 8005696:	d1dd      	bne.n	8005654 <_malloc_r+0x8c>
 8005698:	f8c8 2000 	str.w	r2, [r8]
 800569c:	e7ec      	b.n	8005678 <_malloc_r+0xb0>
 800569e:	4623      	mov	r3, r4
 80056a0:	6864      	ldr	r4, [r4, #4]
 80056a2:	e7ac      	b.n	80055fe <_malloc_r+0x36>
 80056a4:	4634      	mov	r4, r6
 80056a6:	6876      	ldr	r6, [r6, #4]
 80056a8:	e7b4      	b.n	8005614 <_malloc_r+0x4c>
 80056aa:	4613      	mov	r3, r2
 80056ac:	e7cc      	b.n	8005648 <_malloc_r+0x80>
 80056ae:	230c      	movs	r3, #12
 80056b0:	603b      	str	r3, [r7, #0]
 80056b2:	4638      	mov	r0, r7
 80056b4:	f000 f80e 	bl	80056d4 <__malloc_unlock>
 80056b8:	e797      	b.n	80055ea <_malloc_r+0x22>
 80056ba:	6025      	str	r5, [r4, #0]
 80056bc:	e7dc      	b.n	8005678 <_malloc_r+0xb0>
 80056be:	605b      	str	r3, [r3, #4]
 80056c0:	deff      	udf	#255	; 0xff
 80056c2:	bf00      	nop
 80056c4:	2000021c 	.word	0x2000021c

080056c8 <__malloc_lock>:
 80056c8:	4801      	ldr	r0, [pc, #4]	; (80056d0 <__malloc_lock+0x8>)
 80056ca:	f000 b86b 	b.w	80057a4 <__retarget_lock_acquire_recursive>
 80056ce:	bf00      	nop
 80056d0:	20000360 	.word	0x20000360

080056d4 <__malloc_unlock>:
 80056d4:	4801      	ldr	r0, [pc, #4]	; (80056dc <__malloc_unlock+0x8>)
 80056d6:	f000 b866 	b.w	80057a6 <__retarget_lock_release_recursive>
 80056da:	bf00      	nop
 80056dc:	20000360 	.word	0x20000360

080056e0 <siprintf>:
 80056e0:	b40e      	push	{r1, r2, r3}
 80056e2:	b500      	push	{lr}
 80056e4:	b09c      	sub	sp, #112	; 0x70
 80056e6:	ab1d      	add	r3, sp, #116	; 0x74
 80056e8:	9002      	str	r0, [sp, #8]
 80056ea:	9006      	str	r0, [sp, #24]
 80056ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80056f0:	4809      	ldr	r0, [pc, #36]	; (8005718 <siprintf+0x38>)
 80056f2:	9107      	str	r1, [sp, #28]
 80056f4:	9104      	str	r1, [sp, #16]
 80056f6:	4909      	ldr	r1, [pc, #36]	; (800571c <siprintf+0x3c>)
 80056f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80056fc:	9105      	str	r1, [sp, #20]
 80056fe:	6800      	ldr	r0, [r0, #0]
 8005700:	9301      	str	r3, [sp, #4]
 8005702:	a902      	add	r1, sp, #8
 8005704:	f000 f8f6 	bl	80058f4 <_svfiprintf_r>
 8005708:	9b02      	ldr	r3, [sp, #8]
 800570a:	2200      	movs	r2, #0
 800570c:	701a      	strb	r2, [r3, #0]
 800570e:	b01c      	add	sp, #112	; 0x70
 8005710:	f85d eb04 	ldr.w	lr, [sp], #4
 8005714:	b003      	add	sp, #12
 8005716:	4770      	bx	lr
 8005718:	20000058 	.word	0x20000058
 800571c:	ffff0208 	.word	0xffff0208

08005720 <memset>:
 8005720:	4402      	add	r2, r0
 8005722:	4603      	mov	r3, r0
 8005724:	4293      	cmp	r3, r2
 8005726:	d100      	bne.n	800572a <memset+0xa>
 8005728:	4770      	bx	lr
 800572a:	f803 1b01 	strb.w	r1, [r3], #1
 800572e:	e7f9      	b.n	8005724 <memset+0x4>

08005730 <_sbrk_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	4d06      	ldr	r5, [pc, #24]	; (800574c <_sbrk_r+0x1c>)
 8005734:	2300      	movs	r3, #0
 8005736:	4604      	mov	r4, r0
 8005738:	4608      	mov	r0, r1
 800573a:	602b      	str	r3, [r5, #0]
 800573c:	f7fb fea6 	bl	800148c <_sbrk>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d102      	bne.n	800574a <_sbrk_r+0x1a>
 8005744:	682b      	ldr	r3, [r5, #0]
 8005746:	b103      	cbz	r3, 800574a <_sbrk_r+0x1a>
 8005748:	6023      	str	r3, [r4, #0]
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	2000035c 	.word	0x2000035c

08005750 <__errno>:
 8005750:	4b01      	ldr	r3, [pc, #4]	; (8005758 <__errno+0x8>)
 8005752:	6818      	ldr	r0, [r3, #0]
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	20000058 	.word	0x20000058

0800575c <__libc_init_array>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	4d0d      	ldr	r5, [pc, #52]	; (8005794 <__libc_init_array+0x38>)
 8005760:	4c0d      	ldr	r4, [pc, #52]	; (8005798 <__libc_init_array+0x3c>)
 8005762:	1b64      	subs	r4, r4, r5
 8005764:	10a4      	asrs	r4, r4, #2
 8005766:	2600      	movs	r6, #0
 8005768:	42a6      	cmp	r6, r4
 800576a:	d109      	bne.n	8005780 <__libc_init_array+0x24>
 800576c:	4d0b      	ldr	r5, [pc, #44]	; (800579c <__libc_init_array+0x40>)
 800576e:	4c0c      	ldr	r4, [pc, #48]	; (80057a0 <__libc_init_array+0x44>)
 8005770:	f000 fd24 	bl	80061bc <_init>
 8005774:	1b64      	subs	r4, r4, r5
 8005776:	10a4      	asrs	r4, r4, #2
 8005778:	2600      	movs	r6, #0
 800577a:	42a6      	cmp	r6, r4
 800577c:	d105      	bne.n	800578a <__libc_init_array+0x2e>
 800577e:	bd70      	pop	{r4, r5, r6, pc}
 8005780:	f855 3b04 	ldr.w	r3, [r5], #4
 8005784:	4798      	blx	r3
 8005786:	3601      	adds	r6, #1
 8005788:	e7ee      	b.n	8005768 <__libc_init_array+0xc>
 800578a:	f855 3b04 	ldr.w	r3, [r5], #4
 800578e:	4798      	blx	r3
 8005790:	3601      	adds	r6, #1
 8005792:	e7f2      	b.n	800577a <__libc_init_array+0x1e>
 8005794:	080062ec 	.word	0x080062ec
 8005798:	080062ec 	.word	0x080062ec
 800579c:	080062ec 	.word	0x080062ec
 80057a0:	080062f0 	.word	0x080062f0

080057a4 <__retarget_lock_acquire_recursive>:
 80057a4:	4770      	bx	lr

080057a6 <__retarget_lock_release_recursive>:
 80057a6:	4770      	bx	lr

080057a8 <_free_r>:
 80057a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80057aa:	2900      	cmp	r1, #0
 80057ac:	d044      	beq.n	8005838 <_free_r+0x90>
 80057ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057b2:	9001      	str	r0, [sp, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f1a1 0404 	sub.w	r4, r1, #4
 80057ba:	bfb8      	it	lt
 80057bc:	18e4      	addlt	r4, r4, r3
 80057be:	f7ff ff83 	bl	80056c8 <__malloc_lock>
 80057c2:	4a1e      	ldr	r2, [pc, #120]	; (800583c <_free_r+0x94>)
 80057c4:	9801      	ldr	r0, [sp, #4]
 80057c6:	6813      	ldr	r3, [r2, #0]
 80057c8:	b933      	cbnz	r3, 80057d8 <_free_r+0x30>
 80057ca:	6063      	str	r3, [r4, #4]
 80057cc:	6014      	str	r4, [r2, #0]
 80057ce:	b003      	add	sp, #12
 80057d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057d4:	f7ff bf7e 	b.w	80056d4 <__malloc_unlock>
 80057d8:	42a3      	cmp	r3, r4
 80057da:	d908      	bls.n	80057ee <_free_r+0x46>
 80057dc:	6825      	ldr	r5, [r4, #0]
 80057de:	1961      	adds	r1, r4, r5
 80057e0:	428b      	cmp	r3, r1
 80057e2:	bf01      	itttt	eq
 80057e4:	6819      	ldreq	r1, [r3, #0]
 80057e6:	685b      	ldreq	r3, [r3, #4]
 80057e8:	1949      	addeq	r1, r1, r5
 80057ea:	6021      	streq	r1, [r4, #0]
 80057ec:	e7ed      	b.n	80057ca <_free_r+0x22>
 80057ee:	461a      	mov	r2, r3
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	b10b      	cbz	r3, 80057f8 <_free_r+0x50>
 80057f4:	42a3      	cmp	r3, r4
 80057f6:	d9fa      	bls.n	80057ee <_free_r+0x46>
 80057f8:	6811      	ldr	r1, [r2, #0]
 80057fa:	1855      	adds	r5, r2, r1
 80057fc:	42a5      	cmp	r5, r4
 80057fe:	d10b      	bne.n	8005818 <_free_r+0x70>
 8005800:	6824      	ldr	r4, [r4, #0]
 8005802:	4421      	add	r1, r4
 8005804:	1854      	adds	r4, r2, r1
 8005806:	42a3      	cmp	r3, r4
 8005808:	6011      	str	r1, [r2, #0]
 800580a:	d1e0      	bne.n	80057ce <_free_r+0x26>
 800580c:	681c      	ldr	r4, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	6053      	str	r3, [r2, #4]
 8005812:	440c      	add	r4, r1
 8005814:	6014      	str	r4, [r2, #0]
 8005816:	e7da      	b.n	80057ce <_free_r+0x26>
 8005818:	d902      	bls.n	8005820 <_free_r+0x78>
 800581a:	230c      	movs	r3, #12
 800581c:	6003      	str	r3, [r0, #0]
 800581e:	e7d6      	b.n	80057ce <_free_r+0x26>
 8005820:	6825      	ldr	r5, [r4, #0]
 8005822:	1961      	adds	r1, r4, r5
 8005824:	428b      	cmp	r3, r1
 8005826:	bf04      	itt	eq
 8005828:	6819      	ldreq	r1, [r3, #0]
 800582a:	685b      	ldreq	r3, [r3, #4]
 800582c:	6063      	str	r3, [r4, #4]
 800582e:	bf04      	itt	eq
 8005830:	1949      	addeq	r1, r1, r5
 8005832:	6021      	streq	r1, [r4, #0]
 8005834:	6054      	str	r4, [r2, #4]
 8005836:	e7ca      	b.n	80057ce <_free_r+0x26>
 8005838:	b003      	add	sp, #12
 800583a:	bd30      	pop	{r4, r5, pc}
 800583c:	2000021c 	.word	0x2000021c

08005840 <__ssputs_r>:
 8005840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005844:	688e      	ldr	r6, [r1, #8]
 8005846:	461f      	mov	r7, r3
 8005848:	42be      	cmp	r6, r7
 800584a:	680b      	ldr	r3, [r1, #0]
 800584c:	4682      	mov	sl, r0
 800584e:	460c      	mov	r4, r1
 8005850:	4690      	mov	r8, r2
 8005852:	d82c      	bhi.n	80058ae <__ssputs_r+0x6e>
 8005854:	898a      	ldrh	r2, [r1, #12]
 8005856:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800585a:	d026      	beq.n	80058aa <__ssputs_r+0x6a>
 800585c:	6965      	ldr	r5, [r4, #20]
 800585e:	6909      	ldr	r1, [r1, #16]
 8005860:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005864:	eba3 0901 	sub.w	r9, r3, r1
 8005868:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800586c:	1c7b      	adds	r3, r7, #1
 800586e:	444b      	add	r3, r9
 8005870:	106d      	asrs	r5, r5, #1
 8005872:	429d      	cmp	r5, r3
 8005874:	bf38      	it	cc
 8005876:	461d      	movcc	r5, r3
 8005878:	0553      	lsls	r3, r2, #21
 800587a:	d527      	bpl.n	80058cc <__ssputs_r+0x8c>
 800587c:	4629      	mov	r1, r5
 800587e:	f7ff fea3 	bl	80055c8 <_malloc_r>
 8005882:	4606      	mov	r6, r0
 8005884:	b360      	cbz	r0, 80058e0 <__ssputs_r+0xa0>
 8005886:	6921      	ldr	r1, [r4, #16]
 8005888:	464a      	mov	r2, r9
 800588a:	f000 fadb 	bl	8005e44 <memcpy>
 800588e:	89a3      	ldrh	r3, [r4, #12]
 8005890:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005898:	81a3      	strh	r3, [r4, #12]
 800589a:	6126      	str	r6, [r4, #16]
 800589c:	6165      	str	r5, [r4, #20]
 800589e:	444e      	add	r6, r9
 80058a0:	eba5 0509 	sub.w	r5, r5, r9
 80058a4:	6026      	str	r6, [r4, #0]
 80058a6:	60a5      	str	r5, [r4, #8]
 80058a8:	463e      	mov	r6, r7
 80058aa:	42be      	cmp	r6, r7
 80058ac:	d900      	bls.n	80058b0 <__ssputs_r+0x70>
 80058ae:	463e      	mov	r6, r7
 80058b0:	6820      	ldr	r0, [r4, #0]
 80058b2:	4632      	mov	r2, r6
 80058b4:	4641      	mov	r1, r8
 80058b6:	f000 faab 	bl	8005e10 <memmove>
 80058ba:	68a3      	ldr	r3, [r4, #8]
 80058bc:	1b9b      	subs	r3, r3, r6
 80058be:	60a3      	str	r3, [r4, #8]
 80058c0:	6823      	ldr	r3, [r4, #0]
 80058c2:	4433      	add	r3, r6
 80058c4:	6023      	str	r3, [r4, #0]
 80058c6:	2000      	movs	r0, #0
 80058c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058cc:	462a      	mov	r2, r5
 80058ce:	f000 fac7 	bl	8005e60 <_realloc_r>
 80058d2:	4606      	mov	r6, r0
 80058d4:	2800      	cmp	r0, #0
 80058d6:	d1e0      	bne.n	800589a <__ssputs_r+0x5a>
 80058d8:	6921      	ldr	r1, [r4, #16]
 80058da:	4650      	mov	r0, sl
 80058dc:	f7ff ff64 	bl	80057a8 <_free_r>
 80058e0:	230c      	movs	r3, #12
 80058e2:	f8ca 3000 	str.w	r3, [sl]
 80058e6:	89a3      	ldrh	r3, [r4, #12]
 80058e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058ec:	81a3      	strh	r3, [r4, #12]
 80058ee:	f04f 30ff 	mov.w	r0, #4294967295
 80058f2:	e7e9      	b.n	80058c8 <__ssputs_r+0x88>

080058f4 <_svfiprintf_r>:
 80058f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058f8:	4698      	mov	r8, r3
 80058fa:	898b      	ldrh	r3, [r1, #12]
 80058fc:	061b      	lsls	r3, r3, #24
 80058fe:	b09d      	sub	sp, #116	; 0x74
 8005900:	4607      	mov	r7, r0
 8005902:	460d      	mov	r5, r1
 8005904:	4614      	mov	r4, r2
 8005906:	d50e      	bpl.n	8005926 <_svfiprintf_r+0x32>
 8005908:	690b      	ldr	r3, [r1, #16]
 800590a:	b963      	cbnz	r3, 8005926 <_svfiprintf_r+0x32>
 800590c:	2140      	movs	r1, #64	; 0x40
 800590e:	f7ff fe5b 	bl	80055c8 <_malloc_r>
 8005912:	6028      	str	r0, [r5, #0]
 8005914:	6128      	str	r0, [r5, #16]
 8005916:	b920      	cbnz	r0, 8005922 <_svfiprintf_r+0x2e>
 8005918:	230c      	movs	r3, #12
 800591a:	603b      	str	r3, [r7, #0]
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	e0d0      	b.n	8005ac4 <_svfiprintf_r+0x1d0>
 8005922:	2340      	movs	r3, #64	; 0x40
 8005924:	616b      	str	r3, [r5, #20]
 8005926:	2300      	movs	r3, #0
 8005928:	9309      	str	r3, [sp, #36]	; 0x24
 800592a:	2320      	movs	r3, #32
 800592c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005930:	f8cd 800c 	str.w	r8, [sp, #12]
 8005934:	2330      	movs	r3, #48	; 0x30
 8005936:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005adc <_svfiprintf_r+0x1e8>
 800593a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800593e:	f04f 0901 	mov.w	r9, #1
 8005942:	4623      	mov	r3, r4
 8005944:	469a      	mov	sl, r3
 8005946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800594a:	b10a      	cbz	r2, 8005950 <_svfiprintf_r+0x5c>
 800594c:	2a25      	cmp	r2, #37	; 0x25
 800594e:	d1f9      	bne.n	8005944 <_svfiprintf_r+0x50>
 8005950:	ebba 0b04 	subs.w	fp, sl, r4
 8005954:	d00b      	beq.n	800596e <_svfiprintf_r+0x7a>
 8005956:	465b      	mov	r3, fp
 8005958:	4622      	mov	r2, r4
 800595a:	4629      	mov	r1, r5
 800595c:	4638      	mov	r0, r7
 800595e:	f7ff ff6f 	bl	8005840 <__ssputs_r>
 8005962:	3001      	adds	r0, #1
 8005964:	f000 80a9 	beq.w	8005aba <_svfiprintf_r+0x1c6>
 8005968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800596a:	445a      	add	r2, fp
 800596c:	9209      	str	r2, [sp, #36]	; 0x24
 800596e:	f89a 3000 	ldrb.w	r3, [sl]
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 80a1 	beq.w	8005aba <_svfiprintf_r+0x1c6>
 8005978:	2300      	movs	r3, #0
 800597a:	f04f 32ff 	mov.w	r2, #4294967295
 800597e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005982:	f10a 0a01 	add.w	sl, sl, #1
 8005986:	9304      	str	r3, [sp, #16]
 8005988:	9307      	str	r3, [sp, #28]
 800598a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800598e:	931a      	str	r3, [sp, #104]	; 0x68
 8005990:	4654      	mov	r4, sl
 8005992:	2205      	movs	r2, #5
 8005994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005998:	4850      	ldr	r0, [pc, #320]	; (8005adc <_svfiprintf_r+0x1e8>)
 800599a:	f7fa fc29 	bl	80001f0 <memchr>
 800599e:	9a04      	ldr	r2, [sp, #16]
 80059a0:	b9d8      	cbnz	r0, 80059da <_svfiprintf_r+0xe6>
 80059a2:	06d0      	lsls	r0, r2, #27
 80059a4:	bf44      	itt	mi
 80059a6:	2320      	movmi	r3, #32
 80059a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059ac:	0711      	lsls	r1, r2, #28
 80059ae:	bf44      	itt	mi
 80059b0:	232b      	movmi	r3, #43	; 0x2b
 80059b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059b6:	f89a 3000 	ldrb.w	r3, [sl]
 80059ba:	2b2a      	cmp	r3, #42	; 0x2a
 80059bc:	d015      	beq.n	80059ea <_svfiprintf_r+0xf6>
 80059be:	9a07      	ldr	r2, [sp, #28]
 80059c0:	4654      	mov	r4, sl
 80059c2:	2000      	movs	r0, #0
 80059c4:	f04f 0c0a 	mov.w	ip, #10
 80059c8:	4621      	mov	r1, r4
 80059ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059ce:	3b30      	subs	r3, #48	; 0x30
 80059d0:	2b09      	cmp	r3, #9
 80059d2:	d94d      	bls.n	8005a70 <_svfiprintf_r+0x17c>
 80059d4:	b1b0      	cbz	r0, 8005a04 <_svfiprintf_r+0x110>
 80059d6:	9207      	str	r2, [sp, #28]
 80059d8:	e014      	b.n	8005a04 <_svfiprintf_r+0x110>
 80059da:	eba0 0308 	sub.w	r3, r0, r8
 80059de:	fa09 f303 	lsl.w	r3, r9, r3
 80059e2:	4313      	orrs	r3, r2
 80059e4:	9304      	str	r3, [sp, #16]
 80059e6:	46a2      	mov	sl, r4
 80059e8:	e7d2      	b.n	8005990 <_svfiprintf_r+0x9c>
 80059ea:	9b03      	ldr	r3, [sp, #12]
 80059ec:	1d19      	adds	r1, r3, #4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	9103      	str	r1, [sp, #12]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bfbb      	ittet	lt
 80059f6:	425b      	neglt	r3, r3
 80059f8:	f042 0202 	orrlt.w	r2, r2, #2
 80059fc:	9307      	strge	r3, [sp, #28]
 80059fe:	9307      	strlt	r3, [sp, #28]
 8005a00:	bfb8      	it	lt
 8005a02:	9204      	strlt	r2, [sp, #16]
 8005a04:	7823      	ldrb	r3, [r4, #0]
 8005a06:	2b2e      	cmp	r3, #46	; 0x2e
 8005a08:	d10c      	bne.n	8005a24 <_svfiprintf_r+0x130>
 8005a0a:	7863      	ldrb	r3, [r4, #1]
 8005a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005a0e:	d134      	bne.n	8005a7a <_svfiprintf_r+0x186>
 8005a10:	9b03      	ldr	r3, [sp, #12]
 8005a12:	1d1a      	adds	r2, r3, #4
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	9203      	str	r2, [sp, #12]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	bfb8      	it	lt
 8005a1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a20:	3402      	adds	r4, #2
 8005a22:	9305      	str	r3, [sp, #20]
 8005a24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005aec <_svfiprintf_r+0x1f8>
 8005a28:	7821      	ldrb	r1, [r4, #0]
 8005a2a:	2203      	movs	r2, #3
 8005a2c:	4650      	mov	r0, sl
 8005a2e:	f7fa fbdf 	bl	80001f0 <memchr>
 8005a32:	b138      	cbz	r0, 8005a44 <_svfiprintf_r+0x150>
 8005a34:	9b04      	ldr	r3, [sp, #16]
 8005a36:	eba0 000a 	sub.w	r0, r0, sl
 8005a3a:	2240      	movs	r2, #64	; 0x40
 8005a3c:	4082      	lsls	r2, r0
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	3401      	adds	r4, #1
 8005a42:	9304      	str	r3, [sp, #16]
 8005a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a48:	4825      	ldr	r0, [pc, #148]	; (8005ae0 <_svfiprintf_r+0x1ec>)
 8005a4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a4e:	2206      	movs	r2, #6
 8005a50:	f7fa fbce 	bl	80001f0 <memchr>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d038      	beq.n	8005aca <_svfiprintf_r+0x1d6>
 8005a58:	4b22      	ldr	r3, [pc, #136]	; (8005ae4 <_svfiprintf_r+0x1f0>)
 8005a5a:	bb1b      	cbnz	r3, 8005aa4 <_svfiprintf_r+0x1b0>
 8005a5c:	9b03      	ldr	r3, [sp, #12]
 8005a5e:	3307      	adds	r3, #7
 8005a60:	f023 0307 	bic.w	r3, r3, #7
 8005a64:	3308      	adds	r3, #8
 8005a66:	9303      	str	r3, [sp, #12]
 8005a68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6a:	4433      	add	r3, r6
 8005a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a6e:	e768      	b.n	8005942 <_svfiprintf_r+0x4e>
 8005a70:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a74:	460c      	mov	r4, r1
 8005a76:	2001      	movs	r0, #1
 8005a78:	e7a6      	b.n	80059c8 <_svfiprintf_r+0xd4>
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	3401      	adds	r4, #1
 8005a7e:	9305      	str	r3, [sp, #20]
 8005a80:	4619      	mov	r1, r3
 8005a82:	f04f 0c0a 	mov.w	ip, #10
 8005a86:	4620      	mov	r0, r4
 8005a88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a8c:	3a30      	subs	r2, #48	; 0x30
 8005a8e:	2a09      	cmp	r2, #9
 8005a90:	d903      	bls.n	8005a9a <_svfiprintf_r+0x1a6>
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d0c6      	beq.n	8005a24 <_svfiprintf_r+0x130>
 8005a96:	9105      	str	r1, [sp, #20]
 8005a98:	e7c4      	b.n	8005a24 <_svfiprintf_r+0x130>
 8005a9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a9e:	4604      	mov	r4, r0
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e7f0      	b.n	8005a86 <_svfiprintf_r+0x192>
 8005aa4:	ab03      	add	r3, sp, #12
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	462a      	mov	r2, r5
 8005aaa:	4b0f      	ldr	r3, [pc, #60]	; (8005ae8 <_svfiprintf_r+0x1f4>)
 8005aac:	a904      	add	r1, sp, #16
 8005aae:	4638      	mov	r0, r7
 8005ab0:	f3af 8000 	nop.w
 8005ab4:	1c42      	adds	r2, r0, #1
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	d1d6      	bne.n	8005a68 <_svfiprintf_r+0x174>
 8005aba:	89ab      	ldrh	r3, [r5, #12]
 8005abc:	065b      	lsls	r3, r3, #25
 8005abe:	f53f af2d 	bmi.w	800591c <_svfiprintf_r+0x28>
 8005ac2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ac4:	b01d      	add	sp, #116	; 0x74
 8005ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aca:	ab03      	add	r3, sp, #12
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	462a      	mov	r2, r5
 8005ad0:	4b05      	ldr	r3, [pc, #20]	; (8005ae8 <_svfiprintf_r+0x1f4>)
 8005ad2:	a904      	add	r1, sp, #16
 8005ad4:	4638      	mov	r0, r7
 8005ad6:	f000 f879 	bl	8005bcc <_printf_i>
 8005ada:	e7eb      	b.n	8005ab4 <_svfiprintf_r+0x1c0>
 8005adc:	08006298 	.word	0x08006298
 8005ae0:	080062a2 	.word	0x080062a2
 8005ae4:	00000000 	.word	0x00000000
 8005ae8:	08005841 	.word	0x08005841
 8005aec:	0800629e 	.word	0x0800629e

08005af0 <_printf_common>:
 8005af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af4:	4616      	mov	r6, r2
 8005af6:	4699      	mov	r9, r3
 8005af8:	688a      	ldr	r2, [r1, #8]
 8005afa:	690b      	ldr	r3, [r1, #16]
 8005afc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b00:	4293      	cmp	r3, r2
 8005b02:	bfb8      	it	lt
 8005b04:	4613      	movlt	r3, r2
 8005b06:	6033      	str	r3, [r6, #0]
 8005b08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b0c:	4607      	mov	r7, r0
 8005b0e:	460c      	mov	r4, r1
 8005b10:	b10a      	cbz	r2, 8005b16 <_printf_common+0x26>
 8005b12:	3301      	adds	r3, #1
 8005b14:	6033      	str	r3, [r6, #0]
 8005b16:	6823      	ldr	r3, [r4, #0]
 8005b18:	0699      	lsls	r1, r3, #26
 8005b1a:	bf42      	ittt	mi
 8005b1c:	6833      	ldrmi	r3, [r6, #0]
 8005b1e:	3302      	addmi	r3, #2
 8005b20:	6033      	strmi	r3, [r6, #0]
 8005b22:	6825      	ldr	r5, [r4, #0]
 8005b24:	f015 0506 	ands.w	r5, r5, #6
 8005b28:	d106      	bne.n	8005b38 <_printf_common+0x48>
 8005b2a:	f104 0a19 	add.w	sl, r4, #25
 8005b2e:	68e3      	ldr	r3, [r4, #12]
 8005b30:	6832      	ldr	r2, [r6, #0]
 8005b32:	1a9b      	subs	r3, r3, r2
 8005b34:	42ab      	cmp	r3, r5
 8005b36:	dc26      	bgt.n	8005b86 <_printf_common+0x96>
 8005b38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b3c:	1e13      	subs	r3, r2, #0
 8005b3e:	6822      	ldr	r2, [r4, #0]
 8005b40:	bf18      	it	ne
 8005b42:	2301      	movne	r3, #1
 8005b44:	0692      	lsls	r2, r2, #26
 8005b46:	d42b      	bmi.n	8005ba0 <_printf_common+0xb0>
 8005b48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b4c:	4649      	mov	r1, r9
 8005b4e:	4638      	mov	r0, r7
 8005b50:	47c0      	blx	r8
 8005b52:	3001      	adds	r0, #1
 8005b54:	d01e      	beq.n	8005b94 <_printf_common+0xa4>
 8005b56:	6823      	ldr	r3, [r4, #0]
 8005b58:	6922      	ldr	r2, [r4, #16]
 8005b5a:	f003 0306 	and.w	r3, r3, #6
 8005b5e:	2b04      	cmp	r3, #4
 8005b60:	bf02      	ittt	eq
 8005b62:	68e5      	ldreq	r5, [r4, #12]
 8005b64:	6833      	ldreq	r3, [r6, #0]
 8005b66:	1aed      	subeq	r5, r5, r3
 8005b68:	68a3      	ldr	r3, [r4, #8]
 8005b6a:	bf0c      	ite	eq
 8005b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b70:	2500      	movne	r5, #0
 8005b72:	4293      	cmp	r3, r2
 8005b74:	bfc4      	itt	gt
 8005b76:	1a9b      	subgt	r3, r3, r2
 8005b78:	18ed      	addgt	r5, r5, r3
 8005b7a:	2600      	movs	r6, #0
 8005b7c:	341a      	adds	r4, #26
 8005b7e:	42b5      	cmp	r5, r6
 8005b80:	d11a      	bne.n	8005bb8 <_printf_common+0xc8>
 8005b82:	2000      	movs	r0, #0
 8005b84:	e008      	b.n	8005b98 <_printf_common+0xa8>
 8005b86:	2301      	movs	r3, #1
 8005b88:	4652      	mov	r2, sl
 8005b8a:	4649      	mov	r1, r9
 8005b8c:	4638      	mov	r0, r7
 8005b8e:	47c0      	blx	r8
 8005b90:	3001      	adds	r0, #1
 8005b92:	d103      	bne.n	8005b9c <_printf_common+0xac>
 8005b94:	f04f 30ff 	mov.w	r0, #4294967295
 8005b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b9c:	3501      	adds	r5, #1
 8005b9e:	e7c6      	b.n	8005b2e <_printf_common+0x3e>
 8005ba0:	18e1      	adds	r1, r4, r3
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	2030      	movs	r0, #48	; 0x30
 8005ba6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005baa:	4422      	add	r2, r4
 8005bac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bb4:	3302      	adds	r3, #2
 8005bb6:	e7c7      	b.n	8005b48 <_printf_common+0x58>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	4622      	mov	r2, r4
 8005bbc:	4649      	mov	r1, r9
 8005bbe:	4638      	mov	r0, r7
 8005bc0:	47c0      	blx	r8
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	d0e6      	beq.n	8005b94 <_printf_common+0xa4>
 8005bc6:	3601      	adds	r6, #1
 8005bc8:	e7d9      	b.n	8005b7e <_printf_common+0x8e>
	...

08005bcc <_printf_i>:
 8005bcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bd0:	7e0f      	ldrb	r7, [r1, #24]
 8005bd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bd4:	2f78      	cmp	r7, #120	; 0x78
 8005bd6:	4691      	mov	r9, r2
 8005bd8:	4680      	mov	r8, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	469a      	mov	sl, r3
 8005bde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005be2:	d807      	bhi.n	8005bf4 <_printf_i+0x28>
 8005be4:	2f62      	cmp	r7, #98	; 0x62
 8005be6:	d80a      	bhi.n	8005bfe <_printf_i+0x32>
 8005be8:	2f00      	cmp	r7, #0
 8005bea:	f000 80d4 	beq.w	8005d96 <_printf_i+0x1ca>
 8005bee:	2f58      	cmp	r7, #88	; 0x58
 8005bf0:	f000 80c0 	beq.w	8005d74 <_printf_i+0x1a8>
 8005bf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005bf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bfc:	e03a      	b.n	8005c74 <_printf_i+0xa8>
 8005bfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c02:	2b15      	cmp	r3, #21
 8005c04:	d8f6      	bhi.n	8005bf4 <_printf_i+0x28>
 8005c06:	a101      	add	r1, pc, #4	; (adr r1, 8005c0c <_printf_i+0x40>)
 8005c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c0c:	08005c65 	.word	0x08005c65
 8005c10:	08005c79 	.word	0x08005c79
 8005c14:	08005bf5 	.word	0x08005bf5
 8005c18:	08005bf5 	.word	0x08005bf5
 8005c1c:	08005bf5 	.word	0x08005bf5
 8005c20:	08005bf5 	.word	0x08005bf5
 8005c24:	08005c79 	.word	0x08005c79
 8005c28:	08005bf5 	.word	0x08005bf5
 8005c2c:	08005bf5 	.word	0x08005bf5
 8005c30:	08005bf5 	.word	0x08005bf5
 8005c34:	08005bf5 	.word	0x08005bf5
 8005c38:	08005d7d 	.word	0x08005d7d
 8005c3c:	08005ca5 	.word	0x08005ca5
 8005c40:	08005d37 	.word	0x08005d37
 8005c44:	08005bf5 	.word	0x08005bf5
 8005c48:	08005bf5 	.word	0x08005bf5
 8005c4c:	08005d9f 	.word	0x08005d9f
 8005c50:	08005bf5 	.word	0x08005bf5
 8005c54:	08005ca5 	.word	0x08005ca5
 8005c58:	08005bf5 	.word	0x08005bf5
 8005c5c:	08005bf5 	.word	0x08005bf5
 8005c60:	08005d3f 	.word	0x08005d3f
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	1d1a      	adds	r2, r3, #4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	602a      	str	r2, [r5, #0]
 8005c6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c74:	2301      	movs	r3, #1
 8005c76:	e09f      	b.n	8005db8 <_printf_i+0x1ec>
 8005c78:	6820      	ldr	r0, [r4, #0]
 8005c7a:	682b      	ldr	r3, [r5, #0]
 8005c7c:	0607      	lsls	r7, r0, #24
 8005c7e:	f103 0104 	add.w	r1, r3, #4
 8005c82:	6029      	str	r1, [r5, #0]
 8005c84:	d501      	bpl.n	8005c8a <_printf_i+0xbe>
 8005c86:	681e      	ldr	r6, [r3, #0]
 8005c88:	e003      	b.n	8005c92 <_printf_i+0xc6>
 8005c8a:	0646      	lsls	r6, r0, #25
 8005c8c:	d5fb      	bpl.n	8005c86 <_printf_i+0xba>
 8005c8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005c92:	2e00      	cmp	r6, #0
 8005c94:	da03      	bge.n	8005c9e <_printf_i+0xd2>
 8005c96:	232d      	movs	r3, #45	; 0x2d
 8005c98:	4276      	negs	r6, r6
 8005c9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c9e:	485a      	ldr	r0, [pc, #360]	; (8005e08 <_printf_i+0x23c>)
 8005ca0:	230a      	movs	r3, #10
 8005ca2:	e012      	b.n	8005cca <_printf_i+0xfe>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	6820      	ldr	r0, [r4, #0]
 8005ca8:	1d19      	adds	r1, r3, #4
 8005caa:	6029      	str	r1, [r5, #0]
 8005cac:	0605      	lsls	r5, r0, #24
 8005cae:	d501      	bpl.n	8005cb4 <_printf_i+0xe8>
 8005cb0:	681e      	ldr	r6, [r3, #0]
 8005cb2:	e002      	b.n	8005cba <_printf_i+0xee>
 8005cb4:	0641      	lsls	r1, r0, #25
 8005cb6:	d5fb      	bpl.n	8005cb0 <_printf_i+0xe4>
 8005cb8:	881e      	ldrh	r6, [r3, #0]
 8005cba:	4853      	ldr	r0, [pc, #332]	; (8005e08 <_printf_i+0x23c>)
 8005cbc:	2f6f      	cmp	r7, #111	; 0x6f
 8005cbe:	bf0c      	ite	eq
 8005cc0:	2308      	moveq	r3, #8
 8005cc2:	230a      	movne	r3, #10
 8005cc4:	2100      	movs	r1, #0
 8005cc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005cca:	6865      	ldr	r5, [r4, #4]
 8005ccc:	60a5      	str	r5, [r4, #8]
 8005cce:	2d00      	cmp	r5, #0
 8005cd0:	bfa2      	ittt	ge
 8005cd2:	6821      	ldrge	r1, [r4, #0]
 8005cd4:	f021 0104 	bicge.w	r1, r1, #4
 8005cd8:	6021      	strge	r1, [r4, #0]
 8005cda:	b90e      	cbnz	r6, 8005ce0 <_printf_i+0x114>
 8005cdc:	2d00      	cmp	r5, #0
 8005cde:	d04b      	beq.n	8005d78 <_printf_i+0x1ac>
 8005ce0:	4615      	mov	r5, r2
 8005ce2:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ce6:	fb03 6711 	mls	r7, r3, r1, r6
 8005cea:	5dc7      	ldrb	r7, [r0, r7]
 8005cec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005cf0:	4637      	mov	r7, r6
 8005cf2:	42bb      	cmp	r3, r7
 8005cf4:	460e      	mov	r6, r1
 8005cf6:	d9f4      	bls.n	8005ce2 <_printf_i+0x116>
 8005cf8:	2b08      	cmp	r3, #8
 8005cfa:	d10b      	bne.n	8005d14 <_printf_i+0x148>
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	07de      	lsls	r6, r3, #31
 8005d00:	d508      	bpl.n	8005d14 <_printf_i+0x148>
 8005d02:	6923      	ldr	r3, [r4, #16]
 8005d04:	6861      	ldr	r1, [r4, #4]
 8005d06:	4299      	cmp	r1, r3
 8005d08:	bfde      	ittt	le
 8005d0a:	2330      	movle	r3, #48	; 0x30
 8005d0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d14:	1b52      	subs	r2, r2, r5
 8005d16:	6122      	str	r2, [r4, #16]
 8005d18:	f8cd a000 	str.w	sl, [sp]
 8005d1c:	464b      	mov	r3, r9
 8005d1e:	aa03      	add	r2, sp, #12
 8005d20:	4621      	mov	r1, r4
 8005d22:	4640      	mov	r0, r8
 8005d24:	f7ff fee4 	bl	8005af0 <_printf_common>
 8005d28:	3001      	adds	r0, #1
 8005d2a:	d14a      	bne.n	8005dc2 <_printf_i+0x1f6>
 8005d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d30:	b004      	add	sp, #16
 8005d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d36:	6823      	ldr	r3, [r4, #0]
 8005d38:	f043 0320 	orr.w	r3, r3, #32
 8005d3c:	6023      	str	r3, [r4, #0]
 8005d3e:	4833      	ldr	r0, [pc, #204]	; (8005e0c <_printf_i+0x240>)
 8005d40:	2778      	movs	r7, #120	; 0x78
 8005d42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d46:	6823      	ldr	r3, [r4, #0]
 8005d48:	6829      	ldr	r1, [r5, #0]
 8005d4a:	061f      	lsls	r7, r3, #24
 8005d4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d50:	d402      	bmi.n	8005d58 <_printf_i+0x18c>
 8005d52:	065f      	lsls	r7, r3, #25
 8005d54:	bf48      	it	mi
 8005d56:	b2b6      	uxthmi	r6, r6
 8005d58:	07df      	lsls	r7, r3, #31
 8005d5a:	bf48      	it	mi
 8005d5c:	f043 0320 	orrmi.w	r3, r3, #32
 8005d60:	6029      	str	r1, [r5, #0]
 8005d62:	bf48      	it	mi
 8005d64:	6023      	strmi	r3, [r4, #0]
 8005d66:	b91e      	cbnz	r6, 8005d70 <_printf_i+0x1a4>
 8005d68:	6823      	ldr	r3, [r4, #0]
 8005d6a:	f023 0320 	bic.w	r3, r3, #32
 8005d6e:	6023      	str	r3, [r4, #0]
 8005d70:	2310      	movs	r3, #16
 8005d72:	e7a7      	b.n	8005cc4 <_printf_i+0xf8>
 8005d74:	4824      	ldr	r0, [pc, #144]	; (8005e08 <_printf_i+0x23c>)
 8005d76:	e7e4      	b.n	8005d42 <_printf_i+0x176>
 8005d78:	4615      	mov	r5, r2
 8005d7a:	e7bd      	b.n	8005cf8 <_printf_i+0x12c>
 8005d7c:	682b      	ldr	r3, [r5, #0]
 8005d7e:	6826      	ldr	r6, [r4, #0]
 8005d80:	6961      	ldr	r1, [r4, #20]
 8005d82:	1d18      	adds	r0, r3, #4
 8005d84:	6028      	str	r0, [r5, #0]
 8005d86:	0635      	lsls	r5, r6, #24
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	d501      	bpl.n	8005d90 <_printf_i+0x1c4>
 8005d8c:	6019      	str	r1, [r3, #0]
 8005d8e:	e002      	b.n	8005d96 <_printf_i+0x1ca>
 8005d90:	0670      	lsls	r0, r6, #25
 8005d92:	d5fb      	bpl.n	8005d8c <_printf_i+0x1c0>
 8005d94:	8019      	strh	r1, [r3, #0]
 8005d96:	2300      	movs	r3, #0
 8005d98:	6123      	str	r3, [r4, #16]
 8005d9a:	4615      	mov	r5, r2
 8005d9c:	e7bc      	b.n	8005d18 <_printf_i+0x14c>
 8005d9e:	682b      	ldr	r3, [r5, #0]
 8005da0:	1d1a      	adds	r2, r3, #4
 8005da2:	602a      	str	r2, [r5, #0]
 8005da4:	681d      	ldr	r5, [r3, #0]
 8005da6:	6862      	ldr	r2, [r4, #4]
 8005da8:	2100      	movs	r1, #0
 8005daa:	4628      	mov	r0, r5
 8005dac:	f7fa fa20 	bl	80001f0 <memchr>
 8005db0:	b108      	cbz	r0, 8005db6 <_printf_i+0x1ea>
 8005db2:	1b40      	subs	r0, r0, r5
 8005db4:	6060      	str	r0, [r4, #4]
 8005db6:	6863      	ldr	r3, [r4, #4]
 8005db8:	6123      	str	r3, [r4, #16]
 8005dba:	2300      	movs	r3, #0
 8005dbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005dc0:	e7aa      	b.n	8005d18 <_printf_i+0x14c>
 8005dc2:	6923      	ldr	r3, [r4, #16]
 8005dc4:	462a      	mov	r2, r5
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	4640      	mov	r0, r8
 8005dca:	47d0      	blx	sl
 8005dcc:	3001      	adds	r0, #1
 8005dce:	d0ad      	beq.n	8005d2c <_printf_i+0x160>
 8005dd0:	6823      	ldr	r3, [r4, #0]
 8005dd2:	079b      	lsls	r3, r3, #30
 8005dd4:	d413      	bmi.n	8005dfe <_printf_i+0x232>
 8005dd6:	68e0      	ldr	r0, [r4, #12]
 8005dd8:	9b03      	ldr	r3, [sp, #12]
 8005dda:	4298      	cmp	r0, r3
 8005ddc:	bfb8      	it	lt
 8005dde:	4618      	movlt	r0, r3
 8005de0:	e7a6      	b.n	8005d30 <_printf_i+0x164>
 8005de2:	2301      	movs	r3, #1
 8005de4:	4632      	mov	r2, r6
 8005de6:	4649      	mov	r1, r9
 8005de8:	4640      	mov	r0, r8
 8005dea:	47d0      	blx	sl
 8005dec:	3001      	adds	r0, #1
 8005dee:	d09d      	beq.n	8005d2c <_printf_i+0x160>
 8005df0:	3501      	adds	r5, #1
 8005df2:	68e3      	ldr	r3, [r4, #12]
 8005df4:	9903      	ldr	r1, [sp, #12]
 8005df6:	1a5b      	subs	r3, r3, r1
 8005df8:	42ab      	cmp	r3, r5
 8005dfa:	dcf2      	bgt.n	8005de2 <_printf_i+0x216>
 8005dfc:	e7eb      	b.n	8005dd6 <_printf_i+0x20a>
 8005dfe:	2500      	movs	r5, #0
 8005e00:	f104 0619 	add.w	r6, r4, #25
 8005e04:	e7f5      	b.n	8005df2 <_printf_i+0x226>
 8005e06:	bf00      	nop
 8005e08:	080062a9 	.word	0x080062a9
 8005e0c:	080062ba 	.word	0x080062ba

08005e10 <memmove>:
 8005e10:	4288      	cmp	r0, r1
 8005e12:	b510      	push	{r4, lr}
 8005e14:	eb01 0402 	add.w	r4, r1, r2
 8005e18:	d902      	bls.n	8005e20 <memmove+0x10>
 8005e1a:	4284      	cmp	r4, r0
 8005e1c:	4623      	mov	r3, r4
 8005e1e:	d807      	bhi.n	8005e30 <memmove+0x20>
 8005e20:	1e43      	subs	r3, r0, #1
 8005e22:	42a1      	cmp	r1, r4
 8005e24:	d008      	beq.n	8005e38 <memmove+0x28>
 8005e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005e2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005e2e:	e7f8      	b.n	8005e22 <memmove+0x12>
 8005e30:	4402      	add	r2, r0
 8005e32:	4601      	mov	r1, r0
 8005e34:	428a      	cmp	r2, r1
 8005e36:	d100      	bne.n	8005e3a <memmove+0x2a>
 8005e38:	bd10      	pop	{r4, pc}
 8005e3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005e3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005e42:	e7f7      	b.n	8005e34 <memmove+0x24>

08005e44 <memcpy>:
 8005e44:	440a      	add	r2, r1
 8005e46:	4291      	cmp	r1, r2
 8005e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8005e4c:	d100      	bne.n	8005e50 <memcpy+0xc>
 8005e4e:	4770      	bx	lr
 8005e50:	b510      	push	{r4, lr}
 8005e52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e5a:	4291      	cmp	r1, r2
 8005e5c:	d1f9      	bne.n	8005e52 <memcpy+0xe>
 8005e5e:	bd10      	pop	{r4, pc}

08005e60 <_realloc_r>:
 8005e60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e64:	4680      	mov	r8, r0
 8005e66:	4614      	mov	r4, r2
 8005e68:	460e      	mov	r6, r1
 8005e6a:	b921      	cbnz	r1, 8005e76 <_realloc_r+0x16>
 8005e6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e70:	4611      	mov	r1, r2
 8005e72:	f7ff bba9 	b.w	80055c8 <_malloc_r>
 8005e76:	b92a      	cbnz	r2, 8005e84 <_realloc_r+0x24>
 8005e78:	f7ff fc96 	bl	80057a8 <_free_r>
 8005e7c:	4625      	mov	r5, r4
 8005e7e:	4628      	mov	r0, r5
 8005e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e84:	f000 f81b 	bl	8005ebe <_malloc_usable_size_r>
 8005e88:	4284      	cmp	r4, r0
 8005e8a:	4607      	mov	r7, r0
 8005e8c:	d802      	bhi.n	8005e94 <_realloc_r+0x34>
 8005e8e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005e92:	d812      	bhi.n	8005eba <_realloc_r+0x5a>
 8005e94:	4621      	mov	r1, r4
 8005e96:	4640      	mov	r0, r8
 8005e98:	f7ff fb96 	bl	80055c8 <_malloc_r>
 8005e9c:	4605      	mov	r5, r0
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d0ed      	beq.n	8005e7e <_realloc_r+0x1e>
 8005ea2:	42bc      	cmp	r4, r7
 8005ea4:	4622      	mov	r2, r4
 8005ea6:	4631      	mov	r1, r6
 8005ea8:	bf28      	it	cs
 8005eaa:	463a      	movcs	r2, r7
 8005eac:	f7ff ffca 	bl	8005e44 <memcpy>
 8005eb0:	4631      	mov	r1, r6
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	f7ff fc78 	bl	80057a8 <_free_r>
 8005eb8:	e7e1      	b.n	8005e7e <_realloc_r+0x1e>
 8005eba:	4635      	mov	r5, r6
 8005ebc:	e7df      	b.n	8005e7e <_realloc_r+0x1e>

08005ebe <_malloc_usable_size_r>:
 8005ebe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec2:	1f18      	subs	r0, r3, #4
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	bfbc      	itt	lt
 8005ec8:	580b      	ldrlt	r3, [r1, r0]
 8005eca:	18c0      	addlt	r0, r0, r3
 8005ecc:	4770      	bx	lr
	...

08005ed0 <expf>:
 8005ed0:	b508      	push	{r3, lr}
 8005ed2:	ed2d 8b02 	vpush	{d8}
 8005ed6:	eef0 8a40 	vmov.f32	s17, s0
 8005eda:	f000 f87f 	bl	8005fdc <__ieee754_expf>
 8005ede:	eeb0 8a40 	vmov.f32	s16, s0
 8005ee2:	eeb0 0a68 	vmov.f32	s0, s17
 8005ee6:	f000 f829 	bl	8005f3c <finitef>
 8005eea:	b160      	cbz	r0, 8005f06 <expf+0x36>
 8005eec:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8005f2c <expf+0x5c>
 8005ef0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8005ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ef8:	dd0a      	ble.n	8005f10 <expf+0x40>
 8005efa:	f7ff fc29 	bl	8005750 <__errno>
 8005efe:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8005f30 <expf+0x60>
 8005f02:	2322      	movs	r3, #34	; 0x22
 8005f04:	6003      	str	r3, [r0, #0]
 8005f06:	eeb0 0a48 	vmov.f32	s0, s16
 8005f0a:	ecbd 8b02 	vpop	{d8}
 8005f0e:	bd08      	pop	{r3, pc}
 8005f10:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005f34 <expf+0x64>
 8005f14:	eef4 8ae7 	vcmpe.f32	s17, s15
 8005f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1c:	d5f3      	bpl.n	8005f06 <expf+0x36>
 8005f1e:	f7ff fc17 	bl	8005750 <__errno>
 8005f22:	2322      	movs	r3, #34	; 0x22
 8005f24:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8005f38 <expf+0x68>
 8005f28:	6003      	str	r3, [r0, #0]
 8005f2a:	e7ec      	b.n	8005f06 <expf+0x36>
 8005f2c:	42b17217 	.word	0x42b17217
 8005f30:	7f800000 	.word	0x7f800000
 8005f34:	c2cff1b5 	.word	0xc2cff1b5
 8005f38:	00000000 	.word	0x00000000

08005f3c <finitef>:
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8005f42:	9801      	ldr	r0, [sp, #4]
 8005f44:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005f48:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8005f4c:	bfac      	ite	ge
 8005f4e:	2000      	movge	r0, #0
 8005f50:	2001      	movlt	r0, #1
 8005f52:	b002      	add	sp, #8
 8005f54:	4770      	bx	lr
	...

08005f58 <ceilf>:
 8005f58:	ee10 3a10 	vmov	r3, s0
 8005f5c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005f60:	3a7f      	subs	r2, #127	; 0x7f
 8005f62:	2a16      	cmp	r2, #22
 8005f64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005f68:	dc2a      	bgt.n	8005fc0 <ceilf+0x68>
 8005f6a:	2a00      	cmp	r2, #0
 8005f6c:	da11      	bge.n	8005f92 <ceilf+0x3a>
 8005f6e:	eddf 7a19 	vldr	s15, [pc, #100]	; 8005fd4 <ceilf+0x7c>
 8005f72:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005f76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f7e:	dd05      	ble.n	8005f8c <ceilf+0x34>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	db23      	blt.n	8005fcc <ceilf+0x74>
 8005f84:	2900      	cmp	r1, #0
 8005f86:	bf18      	it	ne
 8005f88:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8005f8c:	ee00 3a10 	vmov	s0, r3
 8005f90:	4770      	bx	lr
 8005f92:	4911      	ldr	r1, [pc, #68]	; (8005fd8 <ceilf+0x80>)
 8005f94:	4111      	asrs	r1, r2
 8005f96:	420b      	tst	r3, r1
 8005f98:	d0fa      	beq.n	8005f90 <ceilf+0x38>
 8005f9a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005fd4 <ceilf+0x7c>
 8005f9e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005fa2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005faa:	ddef      	ble.n	8005f8c <ceilf+0x34>
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	bfc2      	ittt	gt
 8005fb0:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8005fb4:	fa40 f202 	asrgt.w	r2, r0, r2
 8005fb8:	189b      	addgt	r3, r3, r2
 8005fba:	ea23 0301 	bic.w	r3, r3, r1
 8005fbe:	e7e5      	b.n	8005f8c <ceilf+0x34>
 8005fc0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005fc4:	d3e4      	bcc.n	8005f90 <ceilf+0x38>
 8005fc6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005fca:	4770      	bx	lr
 8005fcc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005fd0:	e7dc      	b.n	8005f8c <ceilf+0x34>
 8005fd2:	bf00      	nop
 8005fd4:	7149f2ca 	.word	0x7149f2ca
 8005fd8:	007fffff 	.word	0x007fffff

08005fdc <__ieee754_expf>:
 8005fdc:	ee10 2a10 	vmov	r2, s0
 8005fe0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8005fe4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005fe8:	d902      	bls.n	8005ff0 <__ieee754_expf+0x14>
 8005fea:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005fee:	4770      	bx	lr
 8005ff0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8005ff4:	d106      	bne.n	8006004 <__ieee754_expf+0x28>
 8005ff6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8006130 <__ieee754_expf+0x154>
 8005ffa:	2900      	cmp	r1, #0
 8005ffc:	bf18      	it	ne
 8005ffe:	eeb0 0a67 	vmovne.f32	s0, s15
 8006002:	4770      	bx	lr
 8006004:	484b      	ldr	r0, [pc, #300]	; (8006134 <__ieee754_expf+0x158>)
 8006006:	4282      	cmp	r2, r0
 8006008:	dd02      	ble.n	8006010 <__ieee754_expf+0x34>
 800600a:	2000      	movs	r0, #0
 800600c:	f000 b8d0 	b.w	80061b0 <__math_oflowf>
 8006010:	2a00      	cmp	r2, #0
 8006012:	da05      	bge.n	8006020 <__ieee754_expf+0x44>
 8006014:	4a48      	ldr	r2, [pc, #288]	; (8006138 <__ieee754_expf+0x15c>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d902      	bls.n	8006020 <__ieee754_expf+0x44>
 800601a:	2000      	movs	r0, #0
 800601c:	f000 b8c2 	b.w	80061a4 <__math_uflowf>
 8006020:	4a46      	ldr	r2, [pc, #280]	; (800613c <__ieee754_expf+0x160>)
 8006022:	4293      	cmp	r3, r2
 8006024:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8006028:	d952      	bls.n	80060d0 <__ieee754_expf+0xf4>
 800602a:	4a45      	ldr	r2, [pc, #276]	; (8006140 <__ieee754_expf+0x164>)
 800602c:	4293      	cmp	r3, r2
 800602e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8006032:	d834      	bhi.n	800609e <__ieee754_expf+0xc2>
 8006034:	4b43      	ldr	r3, [pc, #268]	; (8006144 <__ieee754_expf+0x168>)
 8006036:	4413      	add	r3, r2
 8006038:	ed93 7a00 	vldr	s14, [r3]
 800603c:	4b42      	ldr	r3, [pc, #264]	; (8006148 <__ieee754_expf+0x16c>)
 800603e:	4413      	add	r3, r2
 8006040:	ee30 7a47 	vsub.f32	s14, s0, s14
 8006044:	f1c1 0201 	rsb	r2, r1, #1
 8006048:	edd3 7a00 	vldr	s15, [r3]
 800604c:	1a52      	subs	r2, r2, r1
 800604e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8006052:	ee20 6a00 	vmul.f32	s12, s0, s0
 8006056:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800614c <__ieee754_expf+0x170>
 800605a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006150 <__ieee754_expf+0x174>
 800605e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8006062:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8006154 <__ieee754_expf+0x178>
 8006066:	eea6 5a86 	vfma.f32	s10, s13, s12
 800606a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006158 <__ieee754_expf+0x17c>
 800606e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8006072:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800615c <__ieee754_expf+0x180>
 8006076:	eea6 5a86 	vfma.f32	s10, s13, s12
 800607a:	eef0 6a40 	vmov.f32	s13, s0
 800607e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8006082:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8006086:	ee20 5a26 	vmul.f32	s10, s0, s13
 800608a:	bb92      	cbnz	r2, 80060f2 <__ieee754_expf+0x116>
 800608c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006090:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8006094:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006098:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800609c:	4770      	bx	lr
 800609e:	4b30      	ldr	r3, [pc, #192]	; (8006160 <__ieee754_expf+0x184>)
 80060a0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8006164 <__ieee754_expf+0x188>
 80060a4:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006168 <__ieee754_expf+0x18c>
 80060a8:	4413      	add	r3, r2
 80060aa:	edd3 7a00 	vldr	s15, [r3]
 80060ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 80060b2:	eeb0 7a40 	vmov.f32	s14, s0
 80060b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060ba:	ee17 2a90 	vmov	r2, s15
 80060be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060c2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80060c6:	eddf 6a29 	vldr	s13, [pc, #164]	; 800616c <__ieee754_expf+0x190>
 80060ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80060ce:	e7be      	b.n	800604e <__ieee754_expf+0x72>
 80060d0:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 80060d4:	d20b      	bcs.n	80060ee <__ieee754_expf+0x112>
 80060d6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006170 <__ieee754_expf+0x194>
 80060da:	ee70 6a26 	vadd.f32	s13, s0, s13
 80060de:	eef4 6ae5 	vcmpe.f32	s13, s11
 80060e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060e6:	dd02      	ble.n	80060ee <__ieee754_expf+0x112>
 80060e8:	ee30 0a25 	vadd.f32	s0, s0, s11
 80060ec:	4770      	bx	lr
 80060ee:	2200      	movs	r2, #0
 80060f0:	e7af      	b.n	8006052 <__ieee754_expf+0x76>
 80060f2:	ee36 6a66 	vsub.f32	s12, s12, s13
 80060f6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80060fa:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80060fe:	bfb8      	it	lt
 8006100:	3264      	addlt	r2, #100	; 0x64
 8006102:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006106:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800610a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800610e:	ee17 3a90 	vmov	r3, s15
 8006112:	bfab      	itete	ge
 8006114:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8006118:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800611c:	ee00 3a10 	vmovge	s0, r3
 8006120:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8006174 <__ieee754_expf+0x198>
 8006124:	bfbc      	itt	lt
 8006126:	ee00 3a10 	vmovlt	s0, r3
 800612a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800612e:	4770      	bx	lr
 8006130:	00000000 	.word	0x00000000
 8006134:	42b17217 	.word	0x42b17217
 8006138:	42cff1b5 	.word	0x42cff1b5
 800613c:	3eb17218 	.word	0x3eb17218
 8006140:	3f851591 	.word	0x3f851591
 8006144:	080062d4 	.word	0x080062d4
 8006148:	080062dc 	.word	0x080062dc
 800614c:	3331bb4c 	.word	0x3331bb4c
 8006150:	b5ddea0e 	.word	0xb5ddea0e
 8006154:	388ab355 	.word	0x388ab355
 8006158:	bb360b61 	.word	0xbb360b61
 800615c:	3e2aaaab 	.word	0x3e2aaaab
 8006160:	080062cc 	.word	0x080062cc
 8006164:	3fb8aa3b 	.word	0x3fb8aa3b
 8006168:	3f317180 	.word	0x3f317180
 800616c:	3717f7d1 	.word	0x3717f7d1
 8006170:	7149f2ca 	.word	0x7149f2ca
 8006174:	0d800000 	.word	0x0d800000

08006178 <with_errnof>:
 8006178:	b513      	push	{r0, r1, r4, lr}
 800617a:	4604      	mov	r4, r0
 800617c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006180:	f7ff fae6 	bl	8005750 <__errno>
 8006184:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006188:	6004      	str	r4, [r0, #0]
 800618a:	b002      	add	sp, #8
 800618c:	bd10      	pop	{r4, pc}

0800618e <xflowf>:
 800618e:	b130      	cbz	r0, 800619e <xflowf+0x10>
 8006190:	eef1 7a40 	vneg.f32	s15, s0
 8006194:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006198:	2022      	movs	r0, #34	; 0x22
 800619a:	f7ff bfed 	b.w	8006178 <with_errnof>
 800619e:	eef0 7a40 	vmov.f32	s15, s0
 80061a2:	e7f7      	b.n	8006194 <xflowf+0x6>

080061a4 <__math_uflowf>:
 80061a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80061ac <__math_uflowf+0x8>
 80061a8:	f7ff bff1 	b.w	800618e <xflowf>
 80061ac:	10000000 	.word	0x10000000

080061b0 <__math_oflowf>:
 80061b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80061b8 <__math_oflowf+0x8>
 80061b4:	f7ff bfeb 	b.w	800618e <xflowf>
 80061b8:	70000000 	.word	0x70000000

080061bc <_init>:
 80061bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061be:	bf00      	nop
 80061c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061c2:	bc08      	pop	{r3}
 80061c4:	469e      	mov	lr, r3
 80061c6:	4770      	bx	lr

080061c8 <_fini>:
 80061c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ca:	bf00      	nop
 80061cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ce:	bc08      	pop	{r3}
 80061d0:	469e      	mov	lr, r3
 80061d2:	4770      	bx	lr
