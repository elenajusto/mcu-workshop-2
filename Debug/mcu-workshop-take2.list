
mcu-workshop-take2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e30  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08007fd0  08007fd0  00017fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800808c  0800808c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800808c  0800808c  0001808c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008094  08008094  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008094  08008094  00018094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008098  08008098  00018098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800809c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b10  2000006c  08008108  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b7c  08008108  00020b7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001459f  00000000  00000000  0002012f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003487  00000000  00000000  000346ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001368  00000000  00000000  00037b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee7  00000000  00000000  00038ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aae8  00000000  00000000  00039da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183ee  00000000  00000000  0005488f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a3c2f  00000000  00000000  0006cc7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000058a0  00000000  00000000  001108ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0011614c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007fb8 	.word	0x08007fb8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	08007fb8 	.word	0x08007fb8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__gedf2>:
 800084c:	f04f 3cff 	mov.w	ip, #4294967295
 8000850:	e006      	b.n	8000860 <__cmpdf2+0x4>
 8000852:	bf00      	nop

08000854 <__ledf2>:
 8000854:	f04f 0c01 	mov.w	ip, #1
 8000858:	e002      	b.n	8000860 <__cmpdf2+0x4>
 800085a:	bf00      	nop

0800085c <__cmpdf2>:
 800085c:	f04f 0c01 	mov.w	ip, #1
 8000860:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000864:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000868:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800086c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000870:	bf18      	it	ne
 8000872:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000876:	d01b      	beq.n	80008b0 <__cmpdf2+0x54>
 8000878:	b001      	add	sp, #4
 800087a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800087e:	bf0c      	ite	eq
 8000880:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000884:	ea91 0f03 	teqne	r1, r3
 8000888:	bf02      	ittt	eq
 800088a:	ea90 0f02 	teqeq	r0, r2
 800088e:	2000      	moveq	r0, #0
 8000890:	4770      	bxeq	lr
 8000892:	f110 0f00 	cmn.w	r0, #0
 8000896:	ea91 0f03 	teq	r1, r3
 800089a:	bf58      	it	pl
 800089c:	4299      	cmppl	r1, r3
 800089e:	bf08      	it	eq
 80008a0:	4290      	cmpeq	r0, r2
 80008a2:	bf2c      	ite	cs
 80008a4:	17d8      	asrcs	r0, r3, #31
 80008a6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008aa:	f040 0001 	orr.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008b4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008b8:	d102      	bne.n	80008c0 <__cmpdf2+0x64>
 80008ba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008be:	d107      	bne.n	80008d0 <__cmpdf2+0x74>
 80008c0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008c8:	d1d6      	bne.n	8000878 <__cmpdf2+0x1c>
 80008ca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80008ce:	d0d3      	beq.n	8000878 <__cmpdf2+0x1c>
 80008d0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop

080008d8 <__aeabi_cdrcmple>:
 80008d8:	4684      	mov	ip, r0
 80008da:	4610      	mov	r0, r2
 80008dc:	4662      	mov	r2, ip
 80008de:	468c      	mov	ip, r1
 80008e0:	4619      	mov	r1, r3
 80008e2:	4663      	mov	r3, ip
 80008e4:	e000      	b.n	80008e8 <__aeabi_cdcmpeq>
 80008e6:	bf00      	nop

080008e8 <__aeabi_cdcmpeq>:
 80008e8:	b501      	push	{r0, lr}
 80008ea:	f7ff ffb7 	bl	800085c <__cmpdf2>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	bf48      	it	mi
 80008f2:	f110 0f00 	cmnmi.w	r0, #0
 80008f6:	bd01      	pop	{r0, pc}

080008f8 <__aeabi_dcmpeq>:
 80008f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008fc:	f7ff fff4 	bl	80008e8 <__aeabi_cdcmpeq>
 8000900:	bf0c      	ite	eq
 8000902:	2001      	moveq	r0, #1
 8000904:	2000      	movne	r0, #0
 8000906:	f85d fb08 	ldr.w	pc, [sp], #8
 800090a:	bf00      	nop

0800090c <__aeabi_dcmplt>:
 800090c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000910:	f7ff ffea 	bl	80008e8 <__aeabi_cdcmpeq>
 8000914:	bf34      	ite	cc
 8000916:	2001      	movcc	r0, #1
 8000918:	2000      	movcs	r0, #0
 800091a:	f85d fb08 	ldr.w	pc, [sp], #8
 800091e:	bf00      	nop

08000920 <__aeabi_dcmple>:
 8000920:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000924:	f7ff ffe0 	bl	80008e8 <__aeabi_cdcmpeq>
 8000928:	bf94      	ite	ls
 800092a:	2001      	movls	r0, #1
 800092c:	2000      	movhi	r0, #0
 800092e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000932:	bf00      	nop

08000934 <__aeabi_dcmpge>:
 8000934:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000938:	f7ff ffce 	bl	80008d8 <__aeabi_cdrcmple>
 800093c:	bf94      	ite	ls
 800093e:	2001      	movls	r0, #1
 8000940:	2000      	movhi	r0, #0
 8000942:	f85d fb08 	ldr.w	pc, [sp], #8
 8000946:	bf00      	nop

08000948 <__aeabi_dcmpgt>:
 8000948:	f84d ed08 	str.w	lr, [sp, #-8]!
 800094c:	f7ff ffc4 	bl	80008d8 <__aeabi_cdrcmple>
 8000950:	bf34      	ite	cc
 8000952:	2001      	movcc	r0, #1
 8000954:	2000      	movcs	r0, #0
 8000956:	f85d fb08 	ldr.w	pc, [sp], #8
 800095a:	bf00      	nop

0800095c <__aeabi_uldivmod>:
 800095c:	b953      	cbnz	r3, 8000974 <__aeabi_uldivmod+0x18>
 800095e:	b94a      	cbnz	r2, 8000974 <__aeabi_uldivmod+0x18>
 8000960:	2900      	cmp	r1, #0
 8000962:	bf08      	it	eq
 8000964:	2800      	cmpeq	r0, #0
 8000966:	bf1c      	itt	ne
 8000968:	f04f 31ff 	movne.w	r1, #4294967295
 800096c:	f04f 30ff 	movne.w	r0, #4294967295
 8000970:	f000 b970 	b.w	8000c54 <__aeabi_idiv0>
 8000974:	f1ad 0c08 	sub.w	ip, sp, #8
 8000978:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800097c:	f000 f806 	bl	800098c <__udivmoddi4>
 8000980:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000988:	b004      	add	sp, #16
 800098a:	4770      	bx	lr

0800098c <__udivmoddi4>:
 800098c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000990:	9e08      	ldr	r6, [sp, #32]
 8000992:	460d      	mov	r5, r1
 8000994:	4604      	mov	r4, r0
 8000996:	460f      	mov	r7, r1
 8000998:	2b00      	cmp	r3, #0
 800099a:	d14a      	bne.n	8000a32 <__udivmoddi4+0xa6>
 800099c:	428a      	cmp	r2, r1
 800099e:	4694      	mov	ip, r2
 80009a0:	d965      	bls.n	8000a6e <__udivmoddi4+0xe2>
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	b143      	cbz	r3, 80009ba <__udivmoddi4+0x2e>
 80009a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80009ac:	f1c3 0220 	rsb	r2, r3, #32
 80009b0:	409f      	lsls	r7, r3
 80009b2:	fa20 f202 	lsr.w	r2, r0, r2
 80009b6:	4317      	orrs	r7, r2
 80009b8:	409c      	lsls	r4, r3
 80009ba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80009be:	fa1f f58c 	uxth.w	r5, ip
 80009c2:	fbb7 f1fe 	udiv	r1, r7, lr
 80009c6:	0c22      	lsrs	r2, r4, #16
 80009c8:	fb0e 7711 	mls	r7, lr, r1, r7
 80009cc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80009d0:	fb01 f005 	mul.w	r0, r1, r5
 80009d4:	4290      	cmp	r0, r2
 80009d6:	d90a      	bls.n	80009ee <__udivmoddi4+0x62>
 80009d8:	eb1c 0202 	adds.w	r2, ip, r2
 80009dc:	f101 37ff 	add.w	r7, r1, #4294967295
 80009e0:	f080 811c 	bcs.w	8000c1c <__udivmoddi4+0x290>
 80009e4:	4290      	cmp	r0, r2
 80009e6:	f240 8119 	bls.w	8000c1c <__udivmoddi4+0x290>
 80009ea:	3902      	subs	r1, #2
 80009ec:	4462      	add	r2, ip
 80009ee:	1a12      	subs	r2, r2, r0
 80009f0:	b2a4      	uxth	r4, r4
 80009f2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009f6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009fa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009fe:	fb00 f505 	mul.w	r5, r0, r5
 8000a02:	42a5      	cmp	r5, r4
 8000a04:	d90a      	bls.n	8000a1c <__udivmoddi4+0x90>
 8000a06:	eb1c 0404 	adds.w	r4, ip, r4
 8000a0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a0e:	f080 8107 	bcs.w	8000c20 <__udivmoddi4+0x294>
 8000a12:	42a5      	cmp	r5, r4
 8000a14:	f240 8104 	bls.w	8000c20 <__udivmoddi4+0x294>
 8000a18:	4464      	add	r4, ip
 8000a1a:	3802      	subs	r0, #2
 8000a1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a20:	1b64      	subs	r4, r4, r5
 8000a22:	2100      	movs	r1, #0
 8000a24:	b11e      	cbz	r6, 8000a2e <__udivmoddi4+0xa2>
 8000a26:	40dc      	lsrs	r4, r3
 8000a28:	2300      	movs	r3, #0
 8000a2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a32:	428b      	cmp	r3, r1
 8000a34:	d908      	bls.n	8000a48 <__udivmoddi4+0xbc>
 8000a36:	2e00      	cmp	r6, #0
 8000a38:	f000 80ed 	beq.w	8000c16 <__udivmoddi4+0x28a>
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000a42:	4608      	mov	r0, r1
 8000a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a48:	fab3 f183 	clz	r1, r3
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	d149      	bne.n	8000ae4 <__udivmoddi4+0x158>
 8000a50:	42ab      	cmp	r3, r5
 8000a52:	d302      	bcc.n	8000a5a <__udivmoddi4+0xce>
 8000a54:	4282      	cmp	r2, r0
 8000a56:	f200 80f8 	bhi.w	8000c4a <__udivmoddi4+0x2be>
 8000a5a:	1a84      	subs	r4, r0, r2
 8000a5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a60:	2001      	movs	r0, #1
 8000a62:	4617      	mov	r7, r2
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d0e2      	beq.n	8000a2e <__udivmoddi4+0xa2>
 8000a68:	e9c6 4700 	strd	r4, r7, [r6]
 8000a6c:	e7df      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000a6e:	b902      	cbnz	r2, 8000a72 <__udivmoddi4+0xe6>
 8000a70:	deff      	udf	#255	; 0xff
 8000a72:	fab2 f382 	clz	r3, r2
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	f040 8090 	bne.w	8000b9c <__udivmoddi4+0x210>
 8000a7c:	1a8a      	subs	r2, r1, r2
 8000a7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a82:	fa1f fe8c 	uxth.w	lr, ip
 8000a86:	2101      	movs	r1, #1
 8000a88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a90:	0c22      	lsrs	r2, r4, #16
 8000a92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a96:	fb0e f005 	mul.w	r0, lr, r5
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	d908      	bls.n	8000ab0 <__udivmoddi4+0x124>
 8000a9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000aa2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0x122>
 8000aa8:	4290      	cmp	r0, r2
 8000aaa:	f200 80cb 	bhi.w	8000c44 <__udivmoddi4+0x2b8>
 8000aae:	4645      	mov	r5, r8
 8000ab0:	1a12      	subs	r2, r2, r0
 8000ab2:	b2a4      	uxth	r4, r4
 8000ab4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ab8:	fb07 2210 	mls	r2, r7, r0, r2
 8000abc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ac0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ac4:	45a6      	cmp	lr, r4
 8000ac6:	d908      	bls.n	8000ada <__udivmoddi4+0x14e>
 8000ac8:	eb1c 0404 	adds.w	r4, ip, r4
 8000acc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ad0:	d202      	bcs.n	8000ad8 <__udivmoddi4+0x14c>
 8000ad2:	45a6      	cmp	lr, r4
 8000ad4:	f200 80bb 	bhi.w	8000c4e <__udivmoddi4+0x2c2>
 8000ad8:	4610      	mov	r0, r2
 8000ada:	eba4 040e 	sub.w	r4, r4, lr
 8000ade:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000ae2:	e79f      	b.n	8000a24 <__udivmoddi4+0x98>
 8000ae4:	f1c1 0720 	rsb	r7, r1, #32
 8000ae8:	408b      	lsls	r3, r1
 8000aea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000af2:	fa05 f401 	lsl.w	r4, r5, r1
 8000af6:	fa20 f307 	lsr.w	r3, r0, r7
 8000afa:	40fd      	lsrs	r5, r7
 8000afc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b00:	4323      	orrs	r3, r4
 8000b02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b06:	fa1f fe8c 	uxth.w	lr, ip
 8000b0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b0e:	0c1c      	lsrs	r4, r3, #16
 8000b10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b14:	fb08 f50e 	mul.w	r5, r8, lr
 8000b18:	42a5      	cmp	r5, r4
 8000b1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b22:	d90b      	bls.n	8000b3c <__udivmoddi4+0x1b0>
 8000b24:	eb1c 0404 	adds.w	r4, ip, r4
 8000b28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b2c:	f080 8088 	bcs.w	8000c40 <__udivmoddi4+0x2b4>
 8000b30:	42a5      	cmp	r5, r4
 8000b32:	f240 8085 	bls.w	8000c40 <__udivmoddi4+0x2b4>
 8000b36:	f1a8 0802 	sub.w	r8, r8, #2
 8000b3a:	4464      	add	r4, ip
 8000b3c:	1b64      	subs	r4, r4, r5
 8000b3e:	b29d      	uxth	r5, r3
 8000b40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b44:	fb09 4413 	mls	r4, r9, r3, r4
 8000b48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d908      	bls.n	8000b66 <__udivmoddi4+0x1da>
 8000b54:	eb1c 0404 	adds.w	r4, ip, r4
 8000b58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b5c:	d26c      	bcs.n	8000c38 <__udivmoddi4+0x2ac>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	d96a      	bls.n	8000c38 <__udivmoddi4+0x2ac>
 8000b62:	3b02      	subs	r3, #2
 8000b64:	4464      	add	r4, ip
 8000b66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b6e:	eba4 040e 	sub.w	r4, r4, lr
 8000b72:	42ac      	cmp	r4, r5
 8000b74:	46c8      	mov	r8, r9
 8000b76:	46ae      	mov	lr, r5
 8000b78:	d356      	bcc.n	8000c28 <__udivmoddi4+0x29c>
 8000b7a:	d053      	beq.n	8000c24 <__udivmoddi4+0x298>
 8000b7c:	b156      	cbz	r6, 8000b94 <__udivmoddi4+0x208>
 8000b7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b82:	eb64 040e 	sbc.w	r4, r4, lr
 8000b86:	fa04 f707 	lsl.w	r7, r4, r7
 8000b8a:	40ca      	lsrs	r2, r1
 8000b8c:	40cc      	lsrs	r4, r1
 8000b8e:	4317      	orrs	r7, r2
 8000b90:	e9c6 7400 	strd	r7, r4, [r6]
 8000b94:	4618      	mov	r0, r3
 8000b96:	2100      	movs	r1, #0
 8000b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ba0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ba4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ba8:	fa25 f101 	lsr.w	r1, r5, r1
 8000bac:	409d      	lsls	r5, r3
 8000bae:	432a      	orrs	r2, r5
 8000bb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bb4:	fa1f fe8c 	uxth.w	lr, ip
 8000bb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000bc0:	0c11      	lsrs	r1, r2, #16
 8000bc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000bc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000bca:	428d      	cmp	r5, r1
 8000bcc:	fa04 f403 	lsl.w	r4, r4, r3
 8000bd0:	d908      	bls.n	8000be4 <__udivmoddi4+0x258>
 8000bd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000bda:	d22f      	bcs.n	8000c3c <__udivmoddi4+0x2b0>
 8000bdc:	428d      	cmp	r5, r1
 8000bde:	d92d      	bls.n	8000c3c <__udivmoddi4+0x2b0>
 8000be0:	3802      	subs	r0, #2
 8000be2:	4461      	add	r1, ip
 8000be4:	1b49      	subs	r1, r1, r5
 8000be6:	b292      	uxth	r2, r2
 8000be8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bec:	fb07 1115 	mls	r1, r7, r5, r1
 8000bf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bf8:	4291      	cmp	r1, r2
 8000bfa:	d908      	bls.n	8000c0e <__udivmoddi4+0x282>
 8000bfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000c00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c04:	d216      	bcs.n	8000c34 <__udivmoddi4+0x2a8>
 8000c06:	4291      	cmp	r1, r2
 8000c08:	d914      	bls.n	8000c34 <__udivmoddi4+0x2a8>
 8000c0a:	3d02      	subs	r5, #2
 8000c0c:	4462      	add	r2, ip
 8000c0e:	1a52      	subs	r2, r2, r1
 8000c10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c14:	e738      	b.n	8000a88 <__udivmoddi4+0xfc>
 8000c16:	4631      	mov	r1, r6
 8000c18:	4630      	mov	r0, r6
 8000c1a:	e708      	b.n	8000a2e <__udivmoddi4+0xa2>
 8000c1c:	4639      	mov	r1, r7
 8000c1e:	e6e6      	b.n	80009ee <__udivmoddi4+0x62>
 8000c20:	4610      	mov	r0, r2
 8000c22:	e6fb      	b.n	8000a1c <__udivmoddi4+0x90>
 8000c24:	4548      	cmp	r0, r9
 8000c26:	d2a9      	bcs.n	8000b7c <__udivmoddi4+0x1f0>
 8000c28:	ebb9 0802 	subs.w	r8, r9, r2
 8000c2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c30:	3b01      	subs	r3, #1
 8000c32:	e7a3      	b.n	8000b7c <__udivmoddi4+0x1f0>
 8000c34:	4645      	mov	r5, r8
 8000c36:	e7ea      	b.n	8000c0e <__udivmoddi4+0x282>
 8000c38:	462b      	mov	r3, r5
 8000c3a:	e794      	b.n	8000b66 <__udivmoddi4+0x1da>
 8000c3c:	4640      	mov	r0, r8
 8000c3e:	e7d1      	b.n	8000be4 <__udivmoddi4+0x258>
 8000c40:	46d0      	mov	r8, sl
 8000c42:	e77b      	b.n	8000b3c <__udivmoddi4+0x1b0>
 8000c44:	3d02      	subs	r5, #2
 8000c46:	4462      	add	r2, ip
 8000c48:	e732      	b.n	8000ab0 <__udivmoddi4+0x124>
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e70a      	b.n	8000a64 <__udivmoddi4+0xd8>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	e742      	b.n	8000ada <__udivmoddi4+0x14e>

08000c54 <__aeabi_idiv0>:
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5c:	f000 fd80 	bl	8001760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c60:	f000 f810 	bl	8000c84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c64:	f000 f9cc 	bl	8001000 <MX_GPIO_Init>
  MX_CRC_Init();
 8000c68:	f000 f8cc 	bl	8000e04 <MX_CRC_Init>
  MX_RTC_Init();
 8000c6c:	f000 f8de 	bl	8000e2c <MX_RTC_Init>
  MX_ADC1_Init();
 8000c70:	f000 f876 	bl	8000d60 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000c74:	f000 f900 	bl	8000e78 <MX_TIM2_Init>
  MX_MEMS_Init();
 8000c78:	f004 f984 	bl	8004f84 <MX_MEMS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 8000c7c:	f004 f988 	bl	8004f90 <MX_MEMS_Process>
 8000c80:	e7fc      	b.n	8000c7c <main+0x24>
	...

08000c84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b094      	sub	sp, #80	; 0x50
 8000c88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8a:	f107 0320 	add.w	r3, r7, #32
 8000c8e:	2230      	movs	r2, #48	; 0x30
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f006 fc42 	bl	800751c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c98:	f107 030c 	add.w	r3, r7, #12
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
 8000ca6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60bb      	str	r3, [r7, #8]
 8000cac:	4b2a      	ldr	r3, [pc, #168]	; (8000d58 <SystemClock_Config+0xd4>)
 8000cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb0:	4a29      	ldr	r2, [pc, #164]	; (8000d58 <SystemClock_Config+0xd4>)
 8000cb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb8:	4b27      	ldr	r3, [pc, #156]	; (8000d58 <SystemClock_Config+0xd4>)
 8000cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	60bb      	str	r3, [r7, #8]
 8000cc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	4b24      	ldr	r3, [pc, #144]	; (8000d5c <SystemClock_Config+0xd8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cd0:	4a22      	ldr	r2, [pc, #136]	; (8000d5c <SystemClock_Config+0xd8>)
 8000cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cd6:	6013      	str	r3, [r2, #0]
 8000cd8:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <SystemClock_Config+0xd8>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ce4:	230a      	movs	r3, #10
 8000ce6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cec:	2310      	movs	r3, #16
 8000cee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000d04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000d06:	2304      	movs	r3, #4
 8000d08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d0a:	2307      	movs	r3, #7
 8000d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0e:	f107 0320 	add.w	r3, r7, #32
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 fb6e 	bl	80023f4 <HAL_RCC_OscConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000d1e:	f000 f9b3 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d22:	230f      	movs	r3, #15
 8000d24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d26:	2302      	movs	r3, #2
 8000d28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d34:	2300      	movs	r3, #0
 8000d36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2102      	movs	r1, #2
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f001 fdd0 	bl	80028e4 <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000d4a:	f000 f99d 	bl	8001088 <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3750      	adds	r7, #80	; 0x50
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023800 	.word	0x40023800
 8000d5c:	40007000 	.word	0x40007000

08000d60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d66:	463b      	mov	r3, r7
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000d74:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <MX_ADC1_Init+0x9c>)
 8000d76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000d7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d80:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d9a:	4b17      	ldr	r3, [pc, #92]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000da2:	4a17      	ldr	r2, [pc, #92]	; (8000e00 <MX_ADC1_Init+0xa0>)
 8000da4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000da6:	4b14      	ldr	r3, [pc, #80]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000dac:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000db2:	4b11      	ldr	r3, [pc, #68]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000dc2:	f000 fd63 	bl	800188c <HAL_ADC_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dcc:	f000 f95c 	bl	8001088 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ddc:	463b      	mov	r3, r7
 8000dde:	4619      	mov	r1, r3
 8000de0:	4805      	ldr	r0, [pc, #20]	; (8000df8 <MX_ADC1_Init+0x98>)
 8000de2:	f000 fd97 	bl	8001914 <HAL_ADC_ConfigChannel>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000dec:	f000 f94c 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	2000008c 	.word	0x2000008c
 8000dfc:	40012000 	.word	0x40012000
 8000e00:	0f000001 	.word	0x0f000001

08000e04 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e08:	4b06      	ldr	r3, [pc, #24]	; (8000e24 <MX_CRC_Init+0x20>)
 8000e0a:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <MX_CRC_Init+0x24>)
 8000e0c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_CRC_Init+0x20>)
 8000e10:	f001 f8af 	bl	8001f72 <HAL_CRC_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000e1a:	f000 f935 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	200000d4 	.word	0x200000d4
 8000e28:	40023000 	.word	0x40023000

08000e2c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000e30:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <MX_RTC_Init+0x44>)
 8000e32:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <MX_RTC_Init+0x48>)
 8000e34:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000e36:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <MX_RTC_Init+0x44>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <MX_RTC_Init+0x44>)
 8000e3e:	227f      	movs	r2, #127	; 0x7f
 8000e40:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000e42:	4b0b      	ldr	r3, [pc, #44]	; (8000e70 <MX_RTC_Init+0x44>)
 8000e44:	22ff      	movs	r2, #255	; 0xff
 8000e46:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <MX_RTC_Init+0x44>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <MX_RTC_Init+0x44>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <MX_RTC_Init+0x44>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <MX_RTC_Init+0x44>)
 8000e5c:	f002 f850 	bl	8002f00 <HAL_RTC_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000e66:	f000 f90f 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	200000dc 	.word	0x200000dc
 8000e74:	40002800 	.word	0x40002800

08000e78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08e      	sub	sp, #56	; 0x38
 8000e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
 8000ea4:	615a      	str	r2, [r3, #20]
 8000ea6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ea8:	4b2d      	ldr	r3, [pc, #180]	; (8000f60 <MX_TIM2_Init+0xe8>)
 8000eaa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000eae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000eb0:	4b2b      	ldr	r3, [pc, #172]	; (8000f60 <MX_TIM2_Init+0xe8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <MX_TIM2_Init+0xe8>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ebc:	4b28      	ldr	r3, [pc, #160]	; (8000f60 <MX_TIM2_Init+0xe8>)
 8000ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ec4:	4b26      	ldr	r3, [pc, #152]	; (8000f60 <MX_TIM2_Init+0xe8>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eca:	4b25      	ldr	r3, [pc, #148]	; (8000f60 <MX_TIM2_Init+0xe8>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ed0:	4823      	ldr	r0, [pc, #140]	; (8000f60 <MX_TIM2_Init+0xe8>)
 8000ed2:	f002 fb21 	bl	8003518 <HAL_TIM_Base_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000edc:	f000 f8d4 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ee0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ee4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ee6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000eea:	4619      	mov	r1, r3
 8000eec:	481c      	ldr	r0, [pc, #112]	; (8000f60 <MX_TIM2_Init+0xe8>)
 8000eee:	f002 fdff 	bl	8003af0 <HAL_TIM_ConfigClockSource>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ef8:	f000 f8c6 	bl	8001088 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000efc:	4818      	ldr	r0, [pc, #96]	; (8000f60 <MX_TIM2_Init+0xe8>)
 8000efe:	f002 fbec 	bl	80036da <HAL_TIM_PWM_Init>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f08:	f000 f8be 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f14:	f107 0320 	add.w	r3, r7, #32
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4811      	ldr	r0, [pc, #68]	; (8000f60 <MX_TIM2_Init+0xe8>)
 8000f1c:	f003 f98a 	bl	8004234 <HAL_TIMEx_MasterConfigSynchronization>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f26:	f000 f8af 	bl	8001088 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f2a:	2360      	movs	r3, #96	; 0x60
 8000f2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f3a:	1d3b      	adds	r3, r7, #4
 8000f3c:	2208      	movs	r2, #8
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4807      	ldr	r0, [pc, #28]	; (8000f60 <MX_TIM2_Init+0xe8>)
 8000f42:	f002 fd13 	bl	800396c <HAL_TIM_PWM_ConfigChannel>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f4c:	f000 f89c 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f50:	4803      	ldr	r0, [pc, #12]	; (8000f60 <MX_TIM2_Init+0xe8>)
 8000f52:	f000 f9ab 	bl	80012ac <HAL_TIM_MspPostInit>

}
 8000f56:	bf00      	nop
 8000f58:	3738      	adds	r7, #56	; 0x38
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200000fc 	.word	0x200000fc

08000f64 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM5_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f6a:	f107 0308 	add.w	r3, r7, #8
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f78:	463b      	mov	r3, r7
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <MX_TIM5_Init+0x94>)
 8000f82:	4a1e      	ldr	r2, [pc, #120]	; (8000ffc <MX_TIM5_Init+0x98>)
 8000f84:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	; (8000ff8 <MX_TIM5_Init+0x94>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <MX_TIM5_Init+0x94>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f92:	4b19      	ldr	r3, [pc, #100]	; (8000ff8 <MX_TIM5_Init+0x94>)
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <MX_TIM5_Init+0x94>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <MX_TIM5_Init+0x94>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fa6:	4814      	ldr	r0, [pc, #80]	; (8000ff8 <MX_TIM5_Init+0x94>)
 8000fa8:	f002 fab6 	bl	8003518 <HAL_TIM_Base_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000fb2:	f000 f869 	bl	8001088 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fbc:	f107 0308 	add.w	r3, r7, #8
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <MX_TIM5_Init+0x94>)
 8000fc4:	f002 fd94 	bl	8003af0 <HAL_TIM_ConfigClockSource>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000fce:	f000 f85b 	bl	8001088 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fda:	463b      	mov	r3, r7
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <MX_TIM5_Init+0x94>)
 8000fe0:	f003 f928 	bl	8004234 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000fea:	f000 f84d 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	2000018c 	.word	0x2000018c
 8000ffc:	40000c00 	.word	0x40000c00

08001000 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	4b1e      	ldr	r3, [pc, #120]	; (8001084 <MX_GPIO_Init+0x84>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <MX_GPIO_Init+0x84>)
 8001010:	f043 0304 	orr.w	r3, r3, #4
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <MX_GPIO_Init+0x84>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f003 0304 	and.w	r3, r3, #4
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	4b17      	ldr	r3, [pc, #92]	; (8001084 <MX_GPIO_Init+0x84>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a16      	ldr	r2, [pc, #88]	; (8001084 <MX_GPIO_Init+0x84>)
 800102c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b14      	ldr	r3, [pc, #80]	; (8001084 <MX_GPIO_Init+0x84>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	607b      	str	r3, [r7, #4]
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <MX_GPIO_Init+0x84>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a0f      	ldr	r2, [pc, #60]	; (8001084 <MX_GPIO_Init+0x84>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <MX_GPIO_Init+0x84>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	603b      	str	r3, [r7, #0]
 800105e:	4b09      	ldr	r3, [pc, #36]	; (8001084 <MX_GPIO_Init+0x84>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <MX_GPIO_Init+0x84>)
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <MX_GPIO_Init+0x84>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	603b      	str	r3, [r7, #0]
 8001074:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001076:	bf00      	nop
 8001078:	3714      	adds	r7, #20
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_MspInit+0x4c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_MspInit+0x4c>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_MspInit+0x4c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010d2:	2007      	movs	r0, #7
 80010d4:	f000 ff0c 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800

080010e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a17      	ldr	r2, [pc, #92]	; (8001160 <HAL_ADC_MspInit+0x7c>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d127      	bne.n	8001156 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <HAL_ADC_MspInit+0x80>)
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	4a15      	ldr	r2, [pc, #84]	; (8001164 <HAL_ADC_MspInit+0x80>)
 8001110:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001114:	6453      	str	r3, [r2, #68]	; 0x44
 8001116:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_ADC_MspInit+0x80>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_ADC_MspInit+0x80>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <HAL_ADC_MspInit+0x80>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_ADC_MspInit+0x80>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POT_IN_Pin;
 800113e:	2310      	movs	r3, #16
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001142:	2303      	movs	r3, #3
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POT_IN_GPIO_Port, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <HAL_ADC_MspInit+0x84>)
 8001152:	f000 ffb1 	bl	80020b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	; 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40012000 	.word	0x40012000
 8001164:	40023800 	.word	0x40023800
 8001168:	40020000 	.word	0x40020000

0800116c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800116c:	b480      	push	{r7}
 800116e:	b085      	sub	sp, #20
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a0b      	ldr	r2, [pc, #44]	; (80011a8 <HAL_CRC_MspInit+0x3c>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d10d      	bne.n	800119a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
 8001182:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <HAL_CRC_MspInit+0x40>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a09      	ldr	r2, [pc, #36]	; (80011ac <HAL_CRC_MspInit+0x40>)
 8001188:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <HAL_CRC_MspInit+0x40>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023000 	.word	0x40023000
 80011ac:	40023800 	.word	0x40023800

080011b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b088      	sub	sp, #32
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <HAL_RTC_MspInit+0x50>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d111      	bne.n	80011f6 <HAL_RTC_MspInit+0x46>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011d2:	2302      	movs	r3, #2
 80011d4:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011da:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fd9f 	bl	8002d24 <HAL_RCCEx_PeriphCLKConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80011ec:	f7ff ff4c 	bl	8001088 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011f0:	4b04      	ldr	r3, [pc, #16]	; (8001204 <HAL_RTC_MspInit+0x54>)
 80011f2:	2201      	movs	r2, #1
 80011f4:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80011f6:	bf00      	nop
 80011f8:	3720      	adds	r7, #32
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40002800 	.word	0x40002800
 8001204:	42470e3c 	.word	0x42470e3c

08001208 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001218:	d10e      	bne.n	8001238 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	4b20      	ldr	r3, [pc, #128]	; (80012a0 <HAL_TIM_Base_MspInit+0x98>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a1f      	ldr	r2, [pc, #124]	; (80012a0 <HAL_TIM_Base_MspInit+0x98>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b1d      	ldr	r3, [pc, #116]	; (80012a0 <HAL_TIM_Base_MspInit+0x98>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001236:	e02e      	b.n	8001296 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a19      	ldr	r2, [pc, #100]	; (80012a4 <HAL_TIM_Base_MspInit+0x9c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d116      	bne.n	8001270 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	4b16      	ldr	r3, [pc, #88]	; (80012a0 <HAL_TIM_Base_MspInit+0x98>)
 8001248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <HAL_TIM_Base_MspInit+0x98>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6413      	str	r3, [r2, #64]	; 0x40
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_TIM_Base_MspInit+0x98>)
 8001254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	201d      	movs	r0, #29
 8001264:	f000 fe4f 	bl	8001f06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001268:	201d      	movs	r0, #29
 800126a:	f000 fe68 	bl	8001f3e <HAL_NVIC_EnableIRQ>
}
 800126e:	e012      	b.n	8001296 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM5)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <HAL_TIM_Base_MspInit+0xa0>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d10d      	bne.n	8001296 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_TIM_Base_MspInit+0x98>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001282:	4a07      	ldr	r2, [pc, #28]	; (80012a0 <HAL_TIM_Base_MspInit+0x98>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6413      	str	r3, [r2, #64]	; 0x40
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_TIM_Base_MspInit+0x98>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	68fb      	ldr	r3, [r7, #12]
}
 8001296:	bf00      	nop
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40000400 	.word	0x40000400
 80012a8:	40000c00 	.word	0x40000c00

080012ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b08a      	sub	sp, #40	; 0x28
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
 80012c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012cc:	d11e      	bne.n	800130c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
 80012d2:	4b31      	ldr	r3, [pc, #196]	; (8001398 <HAL_TIM_MspPostInit+0xec>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a30      	ldr	r2, [pc, #192]	; (8001398 <HAL_TIM_MspPostInit+0xec>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b2e      	ldr	r3, [pc, #184]	; (8001398 <HAL_TIM_MspPostInit+0xec>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = SERVO_OUT_Pin;
 80012ea:	2304      	movs	r3, #4
 80012ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ee:	2302      	movs	r3, #2
 80012f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012fa:	2301      	movs	r3, #1
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_OUT_GPIO_Port, &GPIO_InitStruct);
 80012fe:	f107 0314 	add.w	r3, r7, #20
 8001302:	4619      	mov	r1, r3
 8001304:	4825      	ldr	r0, [pc, #148]	; (800139c <HAL_TIM_MspPostInit+0xf0>)
 8001306:	f000 fed7 	bl	80020b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800130a:	e040      	b.n	800138e <HAL_TIM_MspPostInit+0xe2>
  else if(htim->Instance==TIM3)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <HAL_TIM_MspPostInit+0xf4>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d13b      	bne.n	800138e <HAL_TIM_MspPostInit+0xe2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_TIM_MspPostInit+0xec>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a1e      	ldr	r2, [pc, #120]	; (8001398 <HAL_TIM_MspPostInit+0xec>)
 8001320:	f043 0301 	orr.w	r3, r3, #1
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_TIM_MspPostInit+0xec>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_TIM_MspPostInit+0xec>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_TIM_MspPostInit+0xec>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_TIM_MspPostInit+0xec>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = RED_LED_Pin;
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800135e:	2302      	movs	r3, #2
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0314 	add.w	r3, r7, #20
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <HAL_TIM_MspPostInit+0xf0>)
 800136a:	f000 fea5 	bl	80020b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = YELLOW_LED_Pin;
 800136e:	2301      	movs	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800137e:	2302      	movs	r3, #2
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(YELLOW_LED_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4806      	ldr	r0, [pc, #24]	; (80013a4 <HAL_TIM_MspPostInit+0xf8>)
 800138a:	f000 fe95 	bl	80020b8 <HAL_GPIO_Init>
}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800
 800139c:	40020000 	.word	0x40020000
 80013a0:	40000400 	.word	0x40000400
 80013a4:	40020400 	.word	0x40020400

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 fa06 	bl	8001804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <TIM3_IRQHandler+0x10>)
 8001402:	f002 f9c3 	bl	800378c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20000144 	.word	0x20000144

08001410 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001418:	4a14      	ldr	r2, [pc, #80]	; (800146c <_sbrk+0x5c>)
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <_sbrk+0x60>)
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001424:	4b13      	ldr	r3, [pc, #76]	; (8001474 <_sbrk+0x64>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d102      	bne.n	8001432 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800142c:	4b11      	ldr	r3, [pc, #68]	; (8001474 <_sbrk+0x64>)
 800142e:	4a12      	ldr	r2, [pc, #72]	; (8001478 <_sbrk+0x68>)
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001432:	4b10      	ldr	r3, [pc, #64]	; (8001474 <_sbrk+0x64>)
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4413      	add	r3, r2
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	429a      	cmp	r2, r3
 800143e:	d207      	bcs.n	8001450 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001440:	f006 f884 	bl	800754c <__errno>
 8001444:	4603      	mov	r3, r0
 8001446:	220c      	movs	r2, #12
 8001448:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800144a:	f04f 33ff 	mov.w	r3, #4294967295
 800144e:	e009      	b.n	8001464 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001450:	4b08      	ldr	r3, [pc, #32]	; (8001474 <_sbrk+0x64>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001456:	4b07      	ldr	r3, [pc, #28]	; (8001474 <_sbrk+0x64>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4413      	add	r3, r2
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <_sbrk+0x64>)
 8001460:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001462:	68fb      	ldr	r3, [r7, #12]
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20018000 	.word	0x20018000
 8001470:	00000400 	.word	0x00000400
 8001474:	200001d4 	.word	0x200001d4
 8001478:	20000b80 	.word	0x20000b80

0800147c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <SystemInit+0x20>)
 8001482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001486:	4a05      	ldr	r2, [pc, #20]	; (800149c <SystemInit+0x20>)
 8001488:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800148c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014d8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014a4:	f7ff ffea 	bl	800147c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014aa:	490d      	ldr	r1, [pc, #52]	; (80014e0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014ac:	4a0d      	ldr	r2, [pc, #52]	; (80014e4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014b0:	e002      	b.n	80014b8 <LoopCopyDataInit>

080014b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014b6:	3304      	adds	r3, #4

080014b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014bc:	d3f9      	bcc.n	80014b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014be:	4a0a      	ldr	r2, [pc, #40]	; (80014e8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014c0:	4c0a      	ldr	r4, [pc, #40]	; (80014ec <LoopFillZerobss+0x22>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014c4:	e001      	b.n	80014ca <LoopFillZerobss>

080014c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c8:	3204      	adds	r2, #4

080014ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014cc:	d3fb      	bcc.n	80014c6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80014ce:	f006 f843 	bl	8007558 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014d2:	f7ff fbc1 	bl	8000c58 <main>
  bx  lr    
 80014d6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014d8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014e0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80014e4:	0800809c 	.word	0x0800809c
  ldr r2, =_sbss
 80014e8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80014ec:	20000b7c 	.word	0x20000b7c

080014f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014f0:	e7fe      	b.n	80014f0 <ADC_IRQHandler>
	...

080014f4 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <BSP_LED_Init+0x20>)
 8001502:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001506:	4798      	blx	r3
  return BSP_ERROR_NONE;
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	0800803c 	.word	0x0800803c

08001518 <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	4a06      	ldr	r2, [pc, #24]	; (8001540 <BSP_LED_On+0x28>)
 8001526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800152a:	2140      	movs	r1, #64	; 0x40
 800152c:	2201      	movs	r2, #1
 800152e:	4618      	mov	r0, r3
 8001530:	f000 ff46 	bl	80023c0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000004 	.word	0x20000004

08001544 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <BSP_LED_Off+0x28>)
 8001552:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001556:	2140      	movs	r1, #64	; 0x40
 8001558:	2200      	movs	r2, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f000 ff30 	bl	80023c0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000004 	.word	0x20000004

08001570 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <LED_USER_GPIO_Init+0x7c>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <LED_USER_GPIO_Init+0x7c>)
 8001580:	f043 0302 	orr.w	r3, r3, #2
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <LED_USER_GPIO_Init+0x7c>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	60bb      	str	r3, [r7, #8]
 8001590:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
 80015a6:	4b11      	ldr	r3, [pc, #68]	; (80015ec <LED_USER_GPIO_Init+0x7c>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a10      	ldr	r2, [pc, #64]	; (80015ec <LED_USER_GPIO_Init+0x7c>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <LED_USER_GPIO_Init+0x7c>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 80015be:	2200      	movs	r2, #0
 80015c0:	2140      	movs	r1, #64	; 0x40
 80015c2:	480b      	ldr	r0, [pc, #44]	; (80015f0 <LED_USER_GPIO_Init+0x80>)
 80015c4:	f000 fefc 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 80015c8:	2340      	movs	r3, #64	; 0x40
 80015ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	4619      	mov	r1, r3
 80015de:	4804      	ldr	r0, [pc, #16]	; (80015f0 <LED_USER_GPIO_Init+0x80>)
 80015e0:	f000 fd6a 	bl	80020b8 <HAL_GPIO_Init>

}
 80015e4:	bf00      	nop
 80015e6:	3720      	adds	r7, #32
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40020400 	.word	0x40020400

080015f4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001602:	79fb      	ldrb	r3, [r7, #7]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d903      	bls.n	8001610 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001608:	f06f 0301 	mvn.w	r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
 800160e:	e025      	b.n	800165c <BSP_COM_Init+0x68>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	79fa      	ldrb	r2, [r7, #7]
 8001614:	4914      	ldr	r1, [pc, #80]	; (8001668 <BSP_COM_Init+0x74>)
 8001616:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800161a:	4814      	ldr	r0, [pc, #80]	; (800166c <BSP_COM_Init+0x78>)
 800161c:	4613      	mov	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4413      	add	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4403      	add	r3, r0
 8001626:	6019      	str	r1, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART1_MspInit(&hcom_uart[COM]);
 8001628:	79fa      	ldrb	r2, [r7, #7]
 800162a:	4613      	mov	r3, r2
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	4a0e      	ldr	r2, [pc, #56]	; (800166c <BSP_COM_Init+0x78>)
 8001634:	4413      	add	r3, r2
 8001636:	4618      	mov	r0, r3
 8001638:	f000 f848 	bl	80016cc <USART1_MspInit>
      {
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 800163c:	79fa      	ldrb	r2, [r7, #7]
 800163e:	4613      	mov	r3, r2
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	4a09      	ldr	r2, [pc, #36]	; (800166c <BSP_COM_Init+0x78>)
 8001648:	4413      	add	r3, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f000 f810 	bl	8001670 <MX_USART1_UART_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d002      	beq.n	800165c <BSP_COM_Init+0x68>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001656:	f06f 0303 	mvn.w	r3, #3
 800165a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800165c:	68fb      	ldr	r3, [r7, #12]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000008 	.word	0x20000008
 800166c:	200001d8 	.word	0x200001d8

08001670 <MX_USART1_UART_Init>:
 */

/* USART1 init function */

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]

  huart->Instance = USART1;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <MX_USART1_UART_Init+0x58>)
 8001680:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f002 fe42 	bl	8004338 <HAL_UART_Init>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_USART1_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80016be:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40011000 	.word	0x40011000

080016cc <USART1_MspInit>:
 * @param  huart USART1 handle
 * @retval None
 */

static void USART1_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b08a      	sub	sp, #40	; 0x28
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016d4:	2300      	movs	r3, #0
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <USART1_MspInit+0x8c>)
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	4a1e      	ldr	r2, [pc, #120]	; (8001758 <USART1_MspInit+0x8c>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6453      	str	r3, [r2, #68]	; 0x44
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <USART1_MspInit+0x8c>)
 80016e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	613b      	str	r3, [r7, #16]
 80016ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <USART1_MspInit+0x8c>)
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	4a17      	ldr	r2, [pc, #92]	; (8001758 <USART1_MspInit+0x8c>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <USART1_MspInit+0x8c>)
 8001702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = BUS_USART1_TX_GPIO_PIN;
 800170c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_TX_GPIO_AF;
 800171e:	2307      	movs	r3, #7
 8001720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_TX_GPIO_PORT, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	480c      	ldr	r0, [pc, #48]	; (800175c <USART1_MspInit+0x90>)
 800172a:	f000 fcc5 	bl	80020b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART1_RX_GPIO_PIN;
 800172e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001734:	2302      	movs	r3, #2
 8001736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001738:	2300      	movs	r3, #0
 800173a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173c:	2303      	movs	r3, #3
 800173e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART1_RX_GPIO_AF;
 8001740:	2307      	movs	r3, #7
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART1_RX_GPIO_PORT, &GPIO_InitStruct);
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	4619      	mov	r1, r3
 800174a:	4804      	ldr	r0, [pc, #16]	; (800175c <USART1_MspInit+0x90>)
 800174c:	f000 fcb4 	bl	80020b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
}
 8001750:	bf00      	nop
 8001752:	3728      	adds	r7, #40	; 0x28
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40023800 	.word	0x40023800
 800175c:	40020000 	.word	0x40020000

08001760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <HAL_Init+0x40>)
 800176a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800176e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <HAL_Init+0x40>)
 8001776:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800177a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <HAL_Init+0x40>)
 8001782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001786:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001788:	2003      	movs	r0, #3
 800178a:	f000 fbb1 	bl	8001ef0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178e:	2000      	movs	r0, #0
 8001790:	f000 f808 	bl	80017a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001794:	f7ff fc7e 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023c00 	.word	0x40023c00

080017a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <HAL_InitTick+0x54>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_InitTick+0x58>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 fbc9 	bl	8001f5a <HAL_SYSTICK_Config>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00e      	b.n	80017f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b0f      	cmp	r3, #15
 80017d6:	d80a      	bhi.n	80017ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d8:	2200      	movs	r2, #0
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f000 fb91 	bl	8001f06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e4:	4a06      	ldr	r2, [pc, #24]	; (8001800 <HAL_InitTick+0x5c>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e000      	b.n	80017f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000010 	.word	0x20000010
 8001800:	2000000c 	.word	0x2000000c

08001804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_IncTick+0x20>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b06      	ldr	r3, [pc, #24]	; (8001828 <HAL_IncTick+0x24>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
 8001814:	4a04      	ldr	r2, [pc, #16]	; (8001828 <HAL_IncTick+0x24>)
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000010 	.word	0x20000010
 8001828:	20000220 	.word	0x20000220

0800182c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return uwTick;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_GetTick+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000220 	.word	0x20000220

08001844 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800184c:	f7ff ffee 	bl	800182c <HAL_GetTick>
 8001850:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185c:	d005      	beq.n	800186a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800185e:	4b0a      	ldr	r3, [pc, #40]	; (8001888 <HAL_Delay+0x44>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800186a:	bf00      	nop
 800186c:	f7ff ffde 	bl	800182c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	d8f7      	bhi.n	800186c <HAL_Delay+0x28>
  {
  }
}
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000010 	.word	0x20000010

0800188c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e033      	b.n	800190a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d109      	bne.n	80018be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f7ff fc1a 	bl	80010e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d118      	bne.n	80018fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80018d2:	f023 0302 	bic.w	r3, r3, #2
 80018d6:	f043 0202 	orr.w	r2, r3, #2
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 f93a 	bl	8001b58 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f023 0303 	bic.w	r3, r3, #3
 80018f2:	f043 0201 	orr.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	641a      	str	r2, [r3, #64]	; 0x40
 80018fa:	e001      	b.n	8001900 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001908:	7bfb      	ldrb	r3, [r7, #15]
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800191e:	2300      	movs	r3, #0
 8001920:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001928:	2b01      	cmp	r3, #1
 800192a:	d101      	bne.n	8001930 <HAL_ADC_ConfigChannel+0x1c>
 800192c:	2302      	movs	r3, #2
 800192e:	e105      	b.n	8001b3c <HAL_ADC_ConfigChannel+0x228>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	2b09      	cmp	r3, #9
 800193e:	d925      	bls.n	800198c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	68d9      	ldr	r1, [r3, #12]
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	b29b      	uxth	r3, r3
 800194c:	461a      	mov	r2, r3
 800194e:	4613      	mov	r3, r2
 8001950:	005b      	lsls	r3, r3, #1
 8001952:	4413      	add	r3, r2
 8001954:	3b1e      	subs	r3, #30
 8001956:	2207      	movs	r2, #7
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43da      	mvns	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	400a      	ands	r2, r1
 8001964:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68d9      	ldr	r1, [r3, #12]
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	b29b      	uxth	r3, r3
 8001976:	4618      	mov	r0, r3
 8001978:	4603      	mov	r3, r0
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	4403      	add	r3, r0
 800197e:	3b1e      	subs	r3, #30
 8001980:	409a      	lsls	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	e022      	b.n	80019d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6919      	ldr	r1, [r3, #16]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	461a      	mov	r2, r3
 800199a:	4613      	mov	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	4413      	add	r3, r2
 80019a0:	2207      	movs	r2, #7
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43da      	mvns	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	400a      	ands	r2, r1
 80019ae:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6919      	ldr	r1, [r3, #16]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689a      	ldr	r2, [r3, #8]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4618      	mov	r0, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4403      	add	r3, r0
 80019c8:	409a      	lsls	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d824      	bhi.n	8001a24 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	3b05      	subs	r3, #5
 80019ec:	221f      	movs	r2, #31
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	400a      	ands	r2, r1
 80019fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b05      	subs	r3, #5
 8001a16:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	635a      	str	r2, [r3, #52]	; 0x34
 8001a22:	e04c      	b.n	8001abe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b0c      	cmp	r3, #12
 8001a2a:	d824      	bhi.n	8001a76 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	3b23      	subs	r3, #35	; 0x23
 8001a3e:	221f      	movs	r2, #31
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43da      	mvns	r2, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	400a      	ands	r2, r1
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685a      	ldr	r2, [r3, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	3b23      	subs	r3, #35	; 0x23
 8001a68:	fa00 f203 	lsl.w	r2, r0, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	430a      	orrs	r2, r1
 8001a72:	631a      	str	r2, [r3, #48]	; 0x30
 8001a74:	e023      	b.n	8001abe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685a      	ldr	r2, [r3, #4]
 8001a80:	4613      	mov	r3, r2
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	4413      	add	r3, r2
 8001a86:	3b41      	subs	r3, #65	; 0x41
 8001a88:	221f      	movs	r2, #31
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	400a      	ands	r2, r1
 8001a96:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	3b41      	subs	r3, #65	; 0x41
 8001ab2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001abe:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <HAL_ADC_ConfigChannel+0x234>)
 8001ac0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a21      	ldr	r2, [pc, #132]	; (8001b4c <HAL_ADC_ConfigChannel+0x238>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d109      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1cc>
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2b12      	cmp	r3, #18
 8001ad2:	d105      	bne.n	8001ae0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a19      	ldr	r2, [pc, #100]	; (8001b4c <HAL_ADC_ConfigChannel+0x238>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d123      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x21e>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b10      	cmp	r3, #16
 8001af0:	d003      	beq.n	8001afa <HAL_ADC_ConfigChannel+0x1e6>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2b11      	cmp	r3, #17
 8001af8:	d11b      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b10      	cmp	r3, #16
 8001b0c:	d111      	bne.n	8001b32 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <HAL_ADC_ConfigChannel+0x23c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_ADC_ConfigChannel+0x240>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	0c9a      	lsrs	r2, r3, #18
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b24:	e002      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f9      	bne.n	8001b26 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40012300 	.word	0x40012300
 8001b4c:	40012000 	.word	0x40012000
 8001b50:	20000000 	.word	0x20000000
 8001b54:	431bde83 	.word	0x431bde83

08001b58 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b60:	4b79      	ldr	r3, [pc, #484]	; (8001d48 <ADC_Init+0x1f0>)
 8001b62:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	431a      	orrs	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	685a      	ldr	r2, [r3, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b8c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	6859      	ldr	r1, [r3, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	021a      	lsls	r2, r3, #8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	430a      	orrs	r2, r1
 8001ba0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001bb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6859      	ldr	r1, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689a      	ldr	r2, [r3, #8]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bd2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6899      	ldr	r1, [r3, #8]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	68da      	ldr	r2, [r3, #12]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <ADC_Init+0x1f4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d022      	beq.n	8001c36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689a      	ldr	r2, [r3, #8]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001bfe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6899      	ldr	r1, [r3, #8]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689a      	ldr	r2, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6899      	ldr	r1, [r3, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	e00f      	b.n	8001c56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c54:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0202 	bic.w	r2, r2, #2
 8001c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6899      	ldr	r1, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7e1b      	ldrb	r3, [r3, #24]
 8001c70:	005a      	lsls	r2, r3, #1
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	430a      	orrs	r2, r1
 8001c78:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d01b      	beq.n	8001cbc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001c92:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ca2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6859      	ldr	r1, [r3, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	035a      	lsls	r2, r3, #13
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	e007      	b.n	8001ccc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cca:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	051a      	lsls	r2, r3, #20
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001d00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6899      	ldr	r1, [r3, #8]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d0e:	025a      	lsls	r2, r3, #9
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689a      	ldr	r2, [r3, #8]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	6899      	ldr	r1, [r3, #8]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	029a      	lsls	r2, r3, #10
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	609a      	str	r2, [r3, #8]
}
 8001d3c:	bf00      	nop
 8001d3e:	3714      	adds	r7, #20
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40012300 	.word	0x40012300
 8001d4c:	0f000001 	.word	0x0f000001

08001d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d60:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d82:	4a04      	ldr	r2, [pc, #16]	; (8001d94 <__NVIC_SetPriorityGrouping+0x44>)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	60d3      	str	r3, [r2, #12]
}
 8001d88:	bf00      	nop
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	e000ed00 	.word	0xe000ed00

08001d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <__NVIC_GetPriorityGrouping+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 0307 	and.w	r3, r3, #7
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	db0b      	blt.n	8001dde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	f003 021f 	and.w	r2, r3, #31
 8001dcc:	4907      	ldr	r1, [pc, #28]	; (8001dec <__NVIC_EnableIRQ+0x38>)
 8001dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dde:	bf00      	nop
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000e100 	.word	0xe000e100

08001df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	6039      	str	r1, [r7, #0]
 8001dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	db0a      	blt.n	8001e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	490c      	ldr	r1, [pc, #48]	; (8001e3c <__NVIC_SetPriority+0x4c>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	0112      	lsls	r2, r2, #4
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	440b      	add	r3, r1
 8001e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e18:	e00a      	b.n	8001e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	b2da      	uxtb	r2, r3
 8001e1e:	4908      	ldr	r1, [pc, #32]	; (8001e40 <__NVIC_SetPriority+0x50>)
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	f003 030f 	and.w	r3, r3, #15
 8001e26:	3b04      	subs	r3, #4
 8001e28:	0112      	lsls	r2, r2, #4
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	440b      	add	r3, r1
 8001e2e:	761a      	strb	r2, [r3, #24]
}
 8001e30:	bf00      	nop
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100
 8001e40:	e000ed00 	.word	0xe000ed00

08001e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	; 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f003 0307 	and.w	r3, r3, #7
 8001e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f1c3 0307 	rsb	r3, r3, #7
 8001e5e:	2b04      	cmp	r3, #4
 8001e60:	bf28      	it	cs
 8001e62:	2304      	movcs	r3, #4
 8001e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	3304      	adds	r3, #4
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d902      	bls.n	8001e74 <NVIC_EncodePriority+0x30>
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3b03      	subs	r3, #3
 8001e72:	e000      	b.n	8001e76 <NVIC_EncodePriority+0x32>
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e78:	f04f 32ff 	mov.w	r2, #4294967295
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43da      	mvns	r2, r3
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	401a      	ands	r2, r3
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa01 f303 	lsl.w	r3, r1, r3
 8001e96:	43d9      	mvns	r1, r3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e9c:	4313      	orrs	r3, r2
         );
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ebc:	d301      	bcc.n	8001ec2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e00f      	b.n	8001ee2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <SysTick_Config+0x40>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eca:	210f      	movs	r1, #15
 8001ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed0:	f7ff ff8e 	bl	8001df0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ed4:	4b05      	ldr	r3, [pc, #20]	; (8001eec <SysTick_Config+0x40>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eda:	4b04      	ldr	r3, [pc, #16]	; (8001eec <SysTick_Config+0x40>)
 8001edc:	2207      	movs	r2, #7
 8001ede:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	e000e010 	.word	0xe000e010

08001ef0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ff29 	bl	8001d50 <__NVIC_SetPriorityGrouping>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b086      	sub	sp, #24
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60b9      	str	r1, [r7, #8]
 8001f10:	607a      	str	r2, [r7, #4]
 8001f12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f18:	f7ff ff3e 	bl	8001d98 <__NVIC_GetPriorityGrouping>
 8001f1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	68b9      	ldr	r1, [r7, #8]
 8001f22:	6978      	ldr	r0, [r7, #20]
 8001f24:	f7ff ff8e 	bl	8001e44 <NVIC_EncodePriority>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff ff5d 	bl	8001df0 <__NVIC_SetPriority>
}
 8001f36:	bf00      	nop
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b082      	sub	sp, #8
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff31 	bl	8001db4 <__NVIC_EnableIRQ>
}
 8001f52:	bf00      	nop
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff ffa2 	bl	8001eac <SysTick_Config>
 8001f68:	4603      	mov	r3, r0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b082      	sub	sp, #8
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e00e      	b.n	8001fa2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	795b      	ldrb	r3, [r3, #5]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d105      	bne.n	8001f9a <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f7ff f8e9 	bl	800116c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
 8001fb6:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc0:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d101      	bne.n	8001fd0 <HAL_DMA_Start_IT+0x26>
 8001fcc:	2302      	movs	r3, #2
 8001fce:	e040      	b.n	8002052 <HAL_DMA_Start_IT+0xa8>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d12f      	bne.n	8002044 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	68b9      	ldr	r1, [r7, #8]
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	f000 f82e 	bl	800205a <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	223f      	movs	r2, #63	; 0x3f
 8002004:	409a      	lsls	r2, r3
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f042 0216 	orr.w	r2, r2, #22
 8002018:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	2b00      	cmp	r3, #0
 8002020:	d007      	beq.n	8002032 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f042 0208 	orr.w	r2, r2, #8
 8002030:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f042 0201 	orr.w	r2, r2, #1
 8002040:	601a      	str	r2, [r3, #0]
 8002042:	e005      	b.n	8002050 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800204c:	2302      	movs	r3, #2
 800204e:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002050:	7dfb      	ldrb	r3, [r7, #23]
}
 8002052:	4618      	mov	r0, r3
 8002054:	3718      	adds	r7, #24
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800205a:	b480      	push	{r7}
 800205c:	b085      	sub	sp, #20
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
 8002066:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002076:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b40      	cmp	r3, #64	; 0x40
 8002086:	d108      	bne.n	800209a <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002098:	e007      	b.n	80020aa <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	60da      	str	r2, [r3, #12]
}
 80020aa:	bf00      	nop
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
	...

080020b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b089      	sub	sp, #36	; 0x24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020c6:	2300      	movs	r3, #0
 80020c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	61fb      	str	r3, [r7, #28]
 80020d2:	e159      	b.n	8002388 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020d4:	2201      	movs	r2, #1
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	4013      	ands	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020e8:	693a      	ldr	r2, [r7, #16]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	f040 8148 	bne.w	8002382 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f003 0303 	and.w	r3, r3, #3
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d005      	beq.n	800210a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002106:	2b02      	cmp	r3, #2
 8002108:	d130      	bne.n	800216c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	2203      	movs	r2, #3
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68da      	ldr	r2, [r3, #12]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	69ba      	ldr	r2, [r7, #24]
 8002138:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002140:	2201      	movs	r2, #1
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 0201 	and.w	r2, r3, #1
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f003 0303 	and.w	r3, r3, #3
 8002174:	2b03      	cmp	r3, #3
 8002176:	d017      	beq.n	80021a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	2203      	movs	r2, #3
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	4013      	ands	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d123      	bne.n	80021fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	08da      	lsrs	r2, r3, #3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3208      	adds	r2, #8
 80021bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	220f      	movs	r2, #15
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4013      	ands	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	08da      	lsrs	r2, r3, #3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3208      	adds	r2, #8
 80021f6:	69b9      	ldr	r1, [r7, #24]
 80021f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	2203      	movs	r2, #3
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	43db      	mvns	r3, r3
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	4013      	ands	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 0203 	and.w	r2, r3, #3
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80a2 	beq.w	8002382 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b57      	ldr	r3, [pc, #348]	; (80023a0 <HAL_GPIO_Init+0x2e8>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	4a56      	ldr	r2, [pc, #344]	; (80023a0 <HAL_GPIO_Init+0x2e8>)
 8002248:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224c:	6453      	str	r3, [r2, #68]	; 0x44
 800224e:	4b54      	ldr	r3, [pc, #336]	; (80023a0 <HAL_GPIO_Init+0x2e8>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800225a:	4a52      	ldr	r2, [pc, #328]	; (80023a4 <HAL_GPIO_Init+0x2ec>)
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	089b      	lsrs	r3, r3, #2
 8002260:	3302      	adds	r3, #2
 8002262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002266:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	220f      	movs	r2, #15
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43db      	mvns	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4013      	ands	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a49      	ldr	r2, [pc, #292]	; (80023a8 <HAL_GPIO_Init+0x2f0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d019      	beq.n	80022ba <HAL_GPIO_Init+0x202>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a48      	ldr	r2, [pc, #288]	; (80023ac <HAL_GPIO_Init+0x2f4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <HAL_GPIO_Init+0x1fe>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a47      	ldr	r2, [pc, #284]	; (80023b0 <HAL_GPIO_Init+0x2f8>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00d      	beq.n	80022b2 <HAL_GPIO_Init+0x1fa>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a46      	ldr	r2, [pc, #280]	; (80023b4 <HAL_GPIO_Init+0x2fc>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <HAL_GPIO_Init+0x1f6>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a45      	ldr	r2, [pc, #276]	; (80023b8 <HAL_GPIO_Init+0x300>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_GPIO_Init+0x1f2>
 80022a6:	2304      	movs	r3, #4
 80022a8:	e008      	b.n	80022bc <HAL_GPIO_Init+0x204>
 80022aa:	2307      	movs	r3, #7
 80022ac:	e006      	b.n	80022bc <HAL_GPIO_Init+0x204>
 80022ae:	2303      	movs	r3, #3
 80022b0:	e004      	b.n	80022bc <HAL_GPIO_Init+0x204>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e002      	b.n	80022bc <HAL_GPIO_Init+0x204>
 80022b6:	2301      	movs	r3, #1
 80022b8:	e000      	b.n	80022bc <HAL_GPIO_Init+0x204>
 80022ba:	2300      	movs	r3, #0
 80022bc:	69fa      	ldr	r2, [r7, #28]
 80022be:	f002 0203 	and.w	r2, r2, #3
 80022c2:	0092      	lsls	r2, r2, #2
 80022c4:	4093      	lsls	r3, r2
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022cc:	4935      	ldr	r1, [pc, #212]	; (80023a4 <HAL_GPIO_Init+0x2ec>)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	089b      	lsrs	r3, r3, #2
 80022d2:	3302      	adds	r3, #2
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022da:	4b38      	ldr	r3, [pc, #224]	; (80023bc <HAL_GPIO_Init+0x304>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022fe:	4a2f      	ldr	r2, [pc, #188]	; (80023bc <HAL_GPIO_Init+0x304>)
 8002300:	69bb      	ldr	r3, [r7, #24]
 8002302:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002304:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <HAL_GPIO_Init+0x304>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	43db      	mvns	r3, r3
 800230e:	69ba      	ldr	r2, [r7, #24]
 8002310:	4013      	ands	r3, r2
 8002312:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231c:	2b00      	cmp	r3, #0
 800231e:	d003      	beq.n	8002328 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002328:	4a24      	ldr	r2, [pc, #144]	; (80023bc <HAL_GPIO_Init+0x304>)
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <HAL_GPIO_Init+0x304>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	43db      	mvns	r3, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4013      	ands	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800234a:	69ba      	ldr	r2, [r7, #24]
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002352:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <HAL_GPIO_Init+0x304>)
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002358:	4b18      	ldr	r3, [pc, #96]	; (80023bc <HAL_GPIO_Init+0x304>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800237c:	4a0f      	ldr	r2, [pc, #60]	; (80023bc <HAL_GPIO_Init+0x304>)
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	3301      	adds	r3, #1
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	2b0f      	cmp	r3, #15
 800238c:	f67f aea2 	bls.w	80020d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3724      	adds	r7, #36	; 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	40023800 	.word	0x40023800
 80023a4:	40013800 	.word	0x40013800
 80023a8:	40020000 	.word	0x40020000
 80023ac:	40020400 	.word	0x40020400
 80023b0:	40020800 	.word	0x40020800
 80023b4:	40020c00 	.word	0x40020c00
 80023b8:	40021000 	.word	0x40021000
 80023bc:	40013c00 	.word	0x40013c00

080023c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	807b      	strh	r3, [r7, #2]
 80023cc:	4613      	mov	r3, r2
 80023ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023d0:	787b      	ldrb	r3, [r7, #1]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d003      	beq.n	80023de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023d6:	887a      	ldrh	r2, [r7, #2]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023dc:	e003      	b.n	80023e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023de:	887b      	ldrh	r3, [r7, #2]
 80023e0:	041a      	lsls	r2, r3, #16
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	619a      	str	r2, [r3, #24]
}
 80023e6:	bf00      	nop
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
	...

080023f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e267      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d075      	beq.n	80024fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002412:	4b88      	ldr	r3, [pc, #544]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b04      	cmp	r3, #4
 800241c:	d00c      	beq.n	8002438 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800241e:	4b85      	ldr	r3, [pc, #532]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002426:	2b08      	cmp	r3, #8
 8002428:	d112      	bne.n	8002450 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242a:	4b82      	ldr	r3, [pc, #520]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002436:	d10b      	bne.n	8002450 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002438:	4b7e      	ldr	r3, [pc, #504]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d05b      	beq.n	80024fc <HAL_RCC_OscConfig+0x108>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d157      	bne.n	80024fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e242      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002458:	d106      	bne.n	8002468 <HAL_RCC_OscConfig+0x74>
 800245a:	4b76      	ldr	r3, [pc, #472]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a75      	ldr	r2, [pc, #468]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e01d      	b.n	80024a4 <HAL_RCC_OscConfig+0xb0>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002470:	d10c      	bne.n	800248c <HAL_RCC_OscConfig+0x98>
 8002472:	4b70      	ldr	r3, [pc, #448]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a6f      	ldr	r2, [pc, #444]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002478:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a6c      	ldr	r2, [pc, #432]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	e00b      	b.n	80024a4 <HAL_RCC_OscConfig+0xb0>
 800248c:	4b69      	ldr	r3, [pc, #420]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a68      	ldr	r2, [pc, #416]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002492:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002496:	6013      	str	r3, [r2, #0]
 8002498:	4b66      	ldr	r3, [pc, #408]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a65      	ldr	r2, [pc, #404]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800249e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d013      	beq.n	80024d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7ff f9be 	bl	800182c <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b4:	f7ff f9ba 	bl	800182c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b64      	cmp	r3, #100	; 0x64
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e207      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4b5b      	ldr	r3, [pc, #364]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d0f0      	beq.n	80024b4 <HAL_RCC_OscConfig+0xc0>
 80024d2:	e014      	b.n	80024fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d4:	f7ff f9aa 	bl	800182c <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024dc:	f7ff f9a6 	bl	800182c <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b64      	cmp	r3, #100	; 0x64
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e1f3      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	4b51      	ldr	r3, [pc, #324]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d1f0      	bne.n	80024dc <HAL_RCC_OscConfig+0xe8>
 80024fa:	e000      	b.n	80024fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d063      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800250a:	4b4a      	ldr	r3, [pc, #296]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	f003 030c 	and.w	r3, r3, #12
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00b      	beq.n	800252e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002516:	4b47      	ldr	r3, [pc, #284]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800251e:	2b08      	cmp	r3, #8
 8002520:	d11c      	bne.n	800255c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002522:	4b44      	ldr	r3, [pc, #272]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d116      	bne.n	800255c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800252e:	4b41      	ldr	r3, [pc, #260]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_RCC_OscConfig+0x152>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d001      	beq.n	8002546 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e1c7      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	00db      	lsls	r3, r3, #3
 8002554:	4937      	ldr	r1, [pc, #220]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002556:	4313      	orrs	r3, r2
 8002558:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	e03a      	b.n	80025d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002564:	4b34      	ldr	r3, [pc, #208]	; (8002638 <HAL_RCC_OscConfig+0x244>)
 8002566:	2201      	movs	r2, #1
 8002568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256a:	f7ff f95f 	bl	800182c <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002570:	e008      	b.n	8002584 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002572:	f7ff f95b 	bl	800182c <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e1a8      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002584:	4b2b      	ldr	r3, [pc, #172]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0f0      	beq.n	8002572 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	00db      	lsls	r3, r3, #3
 800259e:	4925      	ldr	r1, [pc, #148]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	600b      	str	r3, [r1, #0]
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <HAL_RCC_OscConfig+0x244>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ac:	f7ff f93e 	bl	800182c <HAL_GetTick>
 80025b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025b4:	f7ff f93a 	bl	800182c <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e187      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d036      	beq.n	800264c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d016      	beq.n	8002614 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e6:	4b15      	ldr	r3, [pc, #84]	; (800263c <HAL_RCC_OscConfig+0x248>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ec:	f7ff f91e 	bl	800182c <HAL_GetTick>
 80025f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025f4:	f7ff f91a 	bl	800182c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e167      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002606:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCC_OscConfig+0x240>)
 8002608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x200>
 8002612:	e01b      	b.n	800264c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <HAL_RCC_OscConfig+0x248>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261a:	f7ff f907 	bl	800182c <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002620:	e00e      	b.n	8002640 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002622:	f7ff f903 	bl	800182c <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d907      	bls.n	8002640 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e150      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
 8002634:	40023800 	.word	0x40023800
 8002638:	42470000 	.word	0x42470000
 800263c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002640:	4b88      	ldr	r3, [pc, #544]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ea      	bne.n	8002622 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 8097 	beq.w	8002788 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800265e:	4b81      	ldr	r3, [pc, #516]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10f      	bne.n	800268a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	4b7d      	ldr	r3, [pc, #500]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a7c      	ldr	r2, [pc, #496]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b7a      	ldr	r3, [pc, #488]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	60bb      	str	r3, [r7, #8]
 8002684:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002686:	2301      	movs	r3, #1
 8002688:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268a:	4b77      	ldr	r3, [pc, #476]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002692:	2b00      	cmp	r3, #0
 8002694:	d118      	bne.n	80026c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002696:	4b74      	ldr	r3, [pc, #464]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a73      	ldr	r2, [pc, #460]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a2:	f7ff f8c3 	bl	800182c <HAL_GetTick>
 80026a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	e008      	b.n	80026bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026aa:	f7ff f8bf 	bl	800182c <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d901      	bls.n	80026bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026b8:	2303      	movs	r3, #3
 80026ba:	e10c      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026bc:	4b6a      	ldr	r3, [pc, #424]	; (8002868 <HAL_RCC_OscConfig+0x474>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d0f0      	beq.n	80026aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d106      	bne.n	80026de <HAL_RCC_OscConfig+0x2ea>
 80026d0:	4b64      	ldr	r3, [pc, #400]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d4:	4a63      	ldr	r2, [pc, #396]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026d6:	f043 0301 	orr.w	r3, r3, #1
 80026da:	6713      	str	r3, [r2, #112]	; 0x70
 80026dc:	e01c      	b.n	8002718 <HAL_RCC_OscConfig+0x324>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	2b05      	cmp	r3, #5
 80026e4:	d10c      	bne.n	8002700 <HAL_RCC_OscConfig+0x30c>
 80026e6:	4b5f      	ldr	r3, [pc, #380]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a5e      	ldr	r2, [pc, #376]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026ec:	f043 0304 	orr.w	r3, r3, #4
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
 80026f2:	4b5c      	ldr	r3, [pc, #368]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a5b      	ldr	r2, [pc, #364]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80026f8:	f043 0301 	orr.w	r3, r3, #1
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
 80026fe:	e00b      	b.n	8002718 <HAL_RCC_OscConfig+0x324>
 8002700:	4b58      	ldr	r3, [pc, #352]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	4a57      	ldr	r2, [pc, #348]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002706:	f023 0301 	bic.w	r3, r3, #1
 800270a:	6713      	str	r3, [r2, #112]	; 0x70
 800270c:	4b55      	ldr	r3, [pc, #340]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800270e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002710:	4a54      	ldr	r2, [pc, #336]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002712:	f023 0304 	bic.w	r3, r3, #4
 8002716:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d015      	beq.n	800274c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002720:	f7ff f884 	bl	800182c <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002726:	e00a      	b.n	800273e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002728:	f7ff f880 	bl	800182c <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	; 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e0cb      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800273e:	4b49      	ldr	r3, [pc, #292]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0ee      	beq.n	8002728 <HAL_RCC_OscConfig+0x334>
 800274a:	e014      	b.n	8002776 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274c:	f7ff f86e 	bl	800182c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7ff f86a 	bl	800182c <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0b5      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276a:	4b3e      	ldr	r3, [pc, #248]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1ee      	bne.n	8002754 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002776:	7dfb      	ldrb	r3, [r7, #23]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d105      	bne.n	8002788 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800277c:	4b39      	ldr	r3, [pc, #228]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	4a38      	ldr	r2, [pc, #224]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002786:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 80a1 	beq.w	80028d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002792:	4b34      	ldr	r3, [pc, #208]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f003 030c 	and.w	r3, r3, #12
 800279a:	2b08      	cmp	r3, #8
 800279c:	d05c      	beq.n	8002858 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d141      	bne.n	800282a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a6:	4b31      	ldr	r3, [pc, #196]	; (800286c <HAL_RCC_OscConfig+0x478>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7ff f83e 	bl	800182c <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027b4:	f7ff f83a 	bl	800182c <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e087      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027c6:	4b27      	ldr	r3, [pc, #156]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69da      	ldr	r2, [r3, #28]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	019b      	lsls	r3, r3, #6
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	085b      	lsrs	r3, r3, #1
 80027ea:	3b01      	subs	r3, #1
 80027ec:	041b      	lsls	r3, r3, #16
 80027ee:	431a      	orrs	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	061b      	lsls	r3, r3, #24
 80027f6:	491b      	ldr	r1, [pc, #108]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fc:	4b1b      	ldr	r3, [pc, #108]	; (800286c <HAL_RCC_OscConfig+0x478>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002802:	f7ff f813 	bl	800182c <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280a:	f7ff f80f 	bl	800182c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e05c      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800281c:	4b11      	ldr	r3, [pc, #68]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x416>
 8002828:	e054      	b.n	80028d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	4b10      	ldr	r3, [pc, #64]	; (800286c <HAL_RCC_OscConfig+0x478>)
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002830:	f7fe fffc 	bl	800182c <HAL_GetTick>
 8002834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002838:	f7fe fff8 	bl	800182c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e045      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284a:	4b06      	ldr	r3, [pc, #24]	; (8002864 <HAL_RCC_OscConfig+0x470>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d1f0      	bne.n	8002838 <HAL_RCC_OscConfig+0x444>
 8002856:	e03d      	b.n	80028d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d107      	bne.n	8002870 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e038      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
 8002864:	40023800 	.word	0x40023800
 8002868:	40007000 	.word	0x40007000
 800286c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002870:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_RCC_OscConfig+0x4ec>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d028      	beq.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002888:	429a      	cmp	r2, r3
 800288a:	d121      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d11a      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289a:	68fa      	ldr	r2, [r7, #12]
 800289c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a0:	4013      	ands	r3, r2
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d111      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b6:	085b      	lsrs	r3, r3, #1
 80028b8:	3b01      	subs	r3, #1
 80028ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d107      	bne.n	80028d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d001      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3718      	adds	r7, #24
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800

080028e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e0cc      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b68      	ldr	r3, [pc, #416]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0307 	and.w	r3, r3, #7
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d90c      	bls.n	8002920 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b65      	ldr	r3, [pc, #404]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	b2d2      	uxtb	r2, r2
 800290c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290e:	4b63      	ldr	r3, [pc, #396]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f003 0307 	and.w	r3, r3, #7
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	429a      	cmp	r2, r3
 800291a:	d001      	beq.n	8002920 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e0b8      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d020      	beq.n	800296e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	2b00      	cmp	r3, #0
 8002936:	d005      	beq.n	8002944 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002938:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002942:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0308 	and.w	r3, r3, #8
 800294c:	2b00      	cmp	r3, #0
 800294e:	d005      	beq.n	800295c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002950:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	4a52      	ldr	r2, [pc, #328]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800295a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800295c:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	494d      	ldr	r1, [pc, #308]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	4313      	orrs	r3, r2
 800296c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b00      	cmp	r3, #0
 8002978:	d044      	beq.n	8002a04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002982:	4b47      	ldr	r3, [pc, #284]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d119      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b02      	cmp	r3, #2
 8002998:	d003      	beq.n	80029a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d107      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a2:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d109      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e06f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b2:	4b3b      	ldr	r3, [pc, #236]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e067      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c2:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f023 0203 	bic.w	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	4934      	ldr	r1, [pc, #208]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d4:	f7fe ff2a 	bl	800182c <HAL_GetTick>
 80029d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029da:	e00a      	b.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029dc:	f7fe ff26 	bl	800182c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e04f      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 020c 	and.w	r2, r3, #12
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d1eb      	bne.n	80029dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a04:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d20c      	bcs.n	8002a2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b20      	ldr	r3, [pc, #128]	; (8002a9c <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e032      	b.n	8002a92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4916      	ldr	r1, [pc, #88]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	490e      	ldr	r1, [pc, #56]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a6a:	f000 f821 	bl	8002ab0 <HAL_RCC_GetSysClockFreq>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	490a      	ldr	r1, [pc, #40]	; (8002aa4 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	5ccb      	ldrb	r3, [r1, r3]
 8002a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a82:	4a09      	ldr	r2, [pc, #36]	; (8002aa8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a86:	4b09      	ldr	r3, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x1c8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fe fe8a 	bl	80017a4 <HAL_InitTick>

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40023c00 	.word	0x40023c00
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	08008024 	.word	0x08008024
 8002aa8:	20000000 	.word	0x20000000
 8002aac:	2000000c 	.word	0x2000000c

08002ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab4:	b094      	sub	sp, #80	; 0x50
 8002ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	647b      	str	r3, [r7, #68]	; 0x44
 8002abc:	2300      	movs	r3, #0
 8002abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac8:	4b79      	ldr	r3, [pc, #484]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f003 030c 	and.w	r3, r3, #12
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d00d      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	f200 80e1 	bhi.w	8002c9c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d002      	beq.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0x3a>
 8002ae2:	e0db      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae4:	4b73      	ldr	r3, [pc, #460]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ae6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ae8:	e0db      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aea:	4b73      	ldr	r3, [pc, #460]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x208>)
 8002aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002aee:	e0d8      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af0:	4b6f      	ldr	r3, [pc, #444]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afa:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d063      	beq.n	8002bce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b06:	4b6a      	ldr	r3, [pc, #424]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	099b      	lsrs	r3, r3, #6
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b10:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b18:	633b      	str	r3, [r7, #48]	; 0x30
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b1e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b22:	4622      	mov	r2, r4
 8002b24:	462b      	mov	r3, r5
 8002b26:	f04f 0000 	mov.w	r0, #0
 8002b2a:	f04f 0100 	mov.w	r1, #0
 8002b2e:	0159      	lsls	r1, r3, #5
 8002b30:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b34:	0150      	lsls	r0, r2, #5
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	4621      	mov	r1, r4
 8002b3c:	1a51      	subs	r1, r2, r1
 8002b3e:	6139      	str	r1, [r7, #16]
 8002b40:	4629      	mov	r1, r5
 8002b42:	eb63 0301 	sbc.w	r3, r3, r1
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	f04f 0300 	mov.w	r3, #0
 8002b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b54:	4659      	mov	r1, fp
 8002b56:	018b      	lsls	r3, r1, #6
 8002b58:	4651      	mov	r1, sl
 8002b5a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b5e:	4651      	mov	r1, sl
 8002b60:	018a      	lsls	r2, r1, #6
 8002b62:	4651      	mov	r1, sl
 8002b64:	ebb2 0801 	subs.w	r8, r2, r1
 8002b68:	4659      	mov	r1, fp
 8002b6a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b82:	4690      	mov	r8, r2
 8002b84:	4699      	mov	r9, r3
 8002b86:	4623      	mov	r3, r4
 8002b88:	eb18 0303 	adds.w	r3, r8, r3
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	462b      	mov	r3, r5
 8002b90:	eb49 0303 	adc.w	r3, r9, r3
 8002b94:	60fb      	str	r3, [r7, #12]
 8002b96:	f04f 0200 	mov.w	r2, #0
 8002b9a:	f04f 0300 	mov.w	r3, #0
 8002b9e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	024b      	lsls	r3, r1, #9
 8002ba6:	4621      	mov	r1, r4
 8002ba8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bac:	4621      	mov	r1, r4
 8002bae:	024a      	lsls	r2, r1, #9
 8002bb0:	4610      	mov	r0, r2
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bbc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bc0:	f7fd fecc 	bl	800095c <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4613      	mov	r3, r2
 8002bca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bcc:	e058      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bce:	4b38      	ldr	r3, [pc, #224]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	099b      	lsrs	r3, r3, #6
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	4611      	mov	r1, r2
 8002bda:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bde:	623b      	str	r3, [r7, #32]
 8002be0:	2300      	movs	r3, #0
 8002be2:	627b      	str	r3, [r7, #36]	; 0x24
 8002be4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002be8:	4642      	mov	r2, r8
 8002bea:	464b      	mov	r3, r9
 8002bec:	f04f 0000 	mov.w	r0, #0
 8002bf0:	f04f 0100 	mov.w	r1, #0
 8002bf4:	0159      	lsls	r1, r3, #5
 8002bf6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bfa:	0150      	lsls	r0, r2, #5
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4641      	mov	r1, r8
 8002c02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c06:	4649      	mov	r1, r9
 8002c08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c0c:	f04f 0200 	mov.w	r2, #0
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c20:	ebb2 040a 	subs.w	r4, r2, sl
 8002c24:	eb63 050b 	sbc.w	r5, r3, fp
 8002c28:	f04f 0200 	mov.w	r2, #0
 8002c2c:	f04f 0300 	mov.w	r3, #0
 8002c30:	00eb      	lsls	r3, r5, #3
 8002c32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c36:	00e2      	lsls	r2, r4, #3
 8002c38:	4614      	mov	r4, r2
 8002c3a:	461d      	mov	r5, r3
 8002c3c:	4643      	mov	r3, r8
 8002c3e:	18e3      	adds	r3, r4, r3
 8002c40:	603b      	str	r3, [r7, #0]
 8002c42:	464b      	mov	r3, r9
 8002c44:	eb45 0303 	adc.w	r3, r5, r3
 8002c48:	607b      	str	r3, [r7, #4]
 8002c4a:	f04f 0200 	mov.w	r2, #0
 8002c4e:	f04f 0300 	mov.w	r3, #0
 8002c52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c56:	4629      	mov	r1, r5
 8002c58:	028b      	lsls	r3, r1, #10
 8002c5a:	4621      	mov	r1, r4
 8002c5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c60:	4621      	mov	r1, r4
 8002c62:	028a      	lsls	r2, r1, #10
 8002c64:	4610      	mov	r0, r2
 8002c66:	4619      	mov	r1, r3
 8002c68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	61fa      	str	r2, [r7, #28]
 8002c70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c74:	f7fd fe72 	bl	800095c <__aeabi_uldivmod>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c80:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	0c1b      	lsrs	r3, r3, #16
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c90:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c9a:	e002      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c9e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3750      	adds	r7, #80	; 0x50
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cae:	bf00      	nop
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	00f42400 	.word	0x00f42400
 8002cb8:	007a1200 	.word	0x007a1200

08002cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc0:	4b03      	ldr	r3, [pc, #12]	; (8002cd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000000 	.word	0x20000000

08002cd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002cd8:	f7ff fff0 	bl	8002cbc <HAL_RCC_GetHCLKFreq>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	0a9b      	lsrs	r3, r3, #10
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	4903      	ldr	r1, [pc, #12]	; (8002cf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cea:	5ccb      	ldrb	r3, [r1, r3]
 8002cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	bd80      	pop	{r7, pc}
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	08008034 	.word	0x08008034

08002cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d00:	f7ff ffdc 	bl	8002cbc <HAL_RCC_GetHCLKFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	0b5b      	lsrs	r3, r3, #13
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	4903      	ldr	r1, [pc, #12]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	08008034 	.word	0x08008034

08002d24 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d035      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d4c:	4b67      	ldr	r3, [pc, #412]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d52:	f7fe fd6b 	bl	800182c <HAL_GetTick>
 8002d56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d5a:	f7fe fd67 	bl	800182c <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0ba      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d6c:	4b60      	ldr	r3, [pc, #384]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f0      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	019a      	lsls	r2, r3, #6
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	071b      	lsls	r3, r3, #28
 8002d84:	495a      	ldr	r1, [pc, #360]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d8c:	4b57      	ldr	r3, [pc, #348]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d8e:	2201      	movs	r2, #1
 8002d90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d92:	f7fe fd4b 	bl	800182c <HAL_GetTick>
 8002d96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d98:	e008      	b.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d9a:	f7fe fd47 	bl	800182c <HAL_GetTick>
 8002d9e:	4602      	mov	r2, r0
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	1ad3      	subs	r3, r2, r3
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d901      	bls.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e09a      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002dac:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d0f0      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 8083 	beq.w	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	4a48      	ldr	r2, [pc, #288]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002dd6:	4b46      	ldr	r3, [pc, #280]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002de2:	4b44      	ldr	r3, [pc, #272]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a43      	ldr	r2, [pc, #268]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dee:	f7fe fd1d 	bl	800182c <HAL_GetTick>
 8002df2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002df4:	e008      	b.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7fe fd19 	bl	800182c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e06c      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e08:	4b3a      	ldr	r3, [pc, #232]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0f0      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e14:	4b36      	ldr	r3, [pc, #216]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e1c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d02f      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2c:	693a      	ldr	r2, [r7, #16]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d028      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e32:	4b2f      	ldr	r3, [pc, #188]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e3a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e3c:	4b2e      	ldr	r3, [pc, #184]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e3e:	2201      	movs	r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e48:	4a29      	ldr	r2, [pc, #164]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d114      	bne.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e5a:	f7fe fce7 	bl	800182c <HAL_GetTick>
 8002e5e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e60:	e00a      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e62:	f7fe fce3 	bl	800182c <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d901      	bls.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002e74:	2303      	movs	r3, #3
 8002e76:	e034      	b.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e78:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7c:	f003 0302 	and.w	r3, r3, #2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d0ee      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e90:	d10d      	bne.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002e92:	4b17      	ldr	r3, [pc, #92]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ea6:	4912      	ldr	r1, [pc, #72]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	608b      	str	r3, [r1, #8]
 8002eac:	e005      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002eae:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4a0f      	ldr	r2, [pc, #60]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002eb4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002eb8:	6093      	str	r3, [r2, #8]
 8002eba:	4b0d      	ldr	r3, [pc, #52]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ebc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ec6:	490a      	ldr	r1, [pc, #40]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	7c1a      	ldrb	r2, [r3, #16]
 8002edc:	4b07      	ldr	r3, [pc, #28]	; (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ede:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	42470068 	.word	0x42470068
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	40007000 	.word	0x40007000
 8002ef8:	42470e40 	.word	0x42470e40
 8002efc:	424711e0 	.word	0x424711e0

08002f00 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e073      	b.n	8002ffe <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	7f5b      	ldrb	r3, [r3, #29]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe f942 	bl	80011b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d055      	beq.n	8002fec <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	22ca      	movs	r2, #202	; 0xca
 8002f46:	625a      	str	r2, [r3, #36]	; 0x24
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2253      	movs	r2, #83	; 0x53
 8002f4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fa49 	bl	80033e8 <RTC_EnterInitMode>
 8002f56:	4603      	mov	r3, r0
 8002f58:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d12c      	bne.n	8002fba <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f72:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6899      	ldr	r1, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68d2      	ldr	r2, [r2, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6919      	ldr	r1, [r3, #16]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	041a      	lsls	r2, r3, #16
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 fa50 	bl	8003456 <RTC_ExitInitMode>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d110      	bne.n	8002fe2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	22ff      	movs	r2, #255	; 0xff
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24
 8002fea:	e001      	b.n	8002ff0 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003006:	b590      	push	{r4, r7, lr}
 8003008:	b087      	sub	sp, #28
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003012:	2300      	movs	r3, #0
 8003014:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	7f1b      	ldrb	r3, [r3, #28]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_RTC_SetTime+0x1c>
 800301e:	2302      	movs	r3, #2
 8003020:	e087      	b.n	8003132 <HAL_RTC_SetTime+0x12c>
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2201      	movs	r2, #1
 8003026:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2202      	movs	r2, #2
 800302c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d126      	bne.n	8003082 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	2200      	movs	r2, #0
 8003046:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fa27 	bl	80034a0 <RTC_ByteToBcd2>
 8003052:	4603      	mov	r3, r0
 8003054:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	785b      	ldrb	r3, [r3, #1]
 800305a:	4618      	mov	r0, r3
 800305c:	f000 fa20 	bl	80034a0 <RTC_ByteToBcd2>
 8003060:	4603      	mov	r3, r0
 8003062:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003064:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	789b      	ldrb	r3, [r3, #2]
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fa18 	bl	80034a0 <RTC_ByteToBcd2>
 8003070:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003072:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	78db      	ldrb	r3, [r3, #3]
 800307a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e018      	b.n	80030b4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308c:	2b00      	cmp	r3, #0
 800308e:	d102      	bne.n	8003096 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2200      	movs	r2, #0
 8003094:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	785b      	ldrb	r3, [r3, #1]
 80030a0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80030a2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80030a4:	68ba      	ldr	r2, [r7, #8]
 80030a6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80030a8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	78db      	ldrb	r3, [r3, #3]
 80030ae:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	22ca      	movs	r2, #202	; 0xca
 80030ba:	625a      	str	r2, [r3, #36]	; 0x24
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2253      	movs	r2, #83	; 0x53
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 f98f 	bl	80033e8 <RTC_EnterInitMode>
 80030ca:	4603      	mov	r3, r0
 80030cc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80030ce:	7cfb      	ldrb	r3, [r7, #19]
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d120      	bne.n	8003116 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80030de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80030e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6899      	ldr	r1, [r3, #8]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	431a      	orrs	r2, r3
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f000 f9a2 	bl	8003456 <RTC_ExitInitMode>
 8003112:	4603      	mov	r3, r0
 8003114:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003116:	7cfb      	ldrb	r3, [r7, #19]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d102      	bne.n	8003122 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2201      	movs	r2, #1
 8003120:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	22ff      	movs	r2, #255	; 0xff
 8003128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	771a      	strb	r2, [r3, #28]

  return status;
 8003130:	7cfb      	ldrb	r3, [r7, #19]
}
 8003132:	4618      	mov	r0, r3
 8003134:	371c      	adds	r7, #28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd90      	pop	{r4, r7, pc}

0800313a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b086      	sub	sp, #24
 800313e:	af00      	add	r7, sp, #0
 8003140:	60f8      	str	r0, [r7, #12]
 8003142:	60b9      	str	r1, [r7, #8]
 8003144:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003146:	2300      	movs	r3, #0
 8003148:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800316c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003170:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800317c:	b2da      	uxtb	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	b2db      	uxtb	r3, r3
 8003188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800318c:	b2da      	uxtb	r2, r3
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	b2db      	uxtb	r3, r3
 8003196:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	0d9b      	lsrs	r3, r3, #22
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d11a      	bne.n	80031ec <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 f98e 	bl	80034dc <RTC_Bcd2ToByte>
 80031c0:	4603      	mov	r3, r0
 80031c2:	461a      	mov	r2, r3
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	785b      	ldrb	r3, [r3, #1]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 f985 	bl	80034dc <RTC_Bcd2ToByte>
 80031d2:	4603      	mov	r3, r0
 80031d4:	461a      	mov	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	789b      	ldrb	r3, [r3, #2]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f97c 	bl	80034dc <RTC_Bcd2ToByte>
 80031e4:	4603      	mov	r3, r0
 80031e6:	461a      	mov	r2, r3
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031f6:	b590      	push	{r4, r7, lr}
 80031f8:	b087      	sub	sp, #28
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	60f8      	str	r0, [r7, #12]
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003202:	2300      	movs	r3, #0
 8003204:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	7f1b      	ldrb	r3, [r3, #28]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d101      	bne.n	8003212 <HAL_RTC_SetDate+0x1c>
 800320e:	2302      	movs	r3, #2
 8003210:	e071      	b.n	80032f6 <HAL_RTC_SetDate+0x100>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2201      	movs	r2, #1
 8003216:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2202      	movs	r2, #2
 800321c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10e      	bne.n	8003242 <HAL_RTC_SetDate+0x4c>
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	785b      	ldrb	r3, [r3, #1]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b00      	cmp	r3, #0
 800322e:	d008      	beq.n	8003242 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	785b      	ldrb	r3, [r3, #1]
 8003234:	f023 0310 	bic.w	r3, r3, #16
 8003238:	b2db      	uxtb	r3, r3
 800323a:	330a      	adds	r3, #10
 800323c:	b2da      	uxtb	r2, r3
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d11c      	bne.n	8003282 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	78db      	ldrb	r3, [r3, #3]
 800324c:	4618      	mov	r0, r3
 800324e:	f000 f927 	bl	80034a0 <RTC_ByteToBcd2>
 8003252:	4603      	mov	r3, r0
 8003254:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	785b      	ldrb	r3, [r3, #1]
 800325a:	4618      	mov	r0, r3
 800325c:	f000 f920 	bl	80034a0 <RTC_ByteToBcd2>
 8003260:	4603      	mov	r3, r0
 8003262:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003264:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	789b      	ldrb	r3, [r3, #2]
 800326a:	4618      	mov	r0, r3
 800326c:	f000 f918 	bl	80034a0 <RTC_ByteToBcd2>
 8003270:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003272:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e00e      	b.n	80032a0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	78db      	ldrb	r3, [r3, #3]
 8003286:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	785b      	ldrb	r3, [r3, #1]
 800328c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800328e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003294:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	22ca      	movs	r2, #202	; 0xca
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2253      	movs	r2, #83	; 0x53
 80032ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f899 	bl	80033e8 <RTC_EnterInitMode>
 80032b6:	4603      	mov	r3, r0
 80032b8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80032ba:	7cfb      	ldrb	r3, [r7, #19]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10c      	bne.n	80032da <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80032ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80032ce:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f8c0 	bl	8003456 <RTC_ExitInitMode>
 80032d6:	4603      	mov	r3, r0
 80032d8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80032da:	7cfb      	ldrb	r3, [r7, #19]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d102      	bne.n	80032e6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2201      	movs	r2, #1
 80032e4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	22ff      	movs	r2, #255	; 0xff
 80032ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2200      	movs	r2, #0
 80032f2:	771a      	strb	r2, [r3, #28]

  return status;
 80032f4:	7cfb      	ldrb	r3, [r7, #19]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	371c      	adds	r7, #28
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd90      	pop	{r4, r7, pc}

080032fe <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032fe:	b580      	push	{r7, lr}
 8003300:	b086      	sub	sp, #24
 8003302:	af00      	add	r7, sp, #0
 8003304:	60f8      	str	r0, [r7, #12]
 8003306:	60b9      	str	r1, [r7, #8]
 8003308:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003318:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800331c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	0c1b      	lsrs	r3, r3, #16
 8003322:	b2da      	uxtb	r2, r3
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	0a1b      	lsrs	r3, r3, #8
 800332c:	b2db      	uxtb	r3, r3
 800332e:	f003 031f 	and.w	r3, r3, #31
 8003332:	b2da      	uxtb	r2, r3
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003340:	b2da      	uxtb	r2, r3
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	0b5b      	lsrs	r3, r3, #13
 800334a:	b2db      	uxtb	r3, r3
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	b2da      	uxtb	r2, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d11a      	bne.n	8003392 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	78db      	ldrb	r3, [r3, #3]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 f8bb 	bl	80034dc <RTC_Bcd2ToByte>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	785b      	ldrb	r3, [r3, #1]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f8b2 	bl	80034dc <RTC_Bcd2ToByte>
 8003378:	4603      	mov	r3, r0
 800337a:	461a      	mov	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	789b      	ldrb	r3, [r3, #2]
 8003384:	4618      	mov	r0, r3
 8003386:	f000 f8a9 	bl	80034dc <RTC_Bcd2ToByte>
 800338a:	4603      	mov	r3, r0
 800338c:	461a      	mov	r2, r3
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003392:	2300      	movs	r3, #0
}
 8003394:	4618      	mov	r0, r3
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}

0800339c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a0d      	ldr	r2, [pc, #52]	; (80033e4 <HAL_RTC_WaitForSynchro+0x48>)
 80033ae:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033b0:	f7fe fa3c 	bl	800182c <HAL_GetTick>
 80033b4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80033b6:	e009      	b.n	80033cc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80033b8:	f7fe fa38 	bl	800182c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033c6:	d901      	bls.n	80033cc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80033c8:	2303      	movs	r3, #3
 80033ca:	e007      	b.n	80033dc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	f003 0320 	and.w	r3, r3, #32
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0ee      	beq.n	80033b8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	00013f5f 	.word	0x00013f5f

080033e8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b084      	sub	sp, #16
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003402:	2b00      	cmp	r3, #0
 8003404:	d122      	bne.n	800344c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003414:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003416:	f7fe fa09 	bl	800182c <HAL_GetTick>
 800341a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800341c:	e00c      	b.n	8003438 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800341e:	f7fe fa05 	bl	800182c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800342c:	d904      	bls.n	8003438 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2204      	movs	r2, #4
 8003432:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d102      	bne.n	800344c <RTC_EnterInitMode+0x64>
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b01      	cmp	r3, #1
 800344a:	d1e8      	bne.n	800341e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800344c:	7bfb      	ldrb	r3, [r7, #15]
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003470:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10a      	bne.n	8003496 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff8b 	bl	800339c <HAL_RTC_WaitForSynchro>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d004      	beq.n	8003496 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2204      	movs	r2, #4
 8003490:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003496:	7bfb      	ldrb	r3, [r7, #15]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80034ae:	e005      	b.n	80034bc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3301      	adds	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80034b6:	79fb      	ldrb	r3, [r7, #7]
 80034b8:	3b0a      	subs	r3, #10
 80034ba:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80034bc:	79fb      	ldrb	r3, [r7, #7]
 80034be:	2b09      	cmp	r3, #9
 80034c0:	d8f6      	bhi.n	80034b0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	b2da      	uxtb	r2, r3
 80034ca:	79fb      	ldrb	r3, [r7, #7]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	b2db      	uxtb	r3, r3
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr

080034dc <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	091b      	lsrs	r3, r3, #4
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	461a      	mov	r2, r3
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	79fb      	ldrb	r3, [r7, #7]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	b2db      	uxtb	r3, r3
 8003508:	4413      	add	r3, r2
 800350a:	b2db      	uxtb	r3, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e041      	b.n	80035ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd fe62 	bl	8001208 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f000 fbba 	bl	8003cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d001      	beq.n	80035d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e044      	b.n	800365a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2202      	movs	r2, #2
 80035d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0201 	orr.w	r2, r2, #1
 80035e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1e      	ldr	r2, [pc, #120]	; (8003668 <HAL_TIM_Base_Start_IT+0xb0>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d018      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x6c>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fa:	d013      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x6c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a1a      	ldr	r2, [pc, #104]	; (800366c <HAL_TIM_Base_Start_IT+0xb4>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d00e      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x6c>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a19      	ldr	r2, [pc, #100]	; (8003670 <HAL_TIM_Base_Start_IT+0xb8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d009      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x6c>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a17      	ldr	r2, [pc, #92]	; (8003674 <HAL_TIM_Base_Start_IT+0xbc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d004      	beq.n	8003624 <HAL_TIM_Base_Start_IT+0x6c>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	4a16      	ldr	r2, [pc, #88]	; (8003678 <HAL_TIM_Base_Start_IT+0xc0>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d111      	bne.n	8003648 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2b06      	cmp	r3, #6
 8003634:	d010      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f042 0201 	orr.w	r2, r2, #1
 8003644:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003646:	e007      	b.n	8003658 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3714      	adds	r7, #20
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40010000 	.word	0x40010000
 800366c:	40000400 	.word	0x40000400
 8003670:	40000800 	.word	0x40000800
 8003674:	40000c00 	.word	0x40000c00
 8003678:	40014000 	.word	0x40014000

0800367c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6a1a      	ldr	r2, [r3, #32]
 800369a:	f241 1311 	movw	r3, #4369	; 0x1111
 800369e:	4013      	ands	r3, r2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10f      	bne.n	80036c4 <HAL_TIM_Base_Stop_IT+0x48>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6a1a      	ldr	r2, [r3, #32]
 80036aa:	f240 4344 	movw	r3, #1092	; 0x444
 80036ae:	4013      	ands	r3, r2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d107      	bne.n	80036c4 <HAL_TIM_Base_Stop_IT+0x48>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr

080036da <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d101      	bne.n	80036ec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e041      	b.n	8003770 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d106      	bne.n	8003706 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 f839 	bl	8003778 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	4619      	mov	r1, r3
 8003718:	4610      	mov	r0, r2
 800371a:	f000 fad9 	bl	8003cd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	3708      	adds	r7, #8
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003780:	bf00      	nop
 8003782:	370c      	adds	r7, #12
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d020      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d01b      	beq.n	80037f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f06f 0202 	mvn.w	r2, #2
 80037c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	f003 0303 	and.w	r3, r3, #3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f000 fa5b 	bl	8003c92 <HAL_TIM_IC_CaptureCallback>
 80037dc:	e005      	b.n	80037ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f000 fa4d 	bl	8003c7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fa5e 	bl	8003ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d020      	beq.n	800383c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d01b      	beq.n	800383c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f06f 0204 	mvn.w	r2, #4
 800380c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2202      	movs	r2, #2
 8003812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	2b00      	cmp	r3, #0
 8003820:	d003      	beq.n	800382a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa35 	bl	8003c92 <HAL_TIM_IC_CaptureCallback>
 8003828:	e005      	b.n	8003836 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fa27 	bl	8003c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 fa38 	bl	8003ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 0308 	and.w	r3, r3, #8
 8003842:	2b00      	cmp	r3, #0
 8003844:	d020      	beq.n	8003888 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01b      	beq.n	8003888 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0208 	mvn.w	r2, #8
 8003858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2204      	movs	r2, #4
 800385e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 fa0f 	bl	8003c92 <HAL_TIM_IC_CaptureCallback>
 8003874:	e005      	b.n	8003882 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fa01 	bl	8003c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 fa12 	bl	8003ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f003 0310 	and.w	r3, r3, #16
 800388e:	2b00      	cmp	r3, #0
 8003890:	d020      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 0310 	and.w	r3, r3, #16
 8003898:	2b00      	cmp	r3, #0
 800389a:	d01b      	beq.n	80038d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0210 	mvn.w	r2, #16
 80038a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2208      	movs	r2, #8
 80038aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f9e9 	bl	8003c92 <HAL_TIM_IC_CaptureCallback>
 80038c0:	e005      	b.n	80038ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f9db 	bl	8003c7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f9ec 	bl	8003ca6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d00c      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d007      	beq.n	80038f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0201 	mvn.w	r2, #1
 80038f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	f001 fb52 	bl	8004f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d00c      	beq.n	800391c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003908:	2b00      	cmp	r3, #0
 800390a:	d007      	beq.n	800391c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003914:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 fd04 	bl	8004324 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00c      	beq.n	8003940 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f9bd 	bl	8003cba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00c      	beq.n	8003964 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f06f 0220 	mvn.w	r2, #32
 800395c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 fcd6 	bl	8004310 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003986:	2302      	movs	r3, #2
 8003988:	e0ae      	b.n	8003ae8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2b0c      	cmp	r3, #12
 8003996:	f200 809f 	bhi.w	8003ad8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800399a:	a201      	add	r2, pc, #4	; (adr r2, 80039a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800399c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a0:	080039d5 	.word	0x080039d5
 80039a4:	08003ad9 	.word	0x08003ad9
 80039a8:	08003ad9 	.word	0x08003ad9
 80039ac:	08003ad9 	.word	0x08003ad9
 80039b0:	08003a15 	.word	0x08003a15
 80039b4:	08003ad9 	.word	0x08003ad9
 80039b8:	08003ad9 	.word	0x08003ad9
 80039bc:	08003ad9 	.word	0x08003ad9
 80039c0:	08003a57 	.word	0x08003a57
 80039c4:	08003ad9 	.word	0x08003ad9
 80039c8:	08003ad9 	.word	0x08003ad9
 80039cc:	08003ad9 	.word	0x08003ad9
 80039d0:	08003a97 	.word	0x08003a97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68b9      	ldr	r1, [r7, #8]
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 fa04 	bl	8003de8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699a      	ldr	r2, [r3, #24]
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0208 	orr.w	r2, r2, #8
 80039ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	699a      	ldr	r2, [r3, #24]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0204 	bic.w	r2, r2, #4
 80039fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6999      	ldr	r1, [r3, #24]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	691a      	ldr	r2, [r3, #16]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	619a      	str	r2, [r3, #24]
      break;
 8003a12:	e064      	b.n	8003ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68b9      	ldr	r1, [r7, #8]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fa4a 	bl	8003eb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	699a      	ldr	r2, [r3, #24]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6999      	ldr	r1, [r3, #24]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	021a      	lsls	r2, r3, #8
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	619a      	str	r2, [r3, #24]
      break;
 8003a54:	e043      	b.n	8003ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f000 fa95 	bl	8003f8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69da      	ldr	r2, [r3, #28]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0208 	orr.w	r2, r2, #8
 8003a70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0204 	bic.w	r2, r2, #4
 8003a80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	69d9      	ldr	r1, [r3, #28]
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	691a      	ldr	r2, [r3, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	61da      	str	r2, [r3, #28]
      break;
 8003a94:	e023      	b.n	8003ade <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68b9      	ldr	r1, [r7, #8]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 fadf 	bl	8004060 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ab0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69da      	ldr	r2, [r3, #28]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ac0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69d9      	ldr	r1, [r3, #28]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	021a      	lsls	r2, r3, #8
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	61da      	str	r2, [r3, #28]
      break;
 8003ad6:	e002      	b.n	8003ade <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	75fb      	strb	r3, [r7, #23]
      break;
 8003adc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_TIM_ConfigClockSource+0x1c>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e0b4      	b.n	8003c76 <HAL_TIM_ConfigClockSource+0x186>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2202      	movs	r2, #2
 8003b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b44:	d03e      	beq.n	8003bc4 <HAL_TIM_ConfigClockSource+0xd4>
 8003b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b4a:	f200 8087 	bhi.w	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b52:	f000 8086 	beq.w	8003c62 <HAL_TIM_ConfigClockSource+0x172>
 8003b56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b5a:	d87f      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b5c:	2b70      	cmp	r3, #112	; 0x70
 8003b5e:	d01a      	beq.n	8003b96 <HAL_TIM_ConfigClockSource+0xa6>
 8003b60:	2b70      	cmp	r3, #112	; 0x70
 8003b62:	d87b      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b64:	2b60      	cmp	r3, #96	; 0x60
 8003b66:	d050      	beq.n	8003c0a <HAL_TIM_ConfigClockSource+0x11a>
 8003b68:	2b60      	cmp	r3, #96	; 0x60
 8003b6a:	d877      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b6c:	2b50      	cmp	r3, #80	; 0x50
 8003b6e:	d03c      	beq.n	8003bea <HAL_TIM_ConfigClockSource+0xfa>
 8003b70:	2b50      	cmp	r3, #80	; 0x50
 8003b72:	d873      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d058      	beq.n	8003c2a <HAL_TIM_ConfigClockSource+0x13a>
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	d86f      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b7c:	2b30      	cmp	r3, #48	; 0x30
 8003b7e:	d064      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x15a>
 8003b80:	2b30      	cmp	r3, #48	; 0x30
 8003b82:	d86b      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d060      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x15a>
 8003b88:	2b20      	cmp	r3, #32
 8003b8a:	d867      	bhi.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d05c      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x15a>
 8003b90:	2b10      	cmp	r3, #16
 8003b92:	d05a      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0x15a>
 8003b94:	e062      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ba6:	f000 fb25 	bl	80041f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bb8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	609a      	str	r2, [r3, #8]
      break;
 8003bc2:	e04f      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bd4:	f000 fb0e 	bl	80041f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	689a      	ldr	r2, [r3, #8]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003be6:	609a      	str	r2, [r3, #8]
      break;
 8003be8:	e03c      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f000 fa82 	bl	8004100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2150      	movs	r1, #80	; 0x50
 8003c02:	4618      	mov	r0, r3
 8003c04:	f000 fadb 	bl	80041be <TIM_ITRx_SetConfig>
      break;
 8003c08:	e02c      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c16:	461a      	mov	r2, r3
 8003c18:	f000 faa1 	bl	800415e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2160      	movs	r1, #96	; 0x60
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 facb 	bl	80041be <TIM_ITRx_SetConfig>
      break;
 8003c28:	e01c      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c36:	461a      	mov	r2, r3
 8003c38:	f000 fa62 	bl	8004100 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2140      	movs	r1, #64	; 0x40
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fabb 	bl	80041be <TIM_ITRx_SetConfig>
      break;
 8003c48:	e00c      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4619      	mov	r1, r3
 8003c54:	4610      	mov	r0, r2
 8003c56:	f000 fab2 	bl	80041be <TIM_ITRx_SetConfig>
      break;
 8003c5a:	e003      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c60:	e000      	b.n	8003c64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c86:	bf00      	nop
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b083      	sub	sp, #12
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cc2:	bf00      	nop
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ccc:	4770      	bx	lr
	...

08003cd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a3a      	ldr	r2, [pc, #232]	; (8003dcc <TIM_Base_SetConfig+0xfc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00f      	beq.n	8003d08 <TIM_Base_SetConfig+0x38>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cee:	d00b      	beq.n	8003d08 <TIM_Base_SetConfig+0x38>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a37      	ldr	r2, [pc, #220]	; (8003dd0 <TIM_Base_SetConfig+0x100>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d007      	beq.n	8003d08 <TIM_Base_SetConfig+0x38>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	4a36      	ldr	r2, [pc, #216]	; (8003dd4 <TIM_Base_SetConfig+0x104>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d003      	beq.n	8003d08 <TIM_Base_SetConfig+0x38>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a35      	ldr	r2, [pc, #212]	; (8003dd8 <TIM_Base_SetConfig+0x108>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d108      	bne.n	8003d1a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a2b      	ldr	r2, [pc, #172]	; (8003dcc <TIM_Base_SetConfig+0xfc>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01b      	beq.n	8003d5a <TIM_Base_SetConfig+0x8a>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d28:	d017      	beq.n	8003d5a <TIM_Base_SetConfig+0x8a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a28      	ldr	r2, [pc, #160]	; (8003dd0 <TIM_Base_SetConfig+0x100>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <TIM_Base_SetConfig+0x8a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a27      	ldr	r2, [pc, #156]	; (8003dd4 <TIM_Base_SetConfig+0x104>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00f      	beq.n	8003d5a <TIM_Base_SetConfig+0x8a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a26      	ldr	r2, [pc, #152]	; (8003dd8 <TIM_Base_SetConfig+0x108>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00b      	beq.n	8003d5a <TIM_Base_SetConfig+0x8a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a25      	ldr	r2, [pc, #148]	; (8003ddc <TIM_Base_SetConfig+0x10c>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d007      	beq.n	8003d5a <TIM_Base_SetConfig+0x8a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a24      	ldr	r2, [pc, #144]	; (8003de0 <TIM_Base_SetConfig+0x110>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d003      	beq.n	8003d5a <TIM_Base_SetConfig+0x8a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a23      	ldr	r2, [pc, #140]	; (8003de4 <TIM_Base_SetConfig+0x114>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d108      	bne.n	8003d6c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a0e      	ldr	r2, [pc, #56]	; (8003dcc <TIM_Base_SetConfig+0xfc>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d103      	bne.n	8003da0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d105      	bne.n	8003dbe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	f023 0201 	bic.w	r2, r3, #1
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	611a      	str	r2, [r3, #16]
  }
}
 8003dbe:	bf00      	nop
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40000400 	.word	0x40000400
 8003dd4:	40000800 	.word	0x40000800
 8003dd8:	40000c00 	.word	0x40000c00
 8003ddc:	40014000 	.word	0x40014000
 8003de0:	40014400 	.word	0x40014400
 8003de4:	40014800 	.word	0x40014800

08003de8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1b      	ldr	r3, [r3, #32]
 8003dfc:	f023 0201 	bic.w	r2, r3, #1
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f023 0302 	bic.w	r3, r3, #2
 8003e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a1c      	ldr	r2, [pc, #112]	; (8003eb0 <TIM_OC1_SetConfig+0xc8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d10c      	bne.n	8003e5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 0308 	bic.w	r3, r3, #8
 8003e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f023 0304 	bic.w	r3, r3, #4
 8003e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a13      	ldr	r2, [pc, #76]	; (8003eb0 <TIM_OC1_SetConfig+0xc8>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d111      	bne.n	8003e8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	621a      	str	r2, [r3, #32]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40010000 	.word	0x40010000

08003eb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f023 0210 	bic.w	r2, r3, #16
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f023 0320 	bic.w	r3, r3, #32
 8003efe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a1e      	ldr	r2, [pc, #120]	; (8003f88 <TIM_OC2_SetConfig+0xd4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d10d      	bne.n	8003f30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <TIM_OC2_SetConfig+0xd4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d113      	bne.n	8003f60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	693a      	ldr	r2, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	621a      	str	r2, [r3, #32]
}
 8003f7a:	bf00      	nop
 8003f7c:	371c      	adds	r7, #28
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop
 8003f88:	40010000 	.word	0x40010000

08003f8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0303 	bic.w	r3, r3, #3
 8003fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	021b      	lsls	r3, r3, #8
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1d      	ldr	r2, [pc, #116]	; (800405c <TIM_OC3_SetConfig+0xd0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d10d      	bne.n	8004006 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ff0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	021b      	lsls	r3, r3, #8
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a14      	ldr	r2, [pc, #80]	; (800405c <TIM_OC3_SetConfig+0xd0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d113      	bne.n	8004036 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800401c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	621a      	str	r2, [r3, #32]
}
 8004050:	bf00      	nop
 8004052:	371c      	adds	r7, #28
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	40010000 	.word	0x40010000

08004060 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004060:	b480      	push	{r7}
 8004062:	b087      	sub	sp, #28
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004096:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	021b      	lsls	r3, r3, #8
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	031b      	lsls	r3, r3, #12
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4a10      	ldr	r2, [pc, #64]	; (80040fc <TIM_OC4_SetConfig+0x9c>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d109      	bne.n	80040d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	019b      	lsls	r3, r3, #6
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	685a      	ldr	r2, [r3, #4]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	621a      	str	r2, [r3, #32]
}
 80040ee:	bf00      	nop
 80040f0:	371c      	adds	r7, #28
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
 80040fa:	bf00      	nop
 80040fc:	40010000 	.word	0x40010000

08004100 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f023 0201 	bic.w	r2, r3, #1
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800412a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	011b      	lsls	r3, r3, #4
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f023 030a 	bic.w	r3, r3, #10
 800413c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800413e:	697a      	ldr	r2, [r7, #20]
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	4313      	orrs	r3, r2
 8004144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	621a      	str	r2, [r3, #32]
}
 8004152:	bf00      	nop
 8004154:	371c      	adds	r7, #28
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr

0800415e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800415e:	b480      	push	{r7}
 8004160:	b087      	sub	sp, #28
 8004162:	af00      	add	r7, sp, #0
 8004164:	60f8      	str	r0, [r7, #12]
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6a1b      	ldr	r3, [r3, #32]
 8004174:	f023 0210 	bic.w	r2, r3, #16
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004188:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	031b      	lsls	r3, r3, #12
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800419a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	693a      	ldr	r2, [r7, #16]
 80041aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	621a      	str	r2, [r3, #32]
}
 80041b2:	bf00      	nop
 80041b4:	371c      	adds	r7, #28
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041d6:	683a      	ldr	r2, [r7, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4313      	orrs	r3, r2
 80041dc:	f043 0307 	orr.w	r3, r3, #7
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	609a      	str	r2, [r3, #8]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
 8004200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800420e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	021a      	lsls	r2, r3, #8
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	431a      	orrs	r2, r3
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4313      	orrs	r3, r2
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	4313      	orrs	r3, r2
 8004220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	609a      	str	r2, [r3, #8]
}
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004234:	b480      	push	{r7}
 8004236:	b085      	sub	sp, #20
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004248:	2302      	movs	r3, #2
 800424a:	e050      	b.n	80042ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004272:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1c      	ldr	r2, [pc, #112]	; (80042fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d018      	beq.n	80042c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d013      	beq.n	80042c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a18      	ldr	r2, [pc, #96]	; (8004300 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d00e      	beq.n	80042c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a16      	ldr	r2, [pc, #88]	; (8004304 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d009      	beq.n	80042c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a15      	ldr	r2, [pc, #84]	; (8004308 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a13      	ldr	r2, [pc, #76]	; (800430c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d10c      	bne.n	80042dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68ba      	ldr	r2, [r7, #8]
 80042da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	40010000 	.word	0x40010000
 8004300:	40000400 	.word	0x40000400
 8004304:	40000800 	.word	0x40000800
 8004308:	40000c00 	.word	0x40000c00
 800430c:	40014000 	.word	0x40014000

08004310 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004318:	bf00      	nop
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800432c:	bf00      	nop
 800432e:	370c      	adds	r7, #12
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b082      	sub	sp, #8
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e042      	b.n	80043d0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f000 f83a 	bl	80043d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2224      	movs	r2, #36	; 0x24
 8004368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800437a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fb8d 	bl	8004a9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004390:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695a      	ldr	r2, [r3, #20]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2220      	movs	r2, #32
 80043bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3708      	adds	r7, #8
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	; 0x28
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b20      	cmp	r3, #32
 800440a:	d175      	bne.n	80044f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_UART_Transmit+0x2c>
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e06e      	b.n	80044fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2221      	movs	r2, #33	; 0x21
 8004426:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800442a:	f7fd f9ff 	bl	800182c <HAL_GetTick>
 800442e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	88fa      	ldrh	r2, [r7, #6]
 800443a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004444:	d108      	bne.n	8004458 <HAL_UART_Transmit+0x6c>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d104      	bne.n	8004458 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	e003      	b.n	8004460 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800445c:	2300      	movs	r3, #0
 800445e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004460:	e02e      	b.n	80044c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2200      	movs	r2, #0
 800446a:	2180      	movs	r1, #128	; 0x80
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f995 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e03a      	b.n	80044fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10b      	bne.n	80044a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004498:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	3302      	adds	r3, #2
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	e007      	b.n	80044b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	781a      	ldrb	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	3301      	adds	r3, #1
 80044b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1cb      	bne.n	8004462 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2200      	movs	r2, #0
 80044d2:	2140      	movs	r1, #64	; 0x40
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 f961 	bl	800479c <UART_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e006      	b.n	80044fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e000      	b.n	80044fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	4613      	mov	r3, r2
 800450e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b20      	cmp	r3, #32
 800451a:	d112      	bne.n	8004542 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_UART_Receive_DMA+0x26>
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e00b      	b.n	8004544 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	461a      	mov	r2, r3
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f989 	bl	8004850 <UART_Start_Receive_DMA>
 800453e:	4603      	mov	r3, r0
 8004540:	e000      	b.n	8004544 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004560:	b480      	push	{r7}
 8004562:	b083      	sub	sp, #12
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800457c:	bf00      	nop
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	460b      	mov	r3, r1
 8004592:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b09c      	sub	sp, #112	; 0x70
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ac:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d172      	bne.n	80046a2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80045bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045be:	2200      	movs	r2, #0
 80045c0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	330c      	adds	r3, #12
 80045c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045cc:	e853 3f00 	ldrex	r3, [r3]
 80045d0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80045d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80045da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80045e2:	65ba      	str	r2, [r7, #88]	; 0x58
 80045e4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80045e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80045ea:	e841 2300 	strex	r3, r2, [r1]
 80045ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80045f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e5      	bne.n	80045c2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3314      	adds	r3, #20
 80045fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004600:	e853 3f00 	ldrex	r3, [r3]
 8004604:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004608:	f023 0301 	bic.w	r3, r3, #1
 800460c:	667b      	str	r3, [r7, #100]	; 0x64
 800460e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	3314      	adds	r3, #20
 8004614:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004616:	647a      	str	r2, [r7, #68]	; 0x44
 8004618:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800461c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800461e:	e841 2300 	strex	r3, r2, [r1]
 8004622:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1e5      	bne.n	80045f6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800462a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3314      	adds	r3, #20
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	623b      	str	r3, [r7, #32]
   return(result);
 800463a:	6a3b      	ldr	r3, [r7, #32]
 800463c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004640:	663b      	str	r3, [r7, #96]	; 0x60
 8004642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	3314      	adds	r3, #20
 8004648:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800464a:	633a      	str	r2, [r7, #48]	; 0x30
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e5      	bne.n	800462a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800465e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004660:	2220      	movs	r2, #32
 8004662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004666:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800466a:	2b01      	cmp	r3, #1
 800466c:	d119      	bne.n	80046a2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	330c      	adds	r3, #12
 8004674:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	60fb      	str	r3, [r7, #12]
   return(result);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f023 0310 	bic.w	r3, r3, #16
 8004684:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	330c      	adds	r3, #12
 800468c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800468e:	61fa      	str	r2, [r7, #28]
 8004690:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	69b9      	ldr	r1, [r7, #24]
 8004694:	69fa      	ldr	r2, [r7, #28]
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	617b      	str	r3, [r7, #20]
   return(result);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e5      	bne.n	800466e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046a4:	2200      	movs	r2, #0
 80046a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d106      	bne.n	80046be <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046b4:	4619      	mov	r1, r3
 80046b6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80046b8:	f7ff ff66 	bl	8004588 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046bc:	e002      	b.n	80046c4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80046be:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80046c0:	f7ff ff44 	bl	800454c <HAL_UART_RxCpltCallback>
}
 80046c4:	bf00      	nop
 80046c6:	3770      	adds	r7, #112	; 0x70
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d108      	bne.n	80046fa <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	4619      	mov	r1, r3
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f7ff ff48 	bl	8004588 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80046f8:	e002      	b.n	8004700 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff ff30 	bl	8004560 <HAL_UART_RxHalfCpltCallback>
}
 8004700:	bf00      	nop
 8004702:	3710      	adds	r7, #16
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}

08004708 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004718:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004724:	2b80      	cmp	r3, #128	; 0x80
 8004726:	bf0c      	ite	eq
 8004728:	2301      	moveq	r3, #1
 800472a:	2300      	movne	r3, #0
 800472c:	b2db      	uxtb	r3, r3
 800472e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b21      	cmp	r3, #33	; 0x21
 800473a:	d108      	bne.n	800474e <UART_DMAError+0x46>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d005      	beq.n	800474e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	2200      	movs	r2, #0
 8004746:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004748:	68b8      	ldr	r0, [r7, #8]
 800474a:	f000 f91b 	bl	8004984 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004758:	2b40      	cmp	r3, #64	; 0x40
 800475a:	bf0c      	ite	eq
 800475c:	2301      	moveq	r3, #1
 800475e:	2300      	movne	r3, #0
 8004760:	b2db      	uxtb	r3, r3
 8004762:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b22      	cmp	r3, #34	; 0x22
 800476e:	d108      	bne.n	8004782 <UART_DMAError+0x7a>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d005      	beq.n	8004782 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2200      	movs	r2, #0
 800477a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800477c:	68b8      	ldr	r0, [r7, #8]
 800477e:	f000 f929 	bl	80049d4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004786:	f043 0210 	orr.w	r2, r3, #16
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800478e:	68b8      	ldr	r0, [r7, #8]
 8004790:	f7ff fef0 	bl	8004574 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004794:	bf00      	nop
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	4613      	mov	r3, r2
 80047aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ac:	e03b      	b.n	8004826 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b4:	d037      	beq.n	8004826 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b6:	f7fd f839 	bl	800182c <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	6a3a      	ldr	r2, [r7, #32]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d302      	bcc.n	80047cc <UART_WaitOnFlagUntilTimeout+0x30>
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d101      	bne.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e03a      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d023      	beq.n	8004826 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	2b80      	cmp	r3, #128	; 0x80
 80047e2:	d020      	beq.n	8004826 <UART_WaitOnFlagUntilTimeout+0x8a>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	d01d      	beq.n	8004826 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0308 	and.w	r3, r3, #8
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d116      	bne.n	8004826 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047f8:	2300      	movs	r3, #0
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	617b      	str	r3, [r7, #20]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f8e0 	bl	80049d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2208      	movs	r2, #8
 8004818:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e00f      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	4013      	ands	r3, r2
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	429a      	cmp	r2, r3
 8004834:	bf0c      	ite	eq
 8004836:	2301      	moveq	r3, #1
 8004838:	2300      	movne	r3, #0
 800483a:	b2db      	uxtb	r3, r3
 800483c:	461a      	mov	r2, r3
 800483e:	79fb      	ldrb	r3, [r7, #7]
 8004840:	429a      	cmp	r2, r3
 8004842:	d0b4      	beq.n	80047ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
	...

08004850 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b098      	sub	sp, #96	; 0x60
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	4613      	mov	r3, r2
 800485c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	88fa      	ldrh	r2, [r7, #6]
 8004868:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2222      	movs	r2, #34	; 0x22
 8004874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487c:	4a3e      	ldr	r2, [pc, #248]	; (8004978 <UART_Start_Receive_DMA+0x128>)
 800487e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004884:	4a3d      	ldr	r2, [pc, #244]	; (800497c <UART_Start_Receive_DMA+0x12c>)
 8004886:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	4a3c      	ldr	r2, [pc, #240]	; (8004980 <UART_Start_Receive_DMA+0x130>)
 800488e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004894:	2200      	movs	r2, #0
 8004896:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004898:	f107 0308 	add.w	r3, r7, #8
 800489c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3304      	adds	r3, #4
 80048a8:	4619      	mov	r1, r3
 80048aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	f7fd fb7b 	bl	8001faa <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80048b4:	2300      	movs	r3, #0
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	613b      	str	r3, [r7, #16]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	613b      	str	r3, [r7, #16]
 80048c8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d019      	beq.n	8004906 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	330c      	adds	r3, #12
 80048d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048dc:	e853 3f00 	ldrex	r3, [r3]
 80048e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048f2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80048f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80048f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048fa:	e841 2300 	strex	r3, r2, [r1]
 80048fe:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1e5      	bne.n	80048d2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3314      	adds	r3, #20
 800490c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004910:	e853 3f00 	ldrex	r3, [r3]
 8004914:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	657b      	str	r3, [r7, #84]	; 0x54
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3314      	adds	r3, #20
 8004924:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004926:	63ba      	str	r2, [r7, #56]	; 0x38
 8004928:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800492c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e5      	bne.n	8004906 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3314      	adds	r3, #20
 8004940:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	e853 3f00 	ldrex	r3, [r3]
 8004948:	617b      	str	r3, [r7, #20]
   return(result);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004950:	653b      	str	r3, [r7, #80]	; 0x50
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3314      	adds	r3, #20
 8004958:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800495a:	627a      	str	r2, [r7, #36]	; 0x24
 800495c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800495e:	6a39      	ldr	r1, [r7, #32]
 8004960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004962:	e841 2300 	strex	r3, r2, [r1]
 8004966:	61fb      	str	r3, [r7, #28]
   return(result);
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1e5      	bne.n	800493a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3760      	adds	r7, #96	; 0x60
 8004974:	46bd      	mov	sp, r7
 8004976:	bd80      	pop	{r7, pc}
 8004978:	080045a1 	.word	0x080045a1
 800497c:	080046cd 	.word	0x080046cd
 8004980:	08004709 	.word	0x08004709

08004984 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004984:	b480      	push	{r7}
 8004986:	b089      	sub	sp, #36	; 0x24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	e853 3f00 	ldrex	r3, [r3]
 800499a:	60bb      	str	r3, [r7, #8]
   return(result);
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80049a2:	61fb      	str	r3, [r7, #28]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	69fa      	ldr	r2, [r7, #28]
 80049ac:	61ba      	str	r2, [r7, #24]
 80049ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b0:	6979      	ldr	r1, [r7, #20]
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	e841 2300 	strex	r3, r2, [r1]
 80049b8:	613b      	str	r3, [r7, #16]
   return(result);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d1e5      	bne.n	800498c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2220      	movs	r2, #32
 80049c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80049c8:	bf00      	nop
 80049ca:	3724      	adds	r7, #36	; 0x24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b095      	sub	sp, #84	; 0x54
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	330c      	adds	r3, #12
 80049e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049e6:	e853 3f00 	ldrex	r3, [r3]
 80049ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	330c      	adds	r3, #12
 80049fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80049fc:	643a      	str	r2, [r7, #64]	; 0x40
 80049fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a04:	e841 2300 	strex	r3, r2, [r1]
 8004a08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1e5      	bne.n	80049dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3314      	adds	r3, #20
 8004a16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	6a3b      	ldr	r3, [r7, #32]
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3314      	adds	r3, #20
 8004a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e5      	bne.n	8004a10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d119      	bne.n	8004a80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	330c      	adds	r3, #12
 8004a52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	e853 3f00 	ldrex	r3, [r3]
 8004a5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f023 0310 	bic.w	r3, r3, #16
 8004a62:	647b      	str	r3, [r7, #68]	; 0x44
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	330c      	adds	r3, #12
 8004a6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a6c:	61ba      	str	r2, [r7, #24]
 8004a6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a70:	6979      	ldr	r1, [r7, #20]
 8004a72:	69ba      	ldr	r2, [r7, #24]
 8004a74:	e841 2300 	strex	r3, r2, [r1]
 8004a78:	613b      	str	r3, [r7, #16]
   return(result);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d1e5      	bne.n	8004a4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a8e:	bf00      	nop
 8004a90:	3754      	adds	r7, #84	; 0x54
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aa0:	b0c0      	sub	sp, #256	; 0x100
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab8:	68d9      	ldr	r1, [r3, #12]
 8004aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	ea40 0301 	orr.w	r3, r0, r1
 8004ac4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aca:	689a      	ldr	r2, [r3, #8]
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	431a      	orrs	r2, r3
 8004adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004af4:	f021 010c 	bic.w	r1, r1, #12
 8004af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b02:	430b      	orrs	r3, r1
 8004b04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b16:	6999      	ldr	r1, [r3, #24]
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	ea40 0301 	orr.w	r3, r0, r1
 8004b22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	4b8f      	ldr	r3, [pc, #572]	; (8004d68 <UART_SetConfig+0x2cc>)
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d005      	beq.n	8004b3c <UART_SetConfig+0xa0>
 8004b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	4b8d      	ldr	r3, [pc, #564]	; (8004d6c <UART_SetConfig+0x2d0>)
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d104      	bne.n	8004b46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b3c:	f7fe f8de 	bl	8002cfc <HAL_RCC_GetPCLK2Freq>
 8004b40:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b44:	e003      	b.n	8004b4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b46:	f7fe f8c5 	bl	8002cd4 <HAL_RCC_GetPCLK1Freq>
 8004b4a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b58:	f040 810c 	bne.w	8004d74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b60:	2200      	movs	r2, #0
 8004b62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004b66:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004b6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004b6e:	4622      	mov	r2, r4
 8004b70:	462b      	mov	r3, r5
 8004b72:	1891      	adds	r1, r2, r2
 8004b74:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b76:	415b      	adcs	r3, r3
 8004b78:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b7e:	4621      	mov	r1, r4
 8004b80:	eb12 0801 	adds.w	r8, r2, r1
 8004b84:	4629      	mov	r1, r5
 8004b86:	eb43 0901 	adc.w	r9, r3, r1
 8004b8a:	f04f 0200 	mov.w	r2, #0
 8004b8e:	f04f 0300 	mov.w	r3, #0
 8004b92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004b9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b9e:	4690      	mov	r8, r2
 8004ba0:	4699      	mov	r9, r3
 8004ba2:	4623      	mov	r3, r4
 8004ba4:	eb18 0303 	adds.w	r3, r8, r3
 8004ba8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bac:	462b      	mov	r3, r5
 8004bae:	eb49 0303 	adc.w	r3, r9, r3
 8004bb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004bc2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004bc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004bca:	460b      	mov	r3, r1
 8004bcc:	18db      	adds	r3, r3, r3
 8004bce:	653b      	str	r3, [r7, #80]	; 0x50
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	eb42 0303 	adc.w	r3, r2, r3
 8004bd6:	657b      	str	r3, [r7, #84]	; 0x54
 8004bd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004be0:	f7fb febc 	bl	800095c <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4b61      	ldr	r3, [pc, #388]	; (8004d70 <UART_SetConfig+0x2d4>)
 8004bea:	fba3 2302 	umull	r2, r3, r3, r2
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	011c      	lsls	r4, r3, #4
 8004bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004bfc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c04:	4642      	mov	r2, r8
 8004c06:	464b      	mov	r3, r9
 8004c08:	1891      	adds	r1, r2, r2
 8004c0a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c0c:	415b      	adcs	r3, r3
 8004c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c14:	4641      	mov	r1, r8
 8004c16:	eb12 0a01 	adds.w	sl, r2, r1
 8004c1a:	4649      	mov	r1, r9
 8004c1c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c20:	f04f 0200 	mov.w	r2, #0
 8004c24:	f04f 0300 	mov.w	r3, #0
 8004c28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c34:	4692      	mov	sl, r2
 8004c36:	469b      	mov	fp, r3
 8004c38:	4643      	mov	r3, r8
 8004c3a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c42:	464b      	mov	r3, r9
 8004c44:	eb4b 0303 	adc.w	r3, fp, r3
 8004c48:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c58:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004c60:	460b      	mov	r3, r1
 8004c62:	18db      	adds	r3, r3, r3
 8004c64:	643b      	str	r3, [r7, #64]	; 0x40
 8004c66:	4613      	mov	r3, r2
 8004c68:	eb42 0303 	adc.w	r3, r2, r3
 8004c6c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004c76:	f7fb fe71 	bl	800095c <__aeabi_uldivmod>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <UART_SetConfig+0x2d4>)
 8004c82:	fba3 2301 	umull	r2, r3, r3, r1
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	2264      	movs	r2, #100	; 0x64
 8004c8a:	fb02 f303 	mul.w	r3, r2, r3
 8004c8e:	1acb      	subs	r3, r1, r3
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004c96:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <UART_SetConfig+0x2d4>)
 8004c98:	fba3 2302 	umull	r2, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ca4:	441c      	add	r4, r3
 8004ca6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cb0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cb8:	4642      	mov	r2, r8
 8004cba:	464b      	mov	r3, r9
 8004cbc:	1891      	adds	r1, r2, r2
 8004cbe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004cc0:	415b      	adcs	r3, r3
 8004cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004cc8:	4641      	mov	r1, r8
 8004cca:	1851      	adds	r1, r2, r1
 8004ccc:	6339      	str	r1, [r7, #48]	; 0x30
 8004cce:	4649      	mov	r1, r9
 8004cd0:	414b      	adcs	r3, r1
 8004cd2:	637b      	str	r3, [r7, #52]	; 0x34
 8004cd4:	f04f 0200 	mov.w	r2, #0
 8004cd8:	f04f 0300 	mov.w	r3, #0
 8004cdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004ce0:	4659      	mov	r1, fp
 8004ce2:	00cb      	lsls	r3, r1, #3
 8004ce4:	4651      	mov	r1, sl
 8004ce6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cea:	4651      	mov	r1, sl
 8004cec:	00ca      	lsls	r2, r1, #3
 8004cee:	4610      	mov	r0, r2
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	189b      	adds	r3, r3, r2
 8004cf8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	460a      	mov	r2, r1
 8004d00:	eb42 0303 	adc.w	r3, r2, r3
 8004d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d14:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	18db      	adds	r3, r3, r3
 8004d20:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d22:	4613      	mov	r3, r2
 8004d24:	eb42 0303 	adc.w	r3, r2, r3
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d32:	f7fb fe13 	bl	800095c <__aeabi_uldivmod>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <UART_SetConfig+0x2d4>)
 8004d3c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d40:	095b      	lsrs	r3, r3, #5
 8004d42:	2164      	movs	r1, #100	; 0x64
 8004d44:	fb01 f303 	mul.w	r3, r1, r3
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	3332      	adds	r3, #50	; 0x32
 8004d4e:	4a08      	ldr	r2, [pc, #32]	; (8004d70 <UART_SetConfig+0x2d4>)
 8004d50:	fba2 2303 	umull	r2, r3, r2, r3
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	f003 0207 	and.w	r2, r3, #7
 8004d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4422      	add	r2, r4
 8004d62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004d64:	e106      	b.n	8004f74 <UART_SetConfig+0x4d8>
 8004d66:	bf00      	nop
 8004d68:	40011000 	.word	0x40011000
 8004d6c:	40011400 	.word	0x40011400
 8004d70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004d7e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004d82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004d86:	4642      	mov	r2, r8
 8004d88:	464b      	mov	r3, r9
 8004d8a:	1891      	adds	r1, r2, r2
 8004d8c:	6239      	str	r1, [r7, #32]
 8004d8e:	415b      	adcs	r3, r3
 8004d90:	627b      	str	r3, [r7, #36]	; 0x24
 8004d92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004d96:	4641      	mov	r1, r8
 8004d98:	1854      	adds	r4, r2, r1
 8004d9a:	4649      	mov	r1, r9
 8004d9c:	eb43 0501 	adc.w	r5, r3, r1
 8004da0:	f04f 0200 	mov.w	r2, #0
 8004da4:	f04f 0300 	mov.w	r3, #0
 8004da8:	00eb      	lsls	r3, r5, #3
 8004daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dae:	00e2      	lsls	r2, r4, #3
 8004db0:	4614      	mov	r4, r2
 8004db2:	461d      	mov	r5, r3
 8004db4:	4643      	mov	r3, r8
 8004db6:	18e3      	adds	r3, r4, r3
 8004db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dbc:	464b      	mov	r3, r9
 8004dbe:	eb45 0303 	adc.w	r3, r5, r3
 8004dc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004dd2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dd6:	f04f 0200 	mov.w	r2, #0
 8004dda:	f04f 0300 	mov.w	r3, #0
 8004dde:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004de2:	4629      	mov	r1, r5
 8004de4:	008b      	lsls	r3, r1, #2
 8004de6:	4621      	mov	r1, r4
 8004de8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004dec:	4621      	mov	r1, r4
 8004dee:	008a      	lsls	r2, r1, #2
 8004df0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004df4:	f7fb fdb2 	bl	800095c <__aeabi_uldivmod>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4b60      	ldr	r3, [pc, #384]	; (8004f80 <UART_SetConfig+0x4e4>)
 8004dfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	011c      	lsls	r4, r3, #4
 8004e06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e10:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e18:	4642      	mov	r2, r8
 8004e1a:	464b      	mov	r3, r9
 8004e1c:	1891      	adds	r1, r2, r2
 8004e1e:	61b9      	str	r1, [r7, #24]
 8004e20:	415b      	adcs	r3, r3
 8004e22:	61fb      	str	r3, [r7, #28]
 8004e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e28:	4641      	mov	r1, r8
 8004e2a:	1851      	adds	r1, r2, r1
 8004e2c:	6139      	str	r1, [r7, #16]
 8004e2e:	4649      	mov	r1, r9
 8004e30:	414b      	adcs	r3, r1
 8004e32:	617b      	str	r3, [r7, #20]
 8004e34:	f04f 0200 	mov.w	r2, #0
 8004e38:	f04f 0300 	mov.w	r3, #0
 8004e3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e40:	4659      	mov	r1, fp
 8004e42:	00cb      	lsls	r3, r1, #3
 8004e44:	4651      	mov	r1, sl
 8004e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e4a:	4651      	mov	r1, sl
 8004e4c:	00ca      	lsls	r2, r1, #3
 8004e4e:	4610      	mov	r0, r2
 8004e50:	4619      	mov	r1, r3
 8004e52:	4603      	mov	r3, r0
 8004e54:	4642      	mov	r2, r8
 8004e56:	189b      	adds	r3, r3, r2
 8004e58:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e5c:	464b      	mov	r3, r9
 8004e5e:	460a      	mov	r2, r1
 8004e60:	eb42 0303 	adc.w	r3, r2, r3
 8004e64:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	67bb      	str	r3, [r7, #120]	; 0x78
 8004e72:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004e80:	4649      	mov	r1, r9
 8004e82:	008b      	lsls	r3, r1, #2
 8004e84:	4641      	mov	r1, r8
 8004e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e8a:	4641      	mov	r1, r8
 8004e8c:	008a      	lsls	r2, r1, #2
 8004e8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004e92:	f7fb fd63 	bl	800095c <__aeabi_uldivmod>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4611      	mov	r1, r2
 8004e9c:	4b38      	ldr	r3, [pc, #224]	; (8004f80 <UART_SetConfig+0x4e4>)
 8004e9e:	fba3 2301 	umull	r2, r3, r3, r1
 8004ea2:	095b      	lsrs	r3, r3, #5
 8004ea4:	2264      	movs	r2, #100	; 0x64
 8004ea6:	fb02 f303 	mul.w	r3, r2, r3
 8004eaa:	1acb      	subs	r3, r1, r3
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	3332      	adds	r3, #50	; 0x32
 8004eb0:	4a33      	ldr	r2, [pc, #204]	; (8004f80 <UART_SetConfig+0x4e4>)
 8004eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004eb6:	095b      	lsrs	r3, r3, #5
 8004eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ebc:	441c      	add	r4, r3
 8004ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	673b      	str	r3, [r7, #112]	; 0x70
 8004ec6:	677a      	str	r2, [r7, #116]	; 0x74
 8004ec8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ecc:	4642      	mov	r2, r8
 8004ece:	464b      	mov	r3, r9
 8004ed0:	1891      	adds	r1, r2, r2
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	415b      	adcs	r3, r3
 8004ed6:	60fb      	str	r3, [r7, #12]
 8004ed8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004edc:	4641      	mov	r1, r8
 8004ede:	1851      	adds	r1, r2, r1
 8004ee0:	6039      	str	r1, [r7, #0]
 8004ee2:	4649      	mov	r1, r9
 8004ee4:	414b      	adcs	r3, r1
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	f04f 0200 	mov.w	r2, #0
 8004eec:	f04f 0300 	mov.w	r3, #0
 8004ef0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ef4:	4659      	mov	r1, fp
 8004ef6:	00cb      	lsls	r3, r1, #3
 8004ef8:	4651      	mov	r1, sl
 8004efa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004efe:	4651      	mov	r1, sl
 8004f00:	00ca      	lsls	r2, r1, #3
 8004f02:	4610      	mov	r0, r2
 8004f04:	4619      	mov	r1, r3
 8004f06:	4603      	mov	r3, r0
 8004f08:	4642      	mov	r2, r8
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f0e:	464b      	mov	r3, r9
 8004f10:	460a      	mov	r2, r1
 8004f12:	eb42 0303 	adc.w	r3, r2, r3
 8004f16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	663b      	str	r3, [r7, #96]	; 0x60
 8004f22:	667a      	str	r2, [r7, #100]	; 0x64
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f30:	4649      	mov	r1, r9
 8004f32:	008b      	lsls	r3, r1, #2
 8004f34:	4641      	mov	r1, r8
 8004f36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f3a:	4641      	mov	r1, r8
 8004f3c:	008a      	lsls	r2, r1, #2
 8004f3e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f42:	f7fb fd0b 	bl	800095c <__aeabi_uldivmod>
 8004f46:	4602      	mov	r2, r0
 8004f48:	460b      	mov	r3, r1
 8004f4a:	4b0d      	ldr	r3, [pc, #52]	; (8004f80 <UART_SetConfig+0x4e4>)
 8004f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f50:	095b      	lsrs	r3, r3, #5
 8004f52:	2164      	movs	r1, #100	; 0x64
 8004f54:	fb01 f303 	mul.w	r3, r1, r3
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	011b      	lsls	r3, r3, #4
 8004f5c:	3332      	adds	r3, #50	; 0x32
 8004f5e:	4a08      	ldr	r2, [pc, #32]	; (8004f80 <UART_SetConfig+0x4e4>)
 8004f60:	fba2 2303 	umull	r2, r3, r2, r3
 8004f64:	095b      	lsrs	r3, r3, #5
 8004f66:	f003 020f 	and.w	r2, r3, #15
 8004f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4422      	add	r2, r4
 8004f72:	609a      	str	r2, [r3, #8]
}
 8004f74:	bf00      	nop
 8004f76:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f80:	51eb851f 	.word	0x51eb851f

08004f84 <MX_MEMS_Init>:
static void DWT_Init(void);
static void DWT_Start(void);
static uint32_t DWT_Stop(void);

void MX_MEMS_Init(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_PresenceDetection_Init();
 8004f88:	f000 f820 	bl	8004fcc <MX_PresenceDetection_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 8004f8c:	bf00      	nop
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_PresenceDetection_Process();
 8004f94:	f000 f85c 	bl	8005050 <MX_PresenceDetection_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 8004f98:	bf00      	nop
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_TIM_PeriodElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *              the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  if (htim->Instance == BSP_IP_TIM_Handle.Instance)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4b06      	ldr	r3, [pc, #24]	; (8004fc4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d102      	bne.n	8004fb6 <HAL_TIM_PeriodElapsedCallback+0x1a>
  {
    SensorReadRequest = 1;
 8004fb0:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	701a      	strb	r2, [r3, #0]
  }
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	2000018c 	.word	0x2000018c
 8004fc8:	20000254 	.word	0x20000254

08004fcc <MX_PresenceDetection_Init>:
/**
  * @brief  Initialize the application
  * @retval None
  */
static void MX_PresenceDetection_Init(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* Initialize LED */
  BSP_LED_Init(LED2);
 8004fd0:	2000      	movs	r0, #0
 8004fd2:	f7fc fa8f 	bl	80014f4 <BSP_LED_Init>

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 8004fd6:	2000      	movs	r0, #0
 8004fd8:	f7fc fb0c 	bl	80015f4 <BSP_COM_Init>

  /* Initialize Timer */
  BSP_IP_TIM_Init();
 8004fdc:	f7fb ffc2 	bl	8000f64 <MX_TIM5_Init>

  /* Configure Timer to run with desired algorithm frequency */
  TIM_Config(ALGO_FREQ);
 8004fe0:	201e      	movs	r0, #30
 8004fe2:	f000 f9b3 	bl	800534c <TIM_Config>

  /* Initialize (disabled) sensors */
  Init_Sensors();
 8004fe6:	f000 f89f 	bl	8005128 <Init_Sensors>

  Odr = (uint8_t)TEMP_ODR;
 8004fea:	4b12      	ldr	r3, [pc, #72]	; (8005034 <MX_PresenceDetection_Init+0x68>)
 8004fec:	221e      	movs	r2, #30
 8004fee:	701a      	strb	r2, [r3, #0]
  BSP_SENSOR_TEMP_GetAvgTmos(&AvgTmos);
 8004ff0:	4811      	ldr	r0, [pc, #68]	; (8005038 <MX_PresenceDetection_Init+0x6c>)
 8004ff2:	f000 fda7 	bl	8005b44 <BSP_SENSOR_TEMP_GetAvgTmos>
  BSP_SENSOR_TEMP_GetAvgT(&AvgT);
 8004ff6:	4811      	ldr	r0, [pc, #68]	; (800503c <MX_PresenceDetection_Init+0x70>)
 8004ff8:	f000 fdb9 	bl	8005b6e <BSP_SENSOR_TEMP_GetAvgT>
  BSP_SENSOR_TEMP_GetGainFactor(&GainFactor);
 8004ffc:	4810      	ldr	r0, [pc, #64]	; (8005040 <MX_PresenceDetection_Init+0x74>)
 8004ffe:	f000 fdc0 	bl	8005b82 <BSP_SENSOR_TEMP_GetGainFactor>
  BSP_SENSOR_TEMP_GetSensitivity(&Sensitivity);
 8005002:	4810      	ldr	r0, [pc, #64]	; (8005044 <MX_PresenceDetection_Init+0x78>)
 8005004:	f000 fdc7 	bl	8005b96 <BSP_SENSOR_TEMP_GetSensitivity>

  /* PresenceDetection API initialization function */
  InfraredPD_manager_init();
 8005008:	f001 fa00 	bl	800640c <InfraredPD_manager_init>

  /* OPTIONAL */
  /* Get library version */
  InfraredPD_manager_get_version(LibVersion, &LibVersionLen);
 800500c:	490e      	ldr	r1, [pc, #56]	; (8005048 <MX_PresenceDetection_Init+0x7c>)
 800500e:	480f      	ldr	r0, [pc, #60]	; (800504c <MX_PresenceDetection_Init+0x80>)
 8005010:	f001 fa4a 	bl	80064a8 <InfraredPD_manager_get_version>

  DWT_Init();
 8005014:	f000 f9ce 	bl	80053b4 <DWT_Init>

  BSP_LED_On(LED2);
 8005018:	2000      	movs	r0, #0
 800501a:	f7fc fa7d 	bl	8001518 <BSP_LED_On>
  HAL_Delay(500);
 800501e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005022:	f7fc fc0f 	bl	8001844 <HAL_Delay>
  BSP_LED_Off(LED2);
 8005026:	2000      	movs	r0, #0
 8005028:	f7fc fa8c 	bl	8001544 <BSP_LED_Off>

  /* Start receiving messages via DMA */
  UART_StartReceiveMsg();
 800502c:	f000 fae6 	bl	80055fc <UART_StartReceiveMsg>
}
 8005030:	bf00      	nop
 8005032:	bd80      	pop	{r7, pc}
 8005034:	20000404 	.word	0x20000404
 8005038:	20000406 	.word	0x20000406
 800503c:	20000408 	.word	0x20000408
 8005040:	20000409 	.word	0x20000409
 8005044:	2000040a 	.word	0x2000040a
 8005048:	20000250 	.word	0x20000250
 800504c:	2000022c 	.word	0x2000022c

08005050 <MX_PresenceDetection_Process>:
/**
  * @brief  Process of the application
  * @retval None
  */
static void MX_PresenceDetection_Process(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  static TMsg msg_dat;
  static TMsg msg_cmd;

  if (UART_ReceivedMSG((TMsg *)&msg_cmd) == 1)
 8005054:	482d      	ldr	r0, [pc, #180]	; (800510c <MX_PresenceDetection_Process+0xbc>)
 8005056:	f000 f9ff 	bl	8005458 <UART_ReceivedMSG>
 800505a:	4603      	mov	r3, r0
 800505c:	2b01      	cmp	r3, #1
 800505e:	d106      	bne.n	800506e <MX_PresenceDetection_Process+0x1e>
  {
    if (msg_cmd.Data[0] == DEV_ADDR)
 8005060:	4b2a      	ldr	r3, [pc, #168]	; (800510c <MX_PresenceDetection_Process+0xbc>)
 8005062:	791b      	ldrb	r3, [r3, #4]
 8005064:	2b32      	cmp	r3, #50	; 0x32
 8005066:	d102      	bne.n	800506e <MX_PresenceDetection_Process+0x1e>
    {
      (void)HandleMSG((TMsg *)&msg_cmd);
 8005068:	4828      	ldr	r0, [pc, #160]	; (800510c <MX_PresenceDetection_Process+0xbc>)
 800506a:	f000 fdcf 	bl	8005c0c <HandleMSG>
    }
  }

  if (SensorReadRequest == 1U)
 800506e:	4b28      	ldr	r3, [pc, #160]	; (8005110 <MX_PresenceDetection_Process+0xc0>)
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b01      	cmp	r3, #1
 8005076:	d146      	bne.n	8005106 <MX_PresenceDetection_Process+0xb6>
  {
    SensorReadRequest = 0;
 8005078:	4b25      	ldr	r3, [pc, #148]	; (8005110 <MX_PresenceDetection_Process+0xc0>)
 800507a:	2200      	movs	r2, #0
 800507c:	701a      	strb	r2, [r3, #0]

    /* Acquire data from enabled sensors and fill Msg stream */
    RTC_Handler(&msg_dat);
 800507e:	4825      	ldr	r0, [pc, #148]	; (8005114 <MX_PresenceDetection_Process+0xc4>)
 8005080:	f000 f86a 	bl	8005158 <RTC_Handler>
    Infrared_Sensor_Handler(&msg_dat);
 8005084:	4823      	ldr	r0, [pc, #140]	; (8005114 <MX_PresenceDetection_Process+0xc4>)
 8005086:	f000 f933 	bl	80052f0 <Infrared_Sensor_Handler>

    if (DiscardSamples < 1U)
 800508a:	4b23      	ldr	r3, [pc, #140]	; (8005118 <MX_PresenceDetection_Process+0xc8>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d102      	bne.n	8005098 <MX_PresenceDetection_Process+0x48>
    {
      /* PresenceDetection specific part */
      PD_Data_Handler(&msg_dat);
 8005092:	4820      	ldr	r0, [pc, #128]	; (8005114 <MX_PresenceDetection_Process+0xc4>)
 8005094:	f000 f8d4 	bl	8005240 <PD_Data_Handler>
    }

    /* Send data stream */
    INIT_STREAMING_HEADER(&msg_dat);
 8005098:	481e      	ldr	r0, [pc, #120]	; (8005114 <MX_PresenceDetection_Process+0xc4>)
 800509a:	f000 fd9d 	bl	8005bd8 <INIT_STREAMING_HEADER>
    msg_dat.Len = STREAMING_MSG_LENGTH;
 800509e:	4b1d      	ldr	r3, [pc, #116]	; (8005114 <MX_PresenceDetection_Process+0xc4>)
 80050a0:	221d      	movs	r2, #29
 80050a2:	601a      	str	r2, [r3, #0]

    if (UseOfflineData == 1U)
 80050a4:	4b1d      	ldr	r3, [pc, #116]	; (800511c <MX_PresenceDetection_Process+0xcc>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d11e      	bne.n	80050ea <MX_PresenceDetection_Process+0x9a>
    {
      OfflineDataCount--;
 80050ac:	4b1c      	ldr	r3, [pc, #112]	; (8005120 <MX_PresenceDetection_Process+0xd0>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <MX_PresenceDetection_Process+0xd0>)
 80050b4:	6013      	str	r3, [r2, #0]
      if (OfflineDataCount < 0)
 80050b6:	4b1a      	ldr	r3, [pc, #104]	; (8005120 <MX_PresenceDetection_Process+0xd0>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	da02      	bge.n	80050c4 <MX_PresenceDetection_Process+0x74>
      {
        OfflineDataCount = 0;
 80050be:	4b18      	ldr	r3, [pc, #96]	; (8005120 <MX_PresenceDetection_Process+0xd0>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]
      }

      OfflineDataReadIndex++;
 80050c4:	4b17      	ldr	r3, [pc, #92]	; (8005124 <MX_PresenceDetection_Process+0xd4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	3301      	adds	r3, #1
 80050ca:	4a16      	ldr	r2, [pc, #88]	; (8005124 <MX_PresenceDetection_Process+0xd4>)
 80050cc:	6013      	str	r3, [r2, #0]
      if (OfflineDataReadIndex >= OFFLINE_DATA_SIZE)
 80050ce:	4b15      	ldr	r3, [pc, #84]	; (8005124 <MX_PresenceDetection_Process+0xd4>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2b07      	cmp	r3, #7
 80050d4:	dd02      	ble.n	80050dc <MX_PresenceDetection_Process+0x8c>
      {
        OfflineDataReadIndex = 0;
 80050d6:	4b13      	ldr	r3, [pc, #76]	; (8005124 <MX_PresenceDetection_Process+0xd4>)
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
      }

      if (OfflineDataCount > 0)
 80050dc:	4b10      	ldr	r3, [pc, #64]	; (8005120 <MX_PresenceDetection_Process+0xd0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	dd02      	ble.n	80050ea <MX_PresenceDetection_Process+0x9a>
      {
        SensorReadRequest = 1;
 80050e4:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <MX_PresenceDetection_Process+0xc0>)
 80050e6:	2201      	movs	r2, #1
 80050e8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (DiscardSamples > 0U)
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <MX_PresenceDetection_Process+0xc8>)
 80050ec:	781b      	ldrb	r3, [r3, #0]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d006      	beq.n	8005100 <MX_PresenceDetection_Process+0xb0>
    {
      DiscardSamples--;
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <MX_PresenceDetection_Process+0xc8>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	4b07      	ldr	r3, [pc, #28]	; (8005118 <MX_PresenceDetection_Process+0xc8>)
 80050fc:	701a      	strb	r2, [r3, #0]
    else
    {
      UART_SendMsg(&msg_dat);
    }
  }
}
 80050fe:	e002      	b.n	8005106 <MX_PresenceDetection_Process+0xb6>
      UART_SendMsg(&msg_dat);
 8005100:	4804      	ldr	r0, [pc, #16]	; (8005114 <MX_PresenceDetection_Process+0xc4>)
 8005102:	f000 fa5f 	bl	80055c4 <UART_SendMsg>
}
 8005106:	bf00      	nop
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20000414 	.word	0x20000414
 8005110:	20000254 	.word	0x20000254
 8005114:	20000518 	.word	0x20000518
 8005118:	2000040c 	.word	0x2000040c
 800511c:	20000255 	.word	0x20000255
 8005120:	20000400 	.word	0x20000400
 8005124:	200003f8 	.word	0x200003f8

08005128 <Init_Sensors>:
  * @brief  Initialize all sensors
  * @param  None
  * @retval None
  */
static void Init_Sensors(void)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  BSP_SENSOR_ACC_Init();
 800512c:	f000 fc6d 	bl	8005a0a <BSP_SENSOR_ACC_Init>
  BSP_SENSOR_GYR_Init();
 8005130:	f000 fc72 	bl	8005a18 <BSP_SENSOR_GYR_Init>
  BSP_SENSOR_MAG_Init();
 8005134:	f000 fc77 	bl	8005a26 <BSP_SENSOR_MAG_Init>
  BSP_SENSOR_PRESS_Init();
 8005138:	f000 fc7c 	bl	8005a34 <BSP_SENSOR_PRESS_Init>
  BSP_SENSOR_TEMP_Init();
 800513c:	f000 fc81 	bl	8005a42 <BSP_SENSOR_TEMP_Init>
  BSP_SENSOR_HUM_Init();
 8005140:	f000 fc86 	bl	8005a50 <BSP_SENSOR_HUM_Init>

  BSP_SENSOR_TEMP_SetAvgTmos(AVG_TMOS);
 8005144:	2020      	movs	r0, #32
 8005146:	f000 fd07 	bl	8005b58 <BSP_SENSOR_TEMP_SetAvgTmos>
  BSP_SENSOR_TEMP_SetOutputDataRate(TEMP_ODR);
 800514a:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 800514e:	f000 fcda 	bl	8005b06 <BSP_SENSOR_TEMP_SetOutputDataRate>
}
 8005152:	bf00      	nop
 8005154:	bd80      	pop	{r7, pc}
	...

08005158 <RTC_Handler>:
  * @brief  Handles the time+date getting/sending
  * @param  Msg the time+date part of the stream
  * @retval None
  */
static void RTC_Handler(TMsg *Msg)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08c      	sub	sp, #48	; 0x30
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint8_t sub_sec = 0;
 8005160:	2300      	movs	r3, #0
 8005162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  RTC_DateTypeDef sdatestructureget;
  RTC_TimeTypeDef stimestructure;
  uint32_t ans_uint32;
  int32_t ans_int32;
  uint32_t RtcSynchPrediv = hrtc.Init.SynchPrediv;
 8005166:	4b32      	ldr	r3, [pc, #200]	; (8005230 <RTC_Handler+0xd8>)
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	62bb      	str	r3, [r7, #40]	; 0x28

  if (UseOfflineData == 1)
 800516c:	4b31      	ldr	r3, [pc, #196]	; (8005234 <RTC_Handler+0xdc>)
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d12b      	bne.n	80051cc <RTC_Handler+0x74>
  {
    Msg->Data[3] = (uint8_t)OfflineData[OfflineDataReadIndex].hours;
 8005174:	4b30      	ldr	r3, [pc, #192]	; (8005238 <RTC_Handler+0xe0>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a30      	ldr	r2, [pc, #192]	; (800523c <RTC_Handler+0xe4>)
 800517a:	2134      	movs	r1, #52	; 0x34
 800517c:	fb01 f303 	mul.w	r3, r1, r3
 8005180:	4413      	add	r3, r2
 8005182:	781a      	ldrb	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)OfflineData[OfflineDataReadIndex].minutes;
 8005188:	4b2b      	ldr	r3, [pc, #172]	; (8005238 <RTC_Handler+0xe0>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a2b      	ldr	r2, [pc, #172]	; (800523c <RTC_Handler+0xe4>)
 800518e:	2134      	movs	r1, #52	; 0x34
 8005190:	fb01 f303 	mul.w	r3, r1, r3
 8005194:	4413      	add	r3, r2
 8005196:	3301      	adds	r3, #1
 8005198:	781a      	ldrb	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)OfflineData[OfflineDataReadIndex].seconds;
 800519e:	4b26      	ldr	r3, [pc, #152]	; (8005238 <RTC_Handler+0xe0>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a26      	ldr	r2, [pc, #152]	; (800523c <RTC_Handler+0xe4>)
 80051a4:	2134      	movs	r1, #52	; 0x34
 80051a6:	fb01 f303 	mul.w	r3, r1, r3
 80051aa:	4413      	add	r3, r2
 80051ac:	3302      	adds	r3, #2
 80051ae:	781a      	ldrb	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = (uint8_t)OfflineData[OfflineDataReadIndex].subsec;
 80051b4:	4b20      	ldr	r3, [pc, #128]	; (8005238 <RTC_Handler+0xe0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a20      	ldr	r2, [pc, #128]	; (800523c <RTC_Handler+0xe4>)
 80051ba:	2134      	movs	r1, #52	; 0x34
 80051bc:	fb01 f303 	mul.w	r3, r1, r3
 80051c0:	4413      	add	r3, r2
 80051c2:	3303      	adds	r3, #3
 80051c4:	781a      	ldrb	r2, [r3, #0]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	729a      	strb	r2, [r3, #10]
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
    Msg->Data[6] = sub_sec;
  }
}
 80051ca:	e02d      	b.n	8005228 <RTC_Handler+0xd0>
    (void)HAL_RTC_GetTime(&hrtc, &stimestructure, FORMAT_BIN);
 80051cc:	f107 0308 	add.w	r3, r7, #8
 80051d0:	2200      	movs	r2, #0
 80051d2:	4619      	mov	r1, r3
 80051d4:	4816      	ldr	r0, [pc, #88]	; (8005230 <RTC_Handler+0xd8>)
 80051d6:	f7fd ffb0 	bl	800313a <HAL_RTC_GetTime>
    (void)HAL_RTC_GetDate(&hrtc, &sdatestructureget, FORMAT_BIN);
 80051da:	f107 031c 	add.w	r3, r7, #28
 80051de:	2200      	movs	r2, #0
 80051e0:	4619      	mov	r1, r3
 80051e2:	4813      	ldr	r0, [pc, #76]	; (8005230 <RTC_Handler+0xd8>)
 80051e4:	f7fe f88b 	bl	80032fe <HAL_RTC_GetDate>
    ans_int32 = (RtcSynchPrediv - (int32_t)stimestructure.SubSeconds) * 100;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2264      	movs	r2, #100	; 0x64
 80051f0:	fb02 f303 	mul.w	r3, r2, r3
 80051f4:	627b      	str	r3, [r7, #36]	; 0x24
    ans_int32 /= RtcSynchPrediv + 1;
 80051f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	3301      	adds	r3, #1
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
    ans_uint32 = (uint32_t)ans_int32 & 0xFFU;
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	b2db      	uxtb	r3, r3
 8005206:	623b      	str	r3, [r7, #32]
    sub_sec = (uint8_t)ans_uint32;
 8005208:	6a3b      	ldr	r3, [r7, #32]
 800520a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    Msg->Data[3] = (uint8_t)stimestructure.Hours;
 800520e:	7a3a      	ldrb	r2, [r7, #8]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	71da      	strb	r2, [r3, #7]
    Msg->Data[4] = (uint8_t)stimestructure.Minutes;
 8005214:	7a7a      	ldrb	r2, [r7, #9]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	721a      	strb	r2, [r3, #8]
    Msg->Data[5] = (uint8_t)stimestructure.Seconds;
 800521a:	7aba      	ldrb	r2, [r7, #10]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	725a      	strb	r2, [r3, #9]
    Msg->Data[6] = sub_sec;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005226:	729a      	strb	r2, [r3, #10]
}
 8005228:	bf00      	nop
 800522a:	3730      	adds	r7, #48	; 0x30
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	200000dc 	.word	0x200000dc
 8005234:	20000255 	.word	0x20000255
 8005238:	200003f8 	.word	0x200003f8
 800523c:	20000258 	.word	0x20000258

08005240 <PD_Data_Handler>:
  * @brief  Presence Detection data handler
  * @param  Msg the Presence Detection data part of the stream
  * @retval None
  */
static void PD_Data_Handler(TMsg *Msg)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t elapsed_time_us = 0U;
 8005248:	2300      	movs	r3, #0
 800524a:	60fb      	str	r3, [r7, #12]
  IPD_input_t data_in = {.t_amb = 0, .t_obj = 0};
 800524c:	2300      	movs	r3, #0
 800524e:	813b      	strh	r3, [r7, #8]
 8005250:	2300      	movs	r3, #0
 8005252:	817b      	strh	r3, [r7, #10]
  static IPD_output_t data_out;

  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 8005254:	4b22      	ldr	r3, [pc, #136]	; (80052e0 <PD_Data_Handler+0xa0>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b02      	cmp	r3, #2
 800525e:	d13b      	bne.n	80052d8 <PD_Data_Handler+0x98>
  {
    /* Fill input data */
    data_in.t_amb = TAmbRaw;
 8005260:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <PD_Data_Handler+0xa4>)
 8005262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005266:	813b      	strh	r3, [r7, #8]
    data_in.t_obj = TObjRaw;
 8005268:	4b1f      	ldr	r3, [pc, #124]	; (80052e8 <PD_Data_Handler+0xa8>)
 800526a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800526e:	817b      	strh	r3, [r7, #10]

    /* Run Presence Detection algorithm */
    BSP_LED_On(LED2);
 8005270:	2000      	movs	r0, #0
 8005272:	f7fc f951 	bl	8001518 <BSP_LED_On>
    DWT_Start();
 8005276:	f000 f8b5 	bl	80053e4 <DWT_Start>
    InfraredPD_manager_run(&data_in, &data_out);
 800527a:	f107 0308 	add.w	r3, r7, #8
 800527e:	491b      	ldr	r1, [pc, #108]	; (80052ec <PD_Data_Handler+0xac>)
 8005280:	4618      	mov	r0, r3
 8005282:	f001 f8ff 	bl	8006484 <InfraredPD_manager_run>
    elapsed_time_us = DWT_Stop();
 8005286:	f000 f8bf 	bl	8005408 <DWT_Stop>
 800528a:	60f8      	str	r0, [r7, #12]
    BSP_LED_Off(LED2);
 800528c:	2000      	movs	r0, #0
 800528e:	f7fc f959 	bl	8001544 <BSP_LED_Off>

    Serialize_s32(&Msg->Data[15], (int32_t)data_out.t_obj_comp, 4);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3313      	adds	r3, #19
 8005296:	4a15      	ldr	r2, [pc, #84]	; (80052ec <PD_Data_Handler+0xac>)
 8005298:	f9b2 2000 	ldrsh.w	r2, [r2]
 800529c:	4611      	mov	r1, r2
 800529e:	2204      	movs	r2, #4
 80052a0:	4618      	mov	r0, r3
 80052a2:	f001 fa0b 	bl	80066bc <Serialize_s32>
    Serialize_s32(&Msg->Data[19], (int32_t)data_out.t_obj_change, 4);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	3317      	adds	r3, #23
 80052aa:	4a10      	ldr	r2, [pc, #64]	; (80052ec <PD_Data_Handler+0xac>)
 80052ac:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80052b0:	4611      	mov	r1, r2
 80052b2:	2204      	movs	r2, #4
 80052b4:	4618      	mov	r0, r3
 80052b6:	f001 fa01 	bl	80066bc <Serialize_s32>
    Msg->Data[23] = (uint8_t)data_out.mot_flag;
 80052ba:	4b0c      	ldr	r3, [pc, #48]	; (80052ec <PD_Data_Handler+0xac>)
 80052bc:	791a      	ldrb	r2, [r3, #4]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	76da      	strb	r2, [r3, #27]
    Msg->Data[24] = (uint8_t)data_out.pres_flag;
 80052c2:	4b0a      	ldr	r3, [pc, #40]	; (80052ec <PD_Data_Handler+0xac>)
 80052c4:	795a      	ldrb	r2, [r3, #5]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	771a      	strb	r2, [r3, #28]

    Serialize_s32(&Msg->Data[25], (int32_t)elapsed_time_us, 4);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	331d      	adds	r3, #29
 80052ce:	68f9      	ldr	r1, [r7, #12]
 80052d0:	2204      	movs	r2, #4
 80052d2:	4618      	mov	r0, r3
 80052d4:	f001 f9f2 	bl	80066bc <Serialize_s32>
  }
}
 80052d8:	bf00      	nop
 80052da:	3710      	adds	r7, #16
 80052dc:	46bd      	mov	sp, r7
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	20000228 	.word	0x20000228
 80052e4:	2000040e 	.word	0x2000040e
 80052e8:	20000410 	.word	0x20000410
 80052ec:	2000061c 	.word	0x2000061c

080052f0 <Infrared_Sensor_Handler>:
  * @brief  Handles the Infrared data getting/sending
  * @param  Msg the IR part of the stream
  * @retval None
  */
static void Infrared_Sensor_Handler(TMsg *Msg)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 80052f8:	4b11      	ldr	r3, [pc, #68]	; (8005340 <Infrared_Sensor_Handler+0x50>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0302 	and.w	r3, r3, #2
 8005300:	2b02      	cmp	r3, #2
 8005302:	d119      	bne.n	8005338 <Infrared_Sensor_Handler+0x48>
  {
    BSP_SENSOR_TEMP_GetTAmbRaw(&TAmbRaw);
 8005304:	480f      	ldr	r0, [pc, #60]	; (8005344 <Infrared_Sensor_Handler+0x54>)
 8005306:	f000 fc09 	bl	8005b1c <BSP_SENSOR_TEMP_GetTAmbRaw>
    BSP_SENSOR_TEMP_GetTObjRaw(&TObjRaw);
 800530a:	480f      	ldr	r0, [pc, #60]	; (8005348 <Infrared_Sensor_Handler+0x58>)
 800530c:	f000 fc10 	bl	8005b30 <BSP_SENSOR_TEMP_GetTObjRaw>

    Serialize_s32(&Msg->Data[7], (int32_t)TAmbRaw, 4);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	330b      	adds	r3, #11
 8005314:	4a0b      	ldr	r2, [pc, #44]	; (8005344 <Infrared_Sensor_Handler+0x54>)
 8005316:	f9b2 2000 	ldrsh.w	r2, [r2]
 800531a:	4611      	mov	r1, r2
 800531c:	2204      	movs	r2, #4
 800531e:	4618      	mov	r0, r3
 8005320:	f001 f9cc 	bl	80066bc <Serialize_s32>
    Serialize_s32(&Msg->Data[11], (int32_t)TObjRaw, 4);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	330f      	adds	r3, #15
 8005328:	4a07      	ldr	r2, [pc, #28]	; (8005348 <Infrared_Sensor_Handler+0x58>)
 800532a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800532e:	4611      	mov	r1, r2
 8005330:	2204      	movs	r2, #4
 8005332:	4618      	mov	r0, r3
 8005334:	f001 f9c2 	bl	80066bc <Serialize_s32>
  }
}
 8005338:	bf00      	nop
 800533a:	3708      	adds	r7, #8
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	20000228 	.word	0x20000228
 8005344:	2000040e 	.word	0x2000040e
 8005348:	20000410 	.word	0x20000410

0800534c <TIM_Config>:
  * @brief  Timer configuration
  * @param  Freq the desired Timer frequency
  * @retval None
  */
static void TIM_Config(uint32_t Freq)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  const uint32_t tim_counter_clock = 2000; /* TIM counter clock 2 kHz */
 8005354:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005358:	617b      	str	r3, [r7, #20]
  uint32_t prescaler_value = (uint32_t)((SystemCoreClock / tim_counter_clock) - 1);
 800535a:	4b14      	ldr	r3, [pc, #80]	; (80053ac <TIM_Config+0x60>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	fbb2 f3f3 	udiv	r3, r2, r3
 8005364:	3b01      	subs	r3, #1
 8005366:	613b      	str	r3, [r7, #16]
  uint32_t period = (tim_counter_clock / Freq) - 1;
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005370:	3b01      	subs	r3, #1
 8005372:	60fb      	str	r3, [r7, #12]

  BSP_IP_TIM_Handle.Init.Prescaler = prescaler_value;
 8005374:	4a0e      	ldr	r2, [pc, #56]	; (80053b0 <TIM_Config+0x64>)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	6053      	str	r3, [r2, #4]
  BSP_IP_TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 800537a:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <TIM_Config+0x64>)
 800537c:	2200      	movs	r2, #0
 800537e:	609a      	str	r2, [r3, #8]
  BSP_IP_TIM_Handle.Init.Period = period;
 8005380:	4a0b      	ldr	r2, [pc, #44]	; (80053b0 <TIM_Config+0x64>)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	60d3      	str	r3, [r2, #12]
  BSP_IP_TIM_Handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005386:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <TIM_Config+0x64>)
 8005388:	2200      	movs	r2, #0
 800538a:	611a      	str	r2, [r3, #16]
  BSP_IP_TIM_Handle.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800538c:	4b08      	ldr	r3, [pc, #32]	; (80053b0 <TIM_Config+0x64>)
 800538e:	2200      	movs	r2, #0
 8005390:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&BSP_IP_TIM_Handle) != HAL_OK)
 8005392:	4807      	ldr	r0, [pc, #28]	; (80053b0 <TIM_Config+0x64>)
 8005394:	f7fe f8c0 	bl	8003518 <HAL_TIM_Base_Init>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <TIM_Config+0x56>
  {
    Error_Handler();
 800539e:	f7fb fe73 	bl	8001088 <Error_Handler>
  }
}
 80053a2:	bf00      	nop
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	20000000 	.word	0x20000000
 80053b0:	2000018c 	.word	0x2000018c

080053b4 <DWT_Init>:
  * @brief  Initialize DWT register for counting clock cycles purpose
  * @param  None
  * @retval None
  */
static void DWT_Init(void)
{
 80053b4:	b480      	push	{r7}
 80053b6:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80053b8:	4b08      	ldr	r3, [pc, #32]	; (80053dc <DWT_Init+0x28>)
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4a07      	ldr	r2, [pc, #28]	; (80053dc <DWT_Init+0x28>)
 80053be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053c2:	60d3      	str	r3, [r2, #12]
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <DWT_Init+0x2c>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a05      	ldr	r2, [pc, #20]	; (80053e0 <DWT_Init+0x2c>)
 80053ca:	f023 0301 	bic.w	r3, r3, #1
 80053ce:	6013      	str	r3, [r2, #0]
}
 80053d0:	bf00      	nop
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	e000edf0 	.word	0xe000edf0
 80053e0:	e0001000 	.word	0xe0001000

080053e4 <DWT_Start>:
  * @brief  Start counting clock cycles
  * @param  None
  * @retval None
  */
static void DWT_Start(void)
{
 80053e4:	b480      	push	{r7}
 80053e6:	af00      	add	r7, sp, #0
  DWT->CYCCNT = 0; /* Clear count of clock cycles */
 80053e8:	4b06      	ldr	r3, [pc, #24]	; (8005404 <DWT_Start+0x20>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk; /* Enable counter */
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <DWT_Start+0x20>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a04      	ldr	r2, [pc, #16]	; (8005404 <DWT_Start+0x20>)
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	6013      	str	r3, [r2, #0]
}
 80053fa:	bf00      	nop
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr
 8005404:	e0001000 	.word	0xe0001000

08005408 <DWT_Stop>:
  * @brief  Stop counting clock cycles and calculate elapsed time in [us]
  * @param  None
  * @retval Elapsed time in [us]
  */
static uint32_t DWT_Stop(void)
{
 8005408:	b480      	push	{r7}
 800540a:	b083      	sub	sp, #12
 800540c:	af00      	add	r7, sp, #0
  volatile uint32_t cycles_count = 0U;
 800540e:	2300      	movs	r3, #0
 8005410:	603b      	str	r3, [r7, #0]
  uint32_t system_core_clock_mhz = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	607b      	str	r3, [r7, #4]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; /* Disable counter */
 8005416:	4b0d      	ldr	r3, [pc, #52]	; (800544c <DWT_Stop+0x44>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a0c      	ldr	r2, [pc, #48]	; (800544c <DWT_Stop+0x44>)
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	6013      	str	r3, [r2, #0]
  cycles_count = DWT->CYCCNT; /* Read count of clock cycles */
 8005422:	4b0a      	ldr	r3, [pc, #40]	; (800544c <DWT_Stop+0x44>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	603b      	str	r3, [r7, #0]

  /* Calculate elapsed time in [us] */
  system_core_clock_mhz = SystemCoreClock / 1000000U;
 8005428:	4b09      	ldr	r3, [pc, #36]	; (8005450 <DWT_Stop+0x48>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a09      	ldr	r2, [pc, #36]	; (8005454 <DWT_Stop+0x4c>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	0c9b      	lsrs	r3, r3, #18
 8005434:	607b      	str	r3, [r7, #4]
  return cycles_count / system_core_clock_mhz;
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800543e:	4618      	mov	r0, r3
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr
 800544a:	bf00      	nop
 800544c:	e0001000 	.word	0xe0001000
 8005450:	20000000 	.word	0x20000000
 8005454:	431bde83 	.word	0x431bde83

08005458 <UART_ReceivedMSG>:
  * @brief  Check if a message is received via UART
  * @param  Msg the pointer to the message to be received
  * @retval 1 if a complete message is found, 0 otherwise
  */
int UART_ReceivedMSG(TMsg *Msg)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08a      	sub	sp, #40	; 0x28
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint16_t i, j, k, j2;
  uint16_t dma_counter, length;
  uint8_t data;
  uint16_t source = 0;
 8005460:	2300      	movs	r3, #0
 8005462:	83fb      	strh	r3, [r7, #30]
  uint8_t inc;

  if (Get_DMA_Flag_Status(hcom_uart[COM1].hdmarx) == (uint32_t)RESET)
 8005464:	4b54      	ldr	r3, [pc, #336]	; (80055b8 <UART_ReceivedMSG+0x160>)
 8005466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005468:	4618      	mov	r0, r3
 800546a:	f000 f8df 	bl	800562c <Get_DMA_Flag_Status>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	f040 809c 	bne.w	80055ae <UART_ReceivedMSG+0x156>
  {
    dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(hcom_uart[COM1].hdmarx);
 8005476:	4b50      	ldr	r3, [pc, #320]	; (80055b8 <UART_ReceivedMSG+0x160>)
 8005478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800547a:	4618      	mov	r0, r3
 800547c:	f000 fab8 	bl	80059f0 <Get_DMA_Counter>
 8005480:	4603      	mov	r3, r0
 8005482:	b29b      	uxth	r3, r3
 8005484:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005488:	83bb      	strh	r3, [r7, #28]

    if (dma_counter >= UartEngine.StartOfMsg)
 800548a:	4b4c      	ldr	r3, [pc, #304]	; (80055bc <UART_ReceivedMSG+0x164>)
 800548c:	889b      	ldrh	r3, [r3, #4]
 800548e:	8bba      	ldrh	r2, [r7, #28]
 8005490:	429a      	cmp	r2, r3
 8005492:	d305      	bcc.n	80054a0 <UART_ReceivedMSG+0x48>
    {
      length = dma_counter - UartEngine.StartOfMsg;
 8005494:	4b49      	ldr	r3, [pc, #292]	; (80055bc <UART_ReceivedMSG+0x164>)
 8005496:	889b      	ldrh	r3, [r3, #4]
 8005498:	8bba      	ldrh	r2, [r7, #28]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	843b      	strh	r3, [r7, #32]
 800549e:	e007      	b.n	80054b0 <UART_ReceivedMSG+0x58>
    }
    else
    {
      length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
 80054a0:	4b46      	ldr	r3, [pc, #280]	; (80055bc <UART_ReceivedMSG+0x164>)
 80054a2:	889b      	ldrh	r3, [r3, #4]
 80054a4:	8bba      	ldrh	r2, [r7, #28]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80054ae:	843b      	strh	r3, [r7, #32]
    }

    j = UartEngine.StartOfMsg;
 80054b0:	4b42      	ldr	r3, [pc, #264]	; (80055bc <UART_ReceivedMSG+0x164>)
 80054b2:	889b      	ldrh	r3, [r3, #4]
 80054b4:	84bb      	strh	r3, [r7, #36]	; 0x24

    for (k = 0; k < length; k++)
 80054b6:	2300      	movs	r3, #0
 80054b8:	847b      	strh	r3, [r7, #34]	; 0x22
 80054ba:	e06d      	b.n	8005598 <UART_ReceivedMSG+0x140>
    {
      data = UartRxBuffer[j];
 80054bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054be:	4a40      	ldr	r2, [pc, #256]	; (80055c0 <UART_ReceivedMSG+0x168>)
 80054c0:	5cd3      	ldrb	r3, [r2, r3]
 80054c2:	76fb      	strb	r3, [r7, #27]
      j++;
 80054c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054c6:	3301      	adds	r3, #1
 80054c8:	84bb      	strh	r3, [r7, #36]	; 0x24

      if (j >= (uint16_t)UART_RxBufferSize)
 80054ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054d0:	d301      	bcc.n	80054d6 <UART_ReceivedMSG+0x7e>
      {
        j = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	84bb      	strh	r3, [r7, #36]	; 0x24
      }

      if (data == (uint8_t)TMsg_EOF)
 80054d6:	7efb      	ldrb	r3, [r7, #27]
 80054d8:	2bf0      	cmp	r3, #240	; 0xf0
 80054da:	d15a      	bne.n	8005592 <UART_ReceivedMSG+0x13a>
      {
        j = UartEngine.StartOfMsg;
 80054dc:	4b37      	ldr	r3, [pc, #220]	; (80055bc <UART_ReceivedMSG+0x164>)
 80054de:	889b      	ldrh	r3, [r3, #4]
 80054e0:	84bb      	strh	r3, [r7, #36]	; 0x24

        for (i = 0; i < k; i += inc)
 80054e2:	2300      	movs	r3, #0
 80054e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80054e6:	e03a      	b.n	800555e <UART_ReceivedMSG+0x106>
        {
          uint8_t  Source0;
          uint8_t  Source1;
          uint8_t *Dest;

          j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
 80054e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054ea:	3301      	adds	r3, #1
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f2:	833b      	strh	r3, [r7, #24]

          if (source >= TMsg_MaxLen)
 80054f4:	8bfb      	ldrh	r3, [r7, #30]
 80054f6:	2bff      	cmp	r3, #255	; 0xff
 80054f8:	d904      	bls.n	8005504 <UART_ReceivedMSG+0xac>
          {
            UartEngine.StartOfMsg = j;
 80054fa:	4a30      	ldr	r2, [pc, #192]	; (80055bc <UART_ReceivedMSG+0x164>)
 80054fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80054fe:	8093      	strh	r3, [r2, #4]
            return 0;
 8005500:	2300      	movs	r3, #0
 8005502:	e055      	b.n	80055b0 <UART_ReceivedMSG+0x158>
          }

          Source0 = UartRxBuffer[j];
 8005504:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005506:	4a2e      	ldr	r2, [pc, #184]	; (80055c0 <UART_ReceivedMSG+0x168>)
 8005508:	5cd3      	ldrb	r3, [r2, r3]
 800550a:	75fb      	strb	r3, [r7, #23]
          Source1 = UartRxBuffer[j2];
 800550c:	8b3b      	ldrh	r3, [r7, #24]
 800550e:	4a2c      	ldr	r2, [pc, #176]	; (80055c0 <UART_ReceivedMSG+0x168>)
 8005510:	5cd3      	ldrb	r3, [r2, r3]
 8005512:	75bb      	strb	r3, [r7, #22]
          Dest    = &Msg->Data[source];
 8005514:	8bfb      	ldrh	r3, [r7, #30]
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4413      	add	r3, r2
 800551a:	3304      	adds	r3, #4
 800551c:	613b      	str	r3, [r7, #16]

          inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
 800551e:	7db9      	ldrb	r1, [r7, #22]
 8005520:	7dfb      	ldrb	r3, [r7, #23]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4618      	mov	r0, r3
 8005526:	f001 f828 	bl	800657a <ReverseByteStuffCopyByte2>
 800552a:	4603      	mov	r3, r0
 800552c:	73fb      	strb	r3, [r7, #15]

          if (inc == 0U)
 800552e:	7bfb      	ldrb	r3, [r7, #15]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d104      	bne.n	800553e <UART_ReceivedMSG+0xe6>
          {
            UartEngine.StartOfMsg = j2;
 8005534:	4a21      	ldr	r2, [pc, #132]	; (80055bc <UART_ReceivedMSG+0x164>)
 8005536:	8b3b      	ldrh	r3, [r7, #24]
 8005538:	8093      	strh	r3, [r2, #4]
            return 0;
 800553a:	2300      	movs	r3, #0
 800553c:	e038      	b.n	80055b0 <UART_ReceivedMSG+0x158>
          }

          j = (j + inc) % (uint16_t)UART_RxBufferSize;
 800553e:	7bfb      	ldrb	r3, [r7, #15]
 8005540:	b29a      	uxth	r2, r3
 8005542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005544:	4413      	add	r3, r2
 8005546:	b29b      	uxth	r3, r3
 8005548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800554c:	84bb      	strh	r3, [r7, #36]	; 0x24
          source++;
 800554e:	8bfb      	ldrh	r3, [r7, #30]
 8005550:	3301      	adds	r3, #1
 8005552:	83fb      	strh	r3, [r7, #30]
        for (i = 0; i < k; i += inc)
 8005554:	7bfb      	ldrb	r3, [r7, #15]
 8005556:	b29a      	uxth	r2, r3
 8005558:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800555a:	4413      	add	r3, r2
 800555c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800555e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005560:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005562:	429a      	cmp	r2, r3
 8005564:	d3c0      	bcc.n	80054e8 <UART_ReceivedMSG+0x90>
        }

        Msg->Len = source;
 8005566:	8bfa      	ldrh	r2, [r7, #30]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	601a      	str	r2, [r3, #0]
        j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
 800556c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800556e:	3301      	adds	r3, #1
 8005570:	b29b      	uxth	r3, r3
 8005572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005576:	84bb      	strh	r3, [r7, #36]	; 0x24
        UartEngine.StartOfMsg = j;
 8005578:	4a10      	ldr	r2, [pc, #64]	; (80055bc <UART_ReceivedMSG+0x164>)
 800557a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800557c:	8093      	strh	r3, [r2, #4]

        /* check message integrity */
        return (CHK_CheckAndRemove(Msg) != 0) ? 1 : 0;
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f001 f84c 	bl	800661c <CHK_CheckAndRemove>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	bf14      	ite	ne
 800558a:	2301      	movne	r3, #1
 800558c:	2300      	moveq	r3, #0
 800558e:	b2db      	uxtb	r3, r3
 8005590:	e00e      	b.n	80055b0 <UART_ReceivedMSG+0x158>
    for (k = 0; k < length; k++)
 8005592:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005594:	3301      	adds	r3, #1
 8005596:	847b      	strh	r3, [r7, #34]	; 0x22
 8005598:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800559a:	8c3b      	ldrh	r3, [r7, #32]
 800559c:	429a      	cmp	r2, r3
 800559e:	d38d      	bcc.n	80054bc <UART_ReceivedMSG+0x64>
      }
    }

    if (length > (uint16_t)Uart_Msg_Max_Size)
 80055a0:	8c3b      	ldrh	r3, [r7, #32]
 80055a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a6:	d902      	bls.n	80055ae <UART_ReceivedMSG+0x156>
    {
      UartEngine.StartOfMsg = dma_counter;
 80055a8:	4a04      	ldr	r2, [pc, #16]	; (80055bc <UART_ReceivedMSG+0x164>)
 80055aa:	8bbb      	ldrh	r3, [r7, #28]
 80055ac:	8093      	strh	r3, [r2, #4]
    }
  }

  return 0;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3728      	adds	r7, #40	; 0x28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	200001d8 	.word	0x200001d8
 80055bc:	20000824 	.word	0x20000824
 80055c0:	20000624 	.word	0x20000624

080055c4 <UART_SendMsg>:
  * @brief  Send a message via UART
  * @param  Msg the pointer to the message to be sent
  * @retval None
  */
void UART_SendMsg(TMsg *Msg)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  uint16_t count_out;

  CHK_ComputeAndAdd(Msg);
 80055cc:	6878      	ldr	r0, [r7, #4]
 80055ce:	f000 fffb 	bl	80065c8 <CHK_ComputeAndAdd>

  /* MISRA C-2012 rule 11.8 violation for purpose */
  count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	4807      	ldr	r0, [pc, #28]	; (80055f4 <UART_SendMsg+0x30>)
 80055d6:	f000 ffa2 	bl	800651e <ByteStuffCopy>
 80055da:	4603      	mov	r3, r0
 80055dc:	81fb      	strh	r3, [r7, #14]

  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Transmit(&hcom_uart[COM1], (uint8_t *)UartTxBuffer, count_out, 5000);
 80055de:	89fa      	ldrh	r2, [r7, #14]
 80055e0:	f241 3388 	movw	r3, #5000	; 0x1388
 80055e4:	4903      	ldr	r1, [pc, #12]	; (80055f4 <UART_SendMsg+0x30>)
 80055e6:	4804      	ldr	r0, [pc, #16]	; (80055f8 <UART_SendMsg+0x34>)
 80055e8:	f7fe ff00 	bl	80043ec <HAL_UART_Transmit>
}
 80055ec:	bf00      	nop
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	2000082c 	.word	0x2000082c
 80055f8:	200001d8 	.word	0x200001d8

080055fc <UART_StartReceiveMsg>:
  * @brief  Start receiving messages via DMA
  * @param  None
  * @retval None
  */
void UART_StartReceiveMsg(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  hcom_uart[COM1].pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
 8005600:	4b08      	ldr	r3, [pc, #32]	; (8005624 <UART_StartReceiveMsg+0x28>)
 8005602:	4a09      	ldr	r2, [pc, #36]	; (8005628 <UART_StartReceiveMsg+0x2c>)
 8005604:	629a      	str	r2, [r3, #40]	; 0x28
  hcom_uart[COM1].RxXferSize = UART_RxBufferSize;
 8005606:	4b07      	ldr	r3, [pc, #28]	; (8005624 <UART_StartReceiveMsg+0x28>)
 8005608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800560c:	859a      	strh	r2, [r3, #44]	; 0x2c
  hcom_uart[COM1].ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
 800560e:	4b05      	ldr	r3, [pc, #20]	; (8005624 <UART_StartReceiveMsg+0x28>)
 8005610:	2200      	movs	r2, #0
 8005612:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
     in the UART CR3 register */
  /* MISRA C-2012 rule 11.8 violation for purpose */
  (void)HAL_UART_Receive_DMA(&hcom_uart[COM1], (uint8_t *)UartRxBuffer, UART_RxBufferSize);
 8005614:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005618:	4903      	ldr	r1, [pc, #12]	; (8005628 <UART_StartReceiveMsg+0x2c>)
 800561a:	4802      	ldr	r0, [pc, #8]	; (8005624 <UART_StartReceiveMsg+0x28>)
 800561c:	f7fe ff71 	bl	8004502 <HAL_UART_Receive_DMA>
}
 8005620:	bf00      	nop
 8005622:	bd80      	pop	{r7, pc}
 8005624:	200001d8 	.word	0x200001d8
 8005628:	20000624 	.word	0x20000624

0800562c <Get_DMA_Flag_Status>:
  * @brief  Get the DMA Stream pending flags
  * @param  handle_dma DMA handle
  * @retval The state of FLAG (SET or RESET)
  */
static uint32_t Get_DMA_Flag_Status(DMA_HandleTypeDef *handle_dma)
{
 800562c:	b480      	push	{r7}
 800562e:	b083      	sub	sp, #12
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_FLAG(handle_dma, __HAL_DMA_GET_TE_FLAG_INDEX(handle_dma)));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	461a      	mov	r2, r3
 800563a:	4b8c      	ldr	r3, [pc, #560]	; (800586c <Get_DMA_Flag_Status+0x240>)
 800563c:	429a      	cmp	r2, r3
 800563e:	d961      	bls.n	8005704 <Get_DMA_Flag_Status+0xd8>
 8005640:	4b8b      	ldr	r3, [pc, #556]	; (8005870 <Get_DMA_Flag_Status+0x244>)
 8005642:	685a      	ldr	r2, [r3, #4]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	498a      	ldr	r1, [pc, #552]	; (8005874 <Get_DMA_Flag_Status+0x248>)
 800564a:	428b      	cmp	r3, r1
 800564c:	d057      	beq.n	80056fe <Get_DMA_Flag_Status+0xd2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4989      	ldr	r1, [pc, #548]	; (8005878 <Get_DMA_Flag_Status+0x24c>)
 8005654:	428b      	cmp	r3, r1
 8005656:	d050      	beq.n	80056fa <Get_DMA_Flag_Status+0xce>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4987      	ldr	r1, [pc, #540]	; (800587c <Get_DMA_Flag_Status+0x250>)
 800565e:	428b      	cmp	r3, r1
 8005660:	d049      	beq.n	80056f6 <Get_DMA_Flag_Status+0xca>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4986      	ldr	r1, [pc, #536]	; (8005880 <Get_DMA_Flag_Status+0x254>)
 8005668:	428b      	cmp	r3, r1
 800566a:	d042      	beq.n	80056f2 <Get_DMA_Flag_Status+0xc6>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4984      	ldr	r1, [pc, #528]	; (8005884 <Get_DMA_Flag_Status+0x258>)
 8005672:	428b      	cmp	r3, r1
 8005674:	d03a      	beq.n	80056ec <Get_DMA_Flag_Status+0xc0>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4983      	ldr	r1, [pc, #524]	; (8005888 <Get_DMA_Flag_Status+0x25c>)
 800567c:	428b      	cmp	r3, r1
 800567e:	d032      	beq.n	80056e6 <Get_DMA_Flag_Status+0xba>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4981      	ldr	r1, [pc, #516]	; (800588c <Get_DMA_Flag_Status+0x260>)
 8005686:	428b      	cmp	r3, r1
 8005688:	d02a      	beq.n	80056e0 <Get_DMA_Flag_Status+0xb4>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4980      	ldr	r1, [pc, #512]	; (8005890 <Get_DMA_Flag_Status+0x264>)
 8005690:	428b      	cmp	r3, r1
 8005692:	d022      	beq.n	80056da <Get_DMA_Flag_Status+0xae>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	497e      	ldr	r1, [pc, #504]	; (8005894 <Get_DMA_Flag_Status+0x268>)
 800569a:	428b      	cmp	r3, r1
 800569c:	d01a      	beq.n	80056d4 <Get_DMA_Flag_Status+0xa8>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	497d      	ldr	r1, [pc, #500]	; (8005898 <Get_DMA_Flag_Status+0x26c>)
 80056a4:	428b      	cmp	r3, r1
 80056a6:	d012      	beq.n	80056ce <Get_DMA_Flag_Status+0xa2>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	497b      	ldr	r1, [pc, #492]	; (800589c <Get_DMA_Flag_Status+0x270>)
 80056ae:	428b      	cmp	r3, r1
 80056b0:	d00a      	beq.n	80056c8 <Get_DMA_Flag_Status+0x9c>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	497a      	ldr	r1, [pc, #488]	; (80058a0 <Get_DMA_Flag_Status+0x274>)
 80056b8:	428b      	cmp	r3, r1
 80056ba:	d102      	bne.n	80056c2 <Get_DMA_Flag_Status+0x96>
 80056bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80056c0:	e01e      	b.n	8005700 <Get_DMA_Flag_Status+0xd4>
 80056c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80056c6:	e01b      	b.n	8005700 <Get_DMA_Flag_Status+0xd4>
 80056c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80056cc:	e018      	b.n	8005700 <Get_DMA_Flag_Status+0xd4>
 80056ce:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80056d2:	e015      	b.n	8005700 <Get_DMA_Flag_Status+0xd4>
 80056d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80056d8:	e012      	b.n	8005700 <Get_DMA_Flag_Status+0xd4>
 80056da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056de:	e00f      	b.n	8005700 <Get_DMA_Flag_Status+0xd4>
 80056e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056e4:	e00c      	b.n	8005700 <Get_DMA_Flag_Status+0xd4>
 80056e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056ea:	e009      	b.n	8005700 <Get_DMA_Flag_Status+0xd4>
 80056ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056f0:	e006      	b.n	8005700 <Get_DMA_Flag_Status+0xd4>
 80056f2:	2308      	movs	r3, #8
 80056f4:	e004      	b.n	8005700 <Get_DMA_Flag_Status+0xd4>
 80056f6:	2308      	movs	r3, #8
 80056f8:	e002      	b.n	8005700 <Get_DMA_Flag_Status+0xd4>
 80056fa:	2308      	movs	r3, #8
 80056fc:	e000      	b.n	8005700 <Get_DMA_Flag_Status+0xd4>
 80056fe:	2308      	movs	r3, #8
 8005700:	4013      	ands	r3, r2
 8005702:	e154      	b.n	80059ae <Get_DMA_Flag_Status+0x382>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	4b66      	ldr	r3, [pc, #408]	; (80058a4 <Get_DMA_Flag_Status+0x278>)
 800570c:	429a      	cmp	r2, r3
 800570e:	d961      	bls.n	80057d4 <Get_DMA_Flag_Status+0x1a8>
 8005710:	4b57      	ldr	r3, [pc, #348]	; (8005870 <Get_DMA_Flag_Status+0x244>)
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4956      	ldr	r1, [pc, #344]	; (8005874 <Get_DMA_Flag_Status+0x248>)
 800571a:	428b      	cmp	r3, r1
 800571c:	d057      	beq.n	80057ce <Get_DMA_Flag_Status+0x1a2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4955      	ldr	r1, [pc, #340]	; (8005878 <Get_DMA_Flag_Status+0x24c>)
 8005724:	428b      	cmp	r3, r1
 8005726:	d050      	beq.n	80057ca <Get_DMA_Flag_Status+0x19e>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4953      	ldr	r1, [pc, #332]	; (800587c <Get_DMA_Flag_Status+0x250>)
 800572e:	428b      	cmp	r3, r1
 8005730:	d049      	beq.n	80057c6 <Get_DMA_Flag_Status+0x19a>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4952      	ldr	r1, [pc, #328]	; (8005880 <Get_DMA_Flag_Status+0x254>)
 8005738:	428b      	cmp	r3, r1
 800573a:	d042      	beq.n	80057c2 <Get_DMA_Flag_Status+0x196>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4950      	ldr	r1, [pc, #320]	; (8005884 <Get_DMA_Flag_Status+0x258>)
 8005742:	428b      	cmp	r3, r1
 8005744:	d03a      	beq.n	80057bc <Get_DMA_Flag_Status+0x190>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	494f      	ldr	r1, [pc, #316]	; (8005888 <Get_DMA_Flag_Status+0x25c>)
 800574c:	428b      	cmp	r3, r1
 800574e:	d032      	beq.n	80057b6 <Get_DMA_Flag_Status+0x18a>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	494d      	ldr	r1, [pc, #308]	; (800588c <Get_DMA_Flag_Status+0x260>)
 8005756:	428b      	cmp	r3, r1
 8005758:	d02a      	beq.n	80057b0 <Get_DMA_Flag_Status+0x184>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	494c      	ldr	r1, [pc, #304]	; (8005890 <Get_DMA_Flag_Status+0x264>)
 8005760:	428b      	cmp	r3, r1
 8005762:	d022      	beq.n	80057aa <Get_DMA_Flag_Status+0x17e>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	494a      	ldr	r1, [pc, #296]	; (8005894 <Get_DMA_Flag_Status+0x268>)
 800576a:	428b      	cmp	r3, r1
 800576c:	d01a      	beq.n	80057a4 <Get_DMA_Flag_Status+0x178>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	4949      	ldr	r1, [pc, #292]	; (8005898 <Get_DMA_Flag_Status+0x26c>)
 8005774:	428b      	cmp	r3, r1
 8005776:	d012      	beq.n	800579e <Get_DMA_Flag_Status+0x172>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4947      	ldr	r1, [pc, #284]	; (800589c <Get_DMA_Flag_Status+0x270>)
 800577e:	428b      	cmp	r3, r1
 8005780:	d00a      	beq.n	8005798 <Get_DMA_Flag_Status+0x16c>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4946      	ldr	r1, [pc, #280]	; (80058a0 <Get_DMA_Flag_Status+0x274>)
 8005788:	428b      	cmp	r3, r1
 800578a:	d102      	bne.n	8005792 <Get_DMA_Flag_Status+0x166>
 800578c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005790:	e01e      	b.n	80057d0 <Get_DMA_Flag_Status+0x1a4>
 8005792:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005796:	e01b      	b.n	80057d0 <Get_DMA_Flag_Status+0x1a4>
 8005798:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800579c:	e018      	b.n	80057d0 <Get_DMA_Flag_Status+0x1a4>
 800579e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80057a2:	e015      	b.n	80057d0 <Get_DMA_Flag_Status+0x1a4>
 80057a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80057a8:	e012      	b.n	80057d0 <Get_DMA_Flag_Status+0x1a4>
 80057aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057ae:	e00f      	b.n	80057d0 <Get_DMA_Flag_Status+0x1a4>
 80057b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057b4:	e00c      	b.n	80057d0 <Get_DMA_Flag_Status+0x1a4>
 80057b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057ba:	e009      	b.n	80057d0 <Get_DMA_Flag_Status+0x1a4>
 80057bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057c0:	e006      	b.n	80057d0 <Get_DMA_Flag_Status+0x1a4>
 80057c2:	2308      	movs	r3, #8
 80057c4:	e004      	b.n	80057d0 <Get_DMA_Flag_Status+0x1a4>
 80057c6:	2308      	movs	r3, #8
 80057c8:	e002      	b.n	80057d0 <Get_DMA_Flag_Status+0x1a4>
 80057ca:	2308      	movs	r3, #8
 80057cc:	e000      	b.n	80057d0 <Get_DMA_Flag_Status+0x1a4>
 80057ce:	2308      	movs	r3, #8
 80057d0:	4013      	ands	r3, r2
 80057d2:	e0ec      	b.n	80059ae <Get_DMA_Flag_Status+0x382>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	4b33      	ldr	r3, [pc, #204]	; (80058a8 <Get_DMA_Flag_Status+0x27c>)
 80057dc:	429a      	cmp	r2, r3
 80057de:	f240 8085 	bls.w	80058ec <Get_DMA_Flag_Status+0x2c0>
 80057e2:	4b32      	ldr	r3, [pc, #200]	; (80058ac <Get_DMA_Flag_Status+0x280>)
 80057e4:	685a      	ldr	r2, [r3, #4]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4922      	ldr	r1, [pc, #136]	; (8005874 <Get_DMA_Flag_Status+0x248>)
 80057ec:	428b      	cmp	r3, r1
 80057ee:	d07a      	beq.n	80058e6 <Get_DMA_Flag_Status+0x2ba>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4920      	ldr	r1, [pc, #128]	; (8005878 <Get_DMA_Flag_Status+0x24c>)
 80057f6:	428b      	cmp	r3, r1
 80057f8:	d073      	beq.n	80058e2 <Get_DMA_Flag_Status+0x2b6>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	491f      	ldr	r1, [pc, #124]	; (800587c <Get_DMA_Flag_Status+0x250>)
 8005800:	428b      	cmp	r3, r1
 8005802:	d06c      	beq.n	80058de <Get_DMA_Flag_Status+0x2b2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	491d      	ldr	r1, [pc, #116]	; (8005880 <Get_DMA_Flag_Status+0x254>)
 800580a:	428b      	cmp	r3, r1
 800580c:	d065      	beq.n	80058da <Get_DMA_Flag_Status+0x2ae>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	491c      	ldr	r1, [pc, #112]	; (8005884 <Get_DMA_Flag_Status+0x258>)
 8005814:	428b      	cmp	r3, r1
 8005816:	d05d      	beq.n	80058d4 <Get_DMA_Flag_Status+0x2a8>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	491a      	ldr	r1, [pc, #104]	; (8005888 <Get_DMA_Flag_Status+0x25c>)
 800581e:	428b      	cmp	r3, r1
 8005820:	d055      	beq.n	80058ce <Get_DMA_Flag_Status+0x2a2>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4919      	ldr	r1, [pc, #100]	; (800588c <Get_DMA_Flag_Status+0x260>)
 8005828:	428b      	cmp	r3, r1
 800582a:	d04d      	beq.n	80058c8 <Get_DMA_Flag_Status+0x29c>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4917      	ldr	r1, [pc, #92]	; (8005890 <Get_DMA_Flag_Status+0x264>)
 8005832:	428b      	cmp	r3, r1
 8005834:	d045      	beq.n	80058c2 <Get_DMA_Flag_Status+0x296>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4916      	ldr	r1, [pc, #88]	; (8005894 <Get_DMA_Flag_Status+0x268>)
 800583c:	428b      	cmp	r3, r1
 800583e:	d03d      	beq.n	80058bc <Get_DMA_Flag_Status+0x290>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4914      	ldr	r1, [pc, #80]	; (8005898 <Get_DMA_Flag_Status+0x26c>)
 8005846:	428b      	cmp	r3, r1
 8005848:	d035      	beq.n	80058b6 <Get_DMA_Flag_Status+0x28a>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4913      	ldr	r1, [pc, #76]	; (800589c <Get_DMA_Flag_Status+0x270>)
 8005850:	428b      	cmp	r3, r1
 8005852:	d02d      	beq.n	80058b0 <Get_DMA_Flag_Status+0x284>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4911      	ldr	r1, [pc, #68]	; (80058a0 <Get_DMA_Flag_Status+0x274>)
 800585a:	428b      	cmp	r3, r1
 800585c:	d102      	bne.n	8005864 <Get_DMA_Flag_Status+0x238>
 800585e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005862:	e041      	b.n	80058e8 <Get_DMA_Flag_Status+0x2bc>
 8005864:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005868:	e03e      	b.n	80058e8 <Get_DMA_Flag_Status+0x2bc>
 800586a:	bf00      	nop
 800586c:	40026458 	.word	0x40026458
 8005870:	40026400 	.word	0x40026400
 8005874:	40026010 	.word	0x40026010
 8005878:	40026410 	.word	0x40026410
 800587c:	40026070 	.word	0x40026070
 8005880:	40026470 	.word	0x40026470
 8005884:	40026028 	.word	0x40026028
 8005888:	40026428 	.word	0x40026428
 800588c:	40026088 	.word	0x40026088
 8005890:	40026488 	.word	0x40026488
 8005894:	40026040 	.word	0x40026040
 8005898:	40026440 	.word	0x40026440
 800589c:	400260a0 	.word	0x400260a0
 80058a0:	400264a0 	.word	0x400264a0
 80058a4:	400260b8 	.word	0x400260b8
 80058a8:	40026058 	.word	0x40026058
 80058ac:	40026000 	.word	0x40026000
 80058b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80058b4:	e018      	b.n	80058e8 <Get_DMA_Flag_Status+0x2bc>
 80058b6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80058ba:	e015      	b.n	80058e8 <Get_DMA_Flag_Status+0x2bc>
 80058bc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80058c0:	e012      	b.n	80058e8 <Get_DMA_Flag_Status+0x2bc>
 80058c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058c6:	e00f      	b.n	80058e8 <Get_DMA_Flag_Status+0x2bc>
 80058c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058cc:	e00c      	b.n	80058e8 <Get_DMA_Flag_Status+0x2bc>
 80058ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058d2:	e009      	b.n	80058e8 <Get_DMA_Flag_Status+0x2bc>
 80058d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80058d8:	e006      	b.n	80058e8 <Get_DMA_Flag_Status+0x2bc>
 80058da:	2308      	movs	r3, #8
 80058dc:	e004      	b.n	80058e8 <Get_DMA_Flag_Status+0x2bc>
 80058de:	2308      	movs	r3, #8
 80058e0:	e002      	b.n	80058e8 <Get_DMA_Flag_Status+0x2bc>
 80058e2:	2308      	movs	r3, #8
 80058e4:	e000      	b.n	80058e8 <Get_DMA_Flag_Status+0x2bc>
 80058e6:	2308      	movs	r3, #8
 80058e8:	4013      	ands	r3, r2
 80058ea:	e060      	b.n	80059ae <Get_DMA_Flag_Status+0x382>
 80058ec:	4b33      	ldr	r3, [pc, #204]	; (80059bc <Get_DMA_Flag_Status+0x390>)
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4932      	ldr	r1, [pc, #200]	; (80059c0 <Get_DMA_Flag_Status+0x394>)
 80058f6:	428b      	cmp	r3, r1
 80058f8:	d057      	beq.n	80059aa <Get_DMA_Flag_Status+0x37e>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4931      	ldr	r1, [pc, #196]	; (80059c4 <Get_DMA_Flag_Status+0x398>)
 8005900:	428b      	cmp	r3, r1
 8005902:	d050      	beq.n	80059a6 <Get_DMA_Flag_Status+0x37a>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	492f      	ldr	r1, [pc, #188]	; (80059c8 <Get_DMA_Flag_Status+0x39c>)
 800590a:	428b      	cmp	r3, r1
 800590c:	d049      	beq.n	80059a2 <Get_DMA_Flag_Status+0x376>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	492e      	ldr	r1, [pc, #184]	; (80059cc <Get_DMA_Flag_Status+0x3a0>)
 8005914:	428b      	cmp	r3, r1
 8005916:	d042      	beq.n	800599e <Get_DMA_Flag_Status+0x372>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	492c      	ldr	r1, [pc, #176]	; (80059d0 <Get_DMA_Flag_Status+0x3a4>)
 800591e:	428b      	cmp	r3, r1
 8005920:	d03a      	beq.n	8005998 <Get_DMA_Flag_Status+0x36c>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	492b      	ldr	r1, [pc, #172]	; (80059d4 <Get_DMA_Flag_Status+0x3a8>)
 8005928:	428b      	cmp	r3, r1
 800592a:	d032      	beq.n	8005992 <Get_DMA_Flag_Status+0x366>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4929      	ldr	r1, [pc, #164]	; (80059d8 <Get_DMA_Flag_Status+0x3ac>)
 8005932:	428b      	cmp	r3, r1
 8005934:	d02a      	beq.n	800598c <Get_DMA_Flag_Status+0x360>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4928      	ldr	r1, [pc, #160]	; (80059dc <Get_DMA_Flag_Status+0x3b0>)
 800593c:	428b      	cmp	r3, r1
 800593e:	d022      	beq.n	8005986 <Get_DMA_Flag_Status+0x35a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4926      	ldr	r1, [pc, #152]	; (80059e0 <Get_DMA_Flag_Status+0x3b4>)
 8005946:	428b      	cmp	r3, r1
 8005948:	d01a      	beq.n	8005980 <Get_DMA_Flag_Status+0x354>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4925      	ldr	r1, [pc, #148]	; (80059e4 <Get_DMA_Flag_Status+0x3b8>)
 8005950:	428b      	cmp	r3, r1
 8005952:	d012      	beq.n	800597a <Get_DMA_Flag_Status+0x34e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4923      	ldr	r1, [pc, #140]	; (80059e8 <Get_DMA_Flag_Status+0x3bc>)
 800595a:	428b      	cmp	r3, r1
 800595c:	d00a      	beq.n	8005974 <Get_DMA_Flag_Status+0x348>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4922      	ldr	r1, [pc, #136]	; (80059ec <Get_DMA_Flag_Status+0x3c0>)
 8005964:	428b      	cmp	r3, r1
 8005966:	d102      	bne.n	800596e <Get_DMA_Flag_Status+0x342>
 8005968:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800596c:	e01e      	b.n	80059ac <Get_DMA_Flag_Status+0x380>
 800596e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005972:	e01b      	b.n	80059ac <Get_DMA_Flag_Status+0x380>
 8005974:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005978:	e018      	b.n	80059ac <Get_DMA_Flag_Status+0x380>
 800597a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800597e:	e015      	b.n	80059ac <Get_DMA_Flag_Status+0x380>
 8005980:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005984:	e012      	b.n	80059ac <Get_DMA_Flag_Status+0x380>
 8005986:	f44f 7300 	mov.w	r3, #512	; 0x200
 800598a:	e00f      	b.n	80059ac <Get_DMA_Flag_Status+0x380>
 800598c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005990:	e00c      	b.n	80059ac <Get_DMA_Flag_Status+0x380>
 8005992:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005996:	e009      	b.n	80059ac <Get_DMA_Flag_Status+0x380>
 8005998:	f44f 7300 	mov.w	r3, #512	; 0x200
 800599c:	e006      	b.n	80059ac <Get_DMA_Flag_Status+0x380>
 800599e:	2308      	movs	r3, #8
 80059a0:	e004      	b.n	80059ac <Get_DMA_Flag_Status+0x380>
 80059a2:	2308      	movs	r3, #8
 80059a4:	e002      	b.n	80059ac <Get_DMA_Flag_Status+0x380>
 80059a6:	2308      	movs	r3, #8
 80059a8:	e000      	b.n	80059ac <Get_DMA_Flag_Status+0x380>
 80059aa:	2308      	movs	r3, #8
 80059ac:	4013      	ands	r3, r2
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40026000 	.word	0x40026000
 80059c0:	40026010 	.word	0x40026010
 80059c4:	40026410 	.word	0x40026410
 80059c8:	40026070 	.word	0x40026070
 80059cc:	40026470 	.word	0x40026470
 80059d0:	40026028 	.word	0x40026028
 80059d4:	40026428 	.word	0x40026428
 80059d8:	40026088 	.word	0x40026088
 80059dc:	40026488 	.word	0x40026488
 80059e0:	40026040 	.word	0x40026040
 80059e4:	40026440 	.word	0x40026440
 80059e8:	400260a0 	.word	0x400260a0
 80059ec:	400264a0 	.word	0x400264a0

080059f0 <Get_DMA_Counter>:
  * @brief  Returns the number of remaining data units in the current DMAy Streamx transfer
  * @param  handle_dma DMA handle
  * @retval The number of remaining data units in the current DMA Stream transfer
  */
static uint32_t Get_DMA_Counter(DMA_HandleTypeDef *handle_dma)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  return (__HAL_DMA_GET_COUNTER(handle_dma));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	685b      	ldr	r3, [r3, #4]
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <BSP_SENSOR_ACC_Init>:
  * @brief  Initializes accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Init(void)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	af00      	add	r7, sp, #0
#ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
#endif
#endif
#endif
}
 8005a0e:	bf00      	nop
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <BSP_SENSOR_GYR_Init>:
  * @brief  Initializes gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Init(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
#endif
#endif
}
 8005a1c:	bf00      	nop
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <BSP_SENSOR_MAG_Init>:
  * @brief  Initializes magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Init(void)
{
 8005a26:	b480      	push	{r7}
 8005a28:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
#endif
#endif
}
 8005a2a:	bf00      	nop
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <BSP_SENSOR_PRESS_Init>:
  * @brief  Initializes pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Init(void)
{
 8005a34:	b480      	push	{r7}
 8005a36:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
#endif
#endif
}
 8005a38:	bf00      	nop
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr

08005a42 <BSP_SENSOR_TEMP_Init>:
  * @brief  Initializes temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Init(void)
{
 8005a42:	b480      	push	{r7}
 8005a44:	af00      	add	r7, sp, #0
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
#endif
#endif
#endif
}
 8005a46:	bf00      	nop
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <BSP_SENSOR_HUM_Init>:
  * @brief  Initializes humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Init(void)
{
 8005a50:	b480      	push	{r7}
 8005a52:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Init(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
#endif
#endif
}
 8005a54:	bf00      	nop
 8005a56:	46bd      	mov	sp, r7
 8005a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5c:	4770      	bx	lr

08005a5e <BSP_SENSOR_ACC_Enable>:
  * @brief  Enables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Enable(void)
{
 8005a5e:	b480      	push	{r7}
 8005a60:	af00      	add	r7, sp, #0
#ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
#endif
#endif
#endif
}
 8005a62:	bf00      	nop
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr

08005a6c <BSP_SENSOR_GYR_Enable>:
  * @brief  Enables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Enable(void)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
#endif
#endif
}
 8005a70:	bf00      	nop
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <BSP_SENSOR_MAG_Enable>:
  * @brief  Enables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Enable(void)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Enable(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
#endif
#endif
}
 8005a7e:	bf00      	nop
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr

08005a88 <BSP_SENSOR_PRESS_Enable>:
  * @brief  Enables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Enable(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
#endif
#endif
}
 8005a8c:	bf00      	nop
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr

08005a96 <BSP_SENSOR_TEMP_Enable>:
  * @brief  Enables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Enable(void)
{
 8005a96:	b480      	push	{r7}
 8005a98:	af00      	add	r7, sp, #0
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
#endif
#endif
#endif
}
 8005a9a:	bf00      	nop
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa2:	4770      	bx	lr

08005aa4 <BSP_SENSOR_HUM_Enable>:
  * @brief  Enables humidity sensors
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Enable(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Enable(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
#endif
#endif
}
 8005aa8:	bf00      	nop
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr

08005ab2 <BSP_SENSOR_ACC_Disable>:
  * @brief  Disables accelerometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_ACC_Disable(void)
{
 8005ab2:	b480      	push	{r7}
 8005ab4:	af00      	add	r7, sp, #0
#ifdef CUSTOM_ACC_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_ACC_INSTANCE_0, MOTION_ACCELERO);
#endif
#endif
#endif
}
 8005ab6:	bf00      	nop
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <BSP_SENSOR_GYR_Disable>:
  * @brief  Disables gyroscope
  * @param  None
  * @retval None
  */
void BSP_SENSOR_GYR_Disable(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_GYR_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_GYR_INSTANCE_0, MOTION_GYRO);
#endif
#endif
}
 8005ac4:	bf00      	nop
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <BSP_SENSOR_MAG_Disable>:
  * @brief  Disables magnetometer
  * @param  None
  * @retval None
  */
void BSP_SENSOR_MAG_Disable(void)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	af00      	add	r7, sp, #0
#if (defined BSP_MOTION_SENSORS)
#ifdef CUSTOM_MAG_INSTANCE_0
  (void)CUSTOM_MOTION_SENSOR_Disable(CUSTOM_MAG_INSTANCE_0, MOTION_MAGNETO);
#endif
#endif
}
 8005ad2:	bf00      	nop
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <BSP_SENSOR_PRESS_Disable>:
  * @brief  Disables pressure sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_PRESS_Disable(void)
{
 8005adc:	b480      	push	{r7}
 8005ade:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_PRESS_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_PRESS_INSTANCE_0, ENV_PRESSURE);
#endif
#endif
}
 8005ae0:	bf00      	nop
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <BSP_SENSOR_TEMP_Disable>:
  * @brief  Disables temperature sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_TEMP_Disable(void)
{
 8005aea:	b480      	push	{r7}
 8005aec:	af00      	add	r7, sp, #0
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE);
#endif
#endif
#endif
}
 8005aee:	bf00      	nop
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr

08005af8 <BSP_SENSOR_HUM_Disable>:
  * @brief  Disables humidity sensor
  * @param  None
  * @retval None
  */
void BSP_SENSOR_HUM_Disable(void)
{
 8005af8:	b480      	push	{r7}
 8005afa:	af00      	add	r7, sp, #0
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_HUM_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Disable(CUSTOM_HUM_INSTANCE_0, ENV_HUMIDITY);
#endif
#endif
}
 8005afc:	bf00      	nop
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <BSP_SENSOR_TEMP_SetOutputDataRate>:
  * @brief  Set output data rate for temperature sensors
  * @param  Odr Output Data Rate value to be set
  * @retval None
  */
void BSP_SENSOR_TEMP_SetOutputDataRate(float Odr)
{
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	ed87 0a01 	vstr	s0, [r7, #4]
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_SetOutputDataRate(CUSTOM_TEMP_INSTANCE_0, ENV_TEMPERATURE, Odr);
#endif
#endif
#endif
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <BSP_SENSOR_TEMP_GetTAmbRaw>:
  * @brief  Get the TAmbRaw value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetTAmbRaw(int16_t *Value)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_TAmbRaw(CUSTOM_TEMP_INSTANCE_0, Value);
#endif
#endif
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <BSP_SENSOR_TEMP_GetTObjRaw>:
  * @brief  Get the TObjRaw value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetTObjRaw(int16_t *Value)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_TObjRaw(CUSTOM_TEMP_INSTANCE_0, Value);
#endif
#endif
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <BSP_SENSOR_TEMP_GetAvgTmos>:
  * @brief  Get the AvgTmos value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetAvgTmos(uint16_t *Value)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_AvgTmos(CUSTOM_TEMP_INSTANCE_0, Value);
#endif
#endif
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <BSP_SENSOR_TEMP_SetAvgTmos>:
  * @brief  Set the AvgTmos value to infrared temperature sensor
  * @param  Value the value to be written to
  * @retval None
  */
void BSP_SENSOR_TEMP_SetAvgTmos(uint16_t Value)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	4603      	mov	r3, r0
 8005b60:	80fb      	strh	r3, [r7, #6]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Set_AvgTmos(CUSTOM_TEMP_INSTANCE_0, Value);
#endif
#endif
}
 8005b62:	bf00      	nop
 8005b64:	370c      	adds	r7, #12
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <BSP_SENSOR_TEMP_GetAvgT>:
  * @brief  Get the AvgT value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetAvgT(uint8_t *Value)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_AvgT(CUSTOM_TEMP_INSTANCE_0, Value);
#endif
#endif
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <BSP_SENSOR_TEMP_GetGainFactor>:
  * @brief  Get the GainFactor value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetGainFactor(uint8_t *Value)
{
 8005b82:	b480      	push	{r7}
 8005b84:	b083      	sub	sp, #12
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_GainFactor(CUSTOM_TEMP_INSTANCE_0, Value);
#endif
#endif
}
 8005b8a:	bf00      	nop
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <BSP_SENSOR_TEMP_GetSensitivity>:
  * @brief  Get the Sensitivity value from infrared temperature sensor
  * @param  Value pointer where the value is written to
  * @retval None
  */
void BSP_SENSOR_TEMP_GetSensitivity(uint16_t *Value)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b083      	sub	sp, #12
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
#if (defined BSP_ENV_SENSORS)
#ifdef CUSTOM_TEMP_INSTANCE_0
  (void)CUSTOM_ENV_SENSOR_Get_Sensitivity(CUSTOM_TEMP_INSTANCE_0, Value);
#endif
#endif
}
 8005b9e:	bf00      	nop
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <BUILD_REPLY_HEADER>:
  * @brief  Build the reply header
  * @param  Msg the pointer to the message to be built
  * @retval None
  */
void BUILD_REPLY_HEADER(TMsg *Msg)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = Msg->Data[1];
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	795a      	ldrb	r2, [r3, #5]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2232      	movs	r2, #50	; 0x32
 8005bbe:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] += CMD_Reply_Add;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	799b      	ldrb	r3, [r3, #6]
 8005bc4:	3b80      	subs	r3, #128	; 0x80
 8005bc6:	b2da      	uxtb	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	719a      	strb	r2, [r3, #6]
}
 8005bcc:	bf00      	nop
 8005bce:	370c      	adds	r7, #12
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <INIT_STREAMING_HEADER>:
  * @brief  Initialize the streaming header
  * @param  Msg the pointer to the header to be initialized
  * @retval None
  */
void INIT_STREAMING_HEADER(TMsg *Msg)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  Msg->Data[0] = DataStreamingDest;
 8005be0:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <INIT_STREAMING_HEADER+0x30>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	b2da      	uxtb	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	711a      	strb	r2, [r3, #4]
  Msg->Data[1] = DEV_ADDR;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2232      	movs	r2, #50	; 0x32
 8005bee:	715a      	strb	r2, [r3, #5]
  Msg->Data[2] = CMD_Start_Data_Streaming;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2208      	movs	r2, #8
 8005bf4:	719a      	strb	r2, [r3, #6]
  Msg->Len = 3;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2203      	movs	r2, #3
 8005bfa:	601a      	str	r2, [r3, #0]
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	20000018 	.word	0x20000018

08005c0c <HandleMSG>:
  */
int HandleMSG(TMsg *Msg)
/*  DestAddr | SourceAddr | CMD | PAYLOAD
 *      1          1         1       N
 */
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b098      	sub	sp, #96	; 0x60
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  int ret = 1;
 8005c14:	2301      	movs	r3, #1
 8005c16:	65fb      	str	r3, [r7, #92]	; 0x5c
  uint32_t i;
  char ps[64];
  uint32_t ps_len = 0;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
  static uint32_t sensors_enabled_prev = 0;
  int32_t msg_offset;
  uint32_t msg_count;

  if (Msg->Len < 2U)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d801      	bhi.n	8005c28 <HandleMSG+0x1c>
  {
    return 0;
 8005c24:	2300      	movs	r3, #0
 8005c26:	e357      	b.n	80062d8 <HandleMSG+0x6cc>
  }

  if (Msg->Data[0] != DEV_ADDR)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	791b      	ldrb	r3, [r3, #4]
 8005c2c:	2b32      	cmp	r3, #50	; 0x32
 8005c2e:	d001      	beq.n	8005c34 <HandleMSG+0x28>
  {
    return 0;
 8005c30:	2300      	movs	r3, #0
 8005c32:	e351      	b.n	80062d8 <HandleMSG+0x6cc>
  }

  switch (Msg->Data[2])   /* CMD */
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	799b      	ldrb	r3, [r3, #6]
 8005c38:	2b12      	cmp	r3, #18
 8005c3a:	dc6b      	bgt.n	8005d14 <HandleMSG+0x108>
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	dc3d      	bgt.n	8005cbc <HandleMSG+0xb0>
 8005c40:	e346      	b.n	80062d0 <HandleMSG+0x6c4>
 8005c42:	3b60      	subs	r3, #96	; 0x60
 8005c44:	2b1a      	cmp	r3, #26
 8005c46:	f200 8343 	bhi.w	80062d0 <HandleMSG+0x6c4>
 8005c4a:	a201      	add	r2, pc, #4	; (adr r2, 8005c50 <HandleMSG+0x44>)
 8005c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c50:	08005db7 	.word	0x08005db7
 8005c54:	080062d1 	.word	0x080062d1
 8005c58:	08005de5 	.word	0x08005de5
 8005c5c:	080062d1 	.word	0x080062d1
 8005c60:	080062d1 	.word	0x080062d1
 8005c64:	080062d1 	.word	0x080062d1
 8005c68:	080062d1 	.word	0x080062d1
 8005c6c:	080062d1 	.word	0x080062d1
 8005c70:	080062d1 	.word	0x080062d1
 8005c74:	080062d1 	.word	0x080062d1
 8005c78:	080062d1 	.word	0x080062d1
 8005c7c:	080062d1 	.word	0x080062d1
 8005c80:	080062d1 	.word	0x080062d1
 8005c84:	080062d1 	.word	0x080062d1
 8005c88:	080062d1 	.word	0x080062d1
 8005c8c:	080062d1 	.word	0x080062d1
 8005c90:	080062d1 	.word	0x080062d1
 8005c94:	080062d1 	.word	0x080062d1
 8005c98:	080062d1 	.word	0x080062d1
 8005c9c:	080062d1 	.word	0x080062d1
 8005ca0:	080062d1 	.word	0x080062d1
 8005ca4:	080062d1 	.word	0x080062d1
 8005ca8:	08005e13 	.word	0x08005e13
 8005cac:	080062d1 	.word	0x080062d1
 8005cb0:	080062d1 	.word	0x080062d1
 8005cb4:	080062d1 	.word	0x080062d1
 8005cb8:	08005e41 	.word	0x08005e41
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	2b11      	cmp	r3, #17
 8005cc0:	f200 8306 	bhi.w	80062d0 <HandleMSG+0x6c4>
 8005cc4:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <HandleMSG+0xc0>)
 8005cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cca:	bf00      	nop
 8005ccc:	08005d21 	.word	0x08005d21
 8005cd0:	08005d5b 	.word	0x08005d5b
 8005cd4:	080062d1 	.word	0x080062d1
 8005cd8:	080062d1 	.word	0x080062d1
 8005cdc:	080062d1 	.word	0x080062d1
 8005ce0:	080062d1 	.word	0x080062d1
 8005ce4:	080062d1 	.word	0x080062d1
 8005ce8:	08005e6f 	.word	0x08005e6f
 8005cec:	08005f1b 	.word	0x08005f1b
 8005cf0:	080062d1 	.word	0x080062d1
 8005cf4:	080062d1 	.word	0x080062d1
 8005cf8:	08005f65 	.word	0x08005f65
 8005cfc:	080062d1 	.word	0x080062d1
 8005d00:	08005d41 	.word	0x08005d41
 8005d04:	080062d1 	.word	0x080062d1
 8005d08:	08005fab 	.word	0x08005fab
 8005d0c:	08006221 	.word	0x08006221
 8005d10:	0800626f 	.word	0x0800626f
 8005d14:	2b7a      	cmp	r3, #122	; 0x7a
 8005d16:	f300 82db 	bgt.w	80062d0 <HandleMSG+0x6c4>
 8005d1a:	2b60      	cmp	r3, #96	; 0x60
 8005d1c:	da91      	bge.n	8005c42 <HandleMSG+0x36>
 8005d1e:	e2d7      	b.n	80062d0 <HandleMSG+0x6c4>
  {
    case CMD_Ping:
      if (Msg->Len != 3U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d001      	beq.n	8005d2c <HandleMSG+0x120>
      {
        return 0;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	e2d5      	b.n	80062d8 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff ff3c 	bl	8005baa <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2203      	movs	r2, #3
 8005d36:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff fc43 	bl	80055c4 <UART_SendMsg>
      break;
 8005d3e:	e2ca      	b.n	80062d6 <HandleMSG+0x6ca>

    case CMD_Enter_DFU_Mode:
      if (Msg->Len != 3U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d001      	beq.n	8005d4c <HandleMSG+0x140>
      {
        return 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	e2c5      	b.n	80062d8 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff ff2c 	bl	8005baa <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2203      	movs	r2, #3
 8005d56:	601a      	str	r2, [r3, #0]
      break;
 8005d58:	e2bd      	b.n	80062d6 <HandleMSG+0x6ca>

    case CMD_Read_PresString:
      if (Msg->Len != 3U)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d001      	beq.n	8005d66 <HandleMSG+0x15a>
      {
        return 0;
 8005d62:	2300      	movs	r3, #0
 8005d64:	e2b8      	b.n	80062d8 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff ff1f 	bl	8005baa <BUILD_REPLY_HEADER>

      Get_PresentationString(ps, &ps_len);
 8005d6c:	f107 020c 	add.w	r2, r7, #12
 8005d70:	f107 0310 	add.w	r3, r7, #16
 8005d74:	4611      	mov	r1, r2
 8005d76:	4618      	mov	r0, r3
 8005d78:	f000 fb08 	bl	800638c <Get_PresentationString>

      i = 0;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 8005d80:	e00d      	b.n	8005d9e <HandleMSG+0x192>
      {
        Msg->Data[3U + i] = ps[i];
 8005d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d84:	3303      	adds	r3, #3
 8005d86:	f107 0110 	add.w	r1, r7, #16
 8005d8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d8c:	440a      	add	r2, r1
 8005d8e:	7811      	ldrb	r1, [r2, #0]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	4413      	add	r3, r2
 8005d94:	460a      	mov	r2, r1
 8005d96:	711a      	strb	r2, [r3, #4]
        i++;
 8005d98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	65bb      	str	r3, [r7, #88]	; 0x58
      while (i < ps_len)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d3ed      	bcc.n	8005d82 <HandleMSG+0x176>
      }

      Msg->Len = 3U + i;
 8005da6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005da8:	1cda      	adds	r2, r3, #3
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7ff fc08 	bl	80055c4 <UART_SendMsg>
      break;
 8005db4:	e28f      	b.n	80062d6 <HandleMSG+0x6ca>

    case CMD_PRESSURE_Init:
      if (Msg->Len < 3U)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d801      	bhi.n	8005dc2 <HandleMSG+0x1b6>
      {
        return 0;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e28a      	b.n	80062d8 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff fef1 	bl	8005baa <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], PRESS_UNICLEO_ID, 4);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	3307      	adds	r3, #7
 8005dcc:	2204      	movs	r2, #4
 8005dce:	21ff      	movs	r1, #255	; 0xff
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 fc73 	bl	80066bc <Serialize_s32>
      Msg->Len = 3 + 4;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2207      	movs	r2, #7
 8005dda:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff fbf1 	bl	80055c4 <UART_SendMsg>
      break;
 8005de2:	e278      	b.n	80062d6 <HandleMSG+0x6ca>

    case CMD_HUMIDITY_TEMPERATURE_Init:
      if (Msg->Len < 3U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d801      	bhi.n	8005df0 <HandleMSG+0x1e4>
      {
        return 0;
 8005dec:	2300      	movs	r3, #0
 8005dee:	e273      	b.n	80062d8 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f7ff feda 	bl	8005baa <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], HUM_TEMP_UNICLEO_ID, 4);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	3307      	adds	r3, #7
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	21ff      	movs	r1, #255	; 0xff
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 fc5c 	bl	80066bc <Serialize_s32>
      Msg->Len = 3 + 4;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2207      	movs	r2, #7
 8005e08:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff fbda 	bl	80055c4 <UART_SendMsg>
      break;
 8005e10:	e261      	b.n	80062d6 <HandleMSG+0x6ca>

    case CMD_ACCELERO_GYRO_Init:
      if (Msg->Len < 3U)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d801      	bhi.n	8005e1e <HandleMSG+0x212>
      {
        return 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e25c      	b.n	80062d8 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff fec3 	bl	8005baa <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], ACC_GYR_UNICLEO_ID, 4);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3307      	adds	r3, #7
 8005e28:	2204      	movs	r2, #4
 8005e2a:	21ff      	movs	r1, #255	; 0xff
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f000 fc45 	bl	80066bc <Serialize_s32>
      Msg->Len = 3 + 4;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2207      	movs	r2, #7
 8005e36:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f7ff fbc3 	bl	80055c4 <UART_SendMsg>
      break;
 8005e3e:	e24a      	b.n	80062d6 <HandleMSG+0x6ca>

    case CMD_MAGNETO_Init:
      if (Msg->Len < 3U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d801      	bhi.n	8005e4c <HandleMSG+0x240>
      {
        return 0;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	e245      	b.n	80062d8 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff feac 	bl	8005baa <BUILD_REPLY_HEADER>
      Serialize_s32(&Msg->Data[3], MAG_UNICLEO_ID, 4);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	3307      	adds	r3, #7
 8005e56:	2204      	movs	r2, #4
 8005e58:	21ff      	movs	r1, #255	; 0xff
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f000 fc2e 	bl	80066bc <Serialize_s32>
      Msg->Len = 3 + 4;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2207      	movs	r2, #7
 8005e64:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7ff fbac 	bl	80055c4 <UART_SendMsg>
      break;
 8005e6c:	e233      	b.n	80062d6 <HandleMSG+0x6ca>

    case CMD_Start_Data_Streaming:
      if (Msg->Len < 3U)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d801      	bhi.n	8005e7a <HandleMSG+0x26e>
      {
        return 0;
 8005e76:	2300      	movs	r3, #0
 8005e78:	e22e      	b.n	80062d8 <HandleMSG+0x6cc>
      }

      SensorsEnabled = Deserialize(&Msg->Data[3], 4);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	3307      	adds	r3, #7
 8005e7e:	2104      	movs	r1, #4
 8005e80:	4618      	mov	r0, r3
 8005e82:	f000 fbf5 	bl	8006670 <Deserialize>
 8005e86:	4603      	mov	r3, r0
 8005e88:	4a4f      	ldr	r2, [pc, #316]	; (8005fc8 <HandleMSG+0x3bc>)
 8005e8a:	6013      	str	r3, [r2, #0]
      DiscardSamples = 2;
 8005e8c:	4b4f      	ldr	r3, [pc, #316]	; (8005fcc <HandleMSG+0x3c0>)
 8005e8e:	2202      	movs	r2, #2
 8005e90:	701a      	strb	r2, [r3, #0]

      /* Start enabled sensors */
      if ((SensorsEnabled & PRESSURE_SENSOR) == PRESSURE_SENSOR)
 8005e92:	4b4d      	ldr	r3, [pc, #308]	; (8005fc8 <HandleMSG+0x3bc>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f003 0301 	and.w	r3, r3, #1
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d101      	bne.n	8005ea2 <HandleMSG+0x296>
      {
        BSP_SENSOR_PRESS_Enable();
 8005e9e:	f7ff fdf3 	bl	8005a88 <BSP_SENSOR_PRESS_Enable>
      }

      if ((SensorsEnabled & TEMPERATURE_SENSOR) == TEMPERATURE_SENSOR)
 8005ea2:	4b49      	ldr	r3, [pc, #292]	; (8005fc8 <HandleMSG+0x3bc>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d101      	bne.n	8005eb2 <HandleMSG+0x2a6>
      {
        BSP_SENSOR_TEMP_Enable();
 8005eae:	f7ff fdf2 	bl	8005a96 <BSP_SENSOR_TEMP_Enable>
      }

      if ((SensorsEnabled & HUMIDITY_SENSOR) == HUMIDITY_SENSOR)
 8005eb2:	4b45      	ldr	r3, [pc, #276]	; (8005fc8 <HandleMSG+0x3bc>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d101      	bne.n	8005ec2 <HandleMSG+0x2b6>
      {
        BSP_SENSOR_HUM_Enable();
 8005ebe:	f7ff fdf1 	bl	8005aa4 <BSP_SENSOR_HUM_Enable>
      }

      if ((SensorsEnabled & ACCELEROMETER_SENSOR) == ACCELEROMETER_SENSOR)
 8005ec2:	4b41      	ldr	r3, [pc, #260]	; (8005fc8 <HandleMSG+0x3bc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f003 0310 	and.w	r3, r3, #16
 8005eca:	2b10      	cmp	r3, #16
 8005ecc:	d101      	bne.n	8005ed2 <HandleMSG+0x2c6>
      {
        BSP_SENSOR_ACC_Enable();
 8005ece:	f7ff fdc6 	bl	8005a5e <BSP_SENSOR_ACC_Enable>
      }

      if ((SensorsEnabled & GYROSCOPE_SENSOR) == GYROSCOPE_SENSOR)
 8005ed2:	4b3d      	ldr	r3, [pc, #244]	; (8005fc8 <HandleMSG+0x3bc>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d101      	bne.n	8005ee2 <HandleMSG+0x2d6>
      {
        BSP_SENSOR_GYR_Enable();
 8005ede:	f7ff fdc5 	bl	8005a6c <BSP_SENSOR_GYR_Enable>
      }

      if ((SensorsEnabled & MAGNETIC_SENSOR) == MAGNETIC_SENSOR)
 8005ee2:	4b39      	ldr	r3, [pc, #228]	; (8005fc8 <HandleMSG+0x3bc>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eea:	2b40      	cmp	r3, #64	; 0x40
 8005eec:	d101      	bne.n	8005ef2 <HandleMSG+0x2e6>
      {
        BSP_SENSOR_MAG_Enable();
 8005eee:	f7ff fdc4 	bl	8005a7a <BSP_SENSOR_MAG_Enable>
      }

      (void)HAL_TIM_Base_Start_IT(&BSP_IP_TIM_Handle);
 8005ef2:	4837      	ldr	r0, [pc, #220]	; (8005fd0 <HandleMSG+0x3c4>)
 8005ef4:	f7fd fb60 	bl	80035b8 <HAL_TIM_Base_Start_IT>
      DataLoggerActive = 1;
 8005ef8:	4b36      	ldr	r3, [pc, #216]	; (8005fd4 <HandleMSG+0x3c8>)
 8005efa:	2201      	movs	r2, #1
 8005efc:	701a      	strb	r2, [r3, #0]

      DataStreamingDest = Msg->Data[1];
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	795a      	ldrb	r2, [r3, #5]
 8005f02:	4b35      	ldr	r3, [pc, #212]	; (8005fd8 <HandleMSG+0x3cc>)
 8005f04:	701a      	strb	r2, [r3, #0]
      BUILD_REPLY_HEADER(Msg);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f7ff fe4f 	bl	8005baa <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2203      	movs	r2, #3
 8005f10:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f7ff fb56 	bl	80055c4 <UART_SendMsg>
      break;
 8005f18:	e1dd      	b.n	80062d6 <HandleMSG+0x6ca>

    case CMD_Stop_Data_Streaming:
      if (Msg->Len < 3U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b02      	cmp	r3, #2
 8005f20:	d801      	bhi.n	8005f26 <HandleMSG+0x31a>
      {
        return 0;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e1d8      	b.n	80062d8 <HandleMSG+0x6cc>
      }

      DataLoggerActive = 0;
 8005f26:	4b2b      	ldr	r3, [pc, #172]	; (8005fd4 <HandleMSG+0x3c8>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
      (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 8005f2c:	4828      	ldr	r0, [pc, #160]	; (8005fd0 <HandleMSG+0x3c4>)
 8005f2e:	f7fd fba5 	bl	800367c <HAL_TIM_Base_Stop_IT>

      /* Disable all sensors */
      BSP_SENSOR_ACC_Disable();
 8005f32:	f7ff fdbe 	bl	8005ab2 <BSP_SENSOR_ACC_Disable>
      BSP_SENSOR_GYR_Disable();
 8005f36:	f7ff fdc3 	bl	8005ac0 <BSP_SENSOR_GYR_Disable>
      BSP_SENSOR_MAG_Disable();
 8005f3a:	f7ff fdc8 	bl	8005ace <BSP_SENSOR_MAG_Disable>
      BSP_SENSOR_PRESS_Disable();
 8005f3e:	f7ff fdcd 	bl	8005adc <BSP_SENSOR_PRESS_Disable>
      BSP_SENSOR_TEMP_Disable();
 8005f42:	f7ff fdd2 	bl	8005aea <BSP_SENSOR_TEMP_Disable>
      BSP_SENSOR_HUM_Disable();
 8005f46:	f7ff fdd7 	bl	8005af8 <BSP_SENSOR_HUM_Disable>

      SensorsEnabled = 0;
 8005f4a:	4b1f      	ldr	r3, [pc, #124]	; (8005fc8 <HandleMSG+0x3bc>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]
      UseOfflineData = 0;
 8005f50:	4b22      	ldr	r3, [pc, #136]	; (8005fdc <HandleMSG+0x3d0>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	701a      	strb	r2, [r3, #0]

      BUILD_REPLY_HEADER(Msg);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7ff fe27 	bl	8005baa <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff fb31 	bl	80055c4 <UART_SendMsg>
      break;
 8005f62:	e1b8      	b.n	80062d6 <HandleMSG+0x6ca>

    case CMD_Set_DateTime:
      if (Msg->Len < 3U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b02      	cmp	r3, #2
 8005f6a:	d801      	bhi.n	8005f70 <HandleMSG+0x364>
      {
        return 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e1b3      	b.n	80062d8 <HandleMSG+0x6cc>
      }

      BUILD_REPLY_HEADER(Msg);
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff fe1a 	bl	8005baa <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2203      	movs	r2, #3
 8005f7a:	601a      	str	r2, [r3, #0]
      RTC_TimeRegulate(Msg->Data[3], Msg->Data[4], Msg->Data[5]);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	79d8      	ldrb	r0, [r3, #7]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	7a19      	ldrb	r1, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	7a5b      	ldrb	r3, [r3, #9]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	f000 f9d5 	bl	8006338 <RTC_TimeRegulate>
      RTC_DateRegulate(Msg->Data[6], Msg->Data[7], Msg->Data[8], Msg->Data[9]);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	7a98      	ldrb	r0, [r3, #10]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	7ad9      	ldrb	r1, [r3, #11]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	7b1a      	ldrb	r2, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	7b5b      	ldrb	r3, [r3, #13]
 8005f9e:	f000 f9a1 	bl	80062e4 <RTC_DateRegulate>
      UART_SendMsg(Msg);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f7ff fb0e 	bl	80055c4 <UART_SendMsg>
      break;
 8005fa8:	e195      	b.n	80062d6 <HandleMSG+0x6ca>

    case CMD_Offline_Data:
      if (Msg->Len < 55U)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b36      	cmp	r3, #54	; 0x36
 8005fb0:	d801      	bhi.n	8005fb6 <HandleMSG+0x3aa>
      {
        return 0;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e190      	b.n	80062d8 <HandleMSG+0x6cc>
      }

      msg_offset = 4;
 8005fb6:	2304      	movs	r3, #4
 8005fb8:	657b      	str	r3, [r7, #84]	; 0x54
      msg_count = (uint32_t)Msg->Data[3];
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	79db      	ldrb	r3, [r3, #7]
 8005fbe:	653b      	str	r3, [r7, #80]	; 0x50

      for (i = 0; i < msg_count; i++)
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fc4:	e11d      	b.n	8006202 <HandleMSG+0x5f6>
 8005fc6:	bf00      	nop
 8005fc8:	20000228 	.word	0x20000228
 8005fcc:	2000040c 	.word	0x2000040c
 8005fd0:	2000018c 	.word	0x2000018c
 8005fd4:	20000224 	.word	0x20000224
 8005fd8:	20000018 	.word	0x20000018
 8005fdc:	20000255 	.word	0x20000255
      {
        memcpy(&OfflineData[OfflineDataWriteIndex].hours, &Msg->Data[msg_offset], 1);
 8005fe0:	4ba6      	ldr	r3, [pc, #664]	; (800627c <HandleMSG+0x670>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2234      	movs	r2, #52	; 0x34
 8005fe6:	fb02 f303 	mul.w	r3, r2, r3
 8005fea:	4aa5      	ldr	r2, [pc, #660]	; (8006280 <HandleMSG+0x674>)
 8005fec:	4413      	add	r3, r2
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005ff2:	440a      	add	r2, r1
 8005ff4:	3204      	adds	r2, #4
 8005ff6:	7812      	ldrb	r2, [r2, #0]
 8005ff8:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].minutes, &Msg->Data[msg_offset + 1], 1);
 8005ffa:	4ba0      	ldr	r3, [pc, #640]	; (800627c <HandleMSG+0x670>)
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	2234      	movs	r2, #52	; 0x34
 8006000:	fb02 f303 	mul.w	r3, r2, r3
 8006004:	4a9e      	ldr	r2, [pc, #632]	; (8006280 <HandleMSG+0x674>)
 8006006:	4413      	add	r3, r2
 8006008:	3301      	adds	r3, #1
 800600a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800600c:	3201      	adds	r2, #1
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	440a      	add	r2, r1
 8006012:	3204      	adds	r2, #4
 8006014:	7812      	ldrb	r2, [r2, #0]
 8006016:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].seconds, &Msg->Data[msg_offset + 2], 1);
 8006018:	4b98      	ldr	r3, [pc, #608]	; (800627c <HandleMSG+0x670>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2234      	movs	r2, #52	; 0x34
 800601e:	fb02 f303 	mul.w	r3, r2, r3
 8006022:	4a97      	ldr	r2, [pc, #604]	; (8006280 <HandleMSG+0x674>)
 8006024:	4413      	add	r3, r2
 8006026:	3302      	adds	r3, #2
 8006028:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800602a:	3202      	adds	r2, #2
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	440a      	add	r2, r1
 8006030:	3204      	adds	r2, #4
 8006032:	7812      	ldrb	r2, [r2, #0]
 8006034:	701a      	strb	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].subsec, &Msg->Data[msg_offset + 3], 1);
 8006036:	4b91      	ldr	r3, [pc, #580]	; (800627c <HandleMSG+0x670>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2234      	movs	r2, #52	; 0x34
 800603c:	fb02 f303 	mul.w	r3, r2, r3
 8006040:	4a8f      	ldr	r2, [pc, #572]	; (8006280 <HandleMSG+0x674>)
 8006042:	4413      	add	r3, r2
 8006044:	3303      	adds	r3, #3
 8006046:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006048:	3203      	adds	r2, #3
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	440a      	add	r2, r1
 800604e:	3204      	adds	r2, #4
 8006050:	7812      	ldrb	r2, [r2, #0]
 8006052:	701a      	strb	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].pressure, &Msg->Data[msg_offset + 4], 4);
 8006054:	4b89      	ldr	r3, [pc, #548]	; (800627c <HandleMSG+0x670>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2234      	movs	r2, #52	; 0x34
 800605a:	fb02 f303 	mul.w	r3, r2, r3
 800605e:	4a88      	ldr	r2, [pc, #544]	; (8006280 <HandleMSG+0x674>)
 8006060:	4413      	add	r3, r2
 8006062:	3304      	adds	r3, #4
 8006064:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006066:	3204      	adds	r2, #4
 8006068:	6879      	ldr	r1, [r7, #4]
 800606a:	440a      	add	r2, r1
 800606c:	3204      	adds	r2, #4
 800606e:	6812      	ldr	r2, [r2, #0]
 8006070:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].temperature, &Msg->Data[msg_offset + 8], 4);
 8006072:	4b82      	ldr	r3, [pc, #520]	; (800627c <HandleMSG+0x670>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2234      	movs	r2, #52	; 0x34
 8006078:	fb02 f303 	mul.w	r3, r2, r3
 800607c:	3308      	adds	r3, #8
 800607e:	4a80      	ldr	r2, [pc, #512]	; (8006280 <HandleMSG+0x674>)
 8006080:	4413      	add	r3, r2
 8006082:	3304      	adds	r3, #4
 8006084:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006086:	3208      	adds	r2, #8
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	440a      	add	r2, r1
 800608c:	3204      	adds	r2, #4
 800608e:	6812      	ldr	r2, [r2, #0]
 8006090:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].humidity, &Msg->Data[msg_offset + 12], 4);
 8006092:	4b7a      	ldr	r3, [pc, #488]	; (800627c <HandleMSG+0x670>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2234      	movs	r2, #52	; 0x34
 8006098:	fb02 f303 	mul.w	r3, r2, r3
 800609c:	3308      	adds	r3, #8
 800609e:	4a78      	ldr	r2, [pc, #480]	; (8006280 <HandleMSG+0x674>)
 80060a0:	4413      	add	r3, r2
 80060a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060a4:	320c      	adds	r2, #12
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	440a      	add	r2, r1
 80060aa:	3204      	adds	r2, #4
 80060ac:	6812      	ldr	r2, [r2, #0]
 80060ae:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_x_mg, &Msg->Data[msg_offset + 16], 4);
 80060b0:	4b72      	ldr	r3, [pc, #456]	; (800627c <HandleMSG+0x670>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2234      	movs	r2, #52	; 0x34
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
 80060ba:	3310      	adds	r3, #16
 80060bc:	4a70      	ldr	r2, [pc, #448]	; (8006280 <HandleMSG+0x674>)
 80060be:	4413      	add	r3, r2
 80060c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060c2:	3210      	adds	r2, #16
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	440a      	add	r2, r1
 80060c8:	3204      	adds	r2, #4
 80060ca:	6812      	ldr	r2, [r2, #0]
 80060cc:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_y_mg, &Msg->Data[msg_offset + 20], 4);
 80060ce:	4b6b      	ldr	r3, [pc, #428]	; (800627c <HandleMSG+0x670>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2234      	movs	r2, #52	; 0x34
 80060d4:	fb02 f303 	mul.w	r3, r2, r3
 80060d8:	3310      	adds	r3, #16
 80060da:	4a69      	ldr	r2, [pc, #420]	; (8006280 <HandleMSG+0x674>)
 80060dc:	4413      	add	r3, r2
 80060de:	3304      	adds	r3, #4
 80060e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060e2:	3214      	adds	r2, #20
 80060e4:	6879      	ldr	r1, [r7, #4]
 80060e6:	440a      	add	r2, r1
 80060e8:	3204      	adds	r2, #4
 80060ea:	6812      	ldr	r2, [r2, #0]
 80060ec:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].acceleration_z_mg, &Msg->Data[msg_offset + 24], 4);
 80060ee:	4b63      	ldr	r3, [pc, #396]	; (800627c <HandleMSG+0x670>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2234      	movs	r2, #52	; 0x34
 80060f4:	fb02 f303 	mul.w	r3, r2, r3
 80060f8:	3318      	adds	r3, #24
 80060fa:	4a61      	ldr	r2, [pc, #388]	; (8006280 <HandleMSG+0x674>)
 80060fc:	4413      	add	r3, r2
 80060fe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006100:	3218      	adds	r2, #24
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	440a      	add	r2, r1
 8006106:	3204      	adds	r2, #4
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_x_mdps, &Msg->Data[msg_offset + 28], 4);
 800610c:	4b5b      	ldr	r3, [pc, #364]	; (800627c <HandleMSG+0x670>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2234      	movs	r2, #52	; 0x34
 8006112:	fb02 f303 	mul.w	r3, r2, r3
 8006116:	3318      	adds	r3, #24
 8006118:	4a59      	ldr	r2, [pc, #356]	; (8006280 <HandleMSG+0x674>)
 800611a:	4413      	add	r3, r2
 800611c:	3304      	adds	r3, #4
 800611e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006120:	321c      	adds	r2, #28
 8006122:	6879      	ldr	r1, [r7, #4]
 8006124:	440a      	add	r2, r1
 8006126:	3204      	adds	r2, #4
 8006128:	6812      	ldr	r2, [r2, #0]
 800612a:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_y_mdps, &Msg->Data[msg_offset + 32], 4);
 800612c:	4b53      	ldr	r3, [pc, #332]	; (800627c <HandleMSG+0x670>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2234      	movs	r2, #52	; 0x34
 8006132:	fb02 f303 	mul.w	r3, r2, r3
 8006136:	3320      	adds	r3, #32
 8006138:	4a51      	ldr	r2, [pc, #324]	; (8006280 <HandleMSG+0x674>)
 800613a:	4413      	add	r3, r2
 800613c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800613e:	3220      	adds	r2, #32
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	440a      	add	r2, r1
 8006144:	3204      	adds	r2, #4
 8006146:	6812      	ldr	r2, [r2, #0]
 8006148:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].angular_rate_z_mdps, &Msg->Data[msg_offset + 36], 4);
 800614a:	4b4c      	ldr	r3, [pc, #304]	; (800627c <HandleMSG+0x670>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2234      	movs	r2, #52	; 0x34
 8006150:	fb02 f303 	mul.w	r3, r2, r3
 8006154:	3320      	adds	r3, #32
 8006156:	4a4a      	ldr	r2, [pc, #296]	; (8006280 <HandleMSG+0x674>)
 8006158:	4413      	add	r3, r2
 800615a:	3304      	adds	r3, #4
 800615c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800615e:	3224      	adds	r2, #36	; 0x24
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	440a      	add	r2, r1
 8006164:	3204      	adds	r2, #4
 8006166:	6812      	ldr	r2, [r2, #0]
 8006168:	601a      	str	r2, [r3, #0]

        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_x_mgauss, &Msg->Data[msg_offset + 40], 4);
 800616a:	4b44      	ldr	r3, [pc, #272]	; (800627c <HandleMSG+0x670>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2234      	movs	r2, #52	; 0x34
 8006170:	fb02 f303 	mul.w	r3, r2, r3
 8006174:	3328      	adds	r3, #40	; 0x28
 8006176:	4a42      	ldr	r2, [pc, #264]	; (8006280 <HandleMSG+0x674>)
 8006178:	4413      	add	r3, r2
 800617a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800617c:	3228      	adds	r2, #40	; 0x28
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	440a      	add	r2, r1
 8006182:	3204      	adds	r2, #4
 8006184:	6812      	ldr	r2, [r2, #0]
 8006186:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_y_mgauss, &Msg->Data[msg_offset + 44], 4);
 8006188:	4b3c      	ldr	r3, [pc, #240]	; (800627c <HandleMSG+0x670>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2234      	movs	r2, #52	; 0x34
 800618e:	fb02 f303 	mul.w	r3, r2, r3
 8006192:	3328      	adds	r3, #40	; 0x28
 8006194:	4a3a      	ldr	r2, [pc, #232]	; (8006280 <HandleMSG+0x674>)
 8006196:	4413      	add	r3, r2
 8006198:	3304      	adds	r3, #4
 800619a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800619c:	322c      	adds	r2, #44	; 0x2c
 800619e:	6879      	ldr	r1, [r7, #4]
 80061a0:	440a      	add	r2, r1
 80061a2:	3204      	adds	r2, #4
 80061a4:	6812      	ldr	r2, [r2, #0]
 80061a6:	601a      	str	r2, [r3, #0]
        memcpy(&OfflineData[OfflineDataWriteIndex].magnetic_field_z_mgauss, &Msg->Data[msg_offset + 48], 4);
 80061a8:	4b34      	ldr	r3, [pc, #208]	; (800627c <HandleMSG+0x670>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2234      	movs	r2, #52	; 0x34
 80061ae:	fb02 f303 	mul.w	r3, r2, r3
 80061b2:	3330      	adds	r3, #48	; 0x30
 80061b4:	4a32      	ldr	r2, [pc, #200]	; (8006280 <HandleMSG+0x674>)
 80061b6:	4413      	add	r3, r2
 80061b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80061ba:	3230      	adds	r2, #48	; 0x30
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	440a      	add	r2, r1
 80061c0:	3204      	adds	r2, #4
 80061c2:	6812      	ldr	r2, [r2, #0]
 80061c4:	601a      	str	r2, [r3, #0]

        msg_offset += 52;
 80061c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061c8:	3334      	adds	r3, #52	; 0x34
 80061ca:	657b      	str	r3, [r7, #84]	; 0x54

        OfflineDataCount++;
 80061cc:	4b2d      	ldr	r3, [pc, #180]	; (8006284 <HandleMSG+0x678>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	3301      	adds	r3, #1
 80061d2:	4a2c      	ldr	r2, [pc, #176]	; (8006284 <HandleMSG+0x678>)
 80061d4:	6013      	str	r3, [r2, #0]
        if (OfflineDataCount > OFFLINE_DATA_SIZE)
 80061d6:	4b2b      	ldr	r3, [pc, #172]	; (8006284 <HandleMSG+0x678>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	2b08      	cmp	r3, #8
 80061dc:	dd02      	ble.n	80061e4 <HandleMSG+0x5d8>
        {
          OfflineDataCount = OFFLINE_DATA_SIZE;
 80061de:	4b29      	ldr	r3, [pc, #164]	; (8006284 <HandleMSG+0x678>)
 80061e0:	2208      	movs	r2, #8
 80061e2:	601a      	str	r2, [r3, #0]
        }

        OfflineDataWriteIndex++;
 80061e4:	4b25      	ldr	r3, [pc, #148]	; (800627c <HandleMSG+0x670>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	3301      	adds	r3, #1
 80061ea:	4a24      	ldr	r2, [pc, #144]	; (800627c <HandleMSG+0x670>)
 80061ec:	6013      	str	r3, [r2, #0]
        if (OfflineDataWriteIndex >= OFFLINE_DATA_SIZE)
 80061ee:	4b23      	ldr	r3, [pc, #140]	; (800627c <HandleMSG+0x670>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2b07      	cmp	r3, #7
 80061f4:	dd02      	ble.n	80061fc <HandleMSG+0x5f0>
        {
          OfflineDataWriteIndex = 0;
 80061f6:	4b21      	ldr	r3, [pc, #132]	; (800627c <HandleMSG+0x670>)
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
      for (i = 0; i < msg_count; i++)
 80061fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061fe:	3301      	adds	r3, #1
 8006200:	65bb      	str	r3, [r7, #88]	; 0x58
 8006202:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006204:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006206:	429a      	cmp	r2, r3
 8006208:	f4ff aeea 	bcc.w	8005fe0 <HandleMSG+0x3d4>
        }
      }

      SensorReadRequest = 1;
 800620c:	4b1e      	ldr	r3, [pc, #120]	; (8006288 <HandleMSG+0x67c>)
 800620e:	2201      	movs	r2, #1
 8006210:	701a      	strb	r2, [r3, #0]

      /* Mark Msg as read */
      BUILD_REPLY_HEADER(Msg);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f7ff fcc9 	bl	8005baa <BUILD_REPLY_HEADER>
      Msg->Len = 3;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2203      	movs	r2, #3
 800621c:	601a      	str	r2, [r3, #0]
      break;
 800621e:	e05a      	b.n	80062d6 <HandleMSG+0x6ca>

    case CMD_Use_Offline_Data:
      if (Msg->Len < 4U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b03      	cmp	r3, #3
 8006226:	d801      	bhi.n	800622c <HandleMSG+0x620>
      {
        return 0;
 8006228:	2300      	movs	r3, #0
 800622a:	e055      	b.n	80062d8 <HandleMSG+0x6cc>
      }

      if (Msg->Data[3] == 1U)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	79db      	ldrb	r3, [r3, #7]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d10e      	bne.n	8006252 <HandleMSG+0x646>
      {
        UseOfflineData = 1U;
 8006234:	4b15      	ldr	r3, [pc, #84]	; (800628c <HandleMSG+0x680>)
 8006236:	2201      	movs	r2, #1
 8006238:	701a      	strb	r2, [r3, #0]
        sensors_enabled_prev = SensorsEnabled;
 800623a:	4b15      	ldr	r3, [pc, #84]	; (8006290 <HandleMSG+0x684>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a15      	ldr	r2, [pc, #84]	; (8006294 <HandleMSG+0x688>)
 8006240:	6013      	str	r3, [r2, #0]
        SensorsEnabled = 0xFFFFFFFFU;
 8006242:	4b13      	ldr	r3, [pc, #76]	; (8006290 <HandleMSG+0x684>)
 8006244:	f04f 32ff 	mov.w	r2, #4294967295
 8006248:	601a      	str	r2, [r3, #0]
        (void)HAL_TIM_Base_Stop_IT(&BSP_IP_TIM_Handle);
 800624a:	4813      	ldr	r0, [pc, #76]	; (8006298 <HandleMSG+0x68c>)
 800624c:	f7fd fa16 	bl	800367c <HAL_TIM_Base_Stop_IT>
 8006250:	e006      	b.n	8006260 <HandleMSG+0x654>
      }
      else
      {
        UseOfflineData = 0U;
 8006252:	4b0e      	ldr	r3, [pc, #56]	; (800628c <HandleMSG+0x680>)
 8006254:	2200      	movs	r2, #0
 8006256:	701a      	strb	r2, [r3, #0]
        SensorsEnabled = sensors_enabled_prev;
 8006258:	4b0e      	ldr	r3, [pc, #56]	; (8006294 <HandleMSG+0x688>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a0c      	ldr	r2, [pc, #48]	; (8006290 <HandleMSG+0x684>)
 800625e:	6013      	str	r3, [r2, #0]
      }

      BUILD_REPLY_HEADER(Msg);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff fca2 	bl	8005baa <BUILD_REPLY_HEADER>
      UART_SendMsg(Msg);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7ff f9ac 	bl	80055c4 <UART_SendMsg>
      break;
 800626c:	e033      	b.n	80062d6 <HandleMSG+0x6ca>

    case CMD_Get_App_Info:
      if (Msg->Len < 3U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d812      	bhi.n	800629c <HandleMSG+0x690>
      {
        return 0;
 8006276:	2300      	movs	r3, #0
 8006278:	e02e      	b.n	80062d8 <HandleMSG+0x6cc>
 800627a:	bf00      	nop
 800627c:	200003fc 	.word	0x200003fc
 8006280:	20000258 	.word	0x20000258
 8006284:	20000400 	.word	0x20000400
 8006288:	20000254 	.word	0x20000254
 800628c:	20000255 	.word	0x20000255
 8006290:	20000228 	.word	0x20000228
 8006294:	20000a2c 	.word	0x20000a2c
 8006298:	2000018c 	.word	0x2000018c
      }

      Serialize_s32(&Msg->Data[3], AlgoFreq, 4);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3307      	adds	r3, #7
 80062a0:	4a0f      	ldr	r2, [pc, #60]	; (80062e0 <HandleMSG+0x6d4>)
 80062a2:	6812      	ldr	r2, [r2, #0]
 80062a4:	4611      	mov	r1, r2
 80062a6:	2204      	movs	r2, #4
 80062a8:	4618      	mov	r0, r3
 80062aa:	f000 fa07 	bl	80066bc <Serialize_s32>
      Serialize_s32(&Msg->Data[7], REQUIRED_DATA, 1);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	330b      	adds	r3, #11
 80062b2:	2201      	movs	r2, #1
 80062b4:	2102      	movs	r1, #2
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fa00 	bl	80066bc <Serialize_s32>

      BUILD_REPLY_HEADER(Msg);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f7ff fc74 	bl	8005baa <BUILD_REPLY_HEADER>
      Msg->Len = 3 + 5;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2208      	movs	r2, #8
 80062c6:	601a      	str	r2, [r3, #0]
      UART_SendMsg(Msg);
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7ff f97b 	bl	80055c4 <UART_SendMsg>
      break;
 80062ce:	e002      	b.n	80062d6 <HandleMSG+0x6ca>

    default:
      ret = 0;
 80062d0:	2300      	movs	r3, #0
 80062d2:	65fb      	str	r3, [r7, #92]	; 0x5c
      break;
 80062d4:	bf00      	nop
  }

  return ret;
 80062d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3760      	adds	r7, #96	; 0x60
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	20000014 	.word	0x20000014

080062e4 <RTC_DateRegulate>:
  * @param  d the day value to be set
  * @param  dw the day-week value to be set
  * @retval None
  */
void RTC_DateRegulate(uint8_t y, uint8_t m, uint8_t d, uint8_t dw)
{
 80062e4:	b590      	push	{r4, r7, lr}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	4604      	mov	r4, r0
 80062ec:	4608      	mov	r0, r1
 80062ee:	4611      	mov	r1, r2
 80062f0:	461a      	mov	r2, r3
 80062f2:	4623      	mov	r3, r4
 80062f4:	71fb      	strb	r3, [r7, #7]
 80062f6:	4603      	mov	r3, r0
 80062f8:	71bb      	strb	r3, [r7, #6]
 80062fa:	460b      	mov	r3, r1
 80062fc:	717b      	strb	r3, [r7, #5]
 80062fe:	4613      	mov	r3, r2
 8006300:	713b      	strb	r3, [r7, #4]
  RTC_DateTypeDef sdatestructure;

  sdatestructure.Year    = y;
 8006302:	79fb      	ldrb	r3, [r7, #7]
 8006304:	73fb      	strb	r3, [r7, #15]
  sdatestructure.Month   = m;
 8006306:	79bb      	ldrb	r3, [r7, #6]
 8006308:	737b      	strb	r3, [r7, #13]
  sdatestructure.Date    = d;
 800630a:	797b      	ldrb	r3, [r7, #5]
 800630c:	73bb      	strb	r3, [r7, #14]
  sdatestructure.WeekDay = dw;
 800630e:	793b      	ldrb	r3, [r7, #4]
 8006310:	733b      	strb	r3, [r7, #12]

  if (HAL_RTC_SetDate(&hrtc, &sdatestructure, FORMAT_BIN) != HAL_OK)
 8006312:	f107 030c 	add.w	r3, r7, #12
 8006316:	2200      	movs	r2, #0
 8006318:	4619      	mov	r1, r3
 800631a:	4806      	ldr	r0, [pc, #24]	; (8006334 <RTC_DateRegulate+0x50>)
 800631c:	f7fc ff6b 	bl	80031f6 <HAL_RTC_SetDate>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <RTC_DateRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 8006326:	f7fa feaf 	bl	8001088 <Error_Handler>
  }
}
 800632a:	bf00      	nop
 800632c:	3714      	adds	r7, #20
 800632e:	46bd      	mov	sp, r7
 8006330:	bd90      	pop	{r4, r7, pc}
 8006332:	bf00      	nop
 8006334:	200000dc 	.word	0x200000dc

08006338 <RTC_TimeRegulate>:
  * @param  mm the minute value to be set
  * @param  ss the second value to be set
  * @retval None
  */
void RTC_TimeRegulate(uint8_t hh, uint8_t mm, uint8_t ss)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b088      	sub	sp, #32
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	71fb      	strb	r3, [r7, #7]
 8006342:	460b      	mov	r3, r1
 8006344:	71bb      	strb	r3, [r7, #6]
 8006346:	4613      	mov	r3, r2
 8006348:	717b      	strb	r3, [r7, #5]
  RTC_TimeTypeDef stimestructure;

  stimestructure.Hours          = hh;
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	733b      	strb	r3, [r7, #12]
  stimestructure.Minutes        = mm;
 800634e:	79bb      	ldrb	r3, [r7, #6]
 8006350:	737b      	strb	r3, [r7, #13]
  stimestructure.Seconds        = ss;
 8006352:	797b      	ldrb	r3, [r7, #5]
 8006354:	73bb      	strb	r3, [r7, #14]
  stimestructure.SubSeconds     = 0;
 8006356:	2300      	movs	r3, #0
 8006358:	613b      	str	r3, [r7, #16]
  stimestructure.TimeFormat     = RTC_HOURFORMAT12_AM;
 800635a:	2300      	movs	r3, #0
 800635c:	73fb      	strb	r3, [r7, #15]
  stimestructure.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800635e:	2300      	movs	r3, #0
 8006360:	61bb      	str	r3, [r7, #24]
  stimestructure.StoreOperation = RTC_STOREOPERATION_RESET;
 8006362:	2300      	movs	r3, #0
 8006364:	61fb      	str	r3, [r7, #28]

  if (HAL_RTC_SetTime(&hrtc, &stimestructure, FORMAT_BIN) != HAL_OK)
 8006366:	f107 030c 	add.w	r3, r7, #12
 800636a:	2200      	movs	r2, #0
 800636c:	4619      	mov	r1, r3
 800636e:	4806      	ldr	r0, [pc, #24]	; (8006388 <RTC_TimeRegulate+0x50>)
 8006370:	f7fc fe49 	bl	8003006 <HAL_RTC_SetTime>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <RTC_TimeRegulate+0x46>
  {
    /* Initialization Error */
    Error_Handler();
 800637a:	f7fa fe85 	bl	8001088 <Error_Handler>
  }
}
 800637e:	bf00      	nop
 8006380:	3720      	adds	r7, #32
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	200000dc 	.word	0x200000dc

0800638c <Get_PresentationString>:
  * @param  PresentationString the Presentation string
  * @param  Length the length of Presentation string
  * @retval None
  */
void Get_PresentationString(char *PresentationString, uint32_t *Length)
{
 800638c:	b5b0      	push	{r4, r5, r7, lr}
 800638e:	b0a0      	sub	sp, #128	; 0x80
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
 8006394:	6039      	str	r1, [r7, #0]
  const uint8_t string_pointer_shift = strlen("ST InfraredXX v"); /* Shift string pointer by this amount */
 8006396:	230f      	movs	r3, #15
 8006398:	f887 307b 	strb.w	r3, [r7, #123]	; 0x7b
  char *lib_version_num;
  char lib_version_string[64];
  int lib_version_len = 0;
 800639c:	2300      	movs	r3, #0
 800639e:	637b      	str	r3, [r7, #52]	; 0x34
  const char ps[] = {"MEMS shield demo,29,"FW_VERSION",%s,"BOARD_NAME};
 80063a0:	4b19      	ldr	r3, [pc, #100]	; (8006408 <Get_PresentationString+0x7c>)
 80063a2:	f107 040c 	add.w	r4, r7, #12
 80063a6:	461d      	mov	r5, r3
 80063a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063b0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80063b4:	6020      	str	r0, [r4, #0]
 80063b6:	3404      	adds	r4, #4
 80063b8:	7021      	strb	r1, [r4, #0]

  InfraredPD_manager_get_version(lib_version_string, &lib_version_len);
 80063ba:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80063be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80063c2:	4611      	mov	r1, r2
 80063c4:	4618      	mov	r0, r3
 80063c6:	f000 f86f 	bl	80064a8 <InfraredPD_manager_get_version>

  /* Shorten library version string (e.g.: ST MotionXX v1.0.0 resp. ST MotionXXX v1.0.0 resp. ST InfraredXX v1.0.0 resp. ST EnvXX v1.0.0) to contain version number only (e.g.: 1.0.0) */
  if (lib_version_len > string_pointer_shift)
 80063ca:	f897 207b 	ldrb.w	r2, [r7, #123]	; 0x7b
 80063ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063d0:	429a      	cmp	r2, r3
 80063d2:	da06      	bge.n	80063e2 <Get_PresentationString+0x56>
  {
    lib_version_num = lib_version_string + string_pointer_shift;
 80063d4:	f897 307b 	ldrb.w	r3, [r7, #123]	; 0x7b
 80063d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80063dc:	4413      	add	r3, r2
 80063de:	67fb      	str	r3, [r7, #124]	; 0x7c
 80063e0:	e002      	b.n	80063e8 <Get_PresentationString+0x5c>
  }
  else
  {
    lib_version_num = lib_version_string;
 80063e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80063e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  }

  *Length = snprintf(PresentationString, 64, ps, lib_version_num);
 80063e8:	f107 020c 	add.w	r2, r7, #12
 80063ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80063ee:	2140      	movs	r1, #64	; 0x40
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f001 f85f 	bl	80074b4 <sniprintf>
 80063f6:	4603      	mov	r3, r0
 80063f8:	461a      	mov	r2, r3
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	601a      	str	r2, [r3, #0]
}
 80063fe:	bf00      	nop
 8006400:	3780      	adds	r7, #128	; 0x80
 8006402:	46bd      	mov	sp, r7
 8006404:	bdb0      	pop	{r4, r5, r7, pc}
 8006406:	bf00      	nop
 8006408:	08007fd0 	.word	0x08007fd0

0800640c <InfraredPD_manager_init>:
  * @brief  Initialize the InfraredPD engine
  * @param  None
  * @retval None
  */
void InfraredPD_manager_init(void)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
  IPD_device_conf_t device_conf;
  IPD_algo_conf_t algo_conf;

  InfraredPD_Initialize(IPD_MCU_STM32);
 8006412:	2000      	movs	r0, #0
 8006414:	f000 f976 	bl	8006704 <InfraredPD_Initialize>

  device_conf.odr = Odr;
 8006418:	4b14      	ldr	r3, [pc, #80]	; (800646c <InfraredPD_manager_init+0x60>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	733b      	strb	r3, [r7, #12]
  device_conf.avg_tmos = AvgTmos;
 800641e:	4b14      	ldr	r3, [pc, #80]	; (8006470 <InfraredPD_manager_init+0x64>)
 8006420:	881b      	ldrh	r3, [r3, #0]
 8006422:	81fb      	strh	r3, [r7, #14]
  device_conf.avg_t = AvgT;
 8006424:	4b13      	ldr	r3, [pc, #76]	; (8006474 <InfraredPD_manager_init+0x68>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	743b      	strb	r3, [r7, #16]
  device_conf.gain_factor = GainFactor;
 800642a:	4b13      	ldr	r3, [pc, #76]	; (8006478 <InfraredPD_manager_init+0x6c>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	747b      	strb	r3, [r7, #17]
  device_conf.sens_data = Sensitivity;
 8006430:	4b12      	ldr	r3, [pc, #72]	; (800647c <InfraredPD_manager_init+0x70>)
 8006432:	881b      	ldrh	r3, [r3, #0]
 8006434:	827b      	strh	r3, [r7, #18]
  device_conf.transmittance = 1.0f; /* 1.0f if no optical system is used */
 8006436:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800643a:	617b      	str	r3, [r7, #20]

  IPD_Instance = InfraredPD_CreateInstance(&algo_conf);
 800643c:	1d3b      	adds	r3, r7, #4
 800643e:	4618      	mov	r0, r3
 8006440:	f000 f9fc 	bl	800683c <InfraredPD_CreateInstance>
 8006444:	4603      	mov	r3, r0
 8006446:	4a0e      	ldr	r2, [pc, #56]	; (8006480 <InfraredPD_manager_init+0x74>)
 8006448:	6013      	str	r3, [r2, #0]

  /* User can modify the algo_conf settings here */

  if (InfraredPD_Start(IPD_Instance, &device_conf, &algo_conf) != IPD_INIT_OK)
 800644a:	4b0d      	ldr	r3, [pc, #52]	; (8006480 <InfraredPD_manager_init+0x74>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	1d3a      	adds	r2, r7, #4
 8006450:	f107 010c 	add.w	r1, r7, #12
 8006454:	4618      	mov	r0, r3
 8006456:	f000 fa0b 	bl	8006870 <InfraredPD_Start>
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d000      	beq.n	8006462 <InfraredPD_manager_init+0x56>
  {
    for (;;)
 8006460:	e7fe      	b.n	8006460 <InfraredPD_manager_init+0x54>
    {
      /* The library was not correctly started */
    }
  }
}
 8006462:	bf00      	nop
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	20000404 	.word	0x20000404
 8006470:	20000406 	.word	0x20000406
 8006474:	20000408 	.word	0x20000408
 8006478:	20000409 	.word	0x20000409
 800647c:	2000040a 	.word	0x2000040a
 8006480:	20000a30 	.word	0x20000a30

08006484 <InfraredPD_manager_run>:
  * @param  data_in  Structure containing input data
  * @param  data_out Structure containing output data
  * @retval None
  */
void InfraredPD_manager_run(IPD_input_t *data_in, IPD_output_t *data_out)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b082      	sub	sp, #8
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  InfraredPD_Update(IPD_Instance, data_in, data_out);
 800648e:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <InfraredPD_manager_run+0x20>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fbde 	bl	8006c58 <InfraredPD_Update>
}
 800649c:	bf00      	nop
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	20000a30 	.word	0x20000a30

080064a8 <InfraredPD_manager_get_version>:
  * @param  version Library version string (must be array of 35 char)
  * @param  length  Library version string length
  * @retval None
  */
void InfraredPD_manager_get_version(char *version, int *length)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  *length = (int)InfraredPD_GetLibVersion(version);
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f000 ff18 	bl	80072e8 <InfraredPD_GetLibVersion>
 80064b8:	4603      	mov	r3, r0
 80064ba:	461a      	mov	r2, r3
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	601a      	str	r2, [r3, #0]
}
 80064c0:	bf00      	nop
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <ByteStuffCopyByte>:
  * @param  Dest destination
  * @param  Source source
  * @retval Total number of bytes processed
  */
int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	460b      	mov	r3, r1
 80064d2:	70fb      	strb	r3, [r7, #3]
  int ret = 2;
 80064d4:	2302      	movs	r3, #2
 80064d6:	60fb      	str	r3, [r7, #12]

  switch (Source)
 80064d8:	78fb      	ldrb	r3, [r7, #3]
 80064da:	2bf0      	cmp	r3, #240	; 0xf0
 80064dc:	d002      	beq.n	80064e4 <ByteStuffCopyByte+0x1c>
 80064de:	2bf1      	cmp	r3, #241	; 0xf1
 80064e0:	d008      	beq.n	80064f4 <ByteStuffCopyByte+0x2c>
 80064e2:	e00f      	b.n	8006504 <ByteStuffCopyByte+0x3c>
  {
    case TMsg_EOF:
      Dest[0] = TMsg_BS;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	22f1      	movs	r2, #241	; 0xf1
 80064e8:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS_EOF;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	3301      	adds	r3, #1
 80064ee:	22f2      	movs	r2, #242	; 0xf2
 80064f0:	701a      	strb	r2, [r3, #0]
      break;
 80064f2:	e00d      	b.n	8006510 <ByteStuffCopyByte+0x48>

    case TMsg_BS:
      Dest[0] = TMsg_BS;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	22f1      	movs	r2, #241	; 0xf1
 80064f8:	701a      	strb	r2, [r3, #0]
      Dest[1] = TMsg_BS;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	3301      	adds	r3, #1
 80064fe:	22f1      	movs	r2, #241	; 0xf1
 8006500:	701a      	strb	r2, [r3, #0]
      break;
 8006502:	e005      	b.n	8006510 <ByteStuffCopyByte+0x48>

    default:
      Dest[0] = Source;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	78fa      	ldrb	r2, [r7, #3]
 8006508:	701a      	strb	r2, [r3, #0]
      ret = 1;
 800650a:	2301      	movs	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
      break;
 800650e:	bf00      	nop
  }

  return ret;
 8006510:	68fb      	ldr	r3, [r7, #12]
}
 8006512:	4618      	mov	r0, r3
 8006514:	3714      	adds	r7, #20
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <ByteStuffCopy>:
  * @param  Dest destination
  * @param  Source source
  * @retval Total number of bytes processed
  */
int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b084      	sub	sp, #16
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
 8006526:	6039      	str	r1, [r7, #0]
  uint32_t i;
  int32_t count = 0;
 8006528:	2300      	movs	r3, #0
 800652a:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < Source->Len; i++)
 800652c:	2300      	movs	r3, #0
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	e011      	b.n	8006556 <ByteStuffCopy+0x38>
  {
    count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	687a      	ldr	r2, [r7, #4]
 8006536:	18d0      	adds	r0, r2, r3
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	4413      	add	r3, r2
 800653e:	3304      	adds	r3, #4
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	4619      	mov	r1, r3
 8006544:	f7ff ffc0 	bl	80064c8 <ByteStuffCopyByte>
 8006548:	4602      	mov	r2, r0
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	4413      	add	r3, r2
 800654e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Source->Len; i++)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	3301      	adds	r3, #1
 8006554:	60fb      	str	r3, [r7, #12]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	429a      	cmp	r2, r3
 800655e:	d3e8      	bcc.n	8006532 <ByteStuffCopy+0x14>
  }

  Dest[count] = TMsg_EOF;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	4413      	add	r3, r2
 8006566:	22f0      	movs	r2, #240	; 0xf0
 8006568:	701a      	strb	r2, [r3, #0]
  count++;
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	3301      	adds	r3, #1
 800656e:	60bb      	str	r3, [r7, #8]
  return count;
 8006570:	68bb      	ldr	r3, [r7, #8]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <ReverseByteStuffCopyByte2>:
  * @param  Source1 input data
  * @param  Dest the destination data
  * @retval Number of input bytes processed (1 or 2) or 0 for invalid sequence
  */
int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
{
 800657a:	b480      	push	{r7}
 800657c:	b083      	sub	sp, #12
 800657e:	af00      	add	r7, sp, #0
 8006580:	4603      	mov	r3, r0
 8006582:	603a      	str	r2, [r7, #0]
 8006584:	71fb      	strb	r3, [r7, #7]
 8006586:	460b      	mov	r3, r1
 8006588:	71bb      	strb	r3, [r7, #6]
  if (Source0 == (uint8_t)TMsg_BS)
 800658a:	79fb      	ldrb	r3, [r7, #7]
 800658c:	2bf1      	cmp	r3, #241	; 0xf1
 800658e:	d111      	bne.n	80065b4 <ReverseByteStuffCopyByte2+0x3a>
  {
    if (Source1 == (uint8_t)TMsg_BS)
 8006590:	79bb      	ldrb	r3, [r7, #6]
 8006592:	2bf1      	cmp	r3, #241	; 0xf1
 8006594:	d104      	bne.n	80065a0 <ReverseByteStuffCopyByte2+0x26>
    {
      *Dest = TMsg_BS;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	22f1      	movs	r2, #241	; 0xf1
 800659a:	701a      	strb	r2, [r3, #0]
      return 2;
 800659c:	2302      	movs	r3, #2
 800659e:	e00d      	b.n	80065bc <ReverseByteStuffCopyByte2+0x42>
    }

    if (Source1 == (uint8_t)TMsg_BS_EOF)
 80065a0:	79bb      	ldrb	r3, [r7, #6]
 80065a2:	2bf2      	cmp	r3, #242	; 0xf2
 80065a4:	d104      	bne.n	80065b0 <ReverseByteStuffCopyByte2+0x36>
    {
      *Dest = TMsg_EOF;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	22f0      	movs	r2, #240	; 0xf0
 80065aa:	701a      	strb	r2, [r3, #0]
      return 2;
 80065ac:	2302      	movs	r3, #2
 80065ae:	e005      	b.n	80065bc <ReverseByteStuffCopyByte2+0x42>
    }

    return 0; // invalid sequence
 80065b0:	2300      	movs	r3, #0
 80065b2:	e003      	b.n	80065bc <ReverseByteStuffCopyByte2+0x42>
  }
  else
  {
    *Dest = Source0;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	79fa      	ldrb	r2, [r7, #7]
 80065b8:	701a      	strb	r2, [r3, #0]
    return 1;
 80065ba:	2301      	movs	r3, #1
  }
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <CHK_ComputeAndAdd>:
  * @brief  Compute and add checksum
  * @param  Msg pointer to the message
  * @retval None
  */
void CHK_ComputeAndAdd(TMsg *Msg)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 80065d4:	2300      	movs	r3, #0
 80065d6:	60bb      	str	r3, [r7, #8]
 80065d8:	e00a      	b.n	80065f0 <CHK_ComputeAndAdd+0x28>
  {
    chk -= Msg->Data[i];
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4413      	add	r3, r2
 80065e0:	3304      	adds	r3, #4
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	7bfa      	ldrb	r2, [r7, #15]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	3301      	adds	r3, #1
 80065ee:	60bb      	str	r3, [r7, #8]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d3ef      	bcc.n	80065da <CHK_ComputeAndAdd+0x12>
  }

  Msg->Data[i] = chk;
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4413      	add	r3, r2
 8006600:	3304      	adds	r3, #4
 8006602:	7bfa      	ldrb	r2, [r7, #15]
 8006604:	701a      	strb	r2, [r3, #0]
  Msg->Len++;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	601a      	str	r2, [r3, #0]
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr

0800661c <CHK_CheckAndRemove>:
  * @brief  Compute and remove checksum
  * @param  Msg pointer to the message
  * @retval A number different from 0 if the operation succeeds, 0 if an error occurs
  */
int CHK_CheckAndRemove(TMsg *Msg)
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint8_t chk = 0;
 8006624:	2300      	movs	r3, #0
 8006626:	73fb      	strb	r3, [r7, #15]
  uint32_t i;

  for (i = 0; i < Msg->Len; i++)
 8006628:	2300      	movs	r3, #0
 800662a:	60bb      	str	r3, [r7, #8]
 800662c:	e00a      	b.n	8006644 <CHK_CheckAndRemove+0x28>
  {
    chk += Msg->Data[i];
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4413      	add	r3, r2
 8006634:	3304      	adds	r3, #4
 8006636:	781a      	ldrb	r2, [r3, #0]
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	4413      	add	r3, r2
 800663c:	73fb      	strb	r3, [r7, #15]
  for (i = 0; i < Msg->Len; i++)
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	3301      	adds	r3, #1
 8006642:	60bb      	str	r3, [r7, #8]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68ba      	ldr	r2, [r7, #8]
 800664a:	429a      	cmp	r2, r3
 800664c:	d3ef      	bcc.n	800662e <CHK_CheckAndRemove+0x12>
  }

  Msg->Len--;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	1e5a      	subs	r2, r3, #1
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	601a      	str	r2, [r3, #0]
  return (int32_t)(chk == 0U);
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	2b00      	cmp	r3, #0
 800665c:	bf0c      	ite	eq
 800665e:	2301      	moveq	r3, #1
 8006660:	2300      	movne	r3, #0
 8006662:	b2db      	uxtb	r3, r3
}
 8006664:	4618      	mov	r0, r3
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <Deserialize>:
  * @param  Source source
  * @param  Len number of bytes
  * @retval Rebuild unsigned int variable
  */
uint32_t Deserialize(uint8_t *Source, uint32_t Len)
{
 8006670:	b480      	push	{r7}
 8006672:	b085      	sub	sp, #20
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t app;

  app = Source[--Len];
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	3b01      	subs	r3, #1
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	4413      	add	r3, r2
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 800668a:	e00d      	b.n	80066a8 <Deserialize+0x38>
  {
    app <<= 8;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	021b      	lsls	r3, r3, #8
 8006690:	60fb      	str	r3, [r7, #12]
    app += Source[--Len];
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	3b01      	subs	r3, #1
 8006696:	603b      	str	r3, [r7, #0]
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	4413      	add	r3, r2
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	4413      	add	r3, r2
 80066a6:	60fb      	str	r3, [r7, #12]
  while (Len > 0U)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1ee      	bne.n	800668c <Deserialize+0x1c>
  }

  return app;
 80066ae:	68fb      	ldr	r3, [r7, #12]
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3714      	adds	r7, #20
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <Serialize_s32>:
  * @param  Source source
  * @param  Len number of bytes
  * @retval None
  */
void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
{
 80066bc:	b480      	push	{r7}
 80066be:	b087      	sub	sp, #28
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
  uint32_t i;
  uint32_t source_uint32;

  for (i = 0; i < Len; i++)
 80066c8:	2300      	movs	r3, #0
 80066ca:	617b      	str	r3, [r7, #20]
 80066cc:	e00f      	b.n	80066ee <Serialize_s32+0x32>
  {
    source_uint32 = (uint32_t)Source;
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	613b      	str	r3, [r7, #16]
    Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	4413      	add	r3, r2
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	b2d2      	uxtb	r2, r2
 80066dc:	701a      	strb	r2, [r3, #0]
    source_uint32 >>= 8;
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	0a1b      	lsrs	r3, r3, #8
 80066e2:	613b      	str	r3, [r7, #16]
    Source = (int32_t)source_uint32;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < Len; i++)
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	3301      	adds	r3, #1
 80066ec:	617b      	str	r3, [r7, #20]
 80066ee:	697a      	ldr	r2, [r7, #20]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d3eb      	bcc.n	80066ce <Serialize_s32+0x12>
  }
}
 80066f6:	bf00      	nop
 80066f8:	bf00      	nop
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr

08006704 <InfraredPD_Initialize>:
 8006704:	2802      	cmp	r0, #2
 8006706:	d825      	bhi.n	8006754 <InfraredPD_Initialize+0x50>
 8006708:	2800      	cmp	r0, #0
 800670a:	d130      	bne.n	800676e <InfraredPD_Initialize+0x6a>
 800670c:	4a3e      	ldr	r2, [pc, #248]	; (8006808 <InfraredPD_Initialize+0x104>)
 800670e:	6813      	ldr	r3, [r2, #0]
 8006710:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
 8006714:	f023 0301 	bic.w	r3, r3, #1
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 800671e:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8006722:	f24c 2240 	movw	r2, #49728	; 0xc240
 8006726:	400b      	ands	r3, r1
 8006728:	4293      	cmp	r3, r2
 800672a:	d02e      	beq.n	800678a <InfraredPD_Initialize+0x86>
 800672c:	f8d0 3d00 	ldr.w	r3, [r0, #3328]	; 0xd00
 8006730:	f24c 2270 	movw	r2, #49776	; 0xc270
 8006734:	400b      	ands	r3, r1
 8006736:	4293      	cmp	r3, r2
 8006738:	d027      	beq.n	800678a <InfraredPD_Initialize+0x86>
 800673a:	4a34      	ldr	r2, [pc, #208]	; (800680c <InfraredPD_Initialize+0x108>)
 800673c:	2301      	movs	r3, #1
 800673e:	6093      	str	r3, [r2, #8]
 8006740:	6893      	ldr	r3, [r2, #8]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1fc      	bne.n	8006740 <InfraredPD_Initialize+0x3c>
 8006746:	4b32      	ldr	r3, [pc, #200]	; (8006810 <InfraredPD_Initialize+0x10c>)
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	6812      	ldr	r2, [r2, #0]
 800674c:	4b31      	ldr	r3, [pc, #196]	; (8006814 <InfraredPD_Initialize+0x110>)
 800674e:	429a      	cmp	r2, r3
 8006750:	d016      	beq.n	8006780 <InfraredPD_Initialize+0x7c>
 8006752:	e7fe      	b.n	8006752 <InfraredPD_Initialize+0x4e>
 8006754:	2803      	cmp	r0, #3
 8006756:	d1d9      	bne.n	800670c <InfraredPD_Initialize+0x8>
 8006758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800675c:	4a2e      	ldr	r2, [pc, #184]	; (8006818 <InfraredPD_Initialize+0x114>)
 800675e:	6859      	ldr	r1, [r3, #4]
 8006760:	4291      	cmp	r1, r2
 8006762:	d00d      	beq.n	8006780 <InfraredPD_Initialize+0x7c>
 8006764:	685a      	ldr	r2, [r3, #4]
 8006766:	4b2d      	ldr	r3, [pc, #180]	; (800681c <InfraredPD_Initialize+0x118>)
 8006768:	429a      	cmp	r2, r3
 800676a:	d009      	beq.n	8006780 <InfraredPD_Initialize+0x7c>
 800676c:	e7fe      	b.n	800676c <InfraredPD_Initialize+0x68>
 800676e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006772:	4a2b      	ldr	r2, [pc, #172]	; (8006820 <InfraredPD_Initialize+0x11c>)
 8006774:	f8d3 37f8 	ldr.w	r3, [r3, #2040]	; 0x7f8
 8006778:	0c1b      	lsrs	r3, r3, #16
 800677a:	041b      	lsls	r3, r3, #16
 800677c:	4293      	cmp	r3, r2
 800677e:	d103      	bne.n	8006788 <InfraredPD_Initialize+0x84>
 8006780:	4b28      	ldr	r3, [pc, #160]	; (8006824 <InfraredPD_Initialize+0x120>)
 8006782:	2201      	movs	r2, #1
 8006784:	701a      	strb	r2, [r3, #0]
 8006786:	4770      	bx	lr
 8006788:	e7fe      	b.n	8006788 <InfraredPD_Initialize+0x84>
 800678a:	4b27      	ldr	r3, [pc, #156]	; (8006828 <InfraredPD_Initialize+0x124>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1d3      	bne.n	800673a <InfraredPD_Initialize+0x36>
 8006792:	4a26      	ldr	r2, [pc, #152]	; (800682c <InfraredPD_Initialize+0x128>)
 8006794:	6813      	ldr	r3, [r2, #0]
 8006796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800679a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800679e:	d021      	beq.n	80067e4 <InfraredPD_Initialize+0xe0>
 80067a0:	6813      	ldr	r3, [r2, #0]
 80067a2:	f240 4183 	movw	r1, #1155	; 0x483
 80067a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067aa:	428b      	cmp	r3, r1
 80067ac:	d01a      	beq.n	80067e4 <InfraredPD_Initialize+0xe0>
 80067ae:	6813      	ldr	r3, [r2, #0]
 80067b0:	f240 4285 	movw	r2, #1157	; 0x485
 80067b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d013      	beq.n	80067e4 <InfraredPD_Initialize+0xe0>
 80067bc:	4b1c      	ldr	r3, [pc, #112]	; (8006830 <InfraredPD_Initialize+0x12c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067c4:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80067c8:	d1b7      	bne.n	800673a <InfraredPD_Initialize+0x36>
 80067ca:	4a1a      	ldr	r2, [pc, #104]	; (8006834 <InfraredPD_Initialize+0x130>)
 80067cc:	2301      	movs	r3, #1
 80067ce:	6093      	str	r3, [r2, #8]
 80067d0:	6893      	ldr	r3, [r2, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d1fc      	bne.n	80067d0 <InfraredPD_Initialize+0xcc>
 80067d6:	4b0e      	ldr	r3, [pc, #56]	; (8006810 <InfraredPD_Initialize+0x10c>)
 80067d8:	6013      	str	r3, [r2, #0]
 80067da:	6812      	ldr	r2, [r2, #0]
 80067dc:	4b0d      	ldr	r3, [pc, #52]	; (8006814 <InfraredPD_Initialize+0x110>)
 80067de:	429a      	cmp	r2, r3
 80067e0:	d0ce      	beq.n	8006780 <InfraredPD_Initialize+0x7c>
 80067e2:	e7b6      	b.n	8006752 <InfraredPD_Initialize+0x4e>
 80067e4:	4a14      	ldr	r2, [pc, #80]	; (8006838 <InfraredPD_Initialize+0x134>)
 80067e6:	2301      	movs	r3, #1
 80067e8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80067ec:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1fb      	bne.n	80067ec <InfraredPD_Initialize+0xe8>
 80067f4:	4b06      	ldr	r3, [pc, #24]	; (8006810 <InfraredPD_Initialize+0x10c>)
 80067f6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80067fa:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80067fe:	4b05      	ldr	r3, [pc, #20]	; (8006814 <InfraredPD_Initialize+0x110>)
 8006800:	429a      	cmp	r2, r3
 8006802:	d0bd      	beq.n	8006780 <InfraredPD_Initialize+0x7c>
 8006804:	e7a5      	b.n	8006752 <InfraredPD_Initialize+0x4e>
 8006806:	bf00      	nop
 8006808:	e0002000 	.word	0xe0002000
 800680c:	40023000 	.word	0x40023000
 8006810:	f407a5c2 	.word	0xf407a5c2
 8006814:	b5e8b5cd 	.word	0xb5e8b5cd
 8006818:	0201e041 	.word	0x0201e041
 800681c:	02028041 	.word	0x02028041
 8006820:	aa550000 	.word	0xaa550000
 8006824:	20000088 	.word	0x20000088
 8006828:	e0042000 	.word	0xe0042000
 800682c:	5c001000 	.word	0x5c001000
 8006830:	50081000 	.word	0x50081000
 8006834:	4c004000 	.word	0x4c004000
 8006838:	58024000 	.word	0x58024000

0800683c <InfraredPD_CreateInstance>:
 800683c:	4b0a      	ldr	r3, [pc, #40]	; (8006868 <InfraredPD_CreateInstance+0x2c>)
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	b183      	cbz	r3, 8006864 <InfraredPD_CreateInstance+0x28>
 8006842:	b510      	push	{r4, lr}
 8006844:	4604      	mov	r4, r0
 8006846:	20c0      	movs	r0, #192	; 0xc0
 8006848:	f000 fd78 	bl	800733c <malloc>
 800684c:	4603      	mov	r3, r0
 800684e:	b138      	cbz	r0, 8006860 <InfraredPD_CreateInstance+0x24>
 8006850:	4a06      	ldr	r2, [pc, #24]	; (800686c <InfraredPD_CreateInstance+0x30>)
 8006852:	ca03      	ldmia	r2!, {r0, r1}
 8006854:	f04f 0c00 	mov.w	ip, #0
 8006858:	f883 c0a8 	strb.w	ip, [r3, #168]	; 0xa8
 800685c:	6020      	str	r0, [r4, #0]
 800685e:	6061      	str	r1, [r4, #4]
 8006860:	4618      	mov	r0, r3
 8006862:	bd10      	pop	{r4, pc}
 8006864:	4618      	mov	r0, r3
 8006866:	4770      	bx	lr
 8006868:	20000088 	.word	0x20000088
 800686c:	08007ff8 	.word	0x08007ff8

08006870 <InfraredPD_Start>:
 8006870:	4bbc      	ldr	r3, [pc, #752]	; (8006b64 <InfraredPD_Start+0x2f4>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	b90b      	cbnz	r3, 800687a <InfraredPD_Start+0xa>
 8006876:	4618      	mov	r0, r3
 8006878:	4770      	bx	lr
 800687a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800687e:	ed2d 8b04 	vpush	{d8-d9}
 8006882:	4616      	mov	r6, r2
 8006884:	780a      	ldrb	r2, [r1, #0]
 8006886:	1e53      	subs	r3, r2, #1
 8006888:	2b01      	cmp	r3, #1
 800688a:	4604      	mov	r4, r0
 800688c:	460d      	mov	r5, r1
 800688e:	d917      	bls.n	80068c0 <InfraredPD_Start+0x50>
 8006890:	2a0f      	cmp	r2, #15
 8006892:	d846      	bhi.n	8006922 <InfraredPD_Start+0xb2>
 8006894:	f248 1310 	movw	r3, #33040	; 0x8110
 8006898:	40d3      	lsrs	r3, r2
 800689a:	07db      	lsls	r3, r3, #31
 800689c:	f140 81aa 	bpl.w	8006bf4 <InfraredPD_Start+0x384>
 80068a0:	884b      	ldrh	r3, [r1, #2]
 80068a2:	2b80      	cmp	r3, #128	; 0x80
 80068a4:	f000 81ae 	beq.w	8006c04 <InfraredPD_Start+0x394>
 80068a8:	d90f      	bls.n	80068ca <InfraredPD_Start+0x5a>
 80068aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068ae:	f000 81ae 	beq.w	8006c0e <InfraredPD_Start+0x39e>
 80068b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068b6:	f040 817b 	bne.w	8006bb0 <InfraredPD_Start+0x340>
 80068ba:	4bab      	ldr	r3, [pc, #684]	; (8006b68 <InfraredPD_Start+0x2f8>)
 80068bc:	60a3      	str	r3, [r4, #8]
 80068be:	e020      	b.n	8006902 <InfraredPD_Start+0x92>
 80068c0:	884b      	ldrh	r3, [r1, #2]
 80068c2:	2b80      	cmp	r3, #128	; 0x80
 80068c4:	f000 8187 	beq.w	8006bd6 <InfraredPD_Start+0x366>
 80068c8:	d810      	bhi.n	80068ec <InfraredPD_Start+0x7c>
 80068ca:	2b08      	cmp	r3, #8
 80068cc:	f000 817d 	beq.w	8006bca <InfraredPD_Start+0x35a>
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	d120      	bne.n	8006916 <InfraredPD_Start+0xa6>
 80068d4:	4ba5      	ldr	r3, [pc, #660]	; (8006b6c <InfraredPD_Start+0x2fc>)
 80068d6:	60a3      	str	r3, [r4, #8]
 80068d8:	792b      	ldrb	r3, [r5, #4]
 80068da:	3b01      	subs	r3, #1
 80068dc:	2b07      	cmp	r3, #7
 80068de:	d838      	bhi.n	8006952 <InfraredPD_Start+0xe2>
 80068e0:	e8df f003 	tbb	[pc, r3]
 80068e4:	ac37b13d 	.word	0xac37b13d
 80068e8:	a7373737 	.word	0xa7373737
 80068ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068f0:	f000 816e 	beq.w	8006bd0 <InfraredPD_Start+0x360>
 80068f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f8:	d106      	bne.n	8006908 <InfraredPD_Start+0x98>
 80068fa:	4b9b      	ldr	r3, [pc, #620]	; (8006b68 <InfraredPD_Start+0x2f8>)
 80068fc:	6083      	str	r3, [r0, #8]
 80068fe:	2a02      	cmp	r2, #2
 8006900:	d1ea      	bne.n	80068d8 <InfraredPD_Start+0x68>
 8006902:	2301      	movs	r3, #1
 8006904:	702b      	strb	r3, [r5, #0]
 8006906:	e7e7      	b.n	80068d8 <InfraredPD_Start+0x68>
 8006908:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800690c:	f040 814a 	bne.w	8006ba4 <InfraredPD_Start+0x334>
 8006910:	4b97      	ldr	r3, [pc, #604]	; (8006b70 <InfraredPD_Start+0x300>)
 8006912:	6083      	str	r3, [r0, #8]
 8006914:	e7e0      	b.n	80068d8 <InfraredPD_Start+0x68>
 8006916:	2b02      	cmp	r3, #2
 8006918:	f040 8144 	bne.w	8006ba4 <InfraredPD_Start+0x334>
 800691c:	4b95      	ldr	r3, [pc, #596]	; (8006b74 <InfraredPD_Start+0x304>)
 800691e:	60a3      	str	r3, [r4, #8]
 8006920:	e7da      	b.n	80068d8 <InfraredPD_Start+0x68>
 8006922:	2a1e      	cmp	r2, #30
 8006924:	f040 8166 	bne.w	8006bf4 <InfraredPD_Start+0x384>
 8006928:	884b      	ldrh	r3, [r1, #2]
 800692a:	2b80      	cmp	r3, #128	; 0x80
 800692c:	f000 815d 	beq.w	8006bea <InfraredPD_Start+0x37a>
 8006930:	d9cb      	bls.n	80068ca <InfraredPD_Start+0x5a>
 8006932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006936:	f000 8172 	beq.w	8006c1e <InfraredPD_Start+0x3ae>
 800693a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800693e:	d0bc      	beq.n	80068ba <InfraredPD_Start+0x4a>
 8006940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006944:	f040 812e 	bne.w	8006ba4 <InfraredPD_Start+0x334>
 8006948:	4b89      	ldr	r3, [pc, #548]	; (8006b70 <InfraredPD_Start+0x300>)
 800694a:	6083      	str	r3, [r0, #8]
 800694c:	2304      	movs	r3, #4
 800694e:	702b      	strb	r3, [r5, #0]
 8006950:	e7c2      	b.n	80068d8 <InfraredPD_Start+0x68>
 8006952:	2303      	movs	r3, #3
 8006954:	ecbd 8b04 	vpop	{d8-d9}
 8006958:	4618      	mov	r0, r3
 800695a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800695e:	4b86      	ldr	r3, [pc, #536]	; (8006b78 <InfraredPD_Start+0x308>)
 8006960:	eddf 7a86 	vldr	s15, [pc, #536]	; 8006b7c <InfraredPD_Start+0x30c>
 8006964:	60e3      	str	r3, [r4, #12]
 8006966:	796b      	ldrb	r3, [r5, #5]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d002      	beq.n	8006972 <InfraredPD_Start+0x102>
 800696c:	2b08      	cmp	r3, #8
 800696e:	f040 812a 	bne.w	8006bc6 <InfraredPD_Start+0x356>
 8006972:	ed95 7a02 	vldr	s14, [r5, #8]
 8006976:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800697a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800697e:	f100 8120 	bmi.w	8006bc2 <InfraredPD_Start+0x352>
 8006982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006986:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800698a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800698e:	f300 8118 	bgt.w	8006bc2 <InfraredPD_Start+0x352>
 8006992:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8006996:	eddf 6a7a 	vldr	s13, [pc, #488]	; 8006b80 <InfraredPD_Start+0x310>
 800699a:	2b00      	cmp	r3, #0
 800699c:	bfbc      	itt	lt
 800699e:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 80069a2:	8073      	strhlt	r3, [r6, #2]
 80069a4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	bfbc      	itt	lt
 80069ac:	f647 73ff 	movwlt	r3, #32767	; 0x7fff
 80069b0:	80b3      	strhlt	r3, [r6, #4]
 80069b2:	88eb      	ldrh	r3, [r5, #6]
 80069b4:	ee08 3a10 	vmov	s16, r3
 80069b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80069bc:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 80069c0:	edd4 6a02 	vldr	s13, [r4, #8]
 80069c4:	ee28 8a07 	vmul.f32	s16, s16, s14
 80069c8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80069cc:	ed84 8a05 	vstr	s16, [r4, #20]
 80069d0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80069d4:	eee6 7aa6 	vfma.f32	s15, s13, s13
 80069d8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80069dc:	ee87 0a26 	vdiv.f32	s0, s14, s13
 80069e0:	ed84 7a04 	vstr	s14, [r4, #16]
 80069e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80069e8:	ed84 0a06 	vstr	s0, [r4, #24]
 80069ec:	f001 f9b2 	bl	8007d54 <ceilf>
 80069f0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80069f4:	2301      	movs	r3, #1
 80069f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80069fa:	ee10 3a10 	vmov	r3, s0
 80069fe:	b298      	uxth	r0, r3
 8006a00:	2300      	movs	r3, #0
 8006a02:	83a0      	strh	r0, [r4, #28]
 8006a04:	6223      	str	r3, [r4, #32]
 8006a06:	7833      	ldrb	r3, [r6, #0]
 8006a08:	b313      	cbz	r3, 8006a50 <InfraredPD_Start+0x1e0>
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	f000 80e6 	beq.w	8006bdc <InfraredPD_Start+0x36c>
 8006a10:	7873      	ldrb	r3, [r6, #1]
 8006a12:	b1eb      	cbz	r3, 8006a50 <InfraredPD_Start+0x1e0>
 8006a14:	2300      	movs	r3, #0
 8006a16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8006a1a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	f000 8100 	beq.w	8006c24 <InfraredPD_Start+0x3b4>
 8006a24:	0080      	lsls	r0, r0, #2
 8006a26:	f000 fc89 	bl	800733c <malloc>
 8006a2a:	6460      	str	r0, [r4, #68]	; 0x44
 8006a2c:	b980      	cbnz	r0, 8006a50 <InfraredPD_Start+0x1e0>
 8006a2e:	2306      	movs	r3, #6
 8006a30:	e790      	b.n	8006954 <InfraredPD_Start+0xe4>
 8006a32:	4b54      	ldr	r3, [pc, #336]	; (8006b84 <InfraredPD_Start+0x314>)
 8006a34:	eddf 7a54 	vldr	s15, [pc, #336]	; 8006b88 <InfraredPD_Start+0x318>
 8006a38:	60e3      	str	r3, [r4, #12]
 8006a3a:	e794      	b.n	8006966 <InfraredPD_Start+0xf6>
 8006a3c:	4b53      	ldr	r3, [pc, #332]	; (8006b8c <InfraredPD_Start+0x31c>)
 8006a3e:	eddf 7a54 	vldr	s15, [pc, #336]	; 8006b90 <InfraredPD_Start+0x320>
 8006a42:	60e3      	str	r3, [r4, #12]
 8006a44:	e78f      	b.n	8006966 <InfraredPD_Start+0xf6>
 8006a46:	4b53      	ldr	r3, [pc, #332]	; (8006b94 <InfraredPD_Start+0x324>)
 8006a48:	eddf 7a53 	vldr	s15, [pc, #332]	; 8006b98 <InfraredPD_Start+0x328>
 8006a4c:	60e3      	str	r3, [r4, #12]
 8006a4e:	e78a      	b.n	8006966 <InfraredPD_Start+0xf6>
 8006a50:	2300      	movs	r3, #0
 8006a52:	7828      	ldrb	r0, [r5, #0]
 8006a54:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8006a58:	2301      	movs	r3, #1
 8006a5a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 8006a5e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
 8006a62:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006a66:	0040      	lsls	r0, r0, #1
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
 8006a6e:	f000 80c3 	beq.w	8006bf8 <InfraredPD_Start+0x388>
 8006a72:	0080      	lsls	r0, r0, #2
 8006a74:	f000 fc62 	bl	800733c <malloc>
 8006a78:	6520      	str	r0, [r4, #80]	; 0x50
 8006a7a:	2800      	cmp	r0, #0
 8006a7c:	f000 80d7 	beq.w	8006c2e <InfraredPD_Start+0x3be>
 8006a80:	f04f 0800 	mov.w	r8, #0
 8006a84:	f8a4 8060 	strh.w	r8, [r4, #96]	; 0x60
 8006a88:	2300      	movs	r3, #0
 8006a8a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006a8c:	88b3      	ldrh	r3, [r6, #4]
 8006a8e:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8006b9c <InfraredPD_Start+0x32c>
 8006a92:	ee07 3a90 	vmov	s15, r3
 8006a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a9a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8006a9e:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8006aa2:	ee67 6aa8 	vmul.f32	s13, s15, s17
 8006aa6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006aaa:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
 8006aae:	edc4 6a1a 	vstr	s13, [r4, #104]	; 0x68
 8006ab2:	ed84 7a1b 	vstr	s14, [r4, #108]	; 0x6c
 8006ab6:	782f      	ldrb	r7, [r5, #0]
 8006ab8:	ee07 7a90 	vmov	s15, r7
 8006abc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ac0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006ac4:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8006ac8:	ee27 0ac0 	vnmul.f32	s0, s15, s0
 8006acc:	eeb1 9a67 	vneg.f32	s18, s15
 8006ad0:	f001 f8fc 	bl	8007ccc <expf>
 8006ad4:	eddf 7a32 	vldr	s15, [pc, #200]	; 8006ba0 <InfraredPD_Start+0x330>
 8006ad8:	ee38 0a40 	vsub.f32	s0, s16, s0
 8006adc:	ed84 0a1c 	vstr	s0, [r4, #112]	; 0x70
 8006ae0:	ee29 0a27 	vmul.f32	s0, s18, s15
 8006ae4:	f001 f8f2 	bl	8007ccc <expf>
 8006ae8:	8873      	ldrh	r3, [r6, #2]
 8006aea:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
 8006aee:	ee07 3a90 	vmov	s15, r3
 8006af2:	2201      	movs	r2, #1
 8006af4:	f884 20a8 	strb.w	r2, [r4, #168]	; 0xa8
 8006af8:	ebc7 1107 	rsb	r1, r7, r7, lsl #4
 8006afc:	b2ba      	uxth	r2, r7
 8006afe:	e9c4 8828 	strd	r8, r8, [r4, #160]	; 0xa0
 8006b02:	f8a4 209a 	strh.w	r2, [r4, #154]	; 0x9a
 8006b06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006b0a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006b0e:	0049      	lsls	r1, r1, #1
 8006b10:	f8a4 1098 	strh.w	r1, [r4, #152]	; 0x98
 8006b14:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 8006b18:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8006b1c:	00c9      	lsls	r1, r1, #3
 8006b1e:	0092      	lsls	r2, r2, #2
 8006b20:	f8a4 109c 	strh.w	r1, [r4, #156]	; 0x9c
 8006b24:	f8a4 209e 	strh.w	r2, [r4, #158]	; 0x9e
 8006b28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006b2c:	edc4 8a22 	vstr	s17, [r4, #136]	; 0x88
 8006b30:	ee38 0a40 	vsub.f32	s0, s16, s0
 8006b34:	ecbd 8b04 	vpop	{d8-d9}
 8006b38:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8006b3c:	f8a4 708c 	strh.w	r7, [r4, #140]	; 0x8c
 8006b40:	f104 07ac 	add.w	r7, r4, #172	; 0xac
 8006b44:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
 8006b48:	edc4 7a21 	vstr	s15, [r4, #132]	; 0x84
 8006b4c:	f8a4 808e 	strh.w	r8, [r4, #142]	; 0x8e
 8006b50:	e887 0007 	stmia.w	r7, {r0, r1, r2}
 8006b54:	6830      	ldr	r0, [r6, #0]
 8006b56:	6871      	ldr	r1, [r6, #4]
 8006b58:	4643      	mov	r3, r8
 8006b5a:	34b8      	adds	r4, #184	; 0xb8
 8006b5c:	c403      	stmia	r4!, {r0, r1}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b64:	20000088 	.word	0x20000088
 8006b68:	41680000 	.word	0x41680000
 8006b6c:	42006666 	.word	0x42006666
 8006b70:	419b3333 	.word	0x419b3333
 8006b74:	42c6999a 	.word	0x42c6999a
 8006b78:	43168000 	.word	0x43168000
 8006b7c:	3e1a1cad 	.word	0x3e1a1cad
 8006b80:	3f933333 	.word	0x3f933333
 8006b84:	4254cccd 	.word	0x4254cccd
 8006b88:	3d59e83f 	.word	0x3d59e83f
 8006b8c:	42966666 	.word	0x42966666
 8006b90:	3d9a0275 	.word	0x3d9a0275
 8006b94:	42d4cccd 	.word	0x42d4cccd
 8006b98:	3dd9e83f 	.word	0x3dd9e83f
 8006b9c:	4048e093 	.word	0x4048e093
 8006ba0:	3ea0da75 	.word	0x3ea0da75
 8006ba4:	ecbd 8b04 	vpop	{d8-d9}
 8006ba8:	2302      	movs	r3, #2
 8006baa:	4618      	mov	r0, r3
 8006bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bb0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bb4:	d1f6      	bne.n	8006ba4 <InfraredPD_Start+0x334>
 8006bb6:	4b22      	ldr	r3, [pc, #136]	; (8006c40 <InfraredPD_Start+0x3d0>)
 8006bb8:	60a3      	str	r3, [r4, #8]
 8006bba:	2a04      	cmp	r2, #4
 8006bbc:	f63f aec6 	bhi.w	800694c <InfraredPD_Start+0xdc>
 8006bc0:	e68a      	b.n	80068d8 <InfraredPD_Start+0x68>
 8006bc2:	2305      	movs	r3, #5
 8006bc4:	e6c6      	b.n	8006954 <InfraredPD_Start+0xe4>
 8006bc6:	2304      	movs	r3, #4
 8006bc8:	e6c4      	b.n	8006954 <InfraredPD_Start+0xe4>
 8006bca:	4b1e      	ldr	r3, [pc, #120]	; (8006c44 <InfraredPD_Start+0x3d4>)
 8006bcc:	60a3      	str	r3, [r4, #8]
 8006bce:	e683      	b.n	80068d8 <InfraredPD_Start+0x68>
 8006bd0:	4b1d      	ldr	r3, [pc, #116]	; (8006c48 <InfraredPD_Start+0x3d8>)
 8006bd2:	6083      	str	r3, [r0, #8]
 8006bd4:	e680      	b.n	80068d8 <InfraredPD_Start+0x68>
 8006bd6:	4b1d      	ldr	r3, [pc, #116]	; (8006c4c <InfraredPD_Start+0x3dc>)
 8006bd8:	6083      	str	r3, [r0, #8]
 8006bda:	e67d      	b.n	80068d8 <InfraredPD_Start+0x68>
 8006bdc:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8006c50 <InfraredPD_Start+0x3e0>
 8006be0:	ee28 7a07 	vmul.f32	s14, s16, s14
 8006be4:	ed84 7a0e 	vstr	s14, [r4, #56]	; 0x38
 8006be8:	e712      	b.n	8006a10 <InfraredPD_Start+0x1a0>
 8006bea:	4b18      	ldr	r3, [pc, #96]	; (8006c4c <InfraredPD_Start+0x3dc>)
 8006bec:	60a3      	str	r3, [r4, #8]
 8006bee:	2308      	movs	r3, #8
 8006bf0:	702b      	strb	r3, [r5, #0]
 8006bf2:	e671      	b.n	80068d8 <InfraredPD_Start+0x68>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e6ad      	b.n	8006954 <InfraredPD_Start+0xe4>
 8006bf8:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006bfa:	f000 fba7 	bl	800734c <free>
 8006bfe:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8006c02:	e736      	b.n	8006a72 <InfraredPD_Start+0x202>
 8006c04:	4b11      	ldr	r3, [pc, #68]	; (8006c4c <InfraredPD_Start+0x3dc>)
 8006c06:	60a3      	str	r3, [r4, #8]
 8006c08:	2a08      	cmp	r2, #8
 8006c0a:	d8f0      	bhi.n	8006bee <InfraredPD_Start+0x37e>
 8006c0c:	e664      	b.n	80068d8 <InfraredPD_Start+0x68>
 8006c0e:	4b0e      	ldr	r3, [pc, #56]	; (8006c48 <InfraredPD_Start+0x3d8>)
 8006c10:	60a3      	str	r3, [r4, #8]
 8006c12:	2a02      	cmp	r2, #2
 8006c14:	f67f ae60 	bls.w	80068d8 <InfraredPD_Start+0x68>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	702b      	strb	r3, [r5, #0]
 8006c1c:	e65c      	b.n	80068d8 <InfraredPD_Start+0x68>
 8006c1e:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <InfraredPD_Start+0x3d8>)
 8006c20:	6083      	str	r3, [r0, #8]
 8006c22:	e7f9      	b.n	8006c18 <InfraredPD_Start+0x3a8>
 8006c24:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006c26:	f000 fb91 	bl	800734c <free>
 8006c2a:	8ba0      	ldrh	r0, [r4, #28]
 8006c2c:	e6fa      	b.n	8006a24 <InfraredPD_Start+0x1b4>
 8006c2e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8006c30:	b118      	cbz	r0, 8006c3a <InfraredPD_Start+0x3ca>
 8006c32:	f000 fb8b 	bl	800734c <free>
 8006c36:	2307      	movs	r3, #7
 8006c38:	e68c      	b.n	8006954 <InfraredPD_Start+0xe4>
 8006c3a:	2307      	movs	r3, #7
 8006c3c:	e68a      	b.n	8006954 <InfraredPD_Start+0xe4>
 8006c3e:	bf00      	nop
 8006c40:	419b3333 	.word	0x419b3333
 8006c44:	42560000 	.word	0x42560000
 8006c48:	41873333 	.word	0x41873333
 8006c4c:	41b00000 	.word	0x41b00000
 8006c50:	3223b1a8 	.word	0x3223b1a8
 8006c54:	00000000 	.word	0x00000000

08006c58 <InfraredPD_Update>:
 8006c58:	4bba      	ldr	r3, [pc, #744]	; (8006f44 <InfraredPD_Update+0x2ec>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b903      	cbnz	r3, 8006c60 <InfraredPD_Update+0x8>
 8006c5e:	4770      	bx	lr
 8006c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c64:	ed2d 8b02 	vpush	{d8}
 8006c68:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8006c6c:	f890 60b1 	ldrb.w	r6, [r0, #177]	; 0xb1
 8006c70:	4615      	mov	r5, r2
 8006c72:	f9b1 2000 	ldrsh.w	r2, [r1]
 8006c76:	fb16 f303 	smulbb	r3, r6, r3
 8006c7a:	ee07 2a10 	vmov	s14, r2
 8006c7e:	ee07 3a90 	vmov	s15, r3
 8006c82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c8a:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
 8006c8e:	ed80 7a00 	vstr	s14, [r0]
 8006c92:	b083      	sub	sp, #12
 8006c94:	4604      	mov	r4, r0
 8006c96:	edc0 7a01 	vstr	s15, [r0, #4]
 8006c9a:	2a00      	cmp	r2, #0
 8006c9c:	d067      	beq.n	8006d6e <InfraredPD_Update+0x116>
 8006c9e:	f890 30a7 	ldrb.w	r3, [r0, #167]	; 0xa7
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d168      	bne.n	8006d78 <InfraredPD_Update+0x120>
 8006ca6:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f040 8303 	bne.w	80072b6 <InfraredPD_Update+0x65e>
 8006cb0:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 8006cb4:	6a07      	ldr	r7, [r0, #32]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8006cbe:	3a01      	subs	r2, #1
 8006cc0:	0090      	lsls	r0, r2, #2
 8006cc2:	2f01      	cmp	r7, #1
 8006cc4:	d068      	beq.n	8006d98 <InfraredPD_Update+0x140>
 8006cc6:	eddf 6aa0 	vldr	s13, [pc, #640]	; 8006f48 <InfraredPD_Update+0x2f0>
 8006cca:	eeb0 6ae7 	vabs.f32	s12, s15
 8006cce:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8006cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cd6:	d57b      	bpl.n	8006dd0 <InfraredPD_Update+0x178>
 8006cd8:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8006cdc:	2a00      	cmp	r2, #0
 8006cde:	f000 81a8 	beq.w	8007032 <InfraredPD_Update+0x3da>
 8006ce2:	2a01      	cmp	r2, #1
 8006ce4:	f000 8265 	beq.w	80071b2 <InfraredPD_Update+0x55a>
 8006ce8:	2a02      	cmp	r2, #2
 8006cea:	f000 8246 	beq.w	800717a <InfraredPD_Update+0x522>
 8006cee:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8006cf2:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 8006cf6:	2a00      	cmp	r2, #0
 8006cf8:	f000 80a6 	beq.w	8006e48 <InfraredPD_Update+0x1f0>
 8006cfc:	e070      	b.n	8006de0 <InfraredPD_Update+0x188>
 8006cfe:	2f01      	cmp	r7, #1
 8006d00:	f000 82c2 	beq.w	8007288 <InfraredPD_Update+0x630>
 8006d04:	2300      	movs	r3, #0
 8006d06:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 8006d0a:	2f00      	cmp	r7, #0
 8006d0c:	f040 82d0 	bne.w	80072b0 <InfraredPD_Update+0x658>
 8006d10:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8006d14:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
 8006d18:	3301      	adds	r3, #1
 8006d1a:	b29b      	uxth	r3, r3
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8006d22:	d10b      	bne.n	8006d3c <InfraredPD_Update+0xe4>
 8006d24:	2300      	movs	r3, #0
 8006d26:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8006d2a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8006d2e:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8006d32:	b91b      	cbnz	r3, 8006d3c <InfraredPD_Update+0xe4>
 8006d34:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8006d38:	2300      	movs	r3, #0
 8006d3a:	65e3      	str	r3, [r4, #92]	; 0x5c
 8006d3c:	ee07 6a90 	vmov	s15, r6
 8006d40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d44:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8006d48:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8006d4c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8006d50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d54:	ee17 3a10 	vmov	r3, s14
 8006d58:	802b      	strh	r3, [r5, #0]
 8006d5a:	ee17 3a90 	vmov	r3, s15
 8006d5e:	806b      	strh	r3, [r5, #2]
 8006d60:	2300      	movs	r3, #0
 8006d62:	716b      	strb	r3, [r5, #5]
 8006d64:	712f      	strb	r7, [r5, #4]
 8006d66:	2f01      	cmp	r7, #1
 8006d68:	d101      	bne.n	8006d6e <InfraredPD_Update+0x116>
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	716b      	strb	r3, [r5, #5]
 8006d6e:	b003      	add	sp, #12
 8006d70:	ecbd 8b02 	vpop	{d8}
 8006d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8006d80:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
 8006d84:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
 8006d88:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 8006d8c:	f8a0 2060 	strh.w	r2, [r0, #96]	; 0x60
 8006d90:	f880 20a7 	strb.w	r2, [r0, #167]	; 0xa7
 8006d94:	6203      	str	r3, [r0, #32]
 8006d96:	4610      	mov	r0, r2
 8006d98:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8006d9c:	b182      	cbz	r2, 8006dc0 <InfraredPD_Update+0x168>
 8006d9e:	2a01      	cmp	r2, #1
 8006da0:	f000 81e8 	beq.w	8007174 <InfraredPD_Update+0x51c>
 8006da4:	2a02      	cmp	r2, #2
 8006da6:	d10b      	bne.n	8006dc0 <InfraredPD_Update+0x168>
 8006da8:	ed9f 6a68 	vldr	s12, [pc, #416]	; 8006f4c <InfraredPD_Update+0x2f4>
 8006dac:	eddf 6a68 	vldr	s13, [pc, #416]	; 8006f50 <InfraredPD_Update+0x2f8>
 8006db0:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006db4:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8006db8:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8006dbc:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
 8006dc0:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8006dc4:	edc4 7a1e 	vstr	s15, [r4, #120]	; 0x78
 8006dc8:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 8006dcc:	2701      	movs	r7, #1
 8006dce:	e77a      	b.n	8006cc6 <InfraredPD_Update+0x6e>
 8006dd0:	f894 20b9 	ldrb.w	r2, [r4, #185]	; 0xb9
 8006dd4:	b3b2      	cbz	r2, 8006e44 <InfraredPD_Update+0x1ec>
 8006dd6:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
 8006dda:	b39a      	cbz	r2, 8006e44 <InfraredPD_Update+0x1ec>
 8006ddc:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8006de0:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 8006de4:	8ba1      	ldrh	r1, [r4, #28]
 8006de6:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 8006dea:	3201      	adds	r2, #1
 8006dec:	b2d2      	uxtb	r2, r2
 8006dee:	428a      	cmp	r2, r1
 8006df0:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
 8006df4:	eb0c 0e82 	add.w	lr, ip, r2, lsl #2
 8006df8:	bf08      	it	eq
 8006dfa:	2200      	moveq	r2, #0
 8006dfc:	ed4e 7a01 	vstr	s15, [lr, #-4]
 8006e00:	bf08      	it	eq
 8006e02:	f884 2040 	strbeq.w	r2, [r4, #64]	; 0x40
 8006e06:	2901      	cmp	r1, #1
 8006e08:	f240 81ce 	bls.w	80071a8 <InfraredPD_Update+0x550>
 8006e0c:	42b9      	cmp	r1, r7
 8006e0e:	f240 81df 	bls.w	80071d0 <InfraredPD_Update+0x578>
 8006e12:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8006f54 <InfraredPD_Update+0x2fc>
 8006e16:	b167      	cbz	r7, 8006e32 <InfraredPD_Update+0x1da>
 8006e18:	2200      	movs	r2, #0
 8006e1a:	4611      	mov	r1, r2
 8006e1c:	eb0c 0181 	add.w	r1, ip, r1, lsl #2
 8006e20:	3201      	adds	r2, #1
 8006e22:	edd1 7a00 	vldr	s15, [r1]
 8006e26:	b292      	uxth	r2, r2
 8006e28:	42ba      	cmp	r2, r7
 8006e2a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006e2e:	4611      	mov	r1, r2
 8006e30:	d3f4      	bcc.n	8006e1c <InfraredPD_Update+0x1c4>
 8006e32:	ee07 7a90 	vmov	s15, r7
 8006e36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006e3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006e3e:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8006e42:	e003      	b.n	8006e4c <InfraredPD_Update+0x1f4>
 8006e44:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8006e48:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8006e4c:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006e4e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
 8006e52:	180a      	adds	r2, r1, r0
 8006e54:	edc2 7a00 	vstr	s15, [r2]
 8006e58:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 8006e5c:	f894 c04c 	ldrb.w	ip, [r4, #76]	; 0x4c
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d07b      	beq.n	8006f5c <InfraredPD_Update+0x304>
 8006e64:	ed94 6a1c 	vldr	s12, [r4, #112]	; 0x70
 8006e68:	edd4 6a1d 	vldr	s13, [r4, #116]	; 0x74
 8006e6c:	ed94 5a1e 	vldr	s10, [r4, #120]	; 0x78
 8006e70:	edd4 5a1f 	vldr	s11, [r4, #124]	; 0x7c
 8006e74:	edd4 8a0f 	vldr	s17, [r4, #60]	; 0x3c
 8006e78:	f894 7090 	ldrb.w	r7, [r4, #144]	; 0x90
 8006e7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e80:	ee37 8a46 	vsub.f32	s16, s14, s12
 8006e84:	ee77 7a66 	vsub.f32	s15, s14, s13
 8006e88:	ee28 8a05 	vmul.f32	s16, s16, s10
 8006e8c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006e90:	eea6 8a28 	vfma.f32	s16, s12, s17
 8006e94:	eee8 7aa6 	vfma.f32	s15, s17, s13
 8006e98:	ed84 8a1e 	vstr	s16, [r4, #120]	; 0x78
 8006e9c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006ea0:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
 8006ea4:	ed84 8a20 	vstr	s16, [r4, #128]	; 0x80
 8006ea8:	2f00      	cmp	r7, #0
 8006eaa:	f000 80b4 	beq.w	8007016 <InfraredPD_Update+0x3be>
 8006eae:	2f01      	cmp	r7, #1
 8006eb0:	d114      	bne.n	8006edc <InfraredPD_Update+0x284>
 8006eb2:	ed94 7a22 	vldr	s14, [r4, #136]	; 0x88
 8006eb6:	eef0 6ac8 	vabs.f32	s13, s16
 8006eba:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec2:	f140 80c0 	bpl.w	8007046 <InfraredPD_Update+0x3ee>
 8006ec6:	f8b4 308e 	ldrh.w	r3, [r4, #142]	; 0x8e
 8006eca:	f8b4 208c 	ldrh.w	r2, [r4, #140]	; 0x8c
 8006ece:	3301      	adds	r3, #1
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 8006ed8:	f240 8146 	bls.w	8007168 <InfraredPD_Update+0x510>
 8006edc:	f894 80a6 	ldrb.w	r8, [r4, #166]	; 0xa6
 8006ee0:	f1bc 0f00 	cmp.w	ip, #0
 8006ee4:	d108      	bne.n	8006ef8 <InfraredPD_Update+0x2a0>
 8006ee6:	f1b8 0f03 	cmp.w	r8, #3
 8006eea:	d809      	bhi.n	8006f00 <InfraredPD_Update+0x2a8>
 8006eec:	e8df f018 	tbh	[pc, r8, lsl #1]
 8006ef0:	010d011c 	.word	0x010d011c
 8006ef4:	00af00fd 	.word	0x00af00fd
 8006ef8:	f1b8 0f00 	cmp.w	r8, #0
 8006efc:	f43f af17 	beq.w	8006d2e <InfraredPD_Update+0xd6>
 8006f00:	ee07 6a90 	vmov	s15, r6
 8006f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f08:	f1b8 0f02 	cmp.w	r8, #2
 8006f0c:	ee88 7aa6 	vdiv.f32	s14, s17, s13
 8006f10:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8006f14:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8006f18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f1c:	ee17 3a10 	vmov	r3, s14
 8006f20:	802b      	strh	r3, [r5, #0]
 8006f22:	ee17 3a90 	vmov	r3, s15
 8006f26:	806b      	strh	r3, [r5, #2]
 8006f28:	f43f af1a 	beq.w	8006d60 <InfraredPD_Update+0x108>
 8006f2c:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
 8006f30:	f1b8 0f01 	cmp.w	r8, #1
 8006f34:	f000 8080 	beq.w	8007038 <InfraredPD_Update+0x3e0>
 8006f38:	796b      	ldrb	r3, [r5, #5]
 8006f3a:	712f      	strb	r7, [r5, #4]
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	f47f af12 	bne.w	8006d66 <InfraredPD_Update+0x10e>
 8006f42:	e712      	b.n	8006d6a <InfraredPD_Update+0x112>
 8006f44:	20000088 	.word	0x20000088
 8006f48:	46f05e00 	.word	0x46f05e00
 8006f4c:	3c23d70a 	.word	0x3c23d70a
 8006f50:	43889333 	.word	0x43889333
 8006f54:	00000000 	.word	0x00000000
 8006f58:	7fc00000 	.word	0x7fc00000
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
 8006f62:	f1bc 0f00 	cmp.w	ip, #0
 8006f66:	d169      	bne.n	800703c <InfraredPD_Update+0x3e4>
 8006f68:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006f6a:	65a2      	str	r2, [r4, #88]	; 0x58
 8006f6c:	b1d3      	cbz	r3, 8006fa4 <InfraredPD_Update+0x34c>
 8006f6e:	ed5f 7a07 	vldr	s15, [pc, #-28]	; 8006f54 <InfraredPD_Update+0x2fc>
 8006f72:	2200      	movs	r2, #0
 8006f74:	3201      	adds	r2, #1
 8006f76:	ecb1 7a01 	vldmia	r1!, {s14}
 8006f7a:	b290      	uxth	r0, r2
 8006f7c:	4283      	cmp	r3, r0
 8006f7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f82:	d8f7      	bhi.n	8006f74 <InfraredPD_Update+0x31c>
 8006f84:	ee07 3a10 	vmov	s14, r3
 8006f88:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8006f8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8006f90:	ed84 7a15 	vstr	s14, [r4, #84]	; 0x54
 8006f94:	f1bc 0f00 	cmp.w	ip, #0
 8006f98:	d00a      	beq.n	8006fb0 <InfraredPD_Update+0x358>
 8006f9a:	f04f 0c00 	mov.w	ip, #0
 8006f9e:	f884 c04c 	strb.w	ip, [r4, #76]	; 0x4c
 8006fa2:	e75f      	b.n	8006e64 <InfraredPD_Update+0x20c>
 8006fa4:	ed5f 7a14 	vldr	s15, [pc, #-80]	; 8006f58 <InfraredPD_Update+0x300>
 8006fa8:	eeb0 7a67 	vmov.f32	s14, s15
 8006fac:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
 8006fb0:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f040 80c8 	bne.w	800714a <InfraredPD_Update+0x4f2>
 8006fba:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8006fbe:	b17a      	cbz	r2, 8006fe0 <InfraredPD_Update+0x388>
 8006fc0:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 8006fc4:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 8006fc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fcc:	eef1 6a66 	vneg.f32	s13, s13
 8006fd0:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fd8:	f340 8115 	ble.w	8007206 <InfraredPD_Update+0x5ae>
 8006fdc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 8006fe0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	f47f af3d 	bne.w	8006e64 <InfraredPD_Update+0x20c>
 8006fea:	edd4 6a16 	vldr	s13, [r4, #88]	; 0x58
 8006fee:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 8006ff2:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006ff6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ffe:	f340 8127 	ble.w	8007250 <InfraredPD_Update+0x5f8>
 8007002:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8007006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800700a:	2301      	movs	r3, #1
 800700c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8007010:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 8007014:	e726      	b.n	8006e64 <InfraredPD_Update+0x20c>
 8007016:	ed94 7a21 	vldr	s14, [r4, #132]	; 0x84
 800701a:	eef0 6ac8 	vabs.f32	s13, s16
 800701e:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007026:	f77f af59 	ble.w	8006edc <InfraredPD_Update+0x284>
 800702a:	2701      	movs	r7, #1
 800702c:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 8007030:	e754      	b.n	8006edc <InfraredPD_Update+0x284>
 8007032:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 8007036:	e707      	b.n	8006e48 <InfraredPD_Update+0x1f0>
 8007038:	712f      	strb	r7, [r5, #4]
 800703a:	e696      	b.n	8006d6a <InfraredPD_Update+0x112>
 800703c:	2b00      	cmp	r3, #0
 800703e:	d196      	bne.n	8006f6e <InfraredPD_Update+0x316>
 8007040:	4ba5      	ldr	r3, [pc, #660]	; (80072d8 <InfraredPD_Update+0x680>)
 8007042:	6563      	str	r3, [r4, #84]	; 0x54
 8007044:	e7a9      	b.n	8006f9a <InfraredPD_Update+0x342>
 8007046:	2300      	movs	r3, #0
 8007048:	f8a4 308e 	strh.w	r3, [r4, #142]	; 0x8e
 800704c:	e746      	b.n	8006edc <InfraredPD_Update+0x284>
 800704e:	f8b4 90a4 	ldrh.w	r9, [r4, #164]	; 0xa4
 8007052:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
 8007056:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 800705a:	ee78 7ae7 	vsub.f32	s15, s17, s15
 800705e:	f109 0901 	add.w	r9, r9, #1
 8007062:	fa1f f989 	uxth.w	r9, r9
 8007066:	ee17 0a90 	vmov	r0, s15
 800706a:	f8a4 90a4 	strh.w	r9, [r4, #164]	; 0xa4
 800706e:	ed8d 7a01 	vstr	s14, [sp, #4]
 8007072:	f7f9 fb93 	bl	800079c <__aeabi_f2d>
 8007076:	4682      	mov	sl, r0
 8007078:	9801      	ldr	r0, [sp, #4]
 800707a:	468b      	mov	fp, r1
 800707c:	f7f9 fb8e 	bl	800079c <__aeabi_f2d>
 8007080:	a393      	add	r3, pc, #588	; (adr r3, 80072d0 <InfraredPD_Update+0x678>)
 8007082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007086:	f7f9 f8fb 	bl	8000280 <__aeabi_dmul>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	4650      	mov	r0, sl
 8007090:	4659      	mov	r1, fp
 8007092:	f7f9 fc3b 	bl	800090c <__aeabi_dcmplt>
 8007096:	2800      	cmp	r0, #0
 8007098:	f47f ae44 	bne.w	8006d24 <InfraredPD_Update+0xcc>
 800709c:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
 80070a0:	454b      	cmp	r3, r9
 80070a2:	f43f ae3f 	beq.w	8006d24 <InfraredPD_Update+0xcc>
 80070a6:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 80070aa:	ed9d 7a01 	vldr	s14, [sp, #4]
 80070ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070b6:	d505      	bpl.n	80070c4 <InfraredPD_Update+0x46c>
 80070b8:	f8a4 00a4 	strh.w	r0, [r4, #164]	; 0xa4
 80070bc:	f04f 0801 	mov.w	r8, #1
 80070c0:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 80070c4:	ee07 6a90 	vmov	s15, r6
 80070c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070cc:	eec8 6aa7 	vdiv.f32	s13, s17, s15
 80070d0:	ee88 7a27 	vdiv.f32	s14, s16, s15
 80070d4:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 80070d8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 80070dc:	ee16 3a90 	vmov	r3, s13
 80070e0:	802b      	strh	r3, [r5, #0]
 80070e2:	ee17 3a10 	vmov	r3, s14
 80070e6:	806b      	strh	r3, [r5, #2]
 80070e8:	e720      	b.n	8006f2c <InfraredPD_Update+0x2d4>
 80070ea:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 80070ee:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 80070f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070fa:	f57f ae00 	bpl.w	8006cfe <InfraredPD_Update+0xa6>
 80070fe:	2300      	movs	r3, #0
 8007100:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8007104:	f8c4 30a2 	str.w	r3, [r4, #162]	; 0xa2
 8007108:	e611      	b.n	8006d2e <InfraredPD_Update+0xd6>
 800710a:	ed94 7a17 	vldr	s14, [r4, #92]	; 0x5c
 800710e:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8007112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800711a:	d57b      	bpl.n	8007214 <InfraredPD_Update+0x5bc>
 800711c:	2300      	movs	r3, #0
 800711e:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8007122:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8007126:	e602      	b.n	8006d2e <InfraredPD_Update+0xd6>
 8007128:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 800712c:	ee78 6ae7 	vsub.f32	s13, s17, s15
 8007130:	eef4 6ac7 	vcmpe.f32	s13, s14
 8007134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007138:	f340 8081 	ble.w	800723e <InfraredPD_Update+0x5e6>
 800713c:	f04f 0803 	mov.w	r8, #3
 8007140:	f884 80a6 	strb.w	r8, [r4, #166]	; 0xa6
 8007144:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
 8007148:	e7bc      	b.n	80070c4 <InfraredPD_Update+0x46c>
 800714a:	edd4 7a16 	vldr	s15, [r4, #88]	; 0x58
 800714e:	edd4 6a1b 	vldr	s13, [r4, #108]	; 0x6c
 8007152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007156:	eef4 7ae6 	vcmpe.f32	s15, s13
 800715a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800715e:	d552      	bpl.n	8007206 <InfraredPD_Update+0x5ae>
 8007160:	2300      	movs	r3, #0
 8007162:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 8007166:	e73b      	b.n	8006fe0 <InfraredPD_Update+0x388>
 8007168:	2700      	movs	r7, #0
 800716a:	f884 7090 	strb.w	r7, [r4, #144]	; 0x90
 800716e:	f8a4 708e 	strh.w	r7, [r4, #142]	; 0x8e
 8007172:	e6b3      	b.n	8006edc <InfraredPD_Update+0x284>
 8007174:	ed84 7a0b 	vstr	s14, [r4, #44]	; 0x2c
 8007178:	e622      	b.n	8006dc0 <InfraredPD_Update+0x168>
 800717a:	eddf 5a58 	vldr	s11, [pc, #352]	; 80072dc <InfraredPD_Update+0x684>
 800717e:	eddf 6a58 	vldr	s13, [pc, #352]	; 80072e0 <InfraredPD_Update+0x688>
 8007182:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
 8007186:	ed94 5a0e 	vldr	s10, [r4, #56]	; 0x38
 800718a:	eee7 6a25 	vfma.f32	s13, s14, s11
 800718e:	eeb0 7a46 	vmov.f32	s14, s12
 8007192:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8007196:	edc4 6a0c 	vstr	s13, [r4, #48]	; 0x30
 800719a:	ee95 7aa5 	vfnms.f32	s14, s11, s11
 800719e:	eee5 7a07 	vfma.f32	s15, s10, s14
 80071a2:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 80071a6:	e5a4      	b.n	8006cf2 <InfraredPD_Update+0x9a>
 80071a8:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 80071ac:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 80071b0:	e64c      	b.n	8006e4c <InfraredPD_Update+0x1f4>
 80071b2:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 80071b6:	edd4 6a05 	vldr	s13, [r4, #20]
 80071ba:	ed9f 6a48 	vldr	s12, [pc, #288]	; 80072dc <InfraredPD_Update+0x684>
 80071be:	ee37 7a65 	vsub.f32	s14, s14, s11
 80071c2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80071c6:	eee7 7a26 	vfma.f32	s15, s14, s13
 80071ca:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
 80071ce:	e590      	b.n	8006cf2 <InfraredPD_Update+0x9a>
 80071d0:	1e4f      	subs	r7, r1, #1
 80071d2:	4662      	mov	r2, ip
 80071d4:	fa1f fc87 	uxth.w	ip, r7
 80071d8:	2700      	movs	r7, #0
 80071da:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 80071de:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80072e4 <InfraredPD_Update+0x68c>
 80071e2:	1d17      	adds	r7, r2, #4
 80071e4:	eb07 078c 	add.w	r7, r7, ip, lsl #2
 80071e8:	ecf2 7a01 	vldmia	r2!, {s15}
 80071ec:	4297      	cmp	r7, r2
 80071ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80071f2:	d1f9      	bne.n	80071e8 <InfraredPD_Update+0x590>
 80071f4:	ee07 1a90 	vmov	s15, r1
 80071f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007200:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8007204:	e622      	b.n	8006e4c <InfraredPD_Update+0x1f4>
 8007206:	edd4 6a17 	vldr	s13, [r4, #92]	; 0x5c
 800720a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800720e:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
 8007212:	e6e5      	b.n	8006fe0 <InfraredPD_Update+0x388>
 8007214:	bba7      	cbnz	r7, 8007280 <InfraredPD_Update+0x628>
 8007216:	f894 30be 	ldrb.w	r3, [r4, #190]	; 0xbe
 800721a:	b38b      	cbz	r3, 8007280 <InfraredPD_Update+0x628>
 800721c:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
 8007220:	f8b4 2098 	ldrh.w	r2, [r4, #152]	; 0x98
 8007224:	3301      	adds	r3, #1
 8007226:	b29b      	uxth	r3, r3
 8007228:	429a      	cmp	r2, r3
 800722a:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 800722e:	f47f af49 	bne.w	80070c4 <InfraredPD_Update+0x46c>
 8007232:	2302      	movs	r3, #2
 8007234:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8007238:	f8a4 70a0 	strh.w	r7, [r4, #160]	; 0xa0
 800723c:	e57e      	b.n	8006d3c <InfraredPD_Update+0xe4>
 800723e:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8007242:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800724a:	f57f ad70 	bpl.w	8006d2e <InfraredPD_Update+0xd6>
 800724e:	e735      	b.n	80070bc <InfraredPD_Update+0x464>
 8007250:	eef1 7a67 	vneg.f32	s15, s15
 8007254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800725c:	f57f ae02 	bpl.w	8006e64 <InfraredPD_Update+0x20c>
 8007260:	edd4 7a17 	vldr	s15, [r4, #92]	; 0x5c
 8007264:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726c:	f77f adfa 	ble.w	8006e64 <InfraredPD_Update+0x20c>
 8007270:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007274:	2301      	movs	r3, #1
 8007276:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 800727a:	ed84 7a17 	vstr	s14, [r4, #92]	; 0x5c
 800727e:	e5f1      	b.n	8006e64 <InfraredPD_Update+0x20c>
 8007280:	2300      	movs	r3, #0
 8007282:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
 8007286:	e71d      	b.n	80070c4 <InfraredPD_Update+0x46c>
 8007288:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
 800728c:	f8b4 109a 	ldrh.w	r1, [r4, #154]	; 0x9a
 8007290:	3301      	adds	r3, #1
 8007292:	b29b      	uxth	r3, r3
 8007294:	2200      	movs	r2, #0
 8007296:	4299      	cmp	r1, r3
 8007298:	f8a4 20a4 	strh.w	r2, [r4, #164]	; 0xa4
 800729c:	f8a4 30a2 	strh.w	r3, [r4, #162]	; 0xa2
 80072a0:	f47f ad4c 	bne.w	8006d3c <InfraredPD_Update+0xe4>
 80072a4:	f884 70a6 	strb.w	r7, [r4, #166]	; 0xa6
 80072a8:	f8a4 20a2 	strh.w	r2, [r4, #162]	; 0xa2
 80072ac:	46b8      	mov	r8, r7
 80072ae:	e709      	b.n	80070c4 <InfraredPD_Update+0x46c>
 80072b0:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 80072b4:	e542      	b.n	8006d3c <InfraredPD_Update+0xe4>
 80072b6:	f8b0 304a 	ldrh.w	r3, [r0, #74]	; 0x4a
 80072ba:	6a07      	ldr	r7, [r0, #32]
 80072bc:	3301      	adds	r3, #1
 80072be:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 80072c2:	fa12 f283 	uxtah	r2, r2, r3
 80072c6:	3701      	adds	r7, #1
 80072c8:	6207      	str	r7, [r0, #32]
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	0090      	lsls	r0, r2, #2
 80072ce:	e4f8      	b.n	8006cc2 <InfraredPD_Update+0x6a>
 80072d0:	cccccccd 	.word	0xcccccccd
 80072d4:	3feccccc 	.word	0x3feccccc
 80072d8:	7fc00000 	.word	0x7fc00000
 80072dc:	3c23d70a 	.word	0x3c23d70a
 80072e0:	43889333 	.word	0x43889333
 80072e4:	00000000 	.word	0x00000000

080072e8 <InfraredPD_GetLibVersion>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	4b12      	ldr	r3, [pc, #72]	; (8007334 <InfraredPD_GetLibVersion+0x4c>)
 80072ec:	781e      	ldrb	r6, [r3, #0]
 80072ee:	b08a      	sub	sp, #40	; 0x28
 80072f0:	b1ee      	cbz	r6, 800732e <InfraredPD_GetLibVersion+0x46>
 80072f2:	4d11      	ldr	r5, [pc, #68]	; (8007338 <InfraredPD_GetLibVersion+0x50>)
 80072f4:	4684      	mov	ip, r0
 80072f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80072f8:	f10d 0e04 	add.w	lr, sp, #4
 80072fc:	4674      	mov	r4, lr
 80072fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8007302:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007306:	f84e 0b04 	str.w	r0, [lr], #4
 800730a:	f88e 1000 	strb.w	r1, [lr]
 800730e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007310:	f8cc 0000 	str.w	r0, [ip]
 8007314:	f8cc 2008 	str.w	r2, [ip, #8]
 8007318:	6820      	ldr	r0, [r4, #0]
 800731a:	7922      	ldrb	r2, [r4, #4]
 800731c:	f8cc 1004 	str.w	r1, [ip, #4]
 8007320:	2614      	movs	r6, #20
 8007322:	f8cc 300c 	str.w	r3, [ip, #12]
 8007326:	f8cc 0010 	str.w	r0, [ip, #16]
 800732a:	f88c 2014 	strb.w	r2, [ip, #20]
 800732e:	4630      	mov	r0, r6
 8007330:	b00a      	add	sp, #40	; 0x28
 8007332:	bd70      	pop	{r4, r5, r6, pc}
 8007334:	20000088 	.word	0x20000088
 8007338:	08008000 	.word	0x08008000

0800733c <malloc>:
 800733c:	4b02      	ldr	r3, [pc, #8]	; (8007348 <malloc+0xc>)
 800733e:	4601      	mov	r1, r0
 8007340:	6818      	ldr	r0, [r3, #0]
 8007342:	f000 b82b 	b.w	800739c <_malloc_r>
 8007346:	bf00      	nop
 8007348:	20000068 	.word	0x20000068

0800734c <free>:
 800734c:	4b02      	ldr	r3, [pc, #8]	; (8007358 <free+0xc>)
 800734e:	4601      	mov	r1, r0
 8007350:	6818      	ldr	r0, [r3, #0]
 8007352:	f000 b927 	b.w	80075a4 <_free_r>
 8007356:	bf00      	nop
 8007358:	20000068 	.word	0x20000068

0800735c <sbrk_aligned>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	4e0e      	ldr	r6, [pc, #56]	; (8007398 <sbrk_aligned+0x3c>)
 8007360:	460c      	mov	r4, r1
 8007362:	6831      	ldr	r1, [r6, #0]
 8007364:	4605      	mov	r5, r0
 8007366:	b911      	cbnz	r1, 800736e <sbrk_aligned+0x12>
 8007368:	f000 f8e0 	bl	800752c <_sbrk_r>
 800736c:	6030      	str	r0, [r6, #0]
 800736e:	4621      	mov	r1, r4
 8007370:	4628      	mov	r0, r5
 8007372:	f000 f8db 	bl	800752c <_sbrk_r>
 8007376:	1c43      	adds	r3, r0, #1
 8007378:	d00a      	beq.n	8007390 <sbrk_aligned+0x34>
 800737a:	1cc4      	adds	r4, r0, #3
 800737c:	f024 0403 	bic.w	r4, r4, #3
 8007380:	42a0      	cmp	r0, r4
 8007382:	d007      	beq.n	8007394 <sbrk_aligned+0x38>
 8007384:	1a21      	subs	r1, r4, r0
 8007386:	4628      	mov	r0, r5
 8007388:	f000 f8d0 	bl	800752c <_sbrk_r>
 800738c:	3001      	adds	r0, #1
 800738e:	d101      	bne.n	8007394 <sbrk_aligned+0x38>
 8007390:	f04f 34ff 	mov.w	r4, #4294967295
 8007394:	4620      	mov	r0, r4
 8007396:	bd70      	pop	{r4, r5, r6, pc}
 8007398:	20000a38 	.word	0x20000a38

0800739c <_malloc_r>:
 800739c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073a0:	1ccd      	adds	r5, r1, #3
 80073a2:	f025 0503 	bic.w	r5, r5, #3
 80073a6:	3508      	adds	r5, #8
 80073a8:	2d0c      	cmp	r5, #12
 80073aa:	bf38      	it	cc
 80073ac:	250c      	movcc	r5, #12
 80073ae:	2d00      	cmp	r5, #0
 80073b0:	4607      	mov	r7, r0
 80073b2:	db01      	blt.n	80073b8 <_malloc_r+0x1c>
 80073b4:	42a9      	cmp	r1, r5
 80073b6:	d905      	bls.n	80073c4 <_malloc_r+0x28>
 80073b8:	230c      	movs	r3, #12
 80073ba:	603b      	str	r3, [r7, #0]
 80073bc:	2600      	movs	r6, #0
 80073be:	4630      	mov	r0, r6
 80073c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007498 <_malloc_r+0xfc>
 80073c8:	f000 f868 	bl	800749c <__malloc_lock>
 80073cc:	f8d8 3000 	ldr.w	r3, [r8]
 80073d0:	461c      	mov	r4, r3
 80073d2:	bb5c      	cbnz	r4, 800742c <_malloc_r+0x90>
 80073d4:	4629      	mov	r1, r5
 80073d6:	4638      	mov	r0, r7
 80073d8:	f7ff ffc0 	bl	800735c <sbrk_aligned>
 80073dc:	1c43      	adds	r3, r0, #1
 80073de:	4604      	mov	r4, r0
 80073e0:	d155      	bne.n	800748e <_malloc_r+0xf2>
 80073e2:	f8d8 4000 	ldr.w	r4, [r8]
 80073e6:	4626      	mov	r6, r4
 80073e8:	2e00      	cmp	r6, #0
 80073ea:	d145      	bne.n	8007478 <_malloc_r+0xdc>
 80073ec:	2c00      	cmp	r4, #0
 80073ee:	d048      	beq.n	8007482 <_malloc_r+0xe6>
 80073f0:	6823      	ldr	r3, [r4, #0]
 80073f2:	4631      	mov	r1, r6
 80073f4:	4638      	mov	r0, r7
 80073f6:	eb04 0903 	add.w	r9, r4, r3
 80073fa:	f000 f897 	bl	800752c <_sbrk_r>
 80073fe:	4581      	cmp	r9, r0
 8007400:	d13f      	bne.n	8007482 <_malloc_r+0xe6>
 8007402:	6821      	ldr	r1, [r4, #0]
 8007404:	1a6d      	subs	r5, r5, r1
 8007406:	4629      	mov	r1, r5
 8007408:	4638      	mov	r0, r7
 800740a:	f7ff ffa7 	bl	800735c <sbrk_aligned>
 800740e:	3001      	adds	r0, #1
 8007410:	d037      	beq.n	8007482 <_malloc_r+0xe6>
 8007412:	6823      	ldr	r3, [r4, #0]
 8007414:	442b      	add	r3, r5
 8007416:	6023      	str	r3, [r4, #0]
 8007418:	f8d8 3000 	ldr.w	r3, [r8]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d038      	beq.n	8007492 <_malloc_r+0xf6>
 8007420:	685a      	ldr	r2, [r3, #4]
 8007422:	42a2      	cmp	r2, r4
 8007424:	d12b      	bne.n	800747e <_malloc_r+0xe2>
 8007426:	2200      	movs	r2, #0
 8007428:	605a      	str	r2, [r3, #4]
 800742a:	e00f      	b.n	800744c <_malloc_r+0xb0>
 800742c:	6822      	ldr	r2, [r4, #0]
 800742e:	1b52      	subs	r2, r2, r5
 8007430:	d41f      	bmi.n	8007472 <_malloc_r+0xd6>
 8007432:	2a0b      	cmp	r2, #11
 8007434:	d917      	bls.n	8007466 <_malloc_r+0xca>
 8007436:	1961      	adds	r1, r4, r5
 8007438:	42a3      	cmp	r3, r4
 800743a:	6025      	str	r5, [r4, #0]
 800743c:	bf18      	it	ne
 800743e:	6059      	strne	r1, [r3, #4]
 8007440:	6863      	ldr	r3, [r4, #4]
 8007442:	bf08      	it	eq
 8007444:	f8c8 1000 	streq.w	r1, [r8]
 8007448:	5162      	str	r2, [r4, r5]
 800744a:	604b      	str	r3, [r1, #4]
 800744c:	4638      	mov	r0, r7
 800744e:	f104 060b 	add.w	r6, r4, #11
 8007452:	f000 f829 	bl	80074a8 <__malloc_unlock>
 8007456:	f026 0607 	bic.w	r6, r6, #7
 800745a:	1d23      	adds	r3, r4, #4
 800745c:	1af2      	subs	r2, r6, r3
 800745e:	d0ae      	beq.n	80073be <_malloc_r+0x22>
 8007460:	1b9b      	subs	r3, r3, r6
 8007462:	50a3      	str	r3, [r4, r2]
 8007464:	e7ab      	b.n	80073be <_malloc_r+0x22>
 8007466:	42a3      	cmp	r3, r4
 8007468:	6862      	ldr	r2, [r4, #4]
 800746a:	d1dd      	bne.n	8007428 <_malloc_r+0x8c>
 800746c:	f8c8 2000 	str.w	r2, [r8]
 8007470:	e7ec      	b.n	800744c <_malloc_r+0xb0>
 8007472:	4623      	mov	r3, r4
 8007474:	6864      	ldr	r4, [r4, #4]
 8007476:	e7ac      	b.n	80073d2 <_malloc_r+0x36>
 8007478:	4634      	mov	r4, r6
 800747a:	6876      	ldr	r6, [r6, #4]
 800747c:	e7b4      	b.n	80073e8 <_malloc_r+0x4c>
 800747e:	4613      	mov	r3, r2
 8007480:	e7cc      	b.n	800741c <_malloc_r+0x80>
 8007482:	230c      	movs	r3, #12
 8007484:	603b      	str	r3, [r7, #0]
 8007486:	4638      	mov	r0, r7
 8007488:	f000 f80e 	bl	80074a8 <__malloc_unlock>
 800748c:	e797      	b.n	80073be <_malloc_r+0x22>
 800748e:	6025      	str	r5, [r4, #0]
 8007490:	e7dc      	b.n	800744c <_malloc_r+0xb0>
 8007492:	605b      	str	r3, [r3, #4]
 8007494:	deff      	udf	#255	; 0xff
 8007496:	bf00      	nop
 8007498:	20000a34 	.word	0x20000a34

0800749c <__malloc_lock>:
 800749c:	4801      	ldr	r0, [pc, #4]	; (80074a4 <__malloc_lock+0x8>)
 800749e:	f000 b87f 	b.w	80075a0 <__retarget_lock_acquire_recursive>
 80074a2:	bf00      	nop
 80074a4:	20000b78 	.word	0x20000b78

080074a8 <__malloc_unlock>:
 80074a8:	4801      	ldr	r0, [pc, #4]	; (80074b0 <__malloc_unlock+0x8>)
 80074aa:	f000 b87a 	b.w	80075a2 <__retarget_lock_release_recursive>
 80074ae:	bf00      	nop
 80074b0:	20000b78 	.word	0x20000b78

080074b4 <sniprintf>:
 80074b4:	b40c      	push	{r2, r3}
 80074b6:	b530      	push	{r4, r5, lr}
 80074b8:	4b17      	ldr	r3, [pc, #92]	; (8007518 <sniprintf+0x64>)
 80074ba:	1e0c      	subs	r4, r1, #0
 80074bc:	681d      	ldr	r5, [r3, #0]
 80074be:	b09d      	sub	sp, #116	; 0x74
 80074c0:	da08      	bge.n	80074d4 <sniprintf+0x20>
 80074c2:	238b      	movs	r3, #139	; 0x8b
 80074c4:	602b      	str	r3, [r5, #0]
 80074c6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ca:	b01d      	add	sp, #116	; 0x74
 80074cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074d0:	b002      	add	sp, #8
 80074d2:	4770      	bx	lr
 80074d4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80074d8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80074dc:	bf14      	ite	ne
 80074de:	f104 33ff 	addne.w	r3, r4, #4294967295
 80074e2:	4623      	moveq	r3, r4
 80074e4:	9304      	str	r3, [sp, #16]
 80074e6:	9307      	str	r3, [sp, #28]
 80074e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80074ec:	9002      	str	r0, [sp, #8]
 80074ee:	9006      	str	r0, [sp, #24]
 80074f0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80074f4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80074f6:	ab21      	add	r3, sp, #132	; 0x84
 80074f8:	a902      	add	r1, sp, #8
 80074fa:	4628      	mov	r0, r5
 80074fc:	9301      	str	r3, [sp, #4]
 80074fe:	f000 f8f7 	bl	80076f0 <_svfiprintf_r>
 8007502:	1c43      	adds	r3, r0, #1
 8007504:	bfbc      	itt	lt
 8007506:	238b      	movlt	r3, #139	; 0x8b
 8007508:	602b      	strlt	r3, [r5, #0]
 800750a:	2c00      	cmp	r4, #0
 800750c:	d0dd      	beq.n	80074ca <sniprintf+0x16>
 800750e:	9b02      	ldr	r3, [sp, #8]
 8007510:	2200      	movs	r2, #0
 8007512:	701a      	strb	r2, [r3, #0]
 8007514:	e7d9      	b.n	80074ca <sniprintf+0x16>
 8007516:	bf00      	nop
 8007518:	20000068 	.word	0x20000068

0800751c <memset>:
 800751c:	4402      	add	r2, r0
 800751e:	4603      	mov	r3, r0
 8007520:	4293      	cmp	r3, r2
 8007522:	d100      	bne.n	8007526 <memset+0xa>
 8007524:	4770      	bx	lr
 8007526:	f803 1b01 	strb.w	r1, [r3], #1
 800752a:	e7f9      	b.n	8007520 <memset+0x4>

0800752c <_sbrk_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	4d06      	ldr	r5, [pc, #24]	; (8007548 <_sbrk_r+0x1c>)
 8007530:	2300      	movs	r3, #0
 8007532:	4604      	mov	r4, r0
 8007534:	4608      	mov	r0, r1
 8007536:	602b      	str	r3, [r5, #0]
 8007538:	f7f9 ff6a 	bl	8001410 <_sbrk>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d102      	bne.n	8007546 <_sbrk_r+0x1a>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	b103      	cbz	r3, 8007546 <_sbrk_r+0x1a>
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	20000b74 	.word	0x20000b74

0800754c <__errno>:
 800754c:	4b01      	ldr	r3, [pc, #4]	; (8007554 <__errno+0x8>)
 800754e:	6818      	ldr	r0, [r3, #0]
 8007550:	4770      	bx	lr
 8007552:	bf00      	nop
 8007554:	20000068 	.word	0x20000068

08007558 <__libc_init_array>:
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	4d0d      	ldr	r5, [pc, #52]	; (8007590 <__libc_init_array+0x38>)
 800755c:	4c0d      	ldr	r4, [pc, #52]	; (8007594 <__libc_init_array+0x3c>)
 800755e:	1b64      	subs	r4, r4, r5
 8007560:	10a4      	asrs	r4, r4, #2
 8007562:	2600      	movs	r6, #0
 8007564:	42a6      	cmp	r6, r4
 8007566:	d109      	bne.n	800757c <__libc_init_array+0x24>
 8007568:	4d0b      	ldr	r5, [pc, #44]	; (8007598 <__libc_init_array+0x40>)
 800756a:	4c0c      	ldr	r4, [pc, #48]	; (800759c <__libc_init_array+0x44>)
 800756c:	f000 fd24 	bl	8007fb8 <_init>
 8007570:	1b64      	subs	r4, r4, r5
 8007572:	10a4      	asrs	r4, r4, #2
 8007574:	2600      	movs	r6, #0
 8007576:	42a6      	cmp	r6, r4
 8007578:	d105      	bne.n	8007586 <__libc_init_array+0x2e>
 800757a:	bd70      	pop	{r4, r5, r6, pc}
 800757c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007580:	4798      	blx	r3
 8007582:	3601      	adds	r6, #1
 8007584:	e7ee      	b.n	8007564 <__libc_init_array+0xc>
 8007586:	f855 3b04 	ldr.w	r3, [r5], #4
 800758a:	4798      	blx	r3
 800758c:	3601      	adds	r6, #1
 800758e:	e7f2      	b.n	8007576 <__libc_init_array+0x1e>
 8007590:	08008094 	.word	0x08008094
 8007594:	08008094 	.word	0x08008094
 8007598:	08008094 	.word	0x08008094
 800759c:	08008098 	.word	0x08008098

080075a0 <__retarget_lock_acquire_recursive>:
 80075a0:	4770      	bx	lr

080075a2 <__retarget_lock_release_recursive>:
 80075a2:	4770      	bx	lr

080075a4 <_free_r>:
 80075a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80075a6:	2900      	cmp	r1, #0
 80075a8:	d044      	beq.n	8007634 <_free_r+0x90>
 80075aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075ae:	9001      	str	r0, [sp, #4]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f1a1 0404 	sub.w	r4, r1, #4
 80075b6:	bfb8      	it	lt
 80075b8:	18e4      	addlt	r4, r4, r3
 80075ba:	f7ff ff6f 	bl	800749c <__malloc_lock>
 80075be:	4a1e      	ldr	r2, [pc, #120]	; (8007638 <_free_r+0x94>)
 80075c0:	9801      	ldr	r0, [sp, #4]
 80075c2:	6813      	ldr	r3, [r2, #0]
 80075c4:	b933      	cbnz	r3, 80075d4 <_free_r+0x30>
 80075c6:	6063      	str	r3, [r4, #4]
 80075c8:	6014      	str	r4, [r2, #0]
 80075ca:	b003      	add	sp, #12
 80075cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075d0:	f7ff bf6a 	b.w	80074a8 <__malloc_unlock>
 80075d4:	42a3      	cmp	r3, r4
 80075d6:	d908      	bls.n	80075ea <_free_r+0x46>
 80075d8:	6825      	ldr	r5, [r4, #0]
 80075da:	1961      	adds	r1, r4, r5
 80075dc:	428b      	cmp	r3, r1
 80075de:	bf01      	itttt	eq
 80075e0:	6819      	ldreq	r1, [r3, #0]
 80075e2:	685b      	ldreq	r3, [r3, #4]
 80075e4:	1949      	addeq	r1, r1, r5
 80075e6:	6021      	streq	r1, [r4, #0]
 80075e8:	e7ed      	b.n	80075c6 <_free_r+0x22>
 80075ea:	461a      	mov	r2, r3
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	b10b      	cbz	r3, 80075f4 <_free_r+0x50>
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	d9fa      	bls.n	80075ea <_free_r+0x46>
 80075f4:	6811      	ldr	r1, [r2, #0]
 80075f6:	1855      	adds	r5, r2, r1
 80075f8:	42a5      	cmp	r5, r4
 80075fa:	d10b      	bne.n	8007614 <_free_r+0x70>
 80075fc:	6824      	ldr	r4, [r4, #0]
 80075fe:	4421      	add	r1, r4
 8007600:	1854      	adds	r4, r2, r1
 8007602:	42a3      	cmp	r3, r4
 8007604:	6011      	str	r1, [r2, #0]
 8007606:	d1e0      	bne.n	80075ca <_free_r+0x26>
 8007608:	681c      	ldr	r4, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	6053      	str	r3, [r2, #4]
 800760e:	440c      	add	r4, r1
 8007610:	6014      	str	r4, [r2, #0]
 8007612:	e7da      	b.n	80075ca <_free_r+0x26>
 8007614:	d902      	bls.n	800761c <_free_r+0x78>
 8007616:	230c      	movs	r3, #12
 8007618:	6003      	str	r3, [r0, #0]
 800761a:	e7d6      	b.n	80075ca <_free_r+0x26>
 800761c:	6825      	ldr	r5, [r4, #0]
 800761e:	1961      	adds	r1, r4, r5
 8007620:	428b      	cmp	r3, r1
 8007622:	bf04      	itt	eq
 8007624:	6819      	ldreq	r1, [r3, #0]
 8007626:	685b      	ldreq	r3, [r3, #4]
 8007628:	6063      	str	r3, [r4, #4]
 800762a:	bf04      	itt	eq
 800762c:	1949      	addeq	r1, r1, r5
 800762e:	6021      	streq	r1, [r4, #0]
 8007630:	6054      	str	r4, [r2, #4]
 8007632:	e7ca      	b.n	80075ca <_free_r+0x26>
 8007634:	b003      	add	sp, #12
 8007636:	bd30      	pop	{r4, r5, pc}
 8007638:	20000a34 	.word	0x20000a34

0800763c <__ssputs_r>:
 800763c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007640:	688e      	ldr	r6, [r1, #8]
 8007642:	461f      	mov	r7, r3
 8007644:	42be      	cmp	r6, r7
 8007646:	680b      	ldr	r3, [r1, #0]
 8007648:	4682      	mov	sl, r0
 800764a:	460c      	mov	r4, r1
 800764c:	4690      	mov	r8, r2
 800764e:	d82c      	bhi.n	80076aa <__ssputs_r+0x6e>
 8007650:	898a      	ldrh	r2, [r1, #12]
 8007652:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007656:	d026      	beq.n	80076a6 <__ssputs_r+0x6a>
 8007658:	6965      	ldr	r5, [r4, #20]
 800765a:	6909      	ldr	r1, [r1, #16]
 800765c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007660:	eba3 0901 	sub.w	r9, r3, r1
 8007664:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007668:	1c7b      	adds	r3, r7, #1
 800766a:	444b      	add	r3, r9
 800766c:	106d      	asrs	r5, r5, #1
 800766e:	429d      	cmp	r5, r3
 8007670:	bf38      	it	cc
 8007672:	461d      	movcc	r5, r3
 8007674:	0553      	lsls	r3, r2, #21
 8007676:	d527      	bpl.n	80076c8 <__ssputs_r+0x8c>
 8007678:	4629      	mov	r1, r5
 800767a:	f7ff fe8f 	bl	800739c <_malloc_r>
 800767e:	4606      	mov	r6, r0
 8007680:	b360      	cbz	r0, 80076dc <__ssputs_r+0xa0>
 8007682:	6921      	ldr	r1, [r4, #16]
 8007684:	464a      	mov	r2, r9
 8007686:	f000 fadb 	bl	8007c40 <memcpy>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007694:	81a3      	strh	r3, [r4, #12]
 8007696:	6126      	str	r6, [r4, #16]
 8007698:	6165      	str	r5, [r4, #20]
 800769a:	444e      	add	r6, r9
 800769c:	eba5 0509 	sub.w	r5, r5, r9
 80076a0:	6026      	str	r6, [r4, #0]
 80076a2:	60a5      	str	r5, [r4, #8]
 80076a4:	463e      	mov	r6, r7
 80076a6:	42be      	cmp	r6, r7
 80076a8:	d900      	bls.n	80076ac <__ssputs_r+0x70>
 80076aa:	463e      	mov	r6, r7
 80076ac:	6820      	ldr	r0, [r4, #0]
 80076ae:	4632      	mov	r2, r6
 80076b0:	4641      	mov	r1, r8
 80076b2:	f000 faab 	bl	8007c0c <memmove>
 80076b6:	68a3      	ldr	r3, [r4, #8]
 80076b8:	1b9b      	subs	r3, r3, r6
 80076ba:	60a3      	str	r3, [r4, #8]
 80076bc:	6823      	ldr	r3, [r4, #0]
 80076be:	4433      	add	r3, r6
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	2000      	movs	r0, #0
 80076c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c8:	462a      	mov	r2, r5
 80076ca:	f000 fac7 	bl	8007c5c <_realloc_r>
 80076ce:	4606      	mov	r6, r0
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d1e0      	bne.n	8007696 <__ssputs_r+0x5a>
 80076d4:	6921      	ldr	r1, [r4, #16]
 80076d6:	4650      	mov	r0, sl
 80076d8:	f7ff ff64 	bl	80075a4 <_free_r>
 80076dc:	230c      	movs	r3, #12
 80076de:	f8ca 3000 	str.w	r3, [sl]
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e8:	81a3      	strh	r3, [r4, #12]
 80076ea:	f04f 30ff 	mov.w	r0, #4294967295
 80076ee:	e7e9      	b.n	80076c4 <__ssputs_r+0x88>

080076f0 <_svfiprintf_r>:
 80076f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f4:	4698      	mov	r8, r3
 80076f6:	898b      	ldrh	r3, [r1, #12]
 80076f8:	061b      	lsls	r3, r3, #24
 80076fa:	b09d      	sub	sp, #116	; 0x74
 80076fc:	4607      	mov	r7, r0
 80076fe:	460d      	mov	r5, r1
 8007700:	4614      	mov	r4, r2
 8007702:	d50e      	bpl.n	8007722 <_svfiprintf_r+0x32>
 8007704:	690b      	ldr	r3, [r1, #16]
 8007706:	b963      	cbnz	r3, 8007722 <_svfiprintf_r+0x32>
 8007708:	2140      	movs	r1, #64	; 0x40
 800770a:	f7ff fe47 	bl	800739c <_malloc_r>
 800770e:	6028      	str	r0, [r5, #0]
 8007710:	6128      	str	r0, [r5, #16]
 8007712:	b920      	cbnz	r0, 800771e <_svfiprintf_r+0x2e>
 8007714:	230c      	movs	r3, #12
 8007716:	603b      	str	r3, [r7, #0]
 8007718:	f04f 30ff 	mov.w	r0, #4294967295
 800771c:	e0d0      	b.n	80078c0 <_svfiprintf_r+0x1d0>
 800771e:	2340      	movs	r3, #64	; 0x40
 8007720:	616b      	str	r3, [r5, #20]
 8007722:	2300      	movs	r3, #0
 8007724:	9309      	str	r3, [sp, #36]	; 0x24
 8007726:	2320      	movs	r3, #32
 8007728:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800772c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007730:	2330      	movs	r3, #48	; 0x30
 8007732:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80078d8 <_svfiprintf_r+0x1e8>
 8007736:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800773a:	f04f 0901 	mov.w	r9, #1
 800773e:	4623      	mov	r3, r4
 8007740:	469a      	mov	sl, r3
 8007742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007746:	b10a      	cbz	r2, 800774c <_svfiprintf_r+0x5c>
 8007748:	2a25      	cmp	r2, #37	; 0x25
 800774a:	d1f9      	bne.n	8007740 <_svfiprintf_r+0x50>
 800774c:	ebba 0b04 	subs.w	fp, sl, r4
 8007750:	d00b      	beq.n	800776a <_svfiprintf_r+0x7a>
 8007752:	465b      	mov	r3, fp
 8007754:	4622      	mov	r2, r4
 8007756:	4629      	mov	r1, r5
 8007758:	4638      	mov	r0, r7
 800775a:	f7ff ff6f 	bl	800763c <__ssputs_r>
 800775e:	3001      	adds	r0, #1
 8007760:	f000 80a9 	beq.w	80078b6 <_svfiprintf_r+0x1c6>
 8007764:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007766:	445a      	add	r2, fp
 8007768:	9209      	str	r2, [sp, #36]	; 0x24
 800776a:	f89a 3000 	ldrb.w	r3, [sl]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 80a1 	beq.w	80078b6 <_svfiprintf_r+0x1c6>
 8007774:	2300      	movs	r3, #0
 8007776:	f04f 32ff 	mov.w	r2, #4294967295
 800777a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800777e:	f10a 0a01 	add.w	sl, sl, #1
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	9307      	str	r3, [sp, #28]
 8007786:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800778a:	931a      	str	r3, [sp, #104]	; 0x68
 800778c:	4654      	mov	r4, sl
 800778e:	2205      	movs	r2, #5
 8007790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007794:	4850      	ldr	r0, [pc, #320]	; (80078d8 <_svfiprintf_r+0x1e8>)
 8007796:	f7f8 fd23 	bl	80001e0 <memchr>
 800779a:	9a04      	ldr	r2, [sp, #16]
 800779c:	b9d8      	cbnz	r0, 80077d6 <_svfiprintf_r+0xe6>
 800779e:	06d0      	lsls	r0, r2, #27
 80077a0:	bf44      	itt	mi
 80077a2:	2320      	movmi	r3, #32
 80077a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077a8:	0711      	lsls	r1, r2, #28
 80077aa:	bf44      	itt	mi
 80077ac:	232b      	movmi	r3, #43	; 0x2b
 80077ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077b2:	f89a 3000 	ldrb.w	r3, [sl]
 80077b6:	2b2a      	cmp	r3, #42	; 0x2a
 80077b8:	d015      	beq.n	80077e6 <_svfiprintf_r+0xf6>
 80077ba:	9a07      	ldr	r2, [sp, #28]
 80077bc:	4654      	mov	r4, sl
 80077be:	2000      	movs	r0, #0
 80077c0:	f04f 0c0a 	mov.w	ip, #10
 80077c4:	4621      	mov	r1, r4
 80077c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ca:	3b30      	subs	r3, #48	; 0x30
 80077cc:	2b09      	cmp	r3, #9
 80077ce:	d94d      	bls.n	800786c <_svfiprintf_r+0x17c>
 80077d0:	b1b0      	cbz	r0, 8007800 <_svfiprintf_r+0x110>
 80077d2:	9207      	str	r2, [sp, #28]
 80077d4:	e014      	b.n	8007800 <_svfiprintf_r+0x110>
 80077d6:	eba0 0308 	sub.w	r3, r0, r8
 80077da:	fa09 f303 	lsl.w	r3, r9, r3
 80077de:	4313      	orrs	r3, r2
 80077e0:	9304      	str	r3, [sp, #16]
 80077e2:	46a2      	mov	sl, r4
 80077e4:	e7d2      	b.n	800778c <_svfiprintf_r+0x9c>
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	1d19      	adds	r1, r3, #4
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	9103      	str	r1, [sp, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bfbb      	ittet	lt
 80077f2:	425b      	neglt	r3, r3
 80077f4:	f042 0202 	orrlt.w	r2, r2, #2
 80077f8:	9307      	strge	r3, [sp, #28]
 80077fa:	9307      	strlt	r3, [sp, #28]
 80077fc:	bfb8      	it	lt
 80077fe:	9204      	strlt	r2, [sp, #16]
 8007800:	7823      	ldrb	r3, [r4, #0]
 8007802:	2b2e      	cmp	r3, #46	; 0x2e
 8007804:	d10c      	bne.n	8007820 <_svfiprintf_r+0x130>
 8007806:	7863      	ldrb	r3, [r4, #1]
 8007808:	2b2a      	cmp	r3, #42	; 0x2a
 800780a:	d134      	bne.n	8007876 <_svfiprintf_r+0x186>
 800780c:	9b03      	ldr	r3, [sp, #12]
 800780e:	1d1a      	adds	r2, r3, #4
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	9203      	str	r2, [sp, #12]
 8007814:	2b00      	cmp	r3, #0
 8007816:	bfb8      	it	lt
 8007818:	f04f 33ff 	movlt.w	r3, #4294967295
 800781c:	3402      	adds	r4, #2
 800781e:	9305      	str	r3, [sp, #20]
 8007820:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80078e8 <_svfiprintf_r+0x1f8>
 8007824:	7821      	ldrb	r1, [r4, #0]
 8007826:	2203      	movs	r2, #3
 8007828:	4650      	mov	r0, sl
 800782a:	f7f8 fcd9 	bl	80001e0 <memchr>
 800782e:	b138      	cbz	r0, 8007840 <_svfiprintf_r+0x150>
 8007830:	9b04      	ldr	r3, [sp, #16]
 8007832:	eba0 000a 	sub.w	r0, r0, sl
 8007836:	2240      	movs	r2, #64	; 0x40
 8007838:	4082      	lsls	r2, r0
 800783a:	4313      	orrs	r3, r2
 800783c:	3401      	adds	r4, #1
 800783e:	9304      	str	r3, [sp, #16]
 8007840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007844:	4825      	ldr	r0, [pc, #148]	; (80078dc <_svfiprintf_r+0x1ec>)
 8007846:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800784a:	2206      	movs	r2, #6
 800784c:	f7f8 fcc8 	bl	80001e0 <memchr>
 8007850:	2800      	cmp	r0, #0
 8007852:	d038      	beq.n	80078c6 <_svfiprintf_r+0x1d6>
 8007854:	4b22      	ldr	r3, [pc, #136]	; (80078e0 <_svfiprintf_r+0x1f0>)
 8007856:	bb1b      	cbnz	r3, 80078a0 <_svfiprintf_r+0x1b0>
 8007858:	9b03      	ldr	r3, [sp, #12]
 800785a:	3307      	adds	r3, #7
 800785c:	f023 0307 	bic.w	r3, r3, #7
 8007860:	3308      	adds	r3, #8
 8007862:	9303      	str	r3, [sp, #12]
 8007864:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007866:	4433      	add	r3, r6
 8007868:	9309      	str	r3, [sp, #36]	; 0x24
 800786a:	e768      	b.n	800773e <_svfiprintf_r+0x4e>
 800786c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007870:	460c      	mov	r4, r1
 8007872:	2001      	movs	r0, #1
 8007874:	e7a6      	b.n	80077c4 <_svfiprintf_r+0xd4>
 8007876:	2300      	movs	r3, #0
 8007878:	3401      	adds	r4, #1
 800787a:	9305      	str	r3, [sp, #20]
 800787c:	4619      	mov	r1, r3
 800787e:	f04f 0c0a 	mov.w	ip, #10
 8007882:	4620      	mov	r0, r4
 8007884:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007888:	3a30      	subs	r2, #48	; 0x30
 800788a:	2a09      	cmp	r2, #9
 800788c:	d903      	bls.n	8007896 <_svfiprintf_r+0x1a6>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d0c6      	beq.n	8007820 <_svfiprintf_r+0x130>
 8007892:	9105      	str	r1, [sp, #20]
 8007894:	e7c4      	b.n	8007820 <_svfiprintf_r+0x130>
 8007896:	fb0c 2101 	mla	r1, ip, r1, r2
 800789a:	4604      	mov	r4, r0
 800789c:	2301      	movs	r3, #1
 800789e:	e7f0      	b.n	8007882 <_svfiprintf_r+0x192>
 80078a0:	ab03      	add	r3, sp, #12
 80078a2:	9300      	str	r3, [sp, #0]
 80078a4:	462a      	mov	r2, r5
 80078a6:	4b0f      	ldr	r3, [pc, #60]	; (80078e4 <_svfiprintf_r+0x1f4>)
 80078a8:	a904      	add	r1, sp, #16
 80078aa:	4638      	mov	r0, r7
 80078ac:	f3af 8000 	nop.w
 80078b0:	1c42      	adds	r2, r0, #1
 80078b2:	4606      	mov	r6, r0
 80078b4:	d1d6      	bne.n	8007864 <_svfiprintf_r+0x174>
 80078b6:	89ab      	ldrh	r3, [r5, #12]
 80078b8:	065b      	lsls	r3, r3, #25
 80078ba:	f53f af2d 	bmi.w	8007718 <_svfiprintf_r+0x28>
 80078be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078c0:	b01d      	add	sp, #116	; 0x74
 80078c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078c6:	ab03      	add	r3, sp, #12
 80078c8:	9300      	str	r3, [sp, #0]
 80078ca:	462a      	mov	r2, r5
 80078cc:	4b05      	ldr	r3, [pc, #20]	; (80078e4 <_svfiprintf_r+0x1f4>)
 80078ce:	a904      	add	r1, sp, #16
 80078d0:	4638      	mov	r0, r7
 80078d2:	f000 f879 	bl	80079c8 <_printf_i>
 80078d6:	e7eb      	b.n	80078b0 <_svfiprintf_r+0x1c0>
 80078d8:	08008040 	.word	0x08008040
 80078dc:	0800804a 	.word	0x0800804a
 80078e0:	00000000 	.word	0x00000000
 80078e4:	0800763d 	.word	0x0800763d
 80078e8:	08008046 	.word	0x08008046

080078ec <_printf_common>:
 80078ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078f0:	4616      	mov	r6, r2
 80078f2:	4699      	mov	r9, r3
 80078f4:	688a      	ldr	r2, [r1, #8]
 80078f6:	690b      	ldr	r3, [r1, #16]
 80078f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078fc:	4293      	cmp	r3, r2
 80078fe:	bfb8      	it	lt
 8007900:	4613      	movlt	r3, r2
 8007902:	6033      	str	r3, [r6, #0]
 8007904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007908:	4607      	mov	r7, r0
 800790a:	460c      	mov	r4, r1
 800790c:	b10a      	cbz	r2, 8007912 <_printf_common+0x26>
 800790e:	3301      	adds	r3, #1
 8007910:	6033      	str	r3, [r6, #0]
 8007912:	6823      	ldr	r3, [r4, #0]
 8007914:	0699      	lsls	r1, r3, #26
 8007916:	bf42      	ittt	mi
 8007918:	6833      	ldrmi	r3, [r6, #0]
 800791a:	3302      	addmi	r3, #2
 800791c:	6033      	strmi	r3, [r6, #0]
 800791e:	6825      	ldr	r5, [r4, #0]
 8007920:	f015 0506 	ands.w	r5, r5, #6
 8007924:	d106      	bne.n	8007934 <_printf_common+0x48>
 8007926:	f104 0a19 	add.w	sl, r4, #25
 800792a:	68e3      	ldr	r3, [r4, #12]
 800792c:	6832      	ldr	r2, [r6, #0]
 800792e:	1a9b      	subs	r3, r3, r2
 8007930:	42ab      	cmp	r3, r5
 8007932:	dc26      	bgt.n	8007982 <_printf_common+0x96>
 8007934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007938:	1e13      	subs	r3, r2, #0
 800793a:	6822      	ldr	r2, [r4, #0]
 800793c:	bf18      	it	ne
 800793e:	2301      	movne	r3, #1
 8007940:	0692      	lsls	r2, r2, #26
 8007942:	d42b      	bmi.n	800799c <_printf_common+0xb0>
 8007944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007948:	4649      	mov	r1, r9
 800794a:	4638      	mov	r0, r7
 800794c:	47c0      	blx	r8
 800794e:	3001      	adds	r0, #1
 8007950:	d01e      	beq.n	8007990 <_printf_common+0xa4>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	6922      	ldr	r2, [r4, #16]
 8007956:	f003 0306 	and.w	r3, r3, #6
 800795a:	2b04      	cmp	r3, #4
 800795c:	bf02      	ittt	eq
 800795e:	68e5      	ldreq	r5, [r4, #12]
 8007960:	6833      	ldreq	r3, [r6, #0]
 8007962:	1aed      	subeq	r5, r5, r3
 8007964:	68a3      	ldr	r3, [r4, #8]
 8007966:	bf0c      	ite	eq
 8007968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800796c:	2500      	movne	r5, #0
 800796e:	4293      	cmp	r3, r2
 8007970:	bfc4      	itt	gt
 8007972:	1a9b      	subgt	r3, r3, r2
 8007974:	18ed      	addgt	r5, r5, r3
 8007976:	2600      	movs	r6, #0
 8007978:	341a      	adds	r4, #26
 800797a:	42b5      	cmp	r5, r6
 800797c:	d11a      	bne.n	80079b4 <_printf_common+0xc8>
 800797e:	2000      	movs	r0, #0
 8007980:	e008      	b.n	8007994 <_printf_common+0xa8>
 8007982:	2301      	movs	r3, #1
 8007984:	4652      	mov	r2, sl
 8007986:	4649      	mov	r1, r9
 8007988:	4638      	mov	r0, r7
 800798a:	47c0      	blx	r8
 800798c:	3001      	adds	r0, #1
 800798e:	d103      	bne.n	8007998 <_printf_common+0xac>
 8007990:	f04f 30ff 	mov.w	r0, #4294967295
 8007994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007998:	3501      	adds	r5, #1
 800799a:	e7c6      	b.n	800792a <_printf_common+0x3e>
 800799c:	18e1      	adds	r1, r4, r3
 800799e:	1c5a      	adds	r2, r3, #1
 80079a0:	2030      	movs	r0, #48	; 0x30
 80079a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079a6:	4422      	add	r2, r4
 80079a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079b0:	3302      	adds	r3, #2
 80079b2:	e7c7      	b.n	8007944 <_printf_common+0x58>
 80079b4:	2301      	movs	r3, #1
 80079b6:	4622      	mov	r2, r4
 80079b8:	4649      	mov	r1, r9
 80079ba:	4638      	mov	r0, r7
 80079bc:	47c0      	blx	r8
 80079be:	3001      	adds	r0, #1
 80079c0:	d0e6      	beq.n	8007990 <_printf_common+0xa4>
 80079c2:	3601      	adds	r6, #1
 80079c4:	e7d9      	b.n	800797a <_printf_common+0x8e>
	...

080079c8 <_printf_i>:
 80079c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079cc:	7e0f      	ldrb	r7, [r1, #24]
 80079ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079d0:	2f78      	cmp	r7, #120	; 0x78
 80079d2:	4691      	mov	r9, r2
 80079d4:	4680      	mov	r8, r0
 80079d6:	460c      	mov	r4, r1
 80079d8:	469a      	mov	sl, r3
 80079da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079de:	d807      	bhi.n	80079f0 <_printf_i+0x28>
 80079e0:	2f62      	cmp	r7, #98	; 0x62
 80079e2:	d80a      	bhi.n	80079fa <_printf_i+0x32>
 80079e4:	2f00      	cmp	r7, #0
 80079e6:	f000 80d4 	beq.w	8007b92 <_printf_i+0x1ca>
 80079ea:	2f58      	cmp	r7, #88	; 0x58
 80079ec:	f000 80c0 	beq.w	8007b70 <_printf_i+0x1a8>
 80079f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079f8:	e03a      	b.n	8007a70 <_printf_i+0xa8>
 80079fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079fe:	2b15      	cmp	r3, #21
 8007a00:	d8f6      	bhi.n	80079f0 <_printf_i+0x28>
 8007a02:	a101      	add	r1, pc, #4	; (adr r1, 8007a08 <_printf_i+0x40>)
 8007a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a08:	08007a61 	.word	0x08007a61
 8007a0c:	08007a75 	.word	0x08007a75
 8007a10:	080079f1 	.word	0x080079f1
 8007a14:	080079f1 	.word	0x080079f1
 8007a18:	080079f1 	.word	0x080079f1
 8007a1c:	080079f1 	.word	0x080079f1
 8007a20:	08007a75 	.word	0x08007a75
 8007a24:	080079f1 	.word	0x080079f1
 8007a28:	080079f1 	.word	0x080079f1
 8007a2c:	080079f1 	.word	0x080079f1
 8007a30:	080079f1 	.word	0x080079f1
 8007a34:	08007b79 	.word	0x08007b79
 8007a38:	08007aa1 	.word	0x08007aa1
 8007a3c:	08007b33 	.word	0x08007b33
 8007a40:	080079f1 	.word	0x080079f1
 8007a44:	080079f1 	.word	0x080079f1
 8007a48:	08007b9b 	.word	0x08007b9b
 8007a4c:	080079f1 	.word	0x080079f1
 8007a50:	08007aa1 	.word	0x08007aa1
 8007a54:	080079f1 	.word	0x080079f1
 8007a58:	080079f1 	.word	0x080079f1
 8007a5c:	08007b3b 	.word	0x08007b3b
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	1d1a      	adds	r2, r3, #4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	602a      	str	r2, [r5, #0]
 8007a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a70:	2301      	movs	r3, #1
 8007a72:	e09f      	b.n	8007bb4 <_printf_i+0x1ec>
 8007a74:	6820      	ldr	r0, [r4, #0]
 8007a76:	682b      	ldr	r3, [r5, #0]
 8007a78:	0607      	lsls	r7, r0, #24
 8007a7a:	f103 0104 	add.w	r1, r3, #4
 8007a7e:	6029      	str	r1, [r5, #0]
 8007a80:	d501      	bpl.n	8007a86 <_printf_i+0xbe>
 8007a82:	681e      	ldr	r6, [r3, #0]
 8007a84:	e003      	b.n	8007a8e <_printf_i+0xc6>
 8007a86:	0646      	lsls	r6, r0, #25
 8007a88:	d5fb      	bpl.n	8007a82 <_printf_i+0xba>
 8007a8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007a8e:	2e00      	cmp	r6, #0
 8007a90:	da03      	bge.n	8007a9a <_printf_i+0xd2>
 8007a92:	232d      	movs	r3, #45	; 0x2d
 8007a94:	4276      	negs	r6, r6
 8007a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a9a:	485a      	ldr	r0, [pc, #360]	; (8007c04 <_printf_i+0x23c>)
 8007a9c:	230a      	movs	r3, #10
 8007a9e:	e012      	b.n	8007ac6 <_printf_i+0xfe>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	6820      	ldr	r0, [r4, #0]
 8007aa4:	1d19      	adds	r1, r3, #4
 8007aa6:	6029      	str	r1, [r5, #0]
 8007aa8:	0605      	lsls	r5, r0, #24
 8007aaa:	d501      	bpl.n	8007ab0 <_printf_i+0xe8>
 8007aac:	681e      	ldr	r6, [r3, #0]
 8007aae:	e002      	b.n	8007ab6 <_printf_i+0xee>
 8007ab0:	0641      	lsls	r1, r0, #25
 8007ab2:	d5fb      	bpl.n	8007aac <_printf_i+0xe4>
 8007ab4:	881e      	ldrh	r6, [r3, #0]
 8007ab6:	4853      	ldr	r0, [pc, #332]	; (8007c04 <_printf_i+0x23c>)
 8007ab8:	2f6f      	cmp	r7, #111	; 0x6f
 8007aba:	bf0c      	ite	eq
 8007abc:	2308      	moveq	r3, #8
 8007abe:	230a      	movne	r3, #10
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ac6:	6865      	ldr	r5, [r4, #4]
 8007ac8:	60a5      	str	r5, [r4, #8]
 8007aca:	2d00      	cmp	r5, #0
 8007acc:	bfa2      	ittt	ge
 8007ace:	6821      	ldrge	r1, [r4, #0]
 8007ad0:	f021 0104 	bicge.w	r1, r1, #4
 8007ad4:	6021      	strge	r1, [r4, #0]
 8007ad6:	b90e      	cbnz	r6, 8007adc <_printf_i+0x114>
 8007ad8:	2d00      	cmp	r5, #0
 8007ada:	d04b      	beq.n	8007b74 <_printf_i+0x1ac>
 8007adc:	4615      	mov	r5, r2
 8007ade:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ae2:	fb03 6711 	mls	r7, r3, r1, r6
 8007ae6:	5dc7      	ldrb	r7, [r0, r7]
 8007ae8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007aec:	4637      	mov	r7, r6
 8007aee:	42bb      	cmp	r3, r7
 8007af0:	460e      	mov	r6, r1
 8007af2:	d9f4      	bls.n	8007ade <_printf_i+0x116>
 8007af4:	2b08      	cmp	r3, #8
 8007af6:	d10b      	bne.n	8007b10 <_printf_i+0x148>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	07de      	lsls	r6, r3, #31
 8007afc:	d508      	bpl.n	8007b10 <_printf_i+0x148>
 8007afe:	6923      	ldr	r3, [r4, #16]
 8007b00:	6861      	ldr	r1, [r4, #4]
 8007b02:	4299      	cmp	r1, r3
 8007b04:	bfde      	ittt	le
 8007b06:	2330      	movle	r3, #48	; 0x30
 8007b08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b10:	1b52      	subs	r2, r2, r5
 8007b12:	6122      	str	r2, [r4, #16]
 8007b14:	f8cd a000 	str.w	sl, [sp]
 8007b18:	464b      	mov	r3, r9
 8007b1a:	aa03      	add	r2, sp, #12
 8007b1c:	4621      	mov	r1, r4
 8007b1e:	4640      	mov	r0, r8
 8007b20:	f7ff fee4 	bl	80078ec <_printf_common>
 8007b24:	3001      	adds	r0, #1
 8007b26:	d14a      	bne.n	8007bbe <_printf_i+0x1f6>
 8007b28:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2c:	b004      	add	sp, #16
 8007b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b32:	6823      	ldr	r3, [r4, #0]
 8007b34:	f043 0320 	orr.w	r3, r3, #32
 8007b38:	6023      	str	r3, [r4, #0]
 8007b3a:	4833      	ldr	r0, [pc, #204]	; (8007c08 <_printf_i+0x240>)
 8007b3c:	2778      	movs	r7, #120	; 0x78
 8007b3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b42:	6823      	ldr	r3, [r4, #0]
 8007b44:	6829      	ldr	r1, [r5, #0]
 8007b46:	061f      	lsls	r7, r3, #24
 8007b48:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b4c:	d402      	bmi.n	8007b54 <_printf_i+0x18c>
 8007b4e:	065f      	lsls	r7, r3, #25
 8007b50:	bf48      	it	mi
 8007b52:	b2b6      	uxthmi	r6, r6
 8007b54:	07df      	lsls	r7, r3, #31
 8007b56:	bf48      	it	mi
 8007b58:	f043 0320 	orrmi.w	r3, r3, #32
 8007b5c:	6029      	str	r1, [r5, #0]
 8007b5e:	bf48      	it	mi
 8007b60:	6023      	strmi	r3, [r4, #0]
 8007b62:	b91e      	cbnz	r6, 8007b6c <_printf_i+0x1a4>
 8007b64:	6823      	ldr	r3, [r4, #0]
 8007b66:	f023 0320 	bic.w	r3, r3, #32
 8007b6a:	6023      	str	r3, [r4, #0]
 8007b6c:	2310      	movs	r3, #16
 8007b6e:	e7a7      	b.n	8007ac0 <_printf_i+0xf8>
 8007b70:	4824      	ldr	r0, [pc, #144]	; (8007c04 <_printf_i+0x23c>)
 8007b72:	e7e4      	b.n	8007b3e <_printf_i+0x176>
 8007b74:	4615      	mov	r5, r2
 8007b76:	e7bd      	b.n	8007af4 <_printf_i+0x12c>
 8007b78:	682b      	ldr	r3, [r5, #0]
 8007b7a:	6826      	ldr	r6, [r4, #0]
 8007b7c:	6961      	ldr	r1, [r4, #20]
 8007b7e:	1d18      	adds	r0, r3, #4
 8007b80:	6028      	str	r0, [r5, #0]
 8007b82:	0635      	lsls	r5, r6, #24
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	d501      	bpl.n	8007b8c <_printf_i+0x1c4>
 8007b88:	6019      	str	r1, [r3, #0]
 8007b8a:	e002      	b.n	8007b92 <_printf_i+0x1ca>
 8007b8c:	0670      	lsls	r0, r6, #25
 8007b8e:	d5fb      	bpl.n	8007b88 <_printf_i+0x1c0>
 8007b90:	8019      	strh	r1, [r3, #0]
 8007b92:	2300      	movs	r3, #0
 8007b94:	6123      	str	r3, [r4, #16]
 8007b96:	4615      	mov	r5, r2
 8007b98:	e7bc      	b.n	8007b14 <_printf_i+0x14c>
 8007b9a:	682b      	ldr	r3, [r5, #0]
 8007b9c:	1d1a      	adds	r2, r3, #4
 8007b9e:	602a      	str	r2, [r5, #0]
 8007ba0:	681d      	ldr	r5, [r3, #0]
 8007ba2:	6862      	ldr	r2, [r4, #4]
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	f7f8 fb1a 	bl	80001e0 <memchr>
 8007bac:	b108      	cbz	r0, 8007bb2 <_printf_i+0x1ea>
 8007bae:	1b40      	subs	r0, r0, r5
 8007bb0:	6060      	str	r0, [r4, #4]
 8007bb2:	6863      	ldr	r3, [r4, #4]
 8007bb4:	6123      	str	r3, [r4, #16]
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bbc:	e7aa      	b.n	8007b14 <_printf_i+0x14c>
 8007bbe:	6923      	ldr	r3, [r4, #16]
 8007bc0:	462a      	mov	r2, r5
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	4640      	mov	r0, r8
 8007bc6:	47d0      	blx	sl
 8007bc8:	3001      	adds	r0, #1
 8007bca:	d0ad      	beq.n	8007b28 <_printf_i+0x160>
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	079b      	lsls	r3, r3, #30
 8007bd0:	d413      	bmi.n	8007bfa <_printf_i+0x232>
 8007bd2:	68e0      	ldr	r0, [r4, #12]
 8007bd4:	9b03      	ldr	r3, [sp, #12]
 8007bd6:	4298      	cmp	r0, r3
 8007bd8:	bfb8      	it	lt
 8007bda:	4618      	movlt	r0, r3
 8007bdc:	e7a6      	b.n	8007b2c <_printf_i+0x164>
 8007bde:	2301      	movs	r3, #1
 8007be0:	4632      	mov	r2, r6
 8007be2:	4649      	mov	r1, r9
 8007be4:	4640      	mov	r0, r8
 8007be6:	47d0      	blx	sl
 8007be8:	3001      	adds	r0, #1
 8007bea:	d09d      	beq.n	8007b28 <_printf_i+0x160>
 8007bec:	3501      	adds	r5, #1
 8007bee:	68e3      	ldr	r3, [r4, #12]
 8007bf0:	9903      	ldr	r1, [sp, #12]
 8007bf2:	1a5b      	subs	r3, r3, r1
 8007bf4:	42ab      	cmp	r3, r5
 8007bf6:	dcf2      	bgt.n	8007bde <_printf_i+0x216>
 8007bf8:	e7eb      	b.n	8007bd2 <_printf_i+0x20a>
 8007bfa:	2500      	movs	r5, #0
 8007bfc:	f104 0619 	add.w	r6, r4, #25
 8007c00:	e7f5      	b.n	8007bee <_printf_i+0x226>
 8007c02:	bf00      	nop
 8007c04:	08008051 	.word	0x08008051
 8007c08:	08008062 	.word	0x08008062

08007c0c <memmove>:
 8007c0c:	4288      	cmp	r0, r1
 8007c0e:	b510      	push	{r4, lr}
 8007c10:	eb01 0402 	add.w	r4, r1, r2
 8007c14:	d902      	bls.n	8007c1c <memmove+0x10>
 8007c16:	4284      	cmp	r4, r0
 8007c18:	4623      	mov	r3, r4
 8007c1a:	d807      	bhi.n	8007c2c <memmove+0x20>
 8007c1c:	1e43      	subs	r3, r0, #1
 8007c1e:	42a1      	cmp	r1, r4
 8007c20:	d008      	beq.n	8007c34 <memmove+0x28>
 8007c22:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c26:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c2a:	e7f8      	b.n	8007c1e <memmove+0x12>
 8007c2c:	4402      	add	r2, r0
 8007c2e:	4601      	mov	r1, r0
 8007c30:	428a      	cmp	r2, r1
 8007c32:	d100      	bne.n	8007c36 <memmove+0x2a>
 8007c34:	bd10      	pop	{r4, pc}
 8007c36:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c3a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c3e:	e7f7      	b.n	8007c30 <memmove+0x24>

08007c40 <memcpy>:
 8007c40:	440a      	add	r2, r1
 8007c42:	4291      	cmp	r1, r2
 8007c44:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c48:	d100      	bne.n	8007c4c <memcpy+0xc>
 8007c4a:	4770      	bx	lr
 8007c4c:	b510      	push	{r4, lr}
 8007c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c56:	4291      	cmp	r1, r2
 8007c58:	d1f9      	bne.n	8007c4e <memcpy+0xe>
 8007c5a:	bd10      	pop	{r4, pc}

08007c5c <_realloc_r>:
 8007c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c60:	4680      	mov	r8, r0
 8007c62:	4614      	mov	r4, r2
 8007c64:	460e      	mov	r6, r1
 8007c66:	b921      	cbnz	r1, 8007c72 <_realloc_r+0x16>
 8007c68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c6c:	4611      	mov	r1, r2
 8007c6e:	f7ff bb95 	b.w	800739c <_malloc_r>
 8007c72:	b92a      	cbnz	r2, 8007c80 <_realloc_r+0x24>
 8007c74:	f7ff fc96 	bl	80075a4 <_free_r>
 8007c78:	4625      	mov	r5, r4
 8007c7a:	4628      	mov	r0, r5
 8007c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c80:	f000 f81b 	bl	8007cba <_malloc_usable_size_r>
 8007c84:	4284      	cmp	r4, r0
 8007c86:	4607      	mov	r7, r0
 8007c88:	d802      	bhi.n	8007c90 <_realloc_r+0x34>
 8007c8a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c8e:	d812      	bhi.n	8007cb6 <_realloc_r+0x5a>
 8007c90:	4621      	mov	r1, r4
 8007c92:	4640      	mov	r0, r8
 8007c94:	f7ff fb82 	bl	800739c <_malloc_r>
 8007c98:	4605      	mov	r5, r0
 8007c9a:	2800      	cmp	r0, #0
 8007c9c:	d0ed      	beq.n	8007c7a <_realloc_r+0x1e>
 8007c9e:	42bc      	cmp	r4, r7
 8007ca0:	4622      	mov	r2, r4
 8007ca2:	4631      	mov	r1, r6
 8007ca4:	bf28      	it	cs
 8007ca6:	463a      	movcs	r2, r7
 8007ca8:	f7ff ffca 	bl	8007c40 <memcpy>
 8007cac:	4631      	mov	r1, r6
 8007cae:	4640      	mov	r0, r8
 8007cb0:	f7ff fc78 	bl	80075a4 <_free_r>
 8007cb4:	e7e1      	b.n	8007c7a <_realloc_r+0x1e>
 8007cb6:	4635      	mov	r5, r6
 8007cb8:	e7df      	b.n	8007c7a <_realloc_r+0x1e>

08007cba <_malloc_usable_size_r>:
 8007cba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cbe:	1f18      	subs	r0, r3, #4
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	bfbc      	itt	lt
 8007cc4:	580b      	ldrlt	r3, [r1, r0]
 8007cc6:	18c0      	addlt	r0, r0, r3
 8007cc8:	4770      	bx	lr
	...

08007ccc <expf>:
 8007ccc:	b508      	push	{r3, lr}
 8007cce:	ed2d 8b02 	vpush	{d8}
 8007cd2:	eef0 8a40 	vmov.f32	s17, s0
 8007cd6:	f000 f87f 	bl	8007dd8 <__ieee754_expf>
 8007cda:	eeb0 8a40 	vmov.f32	s16, s0
 8007cde:	eeb0 0a68 	vmov.f32	s0, s17
 8007ce2:	f000 f829 	bl	8007d38 <finitef>
 8007ce6:	b160      	cbz	r0, 8007d02 <expf+0x36>
 8007ce8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8007d28 <expf+0x5c>
 8007cec:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cf4:	dd0a      	ble.n	8007d0c <expf+0x40>
 8007cf6:	f7ff fc29 	bl	800754c <__errno>
 8007cfa:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8007d2c <expf+0x60>
 8007cfe:	2322      	movs	r3, #34	; 0x22
 8007d00:	6003      	str	r3, [r0, #0]
 8007d02:	eeb0 0a48 	vmov.f32	s0, s16
 8007d06:	ecbd 8b02 	vpop	{d8}
 8007d0a:	bd08      	pop	{r3, pc}
 8007d0c:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007d30 <expf+0x64>
 8007d10:	eef4 8ae7 	vcmpe.f32	s17, s15
 8007d14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d18:	d5f3      	bpl.n	8007d02 <expf+0x36>
 8007d1a:	f7ff fc17 	bl	800754c <__errno>
 8007d1e:	2322      	movs	r3, #34	; 0x22
 8007d20:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8007d34 <expf+0x68>
 8007d24:	6003      	str	r3, [r0, #0]
 8007d26:	e7ec      	b.n	8007d02 <expf+0x36>
 8007d28:	42b17217 	.word	0x42b17217
 8007d2c:	7f800000 	.word	0x7f800000
 8007d30:	c2cff1b5 	.word	0xc2cff1b5
 8007d34:	00000000 	.word	0x00000000

08007d38 <finitef>:
 8007d38:	b082      	sub	sp, #8
 8007d3a:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007d3e:	9801      	ldr	r0, [sp, #4]
 8007d40:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007d44:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007d48:	bfac      	ite	ge
 8007d4a:	2000      	movge	r0, #0
 8007d4c:	2001      	movlt	r0, #1
 8007d4e:	b002      	add	sp, #8
 8007d50:	4770      	bx	lr
	...

08007d54 <ceilf>:
 8007d54:	ee10 3a10 	vmov	r3, s0
 8007d58:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007d5c:	3a7f      	subs	r2, #127	; 0x7f
 8007d5e:	2a16      	cmp	r2, #22
 8007d60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007d64:	dc2a      	bgt.n	8007dbc <ceilf+0x68>
 8007d66:	2a00      	cmp	r2, #0
 8007d68:	da11      	bge.n	8007d8e <ceilf+0x3a>
 8007d6a:	eddf 7a19 	vldr	s15, [pc, #100]	; 8007dd0 <ceilf+0x7c>
 8007d6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007d72:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7a:	dd05      	ble.n	8007d88 <ceilf+0x34>
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	db23      	blt.n	8007dc8 <ceilf+0x74>
 8007d80:	2900      	cmp	r1, #0
 8007d82:	bf18      	it	ne
 8007d84:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8007d88:	ee00 3a10 	vmov	s0, r3
 8007d8c:	4770      	bx	lr
 8007d8e:	4911      	ldr	r1, [pc, #68]	; (8007dd4 <ceilf+0x80>)
 8007d90:	4111      	asrs	r1, r2
 8007d92:	420b      	tst	r3, r1
 8007d94:	d0fa      	beq.n	8007d8c <ceilf+0x38>
 8007d96:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8007dd0 <ceilf+0x7c>
 8007d9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007d9e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8007da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007da6:	ddef      	ble.n	8007d88 <ceilf+0x34>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	bfc2      	ittt	gt
 8007dac:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8007db0:	fa40 f202 	asrgt.w	r2, r0, r2
 8007db4:	189b      	addgt	r3, r3, r2
 8007db6:	ea23 0301 	bic.w	r3, r3, r1
 8007dba:	e7e5      	b.n	8007d88 <ceilf+0x34>
 8007dbc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007dc0:	d3e4      	bcc.n	8007d8c <ceilf+0x38>
 8007dc2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007dc6:	4770      	bx	lr
 8007dc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007dcc:	e7dc      	b.n	8007d88 <ceilf+0x34>
 8007dce:	bf00      	nop
 8007dd0:	7149f2ca 	.word	0x7149f2ca
 8007dd4:	007fffff 	.word	0x007fffff

08007dd8 <__ieee754_expf>:
 8007dd8:	ee10 2a10 	vmov	r2, s0
 8007ddc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8007de0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007de4:	d902      	bls.n	8007dec <__ieee754_expf+0x14>
 8007de6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007dea:	4770      	bx	lr
 8007dec:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8007df0:	d106      	bne.n	8007e00 <__ieee754_expf+0x28>
 8007df2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8007f2c <__ieee754_expf+0x154>
 8007df6:	2900      	cmp	r1, #0
 8007df8:	bf18      	it	ne
 8007dfa:	eeb0 0a67 	vmovne.f32	s0, s15
 8007dfe:	4770      	bx	lr
 8007e00:	484b      	ldr	r0, [pc, #300]	; (8007f30 <__ieee754_expf+0x158>)
 8007e02:	4282      	cmp	r2, r0
 8007e04:	dd02      	ble.n	8007e0c <__ieee754_expf+0x34>
 8007e06:	2000      	movs	r0, #0
 8007e08:	f000 b8d0 	b.w	8007fac <__math_oflowf>
 8007e0c:	2a00      	cmp	r2, #0
 8007e0e:	da05      	bge.n	8007e1c <__ieee754_expf+0x44>
 8007e10:	4a48      	ldr	r2, [pc, #288]	; (8007f34 <__ieee754_expf+0x15c>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d902      	bls.n	8007e1c <__ieee754_expf+0x44>
 8007e16:	2000      	movs	r0, #0
 8007e18:	f000 b8c2 	b.w	8007fa0 <__math_uflowf>
 8007e1c:	4a46      	ldr	r2, [pc, #280]	; (8007f38 <__ieee754_expf+0x160>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007e24:	d952      	bls.n	8007ecc <__ieee754_expf+0xf4>
 8007e26:	4a45      	ldr	r2, [pc, #276]	; (8007f3c <__ieee754_expf+0x164>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8007e2e:	d834      	bhi.n	8007e9a <__ieee754_expf+0xc2>
 8007e30:	4b43      	ldr	r3, [pc, #268]	; (8007f40 <__ieee754_expf+0x168>)
 8007e32:	4413      	add	r3, r2
 8007e34:	ed93 7a00 	vldr	s14, [r3]
 8007e38:	4b42      	ldr	r3, [pc, #264]	; (8007f44 <__ieee754_expf+0x16c>)
 8007e3a:	4413      	add	r3, r2
 8007e3c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8007e40:	f1c1 0201 	rsb	r2, r1, #1
 8007e44:	edd3 7a00 	vldr	s15, [r3]
 8007e48:	1a52      	subs	r2, r2, r1
 8007e4a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8007e4e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8007e52:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8007f48 <__ieee754_expf+0x170>
 8007e56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007f4c <__ieee754_expf+0x174>
 8007e5a:	eee6 6a05 	vfma.f32	s13, s12, s10
 8007e5e:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8007f50 <__ieee754_expf+0x178>
 8007e62:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007e66:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8007f54 <__ieee754_expf+0x17c>
 8007e6a:	eee5 6a06 	vfma.f32	s13, s10, s12
 8007e6e:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8007f58 <__ieee754_expf+0x180>
 8007e72:	eea6 5a86 	vfma.f32	s10, s13, s12
 8007e76:	eef0 6a40 	vmov.f32	s13, s0
 8007e7a:	eee5 6a46 	vfms.f32	s13, s10, s12
 8007e7e:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8007e82:	ee20 5a26 	vmul.f32	s10, s0, s13
 8007e86:	bb92      	cbnz	r2, 8007eee <__ieee754_expf+0x116>
 8007e88:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8007e8c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8007e90:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8007e94:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8007e98:	4770      	bx	lr
 8007e9a:	4b30      	ldr	r3, [pc, #192]	; (8007f5c <__ieee754_expf+0x184>)
 8007e9c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007f60 <__ieee754_expf+0x188>
 8007ea0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8007f64 <__ieee754_expf+0x18c>
 8007ea4:	4413      	add	r3, r2
 8007ea6:	edd3 7a00 	vldr	s15, [r3]
 8007eaa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007eae:	eeb0 7a40 	vmov.f32	s14, s0
 8007eb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007eb6:	ee17 2a90 	vmov	r2, s15
 8007eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007ebe:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8007ec2:	eddf 6a29 	vldr	s13, [pc, #164]	; 8007f68 <__ieee754_expf+0x190>
 8007ec6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007eca:	e7be      	b.n	8007e4a <__ieee754_expf+0x72>
 8007ecc:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8007ed0:	d20b      	bcs.n	8007eea <__ieee754_expf+0x112>
 8007ed2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007f6c <__ieee754_expf+0x194>
 8007ed6:	ee70 6a26 	vadd.f32	s13, s0, s13
 8007eda:	eef4 6ae5 	vcmpe.f32	s13, s11
 8007ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ee2:	dd02      	ble.n	8007eea <__ieee754_expf+0x112>
 8007ee4:	ee30 0a25 	vadd.f32	s0, s0, s11
 8007ee8:	4770      	bx	lr
 8007eea:	2200      	movs	r2, #0
 8007eec:	e7af      	b.n	8007e4e <__ieee754_expf+0x76>
 8007eee:	ee36 6a66 	vsub.f32	s12, s12, s13
 8007ef2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8007ef6:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8007efa:	bfb8      	it	lt
 8007efc:	3264      	addlt	r2, #100	; 0x64
 8007efe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007f02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f06:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8007f0a:	ee17 3a90 	vmov	r3, s15
 8007f0e:	bfab      	itete	ge
 8007f10:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8007f14:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8007f18:	ee00 3a10 	vmovge	s0, r3
 8007f1c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8007f70 <__ieee754_expf+0x198>
 8007f20:	bfbc      	itt	lt
 8007f22:	ee00 3a10 	vmovlt	s0, r3
 8007f26:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8007f2a:	4770      	bx	lr
 8007f2c:	00000000 	.word	0x00000000
 8007f30:	42b17217 	.word	0x42b17217
 8007f34:	42cff1b5 	.word	0x42cff1b5
 8007f38:	3eb17218 	.word	0x3eb17218
 8007f3c:	3f851591 	.word	0x3f851591
 8007f40:	0800807c 	.word	0x0800807c
 8007f44:	08008084 	.word	0x08008084
 8007f48:	3331bb4c 	.word	0x3331bb4c
 8007f4c:	b5ddea0e 	.word	0xb5ddea0e
 8007f50:	388ab355 	.word	0x388ab355
 8007f54:	bb360b61 	.word	0xbb360b61
 8007f58:	3e2aaaab 	.word	0x3e2aaaab
 8007f5c:	08008074 	.word	0x08008074
 8007f60:	3fb8aa3b 	.word	0x3fb8aa3b
 8007f64:	3f317180 	.word	0x3f317180
 8007f68:	3717f7d1 	.word	0x3717f7d1
 8007f6c:	7149f2ca 	.word	0x7149f2ca
 8007f70:	0d800000 	.word	0x0d800000

08007f74 <with_errnof>:
 8007f74:	b513      	push	{r0, r1, r4, lr}
 8007f76:	4604      	mov	r4, r0
 8007f78:	ed8d 0a01 	vstr	s0, [sp, #4]
 8007f7c:	f7ff fae6 	bl	800754c <__errno>
 8007f80:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007f84:	6004      	str	r4, [r0, #0]
 8007f86:	b002      	add	sp, #8
 8007f88:	bd10      	pop	{r4, pc}

08007f8a <xflowf>:
 8007f8a:	b130      	cbz	r0, 8007f9a <xflowf+0x10>
 8007f8c:	eef1 7a40 	vneg.f32	s15, s0
 8007f90:	ee27 0a80 	vmul.f32	s0, s15, s0
 8007f94:	2022      	movs	r0, #34	; 0x22
 8007f96:	f7ff bfed 	b.w	8007f74 <with_errnof>
 8007f9a:	eef0 7a40 	vmov.f32	s15, s0
 8007f9e:	e7f7      	b.n	8007f90 <xflowf+0x6>

08007fa0 <__math_uflowf>:
 8007fa0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007fa8 <__math_uflowf+0x8>
 8007fa4:	f7ff bff1 	b.w	8007f8a <xflowf>
 8007fa8:	10000000 	.word	0x10000000

08007fac <__math_oflowf>:
 8007fac:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007fb4 <__math_oflowf+0x8>
 8007fb0:	f7ff bfeb 	b.w	8007f8a <xflowf>
 8007fb4:	70000000 	.word	0x70000000

08007fb8 <_init>:
 8007fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fba:	bf00      	nop
 8007fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fbe:	bc08      	pop	{r3}
 8007fc0:	469e      	mov	lr, r3
 8007fc2:	4770      	bx	lr

08007fc4 <_fini>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	bf00      	nop
 8007fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fca:	bc08      	pop	{r3}
 8007fcc:	469e      	mov	lr, r3
 8007fce:	4770      	bx	lr
